import {
  BasePlugin,
  events_exports
} from "./chunk-ORUT2F3D.js";
import {
  __commonJS,
  __toESM
} from "./chunk-A4QZX3JM.js";

// node_modules/.pnpm/hls.js@1.5.18/node_modules/hls.js/dist/hls.light.js
var require_hls_light = __commonJS({
  "node_modules/.pnpm/hls.js@1.5.18/node_modules/hls.js/dist/hls.light.js"(exports, module) {
    (function __HLS_WORKER_BUNDLE__(__IN_WORKER__) {
      (function(global, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.Hls = factory());
      })(this, function() {
        "use strict";
        function ownKeys(e, r) {
          var t = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var o = Object.getOwnPropertySymbols(e);
            r && (o = o.filter(function(r2) {
              return Object.getOwnPropertyDescriptor(e, r2).enumerable;
            })), t.push.apply(t, o);
          }
          return t;
        }
        function _objectSpread2(e) {
          for (var r = 1; r < arguments.length; r++) {
            var t = null != arguments[r] ? arguments[r] : {};
            r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
              _defineProperty(e, r2, t[r2]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
              Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
            });
          }
          return e;
        }
        function _toPrimitive2(t, r) {
          if ("object" != typeof t || !t) return t;
          var e = t[Symbol.toPrimitive];
          if (void 0 !== e) {
            var i = e.call(t, r || "default");
            if ("object" != typeof i) return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === r ? String : Number)(t);
        }
        function _toPropertyKey2(t) {
          var i = _toPrimitive2(t, "string");
          return "symbol" == typeof i ? i : String(i);
        }
        function _defineProperties2(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, _toPropertyKey2(descriptor.key), descriptor);
          }
        }
        function _createClass2(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties2(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false
          });
          return Constructor;
        }
        function _defineProperty(obj, key, value) {
          key = _toPropertyKey2(key);
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _extends() {
          _extends = Object.assign ? Object.assign.bind() : function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends.apply(this, arguments);
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          _setPrototypeOf2(subClass, superClass);
        }
        function _getPrototypeOf2(o) {
          _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
            return o2.__proto__ || Object.getPrototypeOf(o2);
          };
          return _getPrototypeOf2(o);
        }
        function _setPrototypeOf2(o, p) {
          _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
            o2.__proto__ = p2;
            return o2;
          };
          return _setPrototypeOf2(o, p);
        }
        function _isNativeReflectConstruct2() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
            return true;
          } catch (e) {
            return false;
          }
        }
        function _construct(Parent, args, Class) {
          if (_isNativeReflectConstruct2()) {
            _construct = Reflect.construct.bind();
          } else {
            _construct = function _construct2(Parent2, args2, Class2) {
              var a = [null];
              a.push.apply(a, args2);
              var Constructor = Function.bind.apply(Parent2, a);
              var instance = new Constructor();
              if (Class2) _setPrototypeOf2(instance, Class2.prototype);
              return instance;
            };
          }
          return _construct.apply(null, arguments);
        }
        function _isNativeFunction(fn) {
          try {
            return Function.toString.call(fn).indexOf("[native code]") !== -1;
          } catch (e) {
            return typeof fn === "function";
          }
        }
        function _wrapNativeSuper(Class) {
          var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
          _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
            if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
            if (typeof Class2 !== "function") {
              throw new TypeError("Super expression must either be null or a function");
            }
            if (typeof _cache !== "undefined") {
              if (_cache.has(Class2)) return _cache.get(Class2);
              _cache.set(Class2, Wrapper);
            }
            function Wrapper() {
              return _construct(Class2, arguments, _getPrototypeOf2(this).constructor);
            }
            Wrapper.prototype = Object.create(Class2.prototype, {
              constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            return _setPrototypeOf2(Wrapper, Class2);
          };
          return _wrapNativeSuper(Class);
        }
        function _assertThisInitialized2(self2) {
          if (self2 === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self2;
        }
        function getDefaultExportFromCjs(x) {
          return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
        }
        var urlToolkit = { exports: {} };
        (function(module2, exports2) {
          (function(root) {
            var URL_REGEX = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/;
            var FIRST_SEGMENT_REGEX = /^(?=([^\/?#]*))\1([^]*)$/;
            var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
            var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;
            var URLToolkit = {
              // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
              // E.g
              // With opts.alwaysNormalize = false (default, spec compliant)
              // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
              // With opts.alwaysNormalize = true (not spec compliant)
              // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
              buildAbsoluteURL: function(baseURL, relativeURL, opts) {
                opts = opts || {};
                baseURL = baseURL.trim();
                relativeURL = relativeURL.trim();
                if (!relativeURL) {
                  if (!opts.alwaysNormalize) {
                    return baseURL;
                  }
                  var basePartsForNormalise = URLToolkit.parseURL(baseURL);
                  if (!basePartsForNormalise) {
                    throw new Error("Error trying to parse base URL.");
                  }
                  basePartsForNormalise.path = URLToolkit.normalizePath(
                    basePartsForNormalise.path
                  );
                  return URLToolkit.buildURLFromParts(basePartsForNormalise);
                }
                var relativeParts = URLToolkit.parseURL(relativeURL);
                if (!relativeParts) {
                  throw new Error("Error trying to parse relative URL.");
                }
                if (relativeParts.scheme) {
                  if (!opts.alwaysNormalize) {
                    return relativeURL;
                  }
                  relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
                  return URLToolkit.buildURLFromParts(relativeParts);
                }
                var baseParts = URLToolkit.parseURL(baseURL);
                if (!baseParts) {
                  throw new Error("Error trying to parse base URL.");
                }
                if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== "/") {
                  var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
                  baseParts.netLoc = pathParts[1];
                  baseParts.path = pathParts[2];
                }
                if (baseParts.netLoc && !baseParts.path) {
                  baseParts.path = "/";
                }
                var builtParts = {
                  // 2c) Otherwise, the embedded URL inherits the scheme of
                  // the base URL.
                  scheme: baseParts.scheme,
                  netLoc: relativeParts.netLoc,
                  path: null,
                  params: relativeParts.params,
                  query: relativeParts.query,
                  fragment: relativeParts.fragment
                };
                if (!relativeParts.netLoc) {
                  builtParts.netLoc = baseParts.netLoc;
                  if (relativeParts.path[0] !== "/") {
                    if (!relativeParts.path) {
                      builtParts.path = baseParts.path;
                      if (!relativeParts.params) {
                        builtParts.params = baseParts.params;
                        if (!relativeParts.query) {
                          builtParts.query = baseParts.query;
                        }
                      }
                    } else {
                      var baseURLPath = baseParts.path;
                      var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf("/") + 1) + relativeParts.path;
                      builtParts.path = URLToolkit.normalizePath(newPath);
                    }
                  }
                }
                if (builtParts.path === null) {
                  builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
                }
                return URLToolkit.buildURLFromParts(builtParts);
              },
              parseURL: function(url) {
                var parts = URL_REGEX.exec(url);
                if (!parts) {
                  return null;
                }
                return {
                  scheme: parts[1] || "",
                  netLoc: parts[2] || "",
                  path: parts[3] || "",
                  params: parts[4] || "",
                  query: parts[5] || "",
                  fragment: parts[6] || ""
                };
              },
              normalizePath: function(path) {
                path = path.split("").reverse().join("").replace(SLASH_DOT_REGEX, "");
                while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, "")).length) {
                }
                return path.split("").reverse().join("");
              },
              buildURLFromParts: function(parts) {
                return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
              }
            };
            module2.exports = URLToolkit;
          })();
        })(urlToolkit);
        var urlToolkitExports = urlToolkit.exports;
        var isFiniteNumber = Number.isFinite || function(value) {
          return typeof value === "number" && isFinite(value);
        };
        var isSafeInteger = Number.isSafeInteger || function(value) {
          return typeof value === "number" && Math.abs(value) <= MAX_SAFE_INTEGER;
        };
        var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        var Events = function(Events2) {
          Events2["MEDIA_ATTACHING"] = "hlsMediaAttaching";
          Events2["MEDIA_ATTACHED"] = "hlsMediaAttached";
          Events2["MEDIA_DETACHING"] = "hlsMediaDetaching";
          Events2["MEDIA_DETACHED"] = "hlsMediaDetached";
          Events2["BUFFER_RESET"] = "hlsBufferReset";
          Events2["BUFFER_CODECS"] = "hlsBufferCodecs";
          Events2["BUFFER_CREATED"] = "hlsBufferCreated";
          Events2["BUFFER_APPENDING"] = "hlsBufferAppending";
          Events2["BUFFER_APPENDED"] = "hlsBufferAppended";
          Events2["BUFFER_EOS"] = "hlsBufferEos";
          Events2["BUFFER_FLUSHING"] = "hlsBufferFlushing";
          Events2["BUFFER_FLUSHED"] = "hlsBufferFlushed";
          Events2["MANIFEST_LOADING"] = "hlsManifestLoading";
          Events2["MANIFEST_LOADED"] = "hlsManifestLoaded";
          Events2["MANIFEST_PARSED"] = "hlsManifestParsed";
          Events2["LEVEL_SWITCHING"] = "hlsLevelSwitching";
          Events2["LEVEL_SWITCHED"] = "hlsLevelSwitched";
          Events2["LEVEL_LOADING"] = "hlsLevelLoading";
          Events2["LEVEL_LOADED"] = "hlsLevelLoaded";
          Events2["LEVEL_UPDATED"] = "hlsLevelUpdated";
          Events2["LEVEL_PTS_UPDATED"] = "hlsLevelPtsUpdated";
          Events2["LEVELS_UPDATED"] = "hlsLevelsUpdated";
          Events2["AUDIO_TRACKS_UPDATED"] = "hlsAudioTracksUpdated";
          Events2["AUDIO_TRACK_SWITCHING"] = "hlsAudioTrackSwitching";
          Events2["AUDIO_TRACK_SWITCHED"] = "hlsAudioTrackSwitched";
          Events2["AUDIO_TRACK_LOADING"] = "hlsAudioTrackLoading";
          Events2["AUDIO_TRACK_LOADED"] = "hlsAudioTrackLoaded";
          Events2["SUBTITLE_TRACKS_UPDATED"] = "hlsSubtitleTracksUpdated";
          Events2["SUBTITLE_TRACKS_CLEARED"] = "hlsSubtitleTracksCleared";
          Events2["SUBTITLE_TRACK_SWITCH"] = "hlsSubtitleTrackSwitch";
          Events2["SUBTITLE_TRACK_LOADING"] = "hlsSubtitleTrackLoading";
          Events2["SUBTITLE_TRACK_LOADED"] = "hlsSubtitleTrackLoaded";
          Events2["SUBTITLE_FRAG_PROCESSED"] = "hlsSubtitleFragProcessed";
          Events2["CUES_PARSED"] = "hlsCuesParsed";
          Events2["NON_NATIVE_TEXT_TRACKS_FOUND"] = "hlsNonNativeTextTracksFound";
          Events2["INIT_PTS_FOUND"] = "hlsInitPtsFound";
          Events2["FRAG_LOADING"] = "hlsFragLoading";
          Events2["FRAG_LOAD_EMERGENCY_ABORTED"] = "hlsFragLoadEmergencyAborted";
          Events2["FRAG_LOADED"] = "hlsFragLoaded";
          Events2["FRAG_DECRYPTED"] = "hlsFragDecrypted";
          Events2["FRAG_PARSING_INIT_SEGMENT"] = "hlsFragParsingInitSegment";
          Events2["FRAG_PARSING_USERDATA"] = "hlsFragParsingUserdata";
          Events2["FRAG_PARSING_METADATA"] = "hlsFragParsingMetadata";
          Events2["FRAG_PARSED"] = "hlsFragParsed";
          Events2["FRAG_BUFFERED"] = "hlsFragBuffered";
          Events2["FRAG_CHANGED"] = "hlsFragChanged";
          Events2["FPS_DROP"] = "hlsFpsDrop";
          Events2["FPS_DROP_LEVEL_CAPPING"] = "hlsFpsDropLevelCapping";
          Events2["MAX_AUTO_LEVEL_UPDATED"] = "hlsMaxAutoLevelUpdated";
          Events2["ERROR"] = "hlsError";
          Events2["DESTROYING"] = "hlsDestroying";
          Events2["KEY_LOADING"] = "hlsKeyLoading";
          Events2["KEY_LOADED"] = "hlsKeyLoaded";
          Events2["LIVE_BACK_BUFFER_REACHED"] = "hlsLiveBackBufferReached";
          Events2["BACK_BUFFER_REACHED"] = "hlsBackBufferReached";
          Events2["STEERING_MANIFEST_LOADED"] = "hlsSteeringManifestLoaded";
          return Events2;
        }({});
        var ErrorTypes = function(ErrorTypes2) {
          ErrorTypes2["NETWORK_ERROR"] = "networkError";
          ErrorTypes2["MEDIA_ERROR"] = "mediaError";
          ErrorTypes2["KEY_SYSTEM_ERROR"] = "keySystemError";
          ErrorTypes2["MUX_ERROR"] = "muxError";
          ErrorTypes2["OTHER_ERROR"] = "otherError";
          return ErrorTypes2;
        }({});
        var ErrorDetails = function(ErrorDetails2) {
          ErrorDetails2["KEY_SYSTEM_NO_KEYS"] = "keySystemNoKeys";
          ErrorDetails2["KEY_SYSTEM_NO_ACCESS"] = "keySystemNoAccess";
          ErrorDetails2["KEY_SYSTEM_NO_SESSION"] = "keySystemNoSession";
          ErrorDetails2["KEY_SYSTEM_NO_CONFIGURED_LICENSE"] = "keySystemNoConfiguredLicense";
          ErrorDetails2["KEY_SYSTEM_LICENSE_REQUEST_FAILED"] = "keySystemLicenseRequestFailed";
          ErrorDetails2["KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED"] = "keySystemServerCertificateRequestFailed";
          ErrorDetails2["KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED"] = "keySystemServerCertificateUpdateFailed";
          ErrorDetails2["KEY_SYSTEM_SESSION_UPDATE_FAILED"] = "keySystemSessionUpdateFailed";
          ErrorDetails2["KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED"] = "keySystemStatusOutputRestricted";
          ErrorDetails2["KEY_SYSTEM_STATUS_INTERNAL_ERROR"] = "keySystemStatusInternalError";
          ErrorDetails2["MANIFEST_LOAD_ERROR"] = "manifestLoadError";
          ErrorDetails2["MANIFEST_LOAD_TIMEOUT"] = "manifestLoadTimeOut";
          ErrorDetails2["MANIFEST_PARSING_ERROR"] = "manifestParsingError";
          ErrorDetails2["MANIFEST_INCOMPATIBLE_CODECS_ERROR"] = "manifestIncompatibleCodecsError";
          ErrorDetails2["LEVEL_EMPTY_ERROR"] = "levelEmptyError";
          ErrorDetails2["LEVEL_LOAD_ERROR"] = "levelLoadError";
          ErrorDetails2["LEVEL_LOAD_TIMEOUT"] = "levelLoadTimeOut";
          ErrorDetails2["LEVEL_PARSING_ERROR"] = "levelParsingError";
          ErrorDetails2["LEVEL_SWITCH_ERROR"] = "levelSwitchError";
          ErrorDetails2["AUDIO_TRACK_LOAD_ERROR"] = "audioTrackLoadError";
          ErrorDetails2["AUDIO_TRACK_LOAD_TIMEOUT"] = "audioTrackLoadTimeOut";
          ErrorDetails2["SUBTITLE_LOAD_ERROR"] = "subtitleTrackLoadError";
          ErrorDetails2["SUBTITLE_TRACK_LOAD_TIMEOUT"] = "subtitleTrackLoadTimeOut";
          ErrorDetails2["FRAG_LOAD_ERROR"] = "fragLoadError";
          ErrorDetails2["FRAG_LOAD_TIMEOUT"] = "fragLoadTimeOut";
          ErrorDetails2["FRAG_DECRYPT_ERROR"] = "fragDecryptError";
          ErrorDetails2["FRAG_PARSING_ERROR"] = "fragParsingError";
          ErrorDetails2["FRAG_GAP"] = "fragGap";
          ErrorDetails2["REMUX_ALLOC_ERROR"] = "remuxAllocError";
          ErrorDetails2["KEY_LOAD_ERROR"] = "keyLoadError";
          ErrorDetails2["KEY_LOAD_TIMEOUT"] = "keyLoadTimeOut";
          ErrorDetails2["BUFFER_ADD_CODEC_ERROR"] = "bufferAddCodecError";
          ErrorDetails2["BUFFER_INCOMPATIBLE_CODECS_ERROR"] = "bufferIncompatibleCodecsError";
          ErrorDetails2["BUFFER_APPEND_ERROR"] = "bufferAppendError";
          ErrorDetails2["BUFFER_APPENDING_ERROR"] = "bufferAppendingError";
          ErrorDetails2["BUFFER_STALLED_ERROR"] = "bufferStalledError";
          ErrorDetails2["BUFFER_FULL_ERROR"] = "bufferFullError";
          ErrorDetails2["BUFFER_SEEK_OVER_HOLE"] = "bufferSeekOverHole";
          ErrorDetails2["BUFFER_NUDGE_ON_STALL"] = "bufferNudgeOnStall";
          ErrorDetails2["INTERNAL_EXCEPTION"] = "internalException";
          ErrorDetails2["INTERNAL_ABORTED"] = "aborted";
          ErrorDetails2["UNKNOWN"] = "unknown";
          return ErrorDetails2;
        }({});
        var noop = function noop2() {
        };
        var fakeLogger = {
          trace: noop,
          debug: noop,
          log: noop,
          warn: noop,
          info: noop,
          error: noop
        };
        var exportedLogger = fakeLogger;
        function consolePrintFn(type) {
          var func = self.console[type];
          if (func) {
            return func.bind(self.console, "[" + type + "] >");
          }
          return noop;
        }
        function exportLoggerFunctions(debugConfig) {
          for (var _len = arguments.length, functions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            functions[_key - 1] = arguments[_key];
          }
          functions.forEach(function(type) {
            exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);
          });
        }
        function enableLogs(debugConfig, id) {
          if (typeof console === "object" && debugConfig === true || typeof debugConfig === "object") {
            exportLoggerFunctions(
              debugConfig,
              // Remove out from list here to hard-disable a log-level
              // 'trace',
              "debug",
              "log",
              "info",
              "warn",
              "error"
            );
            try {
              exportedLogger.log('Debug logs enabled for "' + id + '" in hls.js version 1.5.18');
            } catch (e) {
              exportedLogger = fakeLogger;
            }
          } else {
            exportedLogger = fakeLogger;
          }
        }
        var logger = exportedLogger;
        var DECIMAL_RESOLUTION_REGEX = /^(\d+)x(\d+)$/;
        var ATTR_LIST_REGEX = /(.+?)=(".*?"|.*?)(?:,|$)/g;
        var AttrList = function() {
          function AttrList2(attrs) {
            if (typeof attrs === "string") {
              attrs = AttrList2.parseAttrList(attrs);
            }
            _extends(this, attrs);
          }
          var _proto = AttrList2.prototype;
          _proto.decimalInteger = function decimalInteger(attrName) {
            var intValue = parseInt(this[attrName], 10);
            if (intValue > Number.MAX_SAFE_INTEGER) {
              return Infinity;
            }
            return intValue;
          };
          _proto.hexadecimalInteger = function hexadecimalInteger(attrName) {
            if (this[attrName]) {
              var stringValue = (this[attrName] || "0x").slice(2);
              stringValue = (stringValue.length & 1 ? "0" : "") + stringValue;
              var value = new Uint8Array(stringValue.length / 2);
              for (var i = 0; i < stringValue.length / 2; i++) {
                value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);
              }
              return value;
            } else {
              return null;
            }
          };
          _proto.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {
            var intValue = parseInt(this[attrName], 16);
            if (intValue > Number.MAX_SAFE_INTEGER) {
              return Infinity;
            }
            return intValue;
          };
          _proto.decimalFloatingPoint = function decimalFloatingPoint(attrName) {
            return parseFloat(this[attrName]);
          };
          _proto.optionalFloat = function optionalFloat(attrName, defaultValue) {
            var value = this[attrName];
            return value ? parseFloat(value) : defaultValue;
          };
          _proto.enumeratedString = function enumeratedString(attrName) {
            return this[attrName];
          };
          _proto.bool = function bool(attrName) {
            return this[attrName] === "YES";
          };
          _proto.decimalResolution = function decimalResolution(attrName) {
            var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);
            if (res === null) {
              return void 0;
            }
            return {
              width: parseInt(res[1], 10),
              height: parseInt(res[2], 10)
            };
          };
          AttrList2.parseAttrList = function parseAttrList(input) {
            var match;
            var attrs = {};
            var quote = '"';
            ATTR_LIST_REGEX.lastIndex = 0;
            while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {
              var value = match[2];
              if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {
                value = value.slice(1, -1);
              }
              var name = match[1].trim();
              attrs[name] = value;
            }
            return attrs;
          };
          _createClass2(AttrList2, [{
            key: "clientAttrs",
            get: function get() {
              return Object.keys(this).filter(function(attr) {
                return attr.substring(0, 2) === "X-";
              });
            }
          }]);
          return AttrList2;
        }();
        function isDateRangeCueAttribute(attrName) {
          return attrName !== "ID" && attrName !== "CLASS" && attrName !== "START-DATE" && attrName !== "DURATION" && attrName !== "END-DATE" && attrName !== "END-ON-NEXT";
        }
        function isSCTE35Attribute(attrName) {
          return attrName === "SCTE35-OUT" || attrName === "SCTE35-IN";
        }
        var DateRange = function() {
          function DateRange2(dateRangeAttr, dateRangeWithSameId) {
            this.attr = void 0;
            this._startDate = void 0;
            this._endDate = void 0;
            this._badValueForSameId = void 0;
            if (dateRangeWithSameId) {
              var previousAttr = dateRangeWithSameId.attr;
              for (var key in previousAttr) {
                if (Object.prototype.hasOwnProperty.call(dateRangeAttr, key) && dateRangeAttr[key] !== previousAttr[key]) {
                  logger.warn('DATERANGE tag attribute: "' + key + '" does not match for tags with ID: "' + dateRangeAttr.ID + '"');
                  this._badValueForSameId = key;
                  break;
                }
              }
              dateRangeAttr = _extends(new AttrList({}), previousAttr, dateRangeAttr);
            }
            this.attr = dateRangeAttr;
            this._startDate = new Date(dateRangeAttr["START-DATE"]);
            if ("END-DATE" in this.attr) {
              var endDate = new Date(this.attr["END-DATE"]);
              if (isFiniteNumber(endDate.getTime())) {
                this._endDate = endDate;
              }
            }
          }
          _createClass2(DateRange2, [{
            key: "id",
            get: function get() {
              return this.attr.ID;
            }
          }, {
            key: "class",
            get: function get() {
              return this.attr.CLASS;
            }
          }, {
            key: "startDate",
            get: function get() {
              return this._startDate;
            }
          }, {
            key: "endDate",
            get: function get() {
              if (this._endDate) {
                return this._endDate;
              }
              var duration = this.duration;
              if (duration !== null) {
                return new Date(this._startDate.getTime() + duration * 1e3);
              }
              return null;
            }
          }, {
            key: "duration",
            get: function get() {
              if ("DURATION" in this.attr) {
                var duration = this.attr.decimalFloatingPoint("DURATION");
                if (isFiniteNumber(duration)) {
                  return duration;
                }
              } else if (this._endDate) {
                return (this._endDate.getTime() - this._startDate.getTime()) / 1e3;
              }
              return null;
            }
          }, {
            key: "plannedDuration",
            get: function get() {
              if ("PLANNED-DURATION" in this.attr) {
                return this.attr.decimalFloatingPoint("PLANNED-DURATION");
              }
              return null;
            }
          }, {
            key: "endOnNext",
            get: function get() {
              return this.attr.bool("END-ON-NEXT");
            }
          }, {
            key: "isValid",
            get: function get() {
              return !!this.id && !this._badValueForSameId && isFiniteNumber(this.startDate.getTime()) && (this.duration === null || this.duration >= 0) && (!this.endOnNext || !!this.class);
            }
          }]);
          return DateRange2;
        }();
        var LoadStats = function LoadStats2() {
          this.aborted = false;
          this.loaded = 0;
          this.retry = 0;
          this.total = 0;
          this.chunkCount = 0;
          this.bwEstimate = 0;
          this.loading = {
            start: 0,
            first: 0,
            end: 0
          };
          this.parsing = {
            start: 0,
            end: 0
          };
          this.buffering = {
            start: 0,
            first: 0,
            end: 0
          };
        };
        var ElementaryStreamTypes = {
          AUDIO: "audio",
          VIDEO: "video",
          AUDIOVIDEO: "audiovideo"
        };
        var BaseSegment = function() {
          function BaseSegment2(baseurl) {
            var _this$elementaryStrea;
            this._byteRange = null;
            this._url = null;
            this.baseurl = void 0;
            this.relurl = void 0;
            this.elementaryStreams = (_this$elementaryStrea = {}, _this$elementaryStrea[ElementaryStreamTypes.AUDIO] = null, _this$elementaryStrea[ElementaryStreamTypes.VIDEO] = null, _this$elementaryStrea[ElementaryStreamTypes.AUDIOVIDEO] = null, _this$elementaryStrea);
            this.baseurl = baseurl;
          }
          var _proto = BaseSegment2.prototype;
          _proto.setByteRange = function setByteRange(value, previous) {
            var params = value.split("@", 2);
            var start;
            if (params.length === 1) {
              start = (previous == null ? void 0 : previous.byteRangeEndOffset) || 0;
            } else {
              start = parseInt(params[1]);
            }
            this._byteRange = [start, parseInt(params[0]) + start];
          };
          _createClass2(BaseSegment2, [{
            key: "byteRange",
            get: function get() {
              if (!this._byteRange) {
                return [];
              }
              return this._byteRange;
            }
          }, {
            key: "byteRangeStartOffset",
            get: function get() {
              return this.byteRange[0];
            }
          }, {
            key: "byteRangeEndOffset",
            get: function get() {
              return this.byteRange[1];
            }
          }, {
            key: "url",
            get: function get() {
              if (!this._url && this.baseurl && this.relurl) {
                this._url = urlToolkitExports.buildAbsoluteURL(this.baseurl, this.relurl, {
                  alwaysNormalize: true
                });
              }
              return this._url || "";
            },
            set: function set(value) {
              this._url = value;
            }
          }]);
          return BaseSegment2;
        }();
        var Fragment = function(_BaseSegment) {
          _inheritsLoose(Fragment2, _BaseSegment);
          function Fragment2(type, baseurl) {
            var _this;
            _this = _BaseSegment.call(this, baseurl) || this;
            _this._decryptdata = null;
            _this.rawProgramDateTime = null;
            _this.programDateTime = null;
            _this.tagList = [];
            _this.duration = 0;
            _this.sn = 0;
            _this.levelkeys = void 0;
            _this.type = void 0;
            _this.loader = null;
            _this.keyLoader = null;
            _this.level = -1;
            _this.cc = 0;
            _this.startPTS = void 0;
            _this.endPTS = void 0;
            _this.startDTS = void 0;
            _this.endDTS = void 0;
            _this.start = 0;
            _this.deltaPTS = void 0;
            _this.maxStartPTS = void 0;
            _this.minEndPTS = void 0;
            _this.stats = new LoadStats();
            _this.data = void 0;
            _this.bitrateTest = false;
            _this.title = null;
            _this.initSegment = null;
            _this.endList = void 0;
            _this.gap = void 0;
            _this.urlId = 0;
            _this.type = type;
            return _this;
          }
          var _proto2 = Fragment2.prototype;
          _proto2.setKeyFormat = function setKeyFormat(keyFormat) {
            if (this.levelkeys) {
              var _key = this.levelkeys[keyFormat];
              if (_key && !this._decryptdata) {
                this._decryptdata = _key.getDecryptData(this.sn);
              }
            }
          };
          _proto2.abortRequests = function abortRequests() {
            var _this$loader, _this$keyLoader;
            (_this$loader = this.loader) == null ? void 0 : _this$loader.abort();
            (_this$keyLoader = this.keyLoader) == null ? void 0 : _this$keyLoader.abort();
          };
          _proto2.setElementaryStreamInfo = function setElementaryStreamInfo(type, startPTS, endPTS, startDTS, endDTS, partial) {
            if (partial === void 0) {
              partial = false;
            }
            var elementaryStreams = this.elementaryStreams;
            var info = elementaryStreams[type];
            if (!info) {
              elementaryStreams[type] = {
                startPTS,
                endPTS,
                startDTS,
                endDTS,
                partial
              };
              return;
            }
            info.startPTS = Math.min(info.startPTS, startPTS);
            info.endPTS = Math.max(info.endPTS, endPTS);
            info.startDTS = Math.min(info.startDTS, startDTS);
            info.endDTS = Math.max(info.endDTS, endDTS);
          };
          _proto2.clearElementaryStreamInfo = function clearElementaryStreamInfo() {
            var elementaryStreams = this.elementaryStreams;
            elementaryStreams[ElementaryStreamTypes.AUDIO] = null;
            elementaryStreams[ElementaryStreamTypes.VIDEO] = null;
            elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;
          };
          _createClass2(Fragment2, [{
            key: "decryptdata",
            get: function get() {
              var levelkeys = this.levelkeys;
              if (!levelkeys && !this._decryptdata) {
                return null;
              }
              if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {
                var _key2 = this.levelkeys.identity;
                if (_key2) {
                  this._decryptdata = _key2.getDecryptData(this.sn);
                } else {
                  var keyFormats = Object.keys(this.levelkeys);
                  if (keyFormats.length === 1) {
                    return this._decryptdata = this.levelkeys[keyFormats[0]].getDecryptData(this.sn);
                  }
                }
              }
              return this._decryptdata;
            }
          }, {
            key: "end",
            get: function get() {
              return this.start + this.duration;
            }
          }, {
            key: "endProgramDateTime",
            get: function get() {
              if (this.programDateTime === null) {
                return null;
              }
              if (!isFiniteNumber(this.programDateTime)) {
                return null;
              }
              var duration = !isFiniteNumber(this.duration) ? 0 : this.duration;
              return this.programDateTime + duration * 1e3;
            }
          }, {
            key: "encrypted",
            get: function get() {
              var _this$_decryptdata;
              if ((_this$_decryptdata = this._decryptdata) != null && _this$_decryptdata.encrypted) {
                return true;
              } else if (this.levelkeys) {
                var keyFormats = Object.keys(this.levelkeys);
                var len = keyFormats.length;
                if (len > 1 || len === 1 && this.levelkeys[keyFormats[0]].encrypted) {
                  return true;
                }
              }
              return false;
            }
          }]);
          return Fragment2;
        }(BaseSegment);
        var Part = function(_BaseSegment2) {
          _inheritsLoose(Part2, _BaseSegment2);
          function Part2(partAttrs, frag, baseurl, index, previous) {
            var _this2;
            _this2 = _BaseSegment2.call(this, baseurl) || this;
            _this2.fragOffset = 0;
            _this2.duration = 0;
            _this2.gap = false;
            _this2.independent = false;
            _this2.relurl = void 0;
            _this2.fragment = void 0;
            _this2.index = void 0;
            _this2.stats = new LoadStats();
            _this2.duration = partAttrs.decimalFloatingPoint("DURATION");
            _this2.gap = partAttrs.bool("GAP");
            _this2.independent = partAttrs.bool("INDEPENDENT");
            _this2.relurl = partAttrs.enumeratedString("URI");
            _this2.fragment = frag;
            _this2.index = index;
            var byteRange = partAttrs.enumeratedString("BYTERANGE");
            if (byteRange) {
              _this2.setByteRange(byteRange, previous);
            }
            if (previous) {
              _this2.fragOffset = previous.fragOffset + previous.duration;
            }
            return _this2;
          }
          _createClass2(Part2, [{
            key: "start",
            get: function get() {
              return this.fragment.start + this.fragOffset;
            }
          }, {
            key: "end",
            get: function get() {
              return this.start + this.duration;
            }
          }, {
            key: "loaded",
            get: function get() {
              var elementaryStreams = this.elementaryStreams;
              return !!(elementaryStreams.audio || elementaryStreams.video || elementaryStreams.audiovideo);
            }
          }]);
          return Part2;
        }(BaseSegment);
        var DEFAULT_TARGET_DURATION = 10;
        var LevelDetails = function() {
          function LevelDetails2(baseUrl) {
            this.PTSKnown = false;
            this.alignedSliding = false;
            this.averagetargetduration = void 0;
            this.endCC = 0;
            this.endSN = 0;
            this.fragments = void 0;
            this.fragmentHint = void 0;
            this.partList = null;
            this.dateRanges = void 0;
            this.live = true;
            this.ageHeader = 0;
            this.advancedDateTime = void 0;
            this.updated = true;
            this.advanced = true;
            this.availabilityDelay = void 0;
            this.misses = 0;
            this.startCC = 0;
            this.startSN = 0;
            this.startTimeOffset = null;
            this.targetduration = 0;
            this.totalduration = 0;
            this.type = null;
            this.url = void 0;
            this.m3u8 = "";
            this.version = null;
            this.canBlockReload = false;
            this.canSkipUntil = 0;
            this.canSkipDateRanges = false;
            this.skippedSegments = 0;
            this.recentlyRemovedDateranges = void 0;
            this.partHoldBack = 0;
            this.holdBack = 0;
            this.partTarget = 0;
            this.preloadHint = void 0;
            this.renditionReports = void 0;
            this.tuneInGoal = 0;
            this.deltaUpdateFailed = void 0;
            this.driftStartTime = 0;
            this.driftEndTime = 0;
            this.driftStart = 0;
            this.driftEnd = 0;
            this.encryptedFragments = void 0;
            this.playlistParsingError = null;
            this.variableList = null;
            this.hasVariableRefs = false;
            this.fragments = [];
            this.encryptedFragments = [];
            this.dateRanges = {};
            this.url = baseUrl;
          }
          var _proto = LevelDetails2.prototype;
          _proto.reloaded = function reloaded(previous) {
            if (!previous) {
              this.advanced = true;
              this.updated = true;
              return;
            }
            var partSnDiff = this.lastPartSn - previous.lastPartSn;
            var partIndexDiff = this.lastPartIndex - previous.lastPartIndex;
            this.updated = this.endSN !== previous.endSN || !!partIndexDiff || !!partSnDiff || !this.live;
            this.advanced = this.endSN > previous.endSN || partSnDiff > 0 || partSnDiff === 0 && partIndexDiff > 0;
            if (this.updated || this.advanced) {
              this.misses = Math.floor(previous.misses * 0.6);
            } else {
              this.misses = previous.misses + 1;
            }
            this.availabilityDelay = previous.availabilityDelay;
          };
          _createClass2(LevelDetails2, [{
            key: "hasProgramDateTime",
            get: function get() {
              if (this.fragments.length) {
                return isFiniteNumber(this.fragments[this.fragments.length - 1].programDateTime);
              }
              return false;
            }
          }, {
            key: "levelTargetDuration",
            get: function get() {
              return this.averagetargetduration || this.targetduration || DEFAULT_TARGET_DURATION;
            }
          }, {
            key: "drift",
            get: function get() {
              var runTime = this.driftEndTime - this.driftStartTime;
              if (runTime > 0) {
                var runDuration = this.driftEnd - this.driftStart;
                return runDuration * 1e3 / runTime;
              }
              return 1;
            }
          }, {
            key: "edge",
            get: function get() {
              return this.partEnd || this.fragmentEnd;
            }
          }, {
            key: "partEnd",
            get: function get() {
              var _this$partList;
              if ((_this$partList = this.partList) != null && _this$partList.length) {
                return this.partList[this.partList.length - 1].end;
              }
              return this.fragmentEnd;
            }
          }, {
            key: "fragmentEnd",
            get: function get() {
              var _this$fragments;
              if ((_this$fragments = this.fragments) != null && _this$fragments.length) {
                return this.fragments[this.fragments.length - 1].end;
              }
              return 0;
            }
          }, {
            key: "age",
            get: function get() {
              if (this.advancedDateTime) {
                return Math.max(Date.now() - this.advancedDateTime, 0) / 1e3;
              }
              return 0;
            }
          }, {
            key: "lastPartIndex",
            get: function get() {
              var _this$partList2;
              if ((_this$partList2 = this.partList) != null && _this$partList2.length) {
                return this.partList[this.partList.length - 1].index;
              }
              return -1;
            }
          }, {
            key: "lastPartSn",
            get: function get() {
              var _this$partList3;
              if ((_this$partList3 = this.partList) != null && _this$partList3.length) {
                return this.partList[this.partList.length - 1].fragment.sn;
              }
              return this.endSN;
            }
          }]);
          return LevelDetails2;
        }();
        var empty = void 0;
        var Cues = getDefaultExportFromCjs(empty);
        function sliceUint8(array, start, end) {
          return Uint8Array.prototype.slice ? array.slice(start, end) : new Uint8Array(Array.prototype.slice.call(array, start, end));
        }
        var isHeader$2 = function isHeader2(data, offset) {
          if (offset + 10 <= data.length) {
            if (data[offset] === 73 && data[offset + 1] === 68 && data[offset + 2] === 51) {
              if (data[offset + 3] < 255 && data[offset + 4] < 255) {
                if (data[offset + 6] < 128 && data[offset + 7] < 128 && data[offset + 8] < 128 && data[offset + 9] < 128) {
                  return true;
                }
              }
            }
          }
          return false;
        };
        var isFooter = function isFooter2(data, offset) {
          if (offset + 10 <= data.length) {
            if (data[offset] === 51 && data[offset + 1] === 68 && data[offset + 2] === 73) {
              if (data[offset + 3] < 255 && data[offset + 4] < 255) {
                if (data[offset + 6] < 128 && data[offset + 7] < 128 && data[offset + 8] < 128 && data[offset + 9] < 128) {
                  return true;
                }
              }
            }
          }
          return false;
        };
        var getID3Data = function getID3Data2(data, offset) {
          var front = offset;
          var length = 0;
          while (isHeader$2(data, offset)) {
            length += 10;
            var size = readSize(data, offset + 6);
            length += size;
            if (isFooter(data, offset + 10)) {
              length += 10;
            }
            offset += length;
          }
          if (length > 0) {
            return data.subarray(front, front + length);
          }
          return void 0;
        };
        var readSize = function readSize2(data, offset) {
          var size = 0;
          size = (data[offset] & 127) << 21;
          size |= (data[offset + 1] & 127) << 14;
          size |= (data[offset + 2] & 127) << 7;
          size |= data[offset + 3] & 127;
          return size;
        };
        var canParse$2 = function canParse2(data, offset) {
          return isHeader$2(data, offset) && readSize(data, offset + 6) + 10 <= data.length - offset;
        };
        var getTimeStamp = function getTimeStamp2(data) {
          var frames = getID3Frames(data);
          for (var i = 0; i < frames.length; i++) {
            var frame = frames[i];
            if (isTimeStampFrame(frame)) {
              return readTimeStamp(frame);
            }
          }
          return void 0;
        };
        var isTimeStampFrame = function isTimeStampFrame2(frame) {
          return frame && frame.key === "PRIV" && frame.info === "com.apple.streaming.transportStreamTimestamp";
        };
        var getFrameData = function getFrameData2(data) {
          var type = String.fromCharCode(data[0], data[1], data[2], data[3]);
          var size = readSize(data, 4);
          var offset = 10;
          return {
            type,
            size,
            data: data.subarray(offset, offset + size)
          };
        };
        var getID3Frames = function getID3Frames2(id3Data) {
          var offset = 0;
          var frames = [];
          while (isHeader$2(id3Data, offset)) {
            var size = readSize(id3Data, offset + 6);
            offset += 10;
            var end = offset + size;
            while (offset + 8 < end) {
              var frameData = getFrameData(id3Data.subarray(offset));
              var frame = decodeFrame(frameData);
              if (frame) {
                frames.push(frame);
              }
              offset += frameData.size + 10;
            }
            if (isFooter(id3Data, offset)) {
              offset += 10;
            }
          }
          return frames;
        };
        var decodeFrame = function decodeFrame2(frame) {
          if (frame.type === "PRIV") {
            return decodePrivFrame(frame);
          } else if (frame.type[0] === "W") {
            return decodeURLFrame(frame);
          }
          return decodeTextFrame(frame);
        };
        var decodePrivFrame = function decodePrivFrame2(frame) {
          if (frame.size < 2) {
            return void 0;
          }
          var owner = utf8ArrayToStr(frame.data, true);
          var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));
          return {
            key: frame.type,
            info: owner,
            data: privateData.buffer
          };
        };
        var decodeTextFrame = function decodeTextFrame2(frame) {
          if (frame.size < 2) {
            return void 0;
          }
          if (frame.type === "TXXX") {
            var index = 1;
            var description = utf8ArrayToStr(frame.data.subarray(index), true);
            index += description.length + 1;
            var value = utf8ArrayToStr(frame.data.subarray(index));
            return {
              key: frame.type,
              info: description,
              data: value
            };
          }
          var text = utf8ArrayToStr(frame.data.subarray(1));
          return {
            key: frame.type,
            data: text
          };
        };
        var decodeURLFrame = function decodeURLFrame2(frame) {
          if (frame.type === "WXXX") {
            if (frame.size < 2) {
              return void 0;
            }
            var index = 1;
            var description = utf8ArrayToStr(frame.data.subarray(index), true);
            index += description.length + 1;
            var value = utf8ArrayToStr(frame.data.subarray(index));
            return {
              key: frame.type,
              info: description,
              data: value
            };
          }
          var url = utf8ArrayToStr(frame.data);
          return {
            key: frame.type,
            data: url
          };
        };
        var readTimeStamp = function readTimeStamp2(timeStampFrame) {
          if (timeStampFrame.data.byteLength === 8) {
            var data = new Uint8Array(timeStampFrame.data);
            var pts33Bit = data[3] & 1;
            var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];
            timestamp /= 45;
            if (pts33Bit) {
              timestamp += 4772185884e-2;
            }
            return Math.round(timestamp);
          }
          return void 0;
        };
        var utf8ArrayToStr = function utf8ArrayToStr2(array, exitOnNull) {
          if (exitOnNull === void 0) {
            exitOnNull = false;
          }
          var decoder2 = getTextDecoder();
          if (decoder2) {
            var decoded = decoder2.decode(array);
            if (exitOnNull) {
              var idx = decoded.indexOf("\0");
              return idx !== -1 ? decoded.substring(0, idx) : decoded;
            }
            return decoded.replace(/\0/g, "");
          }
          var len = array.length;
          var c;
          var char2;
          var char3;
          var out = "";
          var i = 0;
          while (i < len) {
            c = array[i++];
            if (c === 0 && exitOnNull) {
              return out;
            } else if (c === 0 || c === 3) {
              continue;
            }
            switch (c >> 4) {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
                out += String.fromCharCode(c);
                break;
              case 12:
              case 13:
                char2 = array[i++];
                out += String.fromCharCode((c & 31) << 6 | char2 & 63);
                break;
              case 14:
                char2 = array[i++];
                char3 = array[i++];
                out += String.fromCharCode((c & 15) << 12 | (char2 & 63) << 6 | (char3 & 63) << 0);
                break;
            }
          }
          return out;
        };
        var decoder;
        function getTextDecoder() {
          if (navigator.userAgent.includes("PlayStation 4")) {
            return;
          }
          if (!decoder && typeof self.TextDecoder !== "undefined") {
            decoder = new self.TextDecoder("utf-8");
          }
          return decoder;
        }
        var Hex = {
          hexDump: function hexDump(array) {
            var str = "";
            for (var i = 0; i < array.length; i++) {
              var h = array[i].toString(16);
              if (h.length < 2) {
                h = "0" + h;
              }
              str += h;
            }
            return str;
          }
        };
        var UINT32_MAX$1 = Math.pow(2, 32) - 1;
        var push = [].push;
        var RemuxerTrackIdConfig = {
          video: 1,
          audio: 2,
          id3: 3,
          text: 4
        };
        function bin2str(data) {
          return String.fromCharCode.apply(null, data);
        }
        function readUint16(buffer, offset) {
          var val = buffer[offset] << 8 | buffer[offset + 1];
          return val < 0 ? 65536 + val : val;
        }
        function readUint32(buffer, offset) {
          var val = readSint32(buffer, offset);
          return val < 0 ? 4294967296 + val : val;
        }
        function readUint64(buffer, offset) {
          var result = readUint32(buffer, offset);
          result *= Math.pow(2, 32);
          result += readUint32(buffer, offset + 4);
          return result;
        }
        function readSint32(buffer, offset) {
          return buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];
        }
        function writeUint32(buffer, offset, value) {
          buffer[offset] = value >> 24;
          buffer[offset + 1] = value >> 16 & 255;
          buffer[offset + 2] = value >> 8 & 255;
          buffer[offset + 3] = value & 255;
        }
        function hasMoofData(data) {
          var end = data.byteLength;
          for (var i = 0; i < end; ) {
            var size = readUint32(data, i);
            if (size > 8 && data[i + 4] === 109 && data[i + 5] === 111 && data[i + 6] === 111 && data[i + 7] === 102) {
              return true;
            }
            i = size > 1 ? i + size : end;
          }
          return false;
        }
        function findBox(data, path) {
          var results = [];
          if (!path.length) {
            return results;
          }
          var end = data.byteLength;
          for (var i = 0; i < end; ) {
            var size = readUint32(data, i);
            var type = bin2str(data.subarray(i + 4, i + 8));
            var endbox = size > 1 ? i + size : end;
            if (type === path[0]) {
              if (path.length === 1) {
                results.push(data.subarray(i + 8, endbox));
              } else {
                var subresults = findBox(data.subarray(i + 8, endbox), path.slice(1));
                if (subresults.length) {
                  push.apply(results, subresults);
                }
              }
            }
            i = endbox;
          }
          return results;
        }
        function parseSegmentIndex(sidx) {
          var references = [];
          var version = sidx[0];
          var index = 8;
          var timescale = readUint32(sidx, index);
          index += 4;
          var earliestPresentationTime = 0;
          var firstOffset = 0;
          if (version === 0) {
            earliestPresentationTime = readUint32(sidx, index);
            firstOffset = readUint32(sidx, index + 4);
            index += 8;
          } else {
            earliestPresentationTime = readUint64(sidx, index);
            firstOffset = readUint64(sidx, index + 8);
            index += 16;
          }
          index += 2;
          var startByte = sidx.length + firstOffset;
          var referencesCount = readUint16(sidx, index);
          index += 2;
          for (var i = 0; i < referencesCount; i++) {
            var referenceIndex = index;
            var referenceInfo = readUint32(sidx, referenceIndex);
            referenceIndex += 4;
            var referenceSize = referenceInfo & 2147483647;
            var referenceType = (referenceInfo & 2147483648) >>> 31;
            if (referenceType === 1) {
              logger.warn("SIDX has hierarchical references (not supported)");
              return null;
            }
            var subsegmentDuration = readUint32(sidx, referenceIndex);
            referenceIndex += 4;
            references.push({
              referenceSize,
              subsegmentDuration,
              // unscaled
              info: {
                duration: subsegmentDuration / timescale,
                start: startByte,
                end: startByte + referenceSize - 1
              }
            });
            startByte += referenceSize;
            referenceIndex += 4;
            index = referenceIndex;
          }
          return {
            earliestPresentationTime,
            timescale,
            version,
            referencesCount,
            references
          };
        }
        function parseInitSegment(initSegment) {
          var result = [];
          var traks = findBox(initSegment, ["moov", "trak"]);
          for (var i = 0; i < traks.length; i++) {
            var trak = traks[i];
            var tkhd = findBox(trak, ["tkhd"])[0];
            if (tkhd) {
              var version = tkhd[0];
              var trackId = readUint32(tkhd, version === 0 ? 12 : 20);
              var mdhd = findBox(trak, ["mdia", "mdhd"])[0];
              if (mdhd) {
                version = mdhd[0];
                var timescale = readUint32(mdhd, version === 0 ? 12 : 20);
                var hdlr = findBox(trak, ["mdia", "hdlr"])[0];
                if (hdlr) {
                  var hdlrType = bin2str(hdlr.subarray(8, 12));
                  var type = {
                    soun: ElementaryStreamTypes.AUDIO,
                    vide: ElementaryStreamTypes.VIDEO
                  }[hdlrType];
                  if (type) {
                    var stsd = findBox(trak, ["mdia", "minf", "stbl", "stsd"])[0];
                    var stsdData = parseStsd(stsd);
                    result[trackId] = {
                      timescale,
                      type
                    };
                    result[type] = _objectSpread2({
                      timescale,
                      id: trackId
                    }, stsdData);
                  }
                }
              }
            }
          }
          var trex = findBox(initSegment, ["moov", "mvex", "trex"]);
          trex.forEach(function(trex2) {
            var trackId2 = readUint32(trex2, 4);
            var track = result[trackId2];
            if (track) {
              track.default = {
                duration: readUint32(trex2, 12),
                flags: readUint32(trex2, 20)
              };
            }
          });
          return result;
        }
        function parseStsd(stsd) {
          var sampleEntries = stsd.subarray(8);
          var sampleEntriesEnd = sampleEntries.subarray(8 + 78);
          var fourCC = bin2str(sampleEntries.subarray(4, 8));
          var codec = fourCC;
          var encrypted = fourCC === "enca" || fourCC === "encv";
          if (encrypted) {
            var encBox = findBox(sampleEntries, [fourCC])[0];
            var encBoxChildren = encBox.subarray(fourCC === "enca" ? 28 : 78);
            var sinfs = findBox(encBoxChildren, ["sinf"]);
            sinfs.forEach(function(sinf) {
              var schm = findBox(sinf, ["schm"])[0];
              if (schm) {
                var scheme = bin2str(schm.subarray(4, 8));
                if (scheme === "cbcs" || scheme === "cenc") {
                  var frma = findBox(sinf, ["frma"])[0];
                  if (frma) {
                    codec = bin2str(frma);
                  }
                }
              }
            });
          }
          switch (codec) {
            case "avc1":
            case "avc2":
            case "avc3":
            case "avc4": {
              var avcCBox = findBox(sampleEntriesEnd, ["avcC"])[0];
              codec += "." + toHex(avcCBox[1]) + toHex(avcCBox[2]) + toHex(avcCBox[3]);
              break;
            }
            case "mp4a": {
              var codecBox = findBox(sampleEntries, [fourCC])[0];
              var esdsBox = findBox(codecBox.subarray(28), ["esds"])[0];
              if (esdsBox && esdsBox.length > 12) {
                var i = 4;
                if (esdsBox[i++] !== 3) {
                  break;
                }
                i = skipBERInteger(esdsBox, i);
                i += 2;
                var flags = esdsBox[i++];
                if (flags & 128) {
                  i += 2;
                }
                if (flags & 64) {
                  i += esdsBox[i++];
                }
                if (esdsBox[i++] !== 4) {
                  break;
                }
                i = skipBERInteger(esdsBox, i);
                var objectType = esdsBox[i++];
                if (objectType === 64) {
                  codec += "." + toHex(objectType);
                } else {
                  break;
                }
                i += 12;
                if (esdsBox[i++] !== 5) {
                  break;
                }
                i = skipBERInteger(esdsBox, i);
                var firstByte = esdsBox[i++];
                var audioObjectType = (firstByte & 248) >> 3;
                if (audioObjectType === 31) {
                  audioObjectType += 1 + ((firstByte & 7) << 3) + ((esdsBox[i] & 224) >> 5);
                }
                codec += "." + audioObjectType;
              }
              break;
            }
            case "hvc1":
            case "hev1": {
              var hvcCBox = findBox(sampleEntriesEnd, ["hvcC"])[0];
              var profileByte = hvcCBox[1];
              var profileSpace = ["", "A", "B", "C"][profileByte >> 6];
              var generalProfileIdc = profileByte & 31;
              var profileCompat = readUint32(hvcCBox, 2);
              var tierFlag = (profileByte & 32) >> 5 ? "H" : "L";
              var levelIDC = hvcCBox[12];
              var constraintIndicator = hvcCBox.subarray(6, 12);
              codec += "." + profileSpace + generalProfileIdc;
              codec += "." + profileCompat.toString(16).toUpperCase();
              codec += "." + tierFlag + levelIDC;
              var constraintString = "";
              for (var _i = constraintIndicator.length; _i--; ) {
                var _byte = constraintIndicator[_i];
                if (_byte || constraintString) {
                  var encodedByte = _byte.toString(16).toUpperCase();
                  constraintString = "." + encodedByte + constraintString;
                }
              }
              codec += constraintString;
              break;
            }
            case "dvh1":
            case "dvhe": {
              var dvcCBox = findBox(sampleEntriesEnd, ["dvcC"])[0];
              var profile = dvcCBox[2] >> 1 & 127;
              var level = dvcCBox[2] << 5 & 32 | dvcCBox[3] >> 3 & 31;
              codec += "." + addLeadingZero(profile) + "." + addLeadingZero(level);
              break;
            }
            case "vp09": {
              var vpcCBox = findBox(sampleEntriesEnd, ["vpcC"])[0];
              var _profile = vpcCBox[4];
              var _level = vpcCBox[5];
              var bitDepth = vpcCBox[6] >> 4 & 15;
              codec += "." + addLeadingZero(_profile) + "." + addLeadingZero(_level) + "." + addLeadingZero(bitDepth);
              break;
            }
            case "av01": {
              var av1CBox = findBox(sampleEntriesEnd, ["av1C"])[0];
              var _profile2 = av1CBox[1] >>> 5;
              var _level2 = av1CBox[1] & 31;
              var _tierFlag = av1CBox[2] >>> 7 ? "H" : "M";
              var highBitDepth = (av1CBox[2] & 64) >> 6;
              var twelveBit = (av1CBox[2] & 32) >> 5;
              var _bitDepth = _profile2 === 2 && highBitDepth ? twelveBit ? 12 : 10 : highBitDepth ? 10 : 8;
              var monochrome = (av1CBox[2] & 16) >> 4;
              var chromaSubsamplingX = (av1CBox[2] & 8) >> 3;
              var chromaSubsamplingY = (av1CBox[2] & 4) >> 2;
              var chromaSamplePosition = av1CBox[2] & 3;
              var colorPrimaries = 1;
              var transferCharacteristics = 1;
              var matrixCoefficients = 1;
              var videoFullRangeFlag = 0;
              codec += "." + _profile2 + "." + addLeadingZero(_level2) + _tierFlag + "." + addLeadingZero(_bitDepth) + "." + monochrome + "." + chromaSubsamplingX + chromaSubsamplingY + chromaSamplePosition + "." + addLeadingZero(colorPrimaries) + "." + addLeadingZero(transferCharacteristics) + "." + addLeadingZero(matrixCoefficients) + "." + videoFullRangeFlag;
              break;
            }
          }
          return {
            codec,
            encrypted
          };
        }
        function skipBERInteger(bytes, i) {
          var limit = i + 5;
          while (bytes[i++] & 128 && i < limit) {
          }
          return i;
        }
        function toHex(x) {
          return ("0" + x.toString(16).toUpperCase()).slice(-2);
        }
        function addLeadingZero(num) {
          return (num < 10 ? "0" : "") + num;
        }
        function patchEncyptionData(initSegment, decryptdata) {
          if (!initSegment || !decryptdata) {
            return initSegment;
          }
          var keyId = decryptdata.keyId;
          if (keyId && decryptdata.isCommonEncryption) {
            var traks = findBox(initSegment, ["moov", "trak"]);
            traks.forEach(function(trak) {
              var stsd = findBox(trak, ["mdia", "minf", "stbl", "stsd"])[0];
              var sampleEntries = stsd.subarray(8);
              var encBoxes = findBox(sampleEntries, ["enca"]);
              var isAudio = encBoxes.length > 0;
              if (!isAudio) {
                encBoxes = findBox(sampleEntries, ["encv"]);
              }
              encBoxes.forEach(function(enc) {
                var encBoxChildren = isAudio ? enc.subarray(28) : enc.subarray(78);
                var sinfBoxes = findBox(encBoxChildren, ["sinf"]);
                sinfBoxes.forEach(function(sinf) {
                  var tenc = parseSinf(sinf);
                  if (tenc) {
                    var tencKeyId = tenc.subarray(8, 24);
                    if (!tencKeyId.some(function(b) {
                      return b !== 0;
                    })) {
                      logger.log("[eme] Patching keyId in 'enc" + (isAudio ? "a" : "v") + ">sinf>>tenc' box: " + Hex.hexDump(tencKeyId) + " -> " + Hex.hexDump(keyId));
                      tenc.set(keyId, 8);
                    }
                  }
                });
              });
            });
          }
          return initSegment;
        }
        function parseSinf(sinf) {
          var schm = findBox(sinf, ["schm"])[0];
          if (schm) {
            var scheme = bin2str(schm.subarray(4, 8));
            if (scheme === "cbcs" || scheme === "cenc") {
              return findBox(sinf, ["schi", "tenc"])[0];
            }
          }
          return null;
        }
        function getStartDTS(initData, fmp4) {
          return findBox(fmp4, ["moof", "traf"]).reduce(function(result, traf) {
            var tfdt = findBox(traf, ["tfdt"])[0];
            var version = tfdt[0];
            var start = findBox(traf, ["tfhd"]).reduce(function(result2, tfhd) {
              var id = readUint32(tfhd, 4);
              var track = initData[id];
              if (track) {
                var baseTime = readUint32(tfdt, 4);
                if (version === 1) {
                  if (baseTime === UINT32_MAX$1) {
                    logger.warn("[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time");
                    return result2;
                  }
                  baseTime *= UINT32_MAX$1 + 1;
                  baseTime += readUint32(tfdt, 8);
                }
                var scale = track.timescale || 9e4;
                var startTime = baseTime / scale;
                if (isFiniteNumber(startTime) && (result2 === null || startTime < result2)) {
                  return startTime;
                }
              }
              return result2;
            }, null);
            if (start !== null && isFiniteNumber(start) && (result === null || start < result)) {
              return start;
            }
            return result;
          }, null);
        }
        function getDuration(data, initData) {
          var rawDuration = 0;
          var videoDuration = 0;
          var audioDuration = 0;
          var trafs = findBox(data, ["moof", "traf"]);
          for (var i = 0; i < trafs.length; i++) {
            var traf = trafs[i];
            var tfhd = findBox(traf, ["tfhd"])[0];
            var id = readUint32(tfhd, 4);
            var track = initData[id];
            if (!track) {
              continue;
            }
            var trackDefault = track.default;
            var tfhdFlags = readUint32(tfhd, 0) | (trackDefault == null ? void 0 : trackDefault.flags);
            var sampleDuration = trackDefault == null ? void 0 : trackDefault.duration;
            if (tfhdFlags & 8) {
              if (tfhdFlags & 2) {
                sampleDuration = readUint32(tfhd, 12);
              } else {
                sampleDuration = readUint32(tfhd, 8);
              }
            }
            var timescale = track.timescale || 9e4;
            var truns = findBox(traf, ["trun"]);
            for (var j = 0; j < truns.length; j++) {
              rawDuration = computeRawDurationFromSamples(truns[j]);
              if (!rawDuration && sampleDuration) {
                var sampleCount = readUint32(truns[j], 4);
                rawDuration = sampleDuration * sampleCount;
              }
              if (track.type === ElementaryStreamTypes.VIDEO) {
                videoDuration += rawDuration / timescale;
              } else if (track.type === ElementaryStreamTypes.AUDIO) {
                audioDuration += rawDuration / timescale;
              }
            }
          }
          if (videoDuration === 0 && audioDuration === 0) {
            var sidxMinStart = Infinity;
            var sidxMaxEnd = 0;
            var sidxDuration = 0;
            var sidxs = findBox(data, ["sidx"]);
            for (var _i2 = 0; _i2 < sidxs.length; _i2++) {
              var sidx = parseSegmentIndex(sidxs[_i2]);
              if (sidx != null && sidx.references) {
                sidxMinStart = Math.min(sidxMinStart, sidx.earliestPresentationTime / sidx.timescale);
                var subSegmentDuration = sidx.references.reduce(function(dur, ref) {
                  return dur + ref.info.duration || 0;
                }, 0);
                sidxMaxEnd = Math.max(sidxMaxEnd, subSegmentDuration + sidx.earliestPresentationTime / sidx.timescale);
                sidxDuration = sidxMaxEnd - sidxMinStart;
              }
            }
            if (sidxDuration && isFiniteNumber(sidxDuration)) {
              return sidxDuration;
            }
          }
          if (videoDuration) {
            return videoDuration;
          }
          return audioDuration;
        }
        function computeRawDurationFromSamples(trun) {
          var flags = readUint32(trun, 0);
          var offset = 8;
          if (flags & 1) {
            offset += 4;
          }
          if (flags & 4) {
            offset += 4;
          }
          var duration = 0;
          var sampleCount = readUint32(trun, 4);
          for (var i = 0; i < sampleCount; i++) {
            if (flags & 256) {
              var sampleDuration = readUint32(trun, offset);
              duration += sampleDuration;
              offset += 4;
            }
            if (flags & 512) {
              offset += 4;
            }
            if (flags & 1024) {
              offset += 4;
            }
            if (flags & 2048) {
              offset += 4;
            }
          }
          return duration;
        }
        function offsetStartDTS(initData, fmp4, timeOffset) {
          findBox(fmp4, ["moof", "traf"]).forEach(function(traf) {
            findBox(traf, ["tfhd"]).forEach(function(tfhd) {
              var id = readUint32(tfhd, 4);
              var track = initData[id];
              if (!track) {
                return;
              }
              var timescale = track.timescale || 9e4;
              findBox(traf, ["tfdt"]).forEach(function(tfdt) {
                var version = tfdt[0];
                var offset = timeOffset * timescale;
                if (offset) {
                  var baseMediaDecodeTime = readUint32(tfdt, 4);
                  if (version === 0) {
                    baseMediaDecodeTime -= offset;
                    baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
                    writeUint32(tfdt, 4, baseMediaDecodeTime);
                  } else {
                    baseMediaDecodeTime *= Math.pow(2, 32);
                    baseMediaDecodeTime += readUint32(tfdt, 8);
                    baseMediaDecodeTime -= offset;
                    baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
                    var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX$1 + 1));
                    var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX$1 + 1));
                    writeUint32(tfdt, 4, upper);
                    writeUint32(tfdt, 8, lower);
                  }
                }
              });
            });
          });
        }
        function segmentValidRange(data) {
          var segmentedRange = {
            valid: null,
            remainder: null
          };
          var moofs = findBox(data, ["moof"]);
          if (moofs.length < 2) {
            segmentedRange.remainder = data;
            return segmentedRange;
          }
          var last = moofs[moofs.length - 1];
          segmentedRange.valid = sliceUint8(data, 0, last.byteOffset - 8);
          segmentedRange.remainder = sliceUint8(data, last.byteOffset - 8);
          return segmentedRange;
        }
        function appendUint8Array(data1, data2) {
          var temp = new Uint8Array(data1.length + data2.length);
          temp.set(data1);
          temp.set(data2, data1.length);
          return temp;
        }
        function parseSamples(timeOffset, track) {
          var seiSamples = [];
          var videoData = track.samples;
          var timescale = track.timescale;
          var trackId = track.id;
          var isHEVCFlavor = false;
          var moofs = findBox(videoData, ["moof"]);
          moofs.map(function(moof) {
            var moofOffset = moof.byteOffset - 8;
            var trafs = findBox(moof, ["traf"]);
            trafs.map(function(traf) {
              var baseTime = findBox(traf, ["tfdt"]).map(function(tfdt) {
                var version = tfdt[0];
                var result = readUint32(tfdt, 4);
                if (version === 1) {
                  result *= Math.pow(2, 32);
                  result += readUint32(tfdt, 8);
                }
                return result / timescale;
              })[0];
              if (baseTime !== void 0) {
                timeOffset = baseTime;
              }
              return findBox(traf, ["tfhd"]).map(function(tfhd) {
                var id = readUint32(tfhd, 4);
                var tfhdFlags = readUint32(tfhd, 0) & 16777215;
                var baseDataOffsetPresent = (tfhdFlags & 1) !== 0;
                var sampleDescriptionIndexPresent = (tfhdFlags & 2) !== 0;
                var defaultSampleDurationPresent = (tfhdFlags & 8) !== 0;
                var defaultSampleDuration = 0;
                var defaultSampleSizePresent = (tfhdFlags & 16) !== 0;
                var defaultSampleSize = 0;
                var defaultSampleFlagsPresent = (tfhdFlags & 32) !== 0;
                var tfhdOffset = 8;
                if (id === trackId) {
                  if (baseDataOffsetPresent) {
                    tfhdOffset += 8;
                  }
                  if (sampleDescriptionIndexPresent) {
                    tfhdOffset += 4;
                  }
                  if (defaultSampleDurationPresent) {
                    defaultSampleDuration = readUint32(tfhd, tfhdOffset);
                    tfhdOffset += 4;
                  }
                  if (defaultSampleSizePresent) {
                    defaultSampleSize = readUint32(tfhd, tfhdOffset);
                    tfhdOffset += 4;
                  }
                  if (defaultSampleFlagsPresent) {
                    tfhdOffset += 4;
                  }
                  if (track.type === "video") {
                    isHEVCFlavor = isHEVC(track.codec);
                  }
                  findBox(traf, ["trun"]).map(function(trun) {
                    var version = trun[0];
                    var flags = readUint32(trun, 0) & 16777215;
                    var dataOffsetPresent = (flags & 1) !== 0;
                    var dataOffset = 0;
                    var firstSampleFlagsPresent = (flags & 4) !== 0;
                    var sampleDurationPresent = (flags & 256) !== 0;
                    var sampleDuration = 0;
                    var sampleSizePresent = (flags & 512) !== 0;
                    var sampleSize = 0;
                    var sampleFlagsPresent = (flags & 1024) !== 0;
                    var sampleCompositionOffsetsPresent = (flags & 2048) !== 0;
                    var compositionOffset = 0;
                    var sampleCount = readUint32(trun, 4);
                    var trunOffset = 8;
                    if (dataOffsetPresent) {
                      dataOffset = readUint32(trun, trunOffset);
                      trunOffset += 4;
                    }
                    if (firstSampleFlagsPresent) {
                      trunOffset += 4;
                    }
                    var sampleOffset = dataOffset + moofOffset;
                    for (var ix = 0; ix < sampleCount; ix++) {
                      if (sampleDurationPresent) {
                        sampleDuration = readUint32(trun, trunOffset);
                        trunOffset += 4;
                      } else {
                        sampleDuration = defaultSampleDuration;
                      }
                      if (sampleSizePresent) {
                        sampleSize = readUint32(trun, trunOffset);
                        trunOffset += 4;
                      } else {
                        sampleSize = defaultSampleSize;
                      }
                      if (sampleFlagsPresent) {
                        trunOffset += 4;
                      }
                      if (sampleCompositionOffsetsPresent) {
                        if (version === 0) {
                          compositionOffset = readUint32(trun, trunOffset);
                        } else {
                          compositionOffset = readSint32(trun, trunOffset);
                        }
                        trunOffset += 4;
                      }
                      if (track.type === ElementaryStreamTypes.VIDEO) {
                        var naluTotalSize = 0;
                        while (naluTotalSize < sampleSize) {
                          var naluSize = readUint32(videoData, sampleOffset);
                          sampleOffset += 4;
                          if (isSEIMessage(isHEVCFlavor, videoData[sampleOffset])) {
                            var data = videoData.subarray(sampleOffset, sampleOffset + naluSize);
                            parseSEIMessageFromNALu(data, isHEVCFlavor ? 2 : 1, timeOffset + compositionOffset / timescale, seiSamples);
                          }
                          sampleOffset += naluSize;
                          naluTotalSize += naluSize + 4;
                        }
                      }
                      timeOffset += sampleDuration / timescale;
                    }
                  });
                }
              });
            });
          });
          return seiSamples;
        }
        function isHEVC(codec) {
          if (!codec) {
            return false;
          }
          var delimit = codec.indexOf(".");
          var baseCodec = delimit < 0 ? codec : codec.substring(0, delimit);
          return baseCodec === "hvc1" || baseCodec === "hev1" || // Dolby Vision
          baseCodec === "dvh1" || baseCodec === "dvhe";
        }
        function isSEIMessage(isHEVCFlavor, naluHeader) {
          if (isHEVCFlavor) {
            var naluType = naluHeader >> 1 & 63;
            return naluType === 39 || naluType === 40;
          } else {
            var _naluType = naluHeader & 31;
            return _naluType === 6;
          }
        }
        function parseSEIMessageFromNALu(unescapedData, headerSize, pts, samples) {
          var data = discardEPB(unescapedData);
          var seiPtr = 0;
          seiPtr += headerSize;
          var payloadType = 0;
          var payloadSize = 0;
          var b = 0;
          while (seiPtr < data.length) {
            payloadType = 0;
            do {
              if (seiPtr >= data.length) {
                break;
              }
              b = data[seiPtr++];
              payloadType += b;
            } while (b === 255);
            payloadSize = 0;
            do {
              if (seiPtr >= data.length) {
                break;
              }
              b = data[seiPtr++];
              payloadSize += b;
            } while (b === 255);
            var leftOver = data.length - seiPtr;
            var payPtr = seiPtr;
            if (payloadSize < leftOver) {
              seiPtr += payloadSize;
            } else if (payloadSize > leftOver) {
              logger.error("Malformed SEI payload. " + payloadSize + " is too small, only " + leftOver + " bytes left to parse.");
              break;
            }
            if (payloadType === 4) {
              var countryCode = data[payPtr++];
              if (countryCode === 181) {
                var providerCode = readUint16(data, payPtr);
                payPtr += 2;
                if (providerCode === 49) {
                  var userStructure = readUint32(data, payPtr);
                  payPtr += 4;
                  if (userStructure === 1195456820) {
                    var userDataType = data[payPtr++];
                    if (userDataType === 3) {
                      var firstByte = data[payPtr++];
                      var totalCCs = 31 & firstByte;
                      var enabled = 64 & firstByte;
                      var totalBytes = enabled ? 2 + totalCCs * 3 : 0;
                      var byteArray = new Uint8Array(totalBytes);
                      if (enabled) {
                        byteArray[0] = firstByte;
                        for (var i = 1; i < totalBytes; i++) {
                          byteArray[i] = data[payPtr++];
                        }
                      }
                      samples.push({
                        type: userDataType,
                        payloadType,
                        pts,
                        bytes: byteArray
                      });
                    }
                  }
                }
              }
            } else if (payloadType === 5) {
              if (payloadSize > 16) {
                var uuidStrArray = [];
                for (var _i3 = 0; _i3 < 16; _i3++) {
                  var _b = data[payPtr++].toString(16);
                  uuidStrArray.push(_b.length == 1 ? "0" + _b : _b);
                  if (_i3 === 3 || _i3 === 5 || _i3 === 7 || _i3 === 9) {
                    uuidStrArray.push("-");
                  }
                }
                var length = payloadSize - 16;
                var userDataBytes = new Uint8Array(length);
                for (var _i4 = 0; _i4 < length; _i4++) {
                  userDataBytes[_i4] = data[payPtr++];
                }
                samples.push({
                  payloadType,
                  pts,
                  uuid: uuidStrArray.join(""),
                  userData: utf8ArrayToStr(userDataBytes),
                  userDataBytes
                });
              }
            }
          }
        }
        function discardEPB(data) {
          var length = data.byteLength;
          var EPBPositions = [];
          var i = 1;
          while (i < length - 2) {
            if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 3) {
              EPBPositions.push(i + 2);
              i += 2;
            } else {
              i++;
            }
          }
          if (EPBPositions.length === 0) {
            return data;
          }
          var newLength = length - EPBPositions.length;
          var newData = new Uint8Array(newLength);
          var sourceIndex = 0;
          for (i = 0; i < newLength; sourceIndex++, i++) {
            if (sourceIndex === EPBPositions[0]) {
              sourceIndex++;
              EPBPositions.shift();
            }
            newData[i] = data[sourceIndex];
          }
          return newData;
        }
        function parseEmsg(data) {
          var version = data[0];
          var schemeIdUri = "";
          var value = "";
          var timeScale = 0;
          var presentationTimeDelta = 0;
          var presentationTime = 0;
          var eventDuration = 0;
          var id = 0;
          var offset = 0;
          if (version === 0) {
            while (bin2str(data.subarray(offset, offset + 1)) !== "\0") {
              schemeIdUri += bin2str(data.subarray(offset, offset + 1));
              offset += 1;
            }
            schemeIdUri += bin2str(data.subarray(offset, offset + 1));
            offset += 1;
            while (bin2str(data.subarray(offset, offset + 1)) !== "\0") {
              value += bin2str(data.subarray(offset, offset + 1));
              offset += 1;
            }
            value += bin2str(data.subarray(offset, offset + 1));
            offset += 1;
            timeScale = readUint32(data, 12);
            presentationTimeDelta = readUint32(data, 16);
            eventDuration = readUint32(data, 20);
            id = readUint32(data, 24);
            offset = 28;
          } else if (version === 1) {
            offset += 4;
            timeScale = readUint32(data, offset);
            offset += 4;
            var leftPresentationTime = readUint32(data, offset);
            offset += 4;
            var rightPresentationTime = readUint32(data, offset);
            offset += 4;
            presentationTime = Math.pow(2, 32) * leftPresentationTime + rightPresentationTime;
            if (!isSafeInteger(presentationTime)) {
              presentationTime = Number.MAX_SAFE_INTEGER;
              logger.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box");
            }
            eventDuration = readUint32(data, offset);
            offset += 4;
            id = readUint32(data, offset);
            offset += 4;
            while (bin2str(data.subarray(offset, offset + 1)) !== "\0") {
              schemeIdUri += bin2str(data.subarray(offset, offset + 1));
              offset += 1;
            }
            schemeIdUri += bin2str(data.subarray(offset, offset + 1));
            offset += 1;
            while (bin2str(data.subarray(offset, offset + 1)) !== "\0") {
              value += bin2str(data.subarray(offset, offset + 1));
              offset += 1;
            }
            value += bin2str(data.subarray(offset, offset + 1));
            offset += 1;
          }
          var payload = data.subarray(offset, data.byteLength);
          return {
            schemeIdUri,
            value,
            timeScale,
            presentationTime,
            presentationTimeDelta,
            eventDuration,
            id,
            payload
          };
        }
        var LevelKey = function() {
          LevelKey2.clearKeyUriToKeyIdMap = function clearKeyUriToKeyIdMap() {
          };
          function LevelKey2(method, uri, format, formatversions, iv) {
            if (formatversions === void 0) {
              formatversions = [1];
            }
            if (iv === void 0) {
              iv = null;
            }
            this.uri = void 0;
            this.method = void 0;
            this.keyFormat = void 0;
            this.keyFormatVersions = void 0;
            this.encrypted = void 0;
            this.isCommonEncryption = void 0;
            this.iv = null;
            this.key = null;
            this.keyId = null;
            this.pssh = null;
            this.method = method;
            this.uri = uri;
            this.keyFormat = format;
            this.keyFormatVersions = formatversions;
            this.iv = iv;
            this.encrypted = method ? method !== "NONE" : false;
            this.isCommonEncryption = this.encrypted && method !== "AES-128";
          }
          var _proto = LevelKey2.prototype;
          _proto.isSupported = function isSupported2() {
            if (this.method) {
              if (this.method === "AES-128" || this.method === "NONE") {
                return true;
              }
              if (this.keyFormat === "identity") {
                return this.method === "SAMPLE-AES";
              }
            }
            return false;
          };
          _proto.getDecryptData = function getDecryptData(sn) {
            if (!this.encrypted || !this.uri) {
              return null;
            }
            if (this.method === "AES-128" && this.uri && !this.iv) {
              if (typeof sn !== "number") {
                if (this.method === "AES-128" && !this.iv) {
                  logger.warn('missing IV for initialization segment with method="' + this.method + '" - compliance issue');
                }
                sn = 0;
              }
              var iv = createInitializationVector(sn);
              var decryptdata = new LevelKey2(this.method, this.uri, "identity", this.keyFormatVersions, iv);
              return decryptdata;
            }
            {
              return this;
            }
          };
          return LevelKey2;
        }();
        function createInitializationVector(segmentNumber) {
          var uint8View = new Uint8Array(16);
          for (var i = 12; i < 16; i++) {
            uint8View[i] = segmentNumber >> 8 * (15 - i) & 255;
          }
          return uint8View;
        }
        function getMediaSource(preferManagedMediaSource) {
          if (preferManagedMediaSource === void 0) {
            preferManagedMediaSource = true;
          }
          if (typeof self === "undefined") return void 0;
          var mms = (preferManagedMediaSource || !self.MediaSource) && self.ManagedMediaSource;
          return mms || self.MediaSource || self.WebKitMediaSource;
        }
        function isManagedMediaSource(source) {
          return typeof self !== "undefined" && source === self.ManagedMediaSource;
        }
        var sampleEntryCodesISO = {
          audio: {
            a3ds: 1,
            "ac-3": 0.95,
            "ac-4": 1,
            alac: 0.9,
            alaw: 1,
            dra1: 1,
            "dts+": 1,
            "dts-": 1,
            dtsc: 1,
            dtse: 1,
            dtsh: 1,
            "ec-3": 0.9,
            enca: 1,
            fLaC: 0.9,
            // MP4-RA listed codec entry for FLAC
            flac: 0.9,
            // legacy browser codec name for FLAC
            FLAC: 0.9,
            // some manifests may list "FLAC" with Apple's tools
            g719: 1,
            g726: 1,
            m4ae: 1,
            mha1: 1,
            mha2: 1,
            mhm1: 1,
            mhm2: 1,
            mlpa: 1,
            mp4a: 1,
            "raw ": 1,
            Opus: 1,
            opus: 1,
            // browsers expect this to be lowercase despite MP4RA says 'Opus'
            samr: 1,
            sawb: 1,
            sawp: 1,
            sevc: 1,
            sqcp: 1,
            ssmv: 1,
            twos: 1,
            ulaw: 1
          },
          video: {
            avc1: 1,
            avc2: 1,
            avc3: 1,
            avc4: 1,
            avcp: 1,
            av01: 0.8,
            drac: 1,
            dva1: 1,
            dvav: 1,
            dvh1: 0.7,
            dvhe: 0.7,
            encv: 1,
            hev1: 0.75,
            hvc1: 0.75,
            mjp2: 1,
            mp4v: 1,
            mvc1: 1,
            mvc2: 1,
            mvc3: 1,
            mvc4: 1,
            resv: 1,
            rv60: 1,
            s263: 1,
            svc1: 1,
            svc2: 1,
            "vc-1": 1,
            vp08: 1,
            vp09: 0.9
          },
          text: {
            stpp: 1,
            wvtt: 1
          }
        };
        function isCodecType(codec, type) {
          var typeCodes = sampleEntryCodesISO[type];
          return !!typeCodes && !!typeCodes[codec.slice(0, 4)];
        }
        function areCodecsMediaSourceSupported(codecs, type, preferManagedMediaSource) {
          if (preferManagedMediaSource === void 0) {
            preferManagedMediaSource = true;
          }
          return !codecs.split(",").some(function(codec) {
            return !isCodecMediaSourceSupported(codec, type, preferManagedMediaSource);
          });
        }
        function isCodecMediaSourceSupported(codec, type, preferManagedMediaSource) {
          var _MediaSource$isTypeSu;
          if (preferManagedMediaSource === void 0) {
            preferManagedMediaSource = true;
          }
          var MediaSource = getMediaSource(preferManagedMediaSource);
          return (_MediaSource$isTypeSu = MediaSource == null ? void 0 : MediaSource.isTypeSupported(mimeTypeForCodec(codec, type))) != null ? _MediaSource$isTypeSu : false;
        }
        function mimeTypeForCodec(codec, type) {
          return type + '/mp4;codecs="' + codec + '"';
        }
        function videoCodecPreferenceValue(videoCodec) {
          if (videoCodec) {
            var fourCC = videoCodec.substring(0, 4);
            return sampleEntryCodesISO.video[fourCC];
          }
          return 2;
        }
        function codecsSetSelectionPreferenceValue(codecSet) {
          return codecSet.split(",").reduce(function(num, fourCC) {
            var preferenceValue = sampleEntryCodesISO.video[fourCC];
            if (preferenceValue) {
              return (preferenceValue * 2 + num) / (num ? 3 : 2);
            }
            return (sampleEntryCodesISO.audio[fourCC] + num) / (num ? 2 : 1);
          }, 0);
        }
        var CODEC_COMPATIBLE_NAMES = {};
        function getCodecCompatibleNameLower(lowerCaseCodec, preferManagedMediaSource) {
          if (preferManagedMediaSource === void 0) {
            preferManagedMediaSource = true;
          }
          if (CODEC_COMPATIBLE_NAMES[lowerCaseCodec]) {
            return CODEC_COMPATIBLE_NAMES[lowerCaseCodec];
          }
          var codecsToCheck = {
            flac: ["flac", "fLaC", "FLAC"],
            opus: ["opus", "Opus"]
          }[lowerCaseCodec];
          for (var i = 0; i < codecsToCheck.length; i++) {
            if (isCodecMediaSourceSupported(codecsToCheck[i], "audio", preferManagedMediaSource)) {
              CODEC_COMPATIBLE_NAMES[lowerCaseCodec] = codecsToCheck[i];
              return codecsToCheck[i];
            }
          }
          return lowerCaseCodec;
        }
        var AUDIO_CODEC_REGEXP = /flac|opus/i;
        function getCodecCompatibleName(codec, preferManagedMediaSource) {
          if (preferManagedMediaSource === void 0) {
            preferManagedMediaSource = true;
          }
          return codec.replace(AUDIO_CODEC_REGEXP, function(m) {
            return getCodecCompatibleNameLower(m.toLowerCase(), preferManagedMediaSource);
          });
        }
        function pickMostCompleteCodecName(parsedCodec, levelCodec) {
          if (parsedCodec && parsedCodec !== "mp4a") {
            return parsedCodec;
          }
          return levelCodec ? levelCodec.split(",")[0] : levelCodec;
        }
        function convertAVC1ToAVCOTI(codec) {
          var codecs = codec.split(",");
          for (var i = 0; i < codecs.length; i++) {
            var avcdata = codecs[i].split(".");
            if (avcdata.length > 2) {
              var result = avcdata.shift() + ".";
              result += parseInt(avcdata.shift()).toString(16);
              result += ("000" + parseInt(avcdata.shift()).toString(16)).slice(-4);
              codecs[i] = result;
            }
          }
          return codecs.join(",");
        }
        var MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g;
        var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;
        var IS_MEDIA_PLAYLIST = /^#EXT(?:INF|-X-TARGETDURATION):/m;
        var LEVEL_PLAYLIST_REGEX_FAST = new RegExp([
          /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
          // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title
          /(?!#) *(\S[^\r\n]*)/.source,
          // segment URI, group 3 => the URI (note newline is not eaten)
          /#EXT-X-BYTERANGE:*(.+)/.source,
          // next segment's byterange, group 4 => range spec (x@y)
          /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
          // next segment's program date/time group 5 => the datetime spec
          /#.*/.source
          // All other non-segment oriented tags will match with all groups empty
        ].join("|"), "g");
        var LEVEL_PLAYLIST_REGEX_SLOW = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|"));
        var M3U8Parser = function() {
          function M3U8Parser2() {
          }
          M3U8Parser2.findGroup = function findGroup(groups, mediaGroupId) {
            for (var i = 0; i < groups.length; i++) {
              var group = groups[i];
              if (group.id === mediaGroupId) {
                return group;
              }
            }
          };
          M3U8Parser2.resolve = function resolve(url, baseUrl) {
            return urlToolkitExports.buildAbsoluteURL(baseUrl, url, {
              alwaysNormalize: true
            });
          };
          M3U8Parser2.isMediaPlaylist = function isMediaPlaylist(str) {
            return IS_MEDIA_PLAYLIST.test(str);
          };
          M3U8Parser2.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {
            var hasVariableRefs = false;
            var parsed = {
              contentSteering: null,
              levels: [],
              playlistParsingError: null,
              sessionData: null,
              sessionKeys: null,
              startTimeOffset: null,
              variableList: null,
              hasVariableRefs
            };
            var levelsWithKnownCodecs = [];
            MASTER_PLAYLIST_REGEX.lastIndex = 0;
            var result;
            while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {
              if (result[1]) {
                var _level$unknownCodecs;
                var attrs = new AttrList(result[1]);
                var uri = result[2];
                var level = {
                  attrs,
                  bitrate: attrs.decimalInteger("BANDWIDTH") || attrs.decimalInteger("AVERAGE-BANDWIDTH"),
                  name: attrs.NAME,
                  url: M3U8Parser2.resolve(uri, baseurl)
                };
                var resolution = attrs.decimalResolution("RESOLUTION");
                if (resolution) {
                  level.width = resolution.width;
                  level.height = resolution.height;
                }
                setCodecs(attrs.CODECS, level);
                if (!((_level$unknownCodecs = level.unknownCodecs) != null && _level$unknownCodecs.length)) {
                  levelsWithKnownCodecs.push(level);
                }
                parsed.levels.push(level);
              } else if (result[3]) {
                var tag = result[3];
                var attributes = result[4];
                switch (tag) {
                  case "SESSION-DATA": {
                    var sessionAttrs = new AttrList(attributes);
                    var dataId = sessionAttrs["DATA-ID"];
                    if (dataId) {
                      if (parsed.sessionData === null) {
                        parsed.sessionData = {};
                      }
                      parsed.sessionData[dataId] = sessionAttrs;
                    }
                    break;
                  }
                  case "SESSION-KEY": {
                    var sessionKey = parseKey(attributes, baseurl);
                    if (sessionKey.encrypted && sessionKey.isSupported()) {
                      if (parsed.sessionKeys === null) {
                        parsed.sessionKeys = [];
                      }
                      parsed.sessionKeys.push(sessionKey);
                    } else {
                      logger.warn('[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' + attributes + '"');
                    }
                    break;
                  }
                  case "DEFINE": {
                    break;
                  }
                  case "CONTENT-STEERING": {
                    var contentSteeringAttributes = new AttrList(attributes);
                    parsed.contentSteering = {
                      uri: M3U8Parser2.resolve(contentSteeringAttributes["SERVER-URI"], baseurl),
                      pathwayId: contentSteeringAttributes["PATHWAY-ID"] || "."
                    };
                    break;
                  }
                  case "START": {
                    parsed.startTimeOffset = parseStartTimeOffset(attributes);
                    break;
                  }
                }
              }
            }
            var stripUnknownCodecLevels = levelsWithKnownCodecs.length > 0 && levelsWithKnownCodecs.length < parsed.levels.length;
            parsed.levels = stripUnknownCodecLevels ? levelsWithKnownCodecs : parsed.levels;
            if (parsed.levels.length === 0) {
              parsed.playlistParsingError = new Error("no levels found in manifest");
            }
            return parsed;
          };
          M3U8Parser2.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, parsed) {
            var result;
            var results = {};
            var levels = parsed.levels;
            var groupsByType = {
              AUDIO: levels.map(function(level) {
                return {
                  id: level.attrs.AUDIO,
                  audioCodec: level.audioCodec
                };
              }),
              SUBTITLES: levels.map(function(level) {
                return {
                  id: level.attrs.SUBTITLES,
                  textCodec: level.textCodec
                };
              }),
              "CLOSED-CAPTIONS": []
            };
            var id = 0;
            MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;
            while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {
              var attrs = new AttrList(result[1]);
              var type = attrs.TYPE;
              if (type) {
                var groups = groupsByType[type];
                var medias = results[type] || [];
                results[type] = medias;
                var lang = attrs.LANGUAGE;
                var assocLang = attrs["ASSOC-LANGUAGE"];
                var channels = attrs.CHANNELS;
                var characteristics = attrs.CHARACTERISTICS;
                var instreamId = attrs["INSTREAM-ID"];
                var media = {
                  attrs,
                  bitrate: 0,
                  id: id++,
                  groupId: attrs["GROUP-ID"] || "",
                  name: attrs.NAME || lang || "",
                  type,
                  default: attrs.bool("DEFAULT"),
                  autoselect: attrs.bool("AUTOSELECT"),
                  forced: attrs.bool("FORCED"),
                  lang,
                  url: attrs.URI ? M3U8Parser2.resolve(attrs.URI, baseurl) : ""
                };
                if (assocLang) {
                  media.assocLang = assocLang;
                }
                if (channels) {
                  media.channels = channels;
                }
                if (characteristics) {
                  media.characteristics = characteristics;
                }
                if (instreamId) {
                  media.instreamId = instreamId;
                }
                if (groups != null && groups.length) {
                  var groupCodec = M3U8Parser2.findGroup(groups, media.groupId) || groups[0];
                  assignCodec(media, groupCodec, "audioCodec");
                  assignCodec(media, groupCodec, "textCodec");
                }
                medias.push(media);
              }
            }
            return results;
          };
          M3U8Parser2.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type, levelUrlId, multivariantVariableList) {
            var level = new LevelDetails(baseurl);
            var fragments = level.fragments;
            var currentInitSegment = null;
            var currentSN = 0;
            var currentPart = 0;
            var totalduration = 0;
            var discontinuityCounter = 0;
            var prevFrag = null;
            var frag = new Fragment(type, baseurl);
            var result;
            var i;
            var levelkeys;
            var firstPdtIndex = -1;
            var createNextFrag = false;
            var nextByteRange = null;
            LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;
            level.m3u8 = string;
            level.hasVariableRefs = false;
            while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {
              if (createNextFrag) {
                createNextFrag = false;
                frag = new Fragment(type, baseurl);
                frag.start = totalduration;
                frag.sn = currentSN;
                frag.cc = discontinuityCounter;
                frag.level = id;
                if (currentInitSegment) {
                  frag.initSegment = currentInitSegment;
                  frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;
                  currentInitSegment.rawProgramDateTime = null;
                  if (nextByteRange) {
                    frag.setByteRange(nextByteRange);
                    nextByteRange = null;
                  }
                }
              }
              var duration = result[1];
              if (duration) {
                frag.duration = parseFloat(duration);
                var title = (" " + result[2]).slice(1);
                frag.title = title || null;
                frag.tagList.push(title ? ["INF", duration, title] : ["INF", duration]);
              } else if (result[3]) {
                if (isFiniteNumber(frag.duration)) {
                  frag.start = totalduration;
                  if (levelkeys) {
                    setFragLevelKeys(frag, levelkeys, level);
                  }
                  frag.sn = currentSN;
                  frag.level = id;
                  frag.cc = discontinuityCounter;
                  fragments.push(frag);
                  var uri = (" " + result[3]).slice(1);
                  frag.relurl = uri;
                  assignProgramDateTime(frag, prevFrag);
                  prevFrag = frag;
                  totalduration += frag.duration;
                  currentSN++;
                  currentPart = 0;
                  createNextFrag = true;
                }
              } else if (result[4]) {
                var data = (" " + result[4]).slice(1);
                if (prevFrag) {
                  frag.setByteRange(data, prevFrag);
                } else {
                  frag.setByteRange(data);
                }
              } else if (result[5]) {
                frag.rawProgramDateTime = (" " + result[5]).slice(1);
                frag.tagList.push(["PROGRAM-DATE-TIME", frag.rawProgramDateTime]);
                if (firstPdtIndex === -1) {
                  firstPdtIndex = fragments.length;
                }
              } else {
                result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);
                if (!result) {
                  logger.warn("No matches on slow regex match for level playlist!");
                  continue;
                }
                for (i = 1; i < result.length; i++) {
                  if (typeof result[i] !== "undefined") {
                    break;
                  }
                }
                var tag = (" " + result[i]).slice(1);
                var value1 = (" " + result[i + 1]).slice(1);
                var value2 = result[i + 2] ? (" " + result[i + 2]).slice(1) : "";
                switch (tag) {
                  case "PLAYLIST-TYPE":
                    level.type = value1.toUpperCase();
                    break;
                  case "MEDIA-SEQUENCE":
                    currentSN = level.startSN = parseInt(value1);
                    break;
                  case "SKIP": {
                    var skipAttrs = new AttrList(value1);
                    var skippedSegments = skipAttrs.decimalInteger("SKIPPED-SEGMENTS");
                    if (isFiniteNumber(skippedSegments)) {
                      level.skippedSegments = skippedSegments;
                      for (var _i = skippedSegments; _i--; ) {
                        fragments.unshift(null);
                      }
                      currentSN += skippedSegments;
                    }
                    var recentlyRemovedDateranges = skipAttrs.enumeratedString("RECENTLY-REMOVED-DATERANGES");
                    if (recentlyRemovedDateranges) {
                      level.recentlyRemovedDateranges = recentlyRemovedDateranges.split("	");
                    }
                    break;
                  }
                  case "TARGETDURATION":
                    level.targetduration = Math.max(parseInt(value1), 1);
                    break;
                  case "VERSION":
                    level.version = parseInt(value1);
                    break;
                  case "INDEPENDENT-SEGMENTS":
                  case "EXTM3U":
                    break;
                  case "ENDLIST":
                    level.live = false;
                    break;
                  case "#":
                    if (value1 || value2) {
                      frag.tagList.push(value2 ? [value1, value2] : [value1]);
                    }
                    break;
                  case "DISCONTINUITY":
                    discontinuityCounter++;
                    frag.tagList.push(["DIS"]);
                    break;
                  case "GAP":
                    frag.gap = true;
                    frag.tagList.push([tag]);
                    break;
                  case "BITRATE":
                    frag.tagList.push([tag, value1]);
                    break;
                  case "DATERANGE": {
                    var dateRangeAttr = new AttrList(value1);
                    var dateRange = new DateRange(dateRangeAttr, level.dateRanges[dateRangeAttr.ID]);
                    if (dateRange.isValid || level.skippedSegments) {
                      level.dateRanges[dateRange.id] = dateRange;
                    } else {
                      logger.warn('Ignoring invalid DATERANGE tag: "' + value1 + '"');
                    }
                    frag.tagList.push(["EXT-X-DATERANGE", value1]);
                    break;
                  }
                  case "DEFINE": {
                    break;
                  }
                  case "DISCONTINUITY-SEQUENCE":
                    discontinuityCounter = parseInt(value1);
                    break;
                  case "KEY": {
                    var levelKey = parseKey(value1, baseurl);
                    if (levelKey.isSupported()) {
                      if (levelKey.method === "NONE") {
                        levelkeys = void 0;
                        break;
                      }
                      if (!levelkeys) {
                        levelkeys = {};
                      }
                      if (levelkeys[levelKey.keyFormat]) {
                        levelkeys = _extends({}, levelkeys);
                      }
                      levelkeys[levelKey.keyFormat] = levelKey;
                    } else {
                      logger.warn('[Keys] Ignoring invalid EXT-X-KEY tag: "' + value1 + '"');
                    }
                    break;
                  }
                  case "START":
                    level.startTimeOffset = parseStartTimeOffset(value1);
                    break;
                  case "MAP": {
                    var mapAttrs = new AttrList(value1);
                    if (frag.duration) {
                      var init = new Fragment(type, baseurl);
                      setInitSegment(init, mapAttrs, id, levelkeys);
                      currentInitSegment = init;
                      frag.initSegment = currentInitSegment;
                      if (currentInitSegment.rawProgramDateTime && !frag.rawProgramDateTime) {
                        frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;
                      }
                    } else {
                      var end = frag.byteRangeEndOffset;
                      if (end) {
                        var start = frag.byteRangeStartOffset;
                        nextByteRange = end - start + "@" + start;
                      } else {
                        nextByteRange = null;
                      }
                      setInitSegment(frag, mapAttrs, id, levelkeys);
                      currentInitSegment = frag;
                      createNextFrag = true;
                    }
                    break;
                  }
                  case "SERVER-CONTROL": {
                    var serverControlAttrs = new AttrList(value1);
                    level.canBlockReload = serverControlAttrs.bool("CAN-BLOCK-RELOAD");
                    level.canSkipUntil = serverControlAttrs.optionalFloat("CAN-SKIP-UNTIL", 0);
                    level.canSkipDateRanges = level.canSkipUntil > 0 && serverControlAttrs.bool("CAN-SKIP-DATERANGES");
                    level.partHoldBack = serverControlAttrs.optionalFloat("PART-HOLD-BACK", 0);
                    level.holdBack = serverControlAttrs.optionalFloat("HOLD-BACK", 0);
                    break;
                  }
                  case "PART-INF": {
                    var partInfAttrs = new AttrList(value1);
                    level.partTarget = partInfAttrs.decimalFloatingPoint("PART-TARGET");
                    break;
                  }
                  case "PART": {
                    var partList = level.partList;
                    if (!partList) {
                      partList = level.partList = [];
                    }
                    var previousFragmentPart = currentPart > 0 ? partList[partList.length - 1] : void 0;
                    var index = currentPart++;
                    var partAttrs = new AttrList(value1);
                    var part = new Part(partAttrs, frag, baseurl, index, previousFragmentPart);
                    partList.push(part);
                    frag.duration += part.duration;
                    break;
                  }
                  case "PRELOAD-HINT": {
                    var preloadHintAttrs = new AttrList(value1);
                    level.preloadHint = preloadHintAttrs;
                    break;
                  }
                  case "RENDITION-REPORT": {
                    var renditionReportAttrs = new AttrList(value1);
                    level.renditionReports = level.renditionReports || [];
                    level.renditionReports.push(renditionReportAttrs);
                    break;
                  }
                  default:
                    logger.warn("line parsed but not handled: " + result);
                    break;
                }
              }
            }
            if (prevFrag && !prevFrag.relurl) {
              fragments.pop();
              totalduration -= prevFrag.duration;
              if (level.partList) {
                level.fragmentHint = prevFrag;
              }
            } else if (level.partList) {
              assignProgramDateTime(frag, prevFrag);
              frag.cc = discontinuityCounter;
              level.fragmentHint = frag;
              if (levelkeys) {
                setFragLevelKeys(frag, levelkeys, level);
              }
            }
            var fragmentLength = fragments.length;
            var firstFragment = fragments[0];
            var lastFragment = fragments[fragmentLength - 1];
            totalduration += level.skippedSegments * level.targetduration;
            if (totalduration > 0 && fragmentLength && lastFragment) {
              level.averagetargetduration = totalduration / fragmentLength;
              var lastSn = lastFragment.sn;
              level.endSN = lastSn !== "initSegment" ? lastSn : 0;
              if (!level.live) {
                lastFragment.endList = true;
              }
              if (firstFragment) {
                level.startCC = firstFragment.cc;
              }
            } else {
              level.endSN = 0;
              level.startCC = 0;
            }
            if (level.fragmentHint) {
              totalduration += level.fragmentHint.duration;
            }
            level.totalduration = totalduration;
            level.endCC = discontinuityCounter;
            if (firstPdtIndex > 0) {
              backfillProgramDateTimes(fragments, firstPdtIndex);
            }
            return level;
          };
          return M3U8Parser2;
        }();
        function parseKey(keyTagAttributes, baseurl, parsed) {
          var _keyAttrs$METHOD, _keyAttrs$KEYFORMAT;
          var keyAttrs = new AttrList(keyTagAttributes);
          var decryptmethod = (_keyAttrs$METHOD = keyAttrs.METHOD) != null ? _keyAttrs$METHOD : "";
          var decrypturi = keyAttrs.URI;
          var decryptiv = keyAttrs.hexadecimalInteger("IV");
          var decryptkeyformatversions = keyAttrs.KEYFORMATVERSIONS;
          var decryptkeyformat = (_keyAttrs$KEYFORMAT = keyAttrs.KEYFORMAT) != null ? _keyAttrs$KEYFORMAT : "identity";
          if (decrypturi && keyAttrs.IV && !decryptiv) {
            logger.error("Invalid IV: " + keyAttrs.IV);
          }
          var resolvedUri = decrypturi ? M3U8Parser.resolve(decrypturi, baseurl) : "";
          var keyFormatVersions = (decryptkeyformatversions ? decryptkeyformatversions : "1").split("/").map(Number).filter(Number.isFinite);
          return new LevelKey(decryptmethod, resolvedUri, decryptkeyformat, keyFormatVersions, decryptiv);
        }
        function parseStartTimeOffset(startAttributes) {
          var startAttrs = new AttrList(startAttributes);
          var startTimeOffset = startAttrs.decimalFloatingPoint("TIME-OFFSET");
          if (isFiniteNumber(startTimeOffset)) {
            return startTimeOffset;
          }
          return null;
        }
        function setCodecs(codecsAttributeValue, level) {
          var codecs = (codecsAttributeValue || "").split(/[ ,]+/).filter(function(c) {
            return c;
          });
          ["video", "audio", "text"].forEach(function(type) {
            var filtered = codecs.filter(function(codec) {
              return isCodecType(codec, type);
            });
            if (filtered.length) {
              level[type + "Codec"] = filtered.join(",");
              codecs = codecs.filter(function(codec) {
                return filtered.indexOf(codec) === -1;
              });
            }
          });
          level.unknownCodecs = codecs;
        }
        function assignCodec(media, groupItem, codecProperty) {
          var codecValue = groupItem[codecProperty];
          if (codecValue) {
            media[codecProperty] = codecValue;
          }
        }
        function backfillProgramDateTimes(fragments, firstPdtIndex) {
          var fragPrev = fragments[firstPdtIndex];
          for (var i = firstPdtIndex; i--; ) {
            var frag = fragments[i];
            if (!frag) {
              return;
            }
            frag.programDateTime = fragPrev.programDateTime - frag.duration * 1e3;
            fragPrev = frag;
          }
        }
        function assignProgramDateTime(frag, prevFrag) {
          if (frag.rawProgramDateTime) {
            frag.programDateTime = Date.parse(frag.rawProgramDateTime);
          } else if (prevFrag != null && prevFrag.programDateTime) {
            frag.programDateTime = prevFrag.endProgramDateTime;
          }
          if (!isFiniteNumber(frag.programDateTime)) {
            frag.programDateTime = null;
            frag.rawProgramDateTime = null;
          }
        }
        function setInitSegment(frag, mapAttrs, id, levelkeys) {
          frag.relurl = mapAttrs.URI;
          if (mapAttrs.BYTERANGE) {
            frag.setByteRange(mapAttrs.BYTERANGE);
          }
          frag.level = id;
          frag.sn = "initSegment";
          if (levelkeys) {
            frag.levelkeys = levelkeys;
          }
          frag.initSegment = null;
        }
        function setFragLevelKeys(frag, levelkeys, level) {
          frag.levelkeys = levelkeys;
          var encryptedFragments = level.encryptedFragments;
          if ((!encryptedFragments.length || encryptedFragments[encryptedFragments.length - 1].levelkeys !== levelkeys) && Object.keys(levelkeys).some(function(format) {
            return levelkeys[format].isCommonEncryption;
          })) {
            encryptedFragments.push(frag);
          }
        }
        var PlaylistContextType = {
          MANIFEST: "manifest",
          LEVEL: "level",
          AUDIO_TRACK: "audioTrack",
          SUBTITLE_TRACK: "subtitleTrack"
        };
        var PlaylistLevelType = {
          MAIN: "main",
          AUDIO: "audio",
          SUBTITLE: "subtitle"
        };
        function mapContextToLevelType(context) {
          var type = context.type;
          switch (type) {
            case PlaylistContextType.AUDIO_TRACK:
              return PlaylistLevelType.AUDIO;
            case PlaylistContextType.SUBTITLE_TRACK:
              return PlaylistLevelType.SUBTITLE;
            default:
              return PlaylistLevelType.MAIN;
          }
        }
        function getResponseUrl(response, context) {
          var url = response.url;
          if (url === void 0 || url.indexOf("data:") === 0) {
            url = context.url;
          }
          return url;
        }
        var PlaylistLoader = function() {
          function PlaylistLoader2(hls) {
            this.hls = void 0;
            this.loaders = /* @__PURE__ */ Object.create(null);
            this.variableList = null;
            this.hls = hls;
            this.registerListeners();
          }
          var _proto = PlaylistLoader2.prototype;
          _proto.startLoad = function startLoad(startPosition) {
          };
          _proto.stopLoad = function stopLoad() {
            this.destroyInternalLoaders();
          };
          _proto.registerListeners = function registerListeners() {
            var hls = this.hls;
            hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);
            hls.on(Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);
            hls.on(Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
          };
          _proto.unregisterListeners = function unregisterListeners() {
            var hls = this.hls;
            hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.off(Events.LEVEL_LOADING, this.onLevelLoading, this);
            hls.off(Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);
            hls.off(Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
          };
          _proto.createInternalLoader = function createInternalLoader(context) {
            var config = this.hls.config;
            var PLoader = config.pLoader;
            var Loader = config.loader;
            var InternalLoader = PLoader || Loader;
            var loader = new InternalLoader(config);
            this.loaders[context.type] = loader;
            return loader;
          };
          _proto.getInternalLoader = function getInternalLoader(context) {
            return this.loaders[context.type];
          };
          _proto.resetInternalLoader = function resetInternalLoader(contextType) {
            if (this.loaders[contextType]) {
              delete this.loaders[contextType];
            }
          };
          _proto.destroyInternalLoaders = function destroyInternalLoaders() {
            for (var contextType in this.loaders) {
              var loader = this.loaders[contextType];
              if (loader) {
                loader.destroy();
              }
              this.resetInternalLoader(contextType);
            }
          };
          _proto.destroy = function destroy() {
            this.variableList = null;
            this.unregisterListeners();
            this.destroyInternalLoaders();
          };
          _proto.onManifestLoading = function onManifestLoading(event, data) {
            var url = data.url;
            this.variableList = null;
            this.load({
              id: null,
              level: 0,
              responseType: "text",
              type: PlaylistContextType.MANIFEST,
              url,
              deliveryDirectives: null
            });
          };
          _proto.onLevelLoading = function onLevelLoading(event, data) {
            var id = data.id, level = data.level, pathwayId = data.pathwayId, url = data.url, deliveryDirectives = data.deliveryDirectives;
            this.load({
              id,
              level,
              pathwayId,
              responseType: "text",
              type: PlaylistContextType.LEVEL,
              url,
              deliveryDirectives
            });
          };
          _proto.onAudioTrackLoading = function onAudioTrackLoading(event, data) {
            var id = data.id, groupId = data.groupId, url = data.url, deliveryDirectives = data.deliveryDirectives;
            this.load({
              id,
              groupId,
              level: null,
              responseType: "text",
              type: PlaylistContextType.AUDIO_TRACK,
              url,
              deliveryDirectives
            });
          };
          _proto.onSubtitleTrackLoading = function onSubtitleTrackLoading(event, data) {
            var id = data.id, groupId = data.groupId, url = data.url, deliveryDirectives = data.deliveryDirectives;
            this.load({
              id,
              groupId,
              level: null,
              responseType: "text",
              type: PlaylistContextType.SUBTITLE_TRACK,
              url,
              deliveryDirectives
            });
          };
          _proto.load = function load(context) {
            var _context$deliveryDire, _this = this;
            var config = this.hls.config;
            var loader = this.getInternalLoader(context);
            if (loader) {
              var loaderContext = loader.context;
              if (loaderContext && loaderContext.url === context.url && loaderContext.level === context.level) {
                logger.trace("[playlist-loader]: playlist request ongoing");
                return;
              }
              logger.log("[playlist-loader]: aborting previous loader for type: " + context.type);
              loader.abort();
            }
            var loadPolicy;
            if (context.type === PlaylistContextType.MANIFEST) {
              loadPolicy = config.manifestLoadPolicy.default;
            } else {
              loadPolicy = _extends({}, config.playlistLoadPolicy.default, {
                timeoutRetry: null,
                errorRetry: null
              });
            }
            loader = this.createInternalLoader(context);
            if (isFiniteNumber((_context$deliveryDire = context.deliveryDirectives) == null ? void 0 : _context$deliveryDire.part)) {
              var levelDetails;
              if (context.type === PlaylistContextType.LEVEL && context.level !== null) {
                levelDetails = this.hls.levels[context.level].details;
              } else if (context.type === PlaylistContextType.AUDIO_TRACK && context.id !== null) {
                levelDetails = this.hls.audioTracks[context.id].details;
              } else if (context.type === PlaylistContextType.SUBTITLE_TRACK && context.id !== null) {
                levelDetails = this.hls.subtitleTracks[context.id].details;
              }
              if (levelDetails) {
                var partTarget = levelDetails.partTarget;
                var targetDuration = levelDetails.targetduration;
                if (partTarget && targetDuration) {
                  var maxLowLatencyPlaylistRefresh = Math.max(partTarget * 3, targetDuration * 0.8) * 1e3;
                  loadPolicy = _extends({}, loadPolicy, {
                    maxTimeToFirstByteMs: Math.min(maxLowLatencyPlaylistRefresh, loadPolicy.maxTimeToFirstByteMs),
                    maxLoadTimeMs: Math.min(maxLowLatencyPlaylistRefresh, loadPolicy.maxTimeToFirstByteMs)
                  });
                }
              }
            }
            var legacyRetryCompatibility = loadPolicy.errorRetry || loadPolicy.timeoutRetry || {};
            var loaderConfig = {
              loadPolicy,
              timeout: loadPolicy.maxLoadTimeMs,
              maxRetry: legacyRetryCompatibility.maxNumRetry || 0,
              retryDelay: legacyRetryCompatibility.retryDelayMs || 0,
              maxRetryDelay: legacyRetryCompatibility.maxRetryDelayMs || 0
            };
            var loaderCallbacks = {
              onSuccess: function onSuccess(response, stats, context2, networkDetails) {
                var loader2 = _this.getInternalLoader(context2);
                _this.resetInternalLoader(context2.type);
                var string = response.data;
                if (string.indexOf("#EXTM3U") !== 0) {
                  _this.handleManifestParsingError(response, context2, new Error("no EXTM3U delimiter"), networkDetails || null, stats);
                  return;
                }
                stats.parsing.start = performance.now();
                if (M3U8Parser.isMediaPlaylist(string)) {
                  _this.handleTrackOrLevelPlaylist(response, stats, context2, networkDetails || null, loader2);
                } else {
                  _this.handleMasterPlaylist(response, stats, context2, networkDetails);
                }
              },
              onError: function onError(response, context2, networkDetails, stats) {
                _this.handleNetworkError(context2, networkDetails, false, response, stats);
              },
              onTimeout: function onTimeout(stats, context2, networkDetails) {
                _this.handleNetworkError(context2, networkDetails, true, void 0, stats);
              }
            };
            loader.load(context, loaderConfig, loaderCallbacks);
          };
          _proto.handleMasterPlaylist = function handleMasterPlaylist(response, stats, context, networkDetails) {
            var hls = this.hls;
            var string = response.data;
            var url = getResponseUrl(response, context);
            var parsedResult = M3U8Parser.parseMasterPlaylist(string, url);
            if (parsedResult.playlistParsingError) {
              this.handleManifestParsingError(response, context, parsedResult.playlistParsingError, networkDetails, stats);
              return;
            }
            var contentSteering = parsedResult.contentSteering, levels = parsedResult.levels, sessionData = parsedResult.sessionData, sessionKeys = parsedResult.sessionKeys, startTimeOffset = parsedResult.startTimeOffset, variableList = parsedResult.variableList;
            this.variableList = variableList;
            var _M3U8Parser$parseMast = M3U8Parser.parseMasterPlaylistMedia(string, url, parsedResult), _M3U8Parser$parseMast2 = _M3U8Parser$parseMast.AUDIO, audioTracks = _M3U8Parser$parseMast2 === void 0 ? [] : _M3U8Parser$parseMast2, subtitles = _M3U8Parser$parseMast.SUBTITLES, captions = _M3U8Parser$parseMast["CLOSED-CAPTIONS"];
            if (audioTracks.length) {
              var embeddedAudioFound = audioTracks.some(function(audioTrack) {
                return !audioTrack.url;
              });
              if (!embeddedAudioFound && levels[0].audioCodec && !levels[0].attrs.AUDIO) {
                logger.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one");
                audioTracks.unshift({
                  type: "main",
                  name: "main",
                  groupId: "main",
                  default: false,
                  autoselect: false,
                  forced: false,
                  id: -1,
                  attrs: new AttrList({}),
                  bitrate: 0,
                  url: ""
                });
              }
            }
            hls.trigger(Events.MANIFEST_LOADED, {
              levels,
              audioTracks,
              subtitles,
              captions,
              contentSteering,
              url,
              stats,
              networkDetails,
              sessionData,
              sessionKeys,
              startTimeOffset,
              variableList
            });
          };
          _proto.handleTrackOrLevelPlaylist = function handleTrackOrLevelPlaylist(response, stats, context, networkDetails, loader) {
            var hls = this.hls;
            var id = context.id, level = context.level, type = context.type;
            var url = getResponseUrl(response, context);
            var levelUrlId = 0;
            var levelId = isFiniteNumber(level) ? level : isFiniteNumber(id) ? id : 0;
            var levelType = mapContextToLevelType(context);
            var levelDetails = M3U8Parser.parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId, this.variableList);
            if (type === PlaylistContextType.MANIFEST) {
              var singleLevel = {
                attrs: new AttrList({}),
                bitrate: 0,
                details: levelDetails,
                name: "",
                url
              };
              hls.trigger(Events.MANIFEST_LOADED, {
                levels: [singleLevel],
                audioTracks: [],
                url,
                stats,
                networkDetails,
                sessionData: null,
                sessionKeys: null,
                contentSteering: null,
                startTimeOffset: null,
                variableList: null
              });
            }
            stats.parsing.end = performance.now();
            context.levelDetails = levelDetails;
            this.handlePlaylistLoaded(levelDetails, response, stats, context, networkDetails, loader);
          };
          _proto.handleManifestParsingError = function handleManifestParsingError(response, context, error, networkDetails, stats) {
            this.hls.trigger(Events.ERROR, {
              type: ErrorTypes.NETWORK_ERROR,
              details: ErrorDetails.MANIFEST_PARSING_ERROR,
              fatal: context.type === PlaylistContextType.MANIFEST,
              url: response.url,
              err: error,
              error,
              reason: error.message,
              response,
              context,
              networkDetails,
              stats
            });
          };
          _proto.handleNetworkError = function handleNetworkError(context, networkDetails, timeout, response, stats) {
            if (timeout === void 0) {
              timeout = false;
            }
            var message = "A network " + (timeout ? "timeout" : "error" + (response ? " (status " + response.code + ")" : "")) + " occurred while loading " + context.type;
            if (context.type === PlaylistContextType.LEVEL) {
              message += ": " + context.level + " id: " + context.id;
            } else if (context.type === PlaylistContextType.AUDIO_TRACK || context.type === PlaylistContextType.SUBTITLE_TRACK) {
              message += " id: " + context.id + ' group-id: "' + context.groupId + '"';
            }
            var error = new Error(message);
            logger.warn("[playlist-loader]: " + message);
            var details = ErrorDetails.UNKNOWN;
            var fatal = false;
            var loader = this.getInternalLoader(context);
            switch (context.type) {
              case PlaylistContextType.MANIFEST:
                details = timeout ? ErrorDetails.MANIFEST_LOAD_TIMEOUT : ErrorDetails.MANIFEST_LOAD_ERROR;
                fatal = true;
                break;
              case PlaylistContextType.LEVEL:
                details = timeout ? ErrorDetails.LEVEL_LOAD_TIMEOUT : ErrorDetails.LEVEL_LOAD_ERROR;
                fatal = false;
                break;
              case PlaylistContextType.AUDIO_TRACK:
                details = timeout ? ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT : ErrorDetails.AUDIO_TRACK_LOAD_ERROR;
                fatal = false;
                break;
              case PlaylistContextType.SUBTITLE_TRACK:
                details = timeout ? ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT : ErrorDetails.SUBTITLE_LOAD_ERROR;
                fatal = false;
                break;
            }
            if (loader) {
              this.resetInternalLoader(context.type);
            }
            var errorData = {
              type: ErrorTypes.NETWORK_ERROR,
              details,
              fatal,
              url: context.url,
              loader,
              context,
              error,
              networkDetails,
              stats
            };
            if (response) {
              var url = (networkDetails == null ? void 0 : networkDetails.url) || context.url;
              errorData.response = _objectSpread2({
                url,
                data: void 0
              }, response);
            }
            this.hls.trigger(Events.ERROR, errorData);
          };
          _proto.handlePlaylistLoaded = function handlePlaylistLoaded(levelDetails, response, stats, context, networkDetails, loader) {
            var hls = this.hls;
            var type = context.type, level = context.level, id = context.id, groupId = context.groupId, deliveryDirectives = context.deliveryDirectives;
            var url = getResponseUrl(response, context);
            var parent = mapContextToLevelType(context);
            var levelIndex = typeof context.level === "number" && parent === PlaylistLevelType.MAIN ? level : void 0;
            if (!levelDetails.fragments.length) {
              var _error = new Error("No Segments found in Playlist");
              hls.trigger(Events.ERROR, {
                type: ErrorTypes.NETWORK_ERROR,
                details: ErrorDetails.LEVEL_EMPTY_ERROR,
                fatal: false,
                url,
                error: _error,
                reason: _error.message,
                response,
                context,
                level: levelIndex,
                parent,
                networkDetails,
                stats
              });
              return;
            }
            if (!levelDetails.targetduration) {
              levelDetails.playlistParsingError = new Error("Missing Target Duration");
            }
            var error = levelDetails.playlistParsingError;
            if (error) {
              hls.trigger(Events.ERROR, {
                type: ErrorTypes.NETWORK_ERROR,
                details: ErrorDetails.LEVEL_PARSING_ERROR,
                fatal: false,
                url,
                error,
                reason: error.message,
                response,
                context,
                level: levelIndex,
                parent,
                networkDetails,
                stats
              });
              return;
            }
            if (levelDetails.live && loader) {
              if (loader.getCacheAge) {
                levelDetails.ageHeader = loader.getCacheAge() || 0;
              }
              if (!loader.getCacheAge || isNaN(levelDetails.ageHeader)) {
                levelDetails.ageHeader = 0;
              }
            }
            switch (type) {
              case PlaylistContextType.MANIFEST:
              case PlaylistContextType.LEVEL:
                hls.trigger(Events.LEVEL_LOADED, {
                  details: levelDetails,
                  level: levelIndex || 0,
                  id: id || 0,
                  stats,
                  networkDetails,
                  deliveryDirectives
                });
                break;
              case PlaylistContextType.AUDIO_TRACK:
                hls.trigger(Events.AUDIO_TRACK_LOADED, {
                  details: levelDetails,
                  id: id || 0,
                  groupId: groupId || "",
                  stats,
                  networkDetails,
                  deliveryDirectives
                });
                break;
              case PlaylistContextType.SUBTITLE_TRACK:
                hls.trigger(Events.SUBTITLE_TRACK_LOADED, {
                  details: levelDetails,
                  id: id || 0,
                  groupId: groupId || "",
                  stats,
                  networkDetails,
                  deliveryDirectives
                });
                break;
            }
          };
          return PlaylistLoader2;
        }();
        function sendAddTrackEvent(track, videoEl) {
          var event;
          try {
            event = new Event("addtrack");
          } catch (err) {
            event = document.createEvent("Event");
            event.initEvent("addtrack", false, false);
          }
          event.track = track;
          videoEl.dispatchEvent(event);
        }
        function clearCurrentCues(track) {
          var mode = track.mode;
          if (mode === "disabled") {
            track.mode = "hidden";
          }
          if (track.cues) {
            for (var i = track.cues.length; i--; ) {
              track.removeCue(track.cues[i]);
            }
          }
          if (mode === "disabled") {
            track.mode = mode;
          }
        }
        function removeCuesInRange(track, start, end, predicate) {
          var mode = track.mode;
          if (mode === "disabled") {
            track.mode = "hidden";
          }
          if (track.cues && track.cues.length > 0) {
            var cues = getCuesInRange(track.cues, start, end);
            for (var i = 0; i < cues.length; i++) {
              if (!predicate || predicate(cues[i])) {
                track.removeCue(cues[i]);
              }
            }
          }
          if (mode === "disabled") {
            track.mode = mode;
          }
        }
        function getFirstCueIndexAfterTime(cues, time) {
          if (time < cues[0].startTime) {
            return 0;
          }
          var len = cues.length - 1;
          if (time > cues[len].endTime) {
            return -1;
          }
          var left = 0;
          var right = len;
          while (left <= right) {
            var mid = Math.floor((right + left) / 2);
            if (time < cues[mid].startTime) {
              right = mid - 1;
            } else if (time > cues[mid].startTime && left < len) {
              left = mid + 1;
            } else {
              return mid;
            }
          }
          return cues[left].startTime - time < time - cues[right].startTime ? left : right;
        }
        function getCuesInRange(cues, start, end) {
          var cuesFound = [];
          var firstCueInRange = getFirstCueIndexAfterTime(cues, start);
          if (firstCueInRange > -1) {
            for (var i = firstCueInRange, len = cues.length; i < len; i++) {
              var _cue = cues[i];
              if (_cue.startTime >= start && _cue.endTime <= end) {
                cuesFound.push(_cue);
              } else if (_cue.startTime > end) {
                return cuesFound;
              }
            }
          }
          return cuesFound;
        }
        var MetadataSchema = {
          audioId3: "org.id3",
          dateRange: "com.apple.quicktime.HLS",
          emsg: "https://aomedia.org/emsg/ID3"
        };
        var MIN_CUE_DURATION = 0.25;
        function getCueClass() {
          if (typeof self === "undefined") return void 0;
          return self.VTTCue || self.TextTrackCue;
        }
        function createCueWithDataFields(Cue, startTime, endTime, data, type) {
          var cue = new Cue(startTime, endTime, "");
          try {
            cue.value = data;
            if (type) {
              cue.type = type;
            }
          } catch (e) {
            cue = new Cue(startTime, endTime, JSON.stringify(type ? _objectSpread2({
              type
            }, data) : data));
          }
          return cue;
        }
        var MAX_CUE_ENDTIME = function() {
          var Cue = getCueClass();
          try {
            Cue && new Cue(0, Number.POSITIVE_INFINITY, "");
          } catch (e) {
            return Number.MAX_VALUE;
          }
          return Number.POSITIVE_INFINITY;
        }();
        function dateRangeDateToTimelineSeconds(date, offset) {
          return date.getTime() / 1e3 - offset;
        }
        function hexToArrayBuffer(str) {
          return Uint8Array.from(str.replace(/^0x/, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")).buffer;
        }
        var ID3TrackController = function() {
          function ID3TrackController2(hls) {
            this.hls = void 0;
            this.id3Track = null;
            this.media = null;
            this.dateRangeCuesAppended = {};
            this.hls = hls;
            this._registerListeners();
          }
          var _proto = ID3TrackController2.prototype;
          _proto.destroy = function destroy() {
            this._unregisterListeners();
            this.id3Track = null;
            this.media = null;
            this.dateRangeCuesAppended = {};
            this.hls = null;
          };
          _proto._registerListeners = function _registerListeners() {
            var hls = this.hls;
            hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);
            hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
            hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.on(Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);
            hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
            hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);
          };
          _proto._unregisterListeners = function _unregisterListeners() {
            var hls = this.hls;
            hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);
            hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
            hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.off(Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);
            hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
            hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);
          };
          _proto.onMediaAttached = function onMediaAttached(event, data) {
            this.media = data.media;
          };
          _proto.onMediaDetaching = function onMediaDetaching() {
            if (!this.id3Track) {
              return;
            }
            clearCurrentCues(this.id3Track);
            this.id3Track = null;
            this.media = null;
            this.dateRangeCuesAppended = {};
          };
          _proto.onManifestLoading = function onManifestLoading() {
            this.dateRangeCuesAppended = {};
          };
          _proto.createTrack = function createTrack(media) {
            var track = this.getID3Track(media.textTracks);
            track.mode = "hidden";
            return track;
          };
          _proto.getID3Track = function getID3Track(textTracks) {
            if (!this.media) {
              return;
            }
            for (var i = 0; i < textTracks.length; i++) {
              var textTrack = textTracks[i];
              if (textTrack.kind === "metadata" && textTrack.label === "id3") {
                sendAddTrackEvent(textTrack, this.media);
                return textTrack;
              }
            }
            return this.media.addTextTrack("metadata", "id3");
          };
          _proto.onFragParsingMetadata = function onFragParsingMetadata(event, data) {
            if (!this.media) {
              return;
            }
            var _this$hls$config = this.hls.config, enableEmsgMetadataCues = _this$hls$config.enableEmsgMetadataCues, enableID3MetadataCues = _this$hls$config.enableID3MetadataCues;
            if (!enableEmsgMetadataCues && !enableID3MetadataCues) {
              return;
            }
            var samples = data.samples;
            if (!this.id3Track) {
              this.id3Track = this.createTrack(this.media);
            }
            var Cue = getCueClass();
            if (!Cue) {
              return;
            }
            for (var i = 0; i < samples.length; i++) {
              var type = samples[i].type;
              if (type === MetadataSchema.emsg && !enableEmsgMetadataCues || !enableID3MetadataCues) {
                continue;
              }
              var frames = getID3Frames(samples[i].data);
              if (frames) {
                var startTime = samples[i].pts;
                var endTime = startTime + samples[i].duration;
                if (endTime > MAX_CUE_ENDTIME) {
                  endTime = MAX_CUE_ENDTIME;
                }
                var timeDiff = endTime - startTime;
                if (timeDiff <= 0) {
                  endTime = startTime + MIN_CUE_DURATION;
                }
                for (var j = 0; j < frames.length; j++) {
                  var frame = frames[j];
                  if (!isTimeStampFrame(frame)) {
                    this.updateId3CueEnds(startTime, type);
                    var cue = createCueWithDataFields(Cue, startTime, endTime, frame, type);
                    if (cue) {
                      this.id3Track.addCue(cue);
                    }
                  }
                }
              }
            }
          };
          _proto.updateId3CueEnds = function updateId3CueEnds(startTime, type) {
            var _this$id3Track;
            var cues = (_this$id3Track = this.id3Track) == null ? void 0 : _this$id3Track.cues;
            if (cues) {
              for (var i = cues.length; i--; ) {
                var cue = cues[i];
                if (cue.type === type && cue.startTime < startTime && cue.endTime === MAX_CUE_ENDTIME) {
                  cue.endTime = startTime;
                }
              }
            }
          };
          _proto.onBufferFlushing = function onBufferFlushing(event, _ref) {
            var startOffset = _ref.startOffset, endOffset = _ref.endOffset, type = _ref.type;
            var id3Track = this.id3Track, hls = this.hls;
            if (!hls) {
              return;
            }
            var _hls$config = hls.config, enableEmsgMetadataCues = _hls$config.enableEmsgMetadataCues, enableID3MetadataCues = _hls$config.enableID3MetadataCues;
            if (id3Track && (enableEmsgMetadataCues || enableID3MetadataCues)) {
              var predicate;
              if (type === "audio") {
                predicate = function predicate2(cue) {
                  return cue.type === MetadataSchema.audioId3 && enableID3MetadataCues;
                };
              } else if (type === "video") {
                predicate = function predicate2(cue) {
                  return cue.type === MetadataSchema.emsg && enableEmsgMetadataCues;
                };
              } else {
                predicate = function predicate2(cue) {
                  return cue.type === MetadataSchema.audioId3 && enableID3MetadataCues || cue.type === MetadataSchema.emsg && enableEmsgMetadataCues;
                };
              }
              removeCuesInRange(id3Track, startOffset, endOffset, predicate);
            }
          };
          _proto.onLevelUpdated = function onLevelUpdated(event, _ref2) {
            var _this = this;
            var details = _ref2.details;
            if (!this.media || !details.hasProgramDateTime || !this.hls.config.enableDateRangeMetadataCues) {
              return;
            }
            var dateRangeCuesAppended = this.dateRangeCuesAppended, id3Track = this.id3Track;
            var dateRanges = details.dateRanges;
            var ids = Object.keys(dateRanges);
            if (id3Track) {
              var idsToRemove = Object.keys(dateRangeCuesAppended).filter(function(id) {
                return !ids.includes(id);
              });
              var _loop = function _loop3() {
                var id = idsToRemove[i];
                Object.keys(dateRangeCuesAppended[id].cues).forEach(function(key) {
                  id3Track.removeCue(dateRangeCuesAppended[id].cues[key]);
                });
                delete dateRangeCuesAppended[id];
              };
              for (var i = idsToRemove.length; i--; ) {
                _loop();
              }
            }
            var lastFragment = details.fragments[details.fragments.length - 1];
            if (ids.length === 0 || !isFiniteNumber(lastFragment == null ? void 0 : lastFragment.programDateTime)) {
              return;
            }
            if (!this.id3Track) {
              this.id3Track = this.createTrack(this.media);
            }
            var dateTimeOffset = lastFragment.programDateTime / 1e3 - lastFragment.start;
            var Cue = getCueClass();
            var _loop2 = function _loop22() {
              var id = ids[_i];
              var dateRange = dateRanges[id];
              var startTime = dateRangeDateToTimelineSeconds(dateRange.startDate, dateTimeOffset);
              var appendedDateRangeCues = dateRangeCuesAppended[id];
              var cues = (appendedDateRangeCues == null ? void 0 : appendedDateRangeCues.cues) || {};
              var durationKnown = (appendedDateRangeCues == null ? void 0 : appendedDateRangeCues.durationKnown) || false;
              var endTime = MAX_CUE_ENDTIME;
              var endDate = dateRange.endDate;
              if (endDate) {
                endTime = dateRangeDateToTimelineSeconds(endDate, dateTimeOffset);
                durationKnown = true;
              } else if (dateRange.endOnNext && !durationKnown) {
                var nextDateRangeWithSameClass = ids.reduce(function(candidateDateRange, id2) {
                  if (id2 !== dateRange.id) {
                    var otherDateRange = dateRanges[id2];
                    if (otherDateRange.class === dateRange.class && otherDateRange.startDate > dateRange.startDate && (!candidateDateRange || dateRange.startDate < candidateDateRange.startDate)) {
                      return otherDateRange;
                    }
                  }
                  return candidateDateRange;
                }, null);
                if (nextDateRangeWithSameClass) {
                  endTime = dateRangeDateToTimelineSeconds(nextDateRangeWithSameClass.startDate, dateTimeOffset);
                  durationKnown = true;
                }
              }
              var attributes = Object.keys(dateRange.attr);
              for (var j = 0; j < attributes.length; j++) {
                var key = attributes[j];
                if (!isDateRangeCueAttribute(key)) {
                  continue;
                }
                var cue = cues[key];
                if (cue) {
                  if (durationKnown && !appendedDateRangeCues.durationKnown) {
                    cue.endTime = endTime;
                  }
                } else if (Cue) {
                  var data = dateRange.attr[key];
                  if (isSCTE35Attribute(key)) {
                    data = hexToArrayBuffer(data);
                  }
                  var _cue = createCueWithDataFields(Cue, startTime, endTime, {
                    key,
                    data
                  }, MetadataSchema.dateRange);
                  if (_cue) {
                    _cue.id = id;
                    _this.id3Track.addCue(_cue);
                    cues[key] = _cue;
                  }
                }
              }
              dateRangeCuesAppended[id] = {
                cues,
                dateRange,
                durationKnown
              };
            };
            for (var _i = 0; _i < ids.length; _i++) {
              _loop2();
            }
          };
          return ID3TrackController2;
        }();
        var LatencyController = function() {
          function LatencyController2(hls) {
            var _this = this;
            this.hls = void 0;
            this.config = void 0;
            this.media = null;
            this.levelDetails = null;
            this.currentTime = 0;
            this.stallCount = 0;
            this._latency = null;
            this.timeupdateHandler = function() {
              return _this.timeupdate();
            };
            this.hls = hls;
            this.config = hls.config;
            this.registerListeners();
          }
          var _proto = LatencyController2.prototype;
          _proto.destroy = function destroy() {
            this.unregisterListeners();
            this.onMediaDetaching();
            this.levelDetails = null;
            this.hls = this.timeupdateHandler = null;
          };
          _proto.registerListeners = function registerListeners() {
            this.hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);
            this.hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
            this.hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            this.hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);
            this.hls.on(Events.ERROR, this.onError, this);
          };
          _proto.unregisterListeners = function unregisterListeners() {
            this.hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);
            this.hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
            this.hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            this.hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);
            this.hls.off(Events.ERROR, this.onError, this);
          };
          _proto.onMediaAttached = function onMediaAttached(event, data) {
            this.media = data.media;
            this.media.addEventListener("timeupdate", this.timeupdateHandler);
          };
          _proto.onMediaDetaching = function onMediaDetaching() {
            if (this.media) {
              this.media.removeEventListener("timeupdate", this.timeupdateHandler);
              this.media = null;
            }
          };
          _proto.onManifestLoading = function onManifestLoading() {
            this.levelDetails = null;
            this._latency = null;
            this.stallCount = 0;
          };
          _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {
            var details = _ref.details;
            this.levelDetails = details;
            if (details.advanced) {
              this.timeupdate();
            }
            if (!details.live && this.media) {
              this.media.removeEventListener("timeupdate", this.timeupdateHandler);
            }
          };
          _proto.onError = function onError(event, data) {
            var _this$levelDetails;
            if (data.details !== ErrorDetails.BUFFER_STALLED_ERROR) {
              return;
            }
            this.stallCount++;
            if ((_this$levelDetails = this.levelDetails) != null && _this$levelDetails.live) {
              logger.warn("[playback-rate-controller]: Stall detected, adjusting target latency");
            }
          };
          _proto.timeupdate = function timeupdate() {
            var media = this.media, levelDetails = this.levelDetails;
            if (!media || !levelDetails) {
              return;
            }
            this.currentTime = media.currentTime;
            var latency = this.computeLatency();
            if (latency === null) {
              return;
            }
            this._latency = latency;
            var _this$config = this.config, lowLatencyMode = _this$config.lowLatencyMode, maxLiveSyncPlaybackRate = _this$config.maxLiveSyncPlaybackRate;
            if (!lowLatencyMode || maxLiveSyncPlaybackRate === 1 || !levelDetails.live) {
              return;
            }
            var targetLatency = this.targetLatency;
            if (targetLatency === null) {
              return;
            }
            var distanceFromTarget = latency - targetLatency;
            var liveMinLatencyDuration = Math.min(this.maxLatency, targetLatency + levelDetails.targetduration);
            var inLiveRange = distanceFromTarget < liveMinLatencyDuration;
            if (inLiveRange && distanceFromTarget > 0.05 && this.forwardBufferLength > 1) {
              var max = Math.min(2, Math.max(1, maxLiveSyncPlaybackRate));
              var rate = Math.round(2 / (1 + Math.exp(-0.75 * distanceFromTarget - this.edgeStalled)) * 20) / 20;
              media.playbackRate = Math.min(max, Math.max(1, rate));
            } else if (media.playbackRate !== 1 && media.playbackRate !== 0) {
              media.playbackRate = 1;
            }
          };
          _proto.estimateLiveEdge = function estimateLiveEdge() {
            var levelDetails = this.levelDetails;
            if (levelDetails === null) {
              return null;
            }
            return levelDetails.edge + levelDetails.age;
          };
          _proto.computeLatency = function computeLatency() {
            var liveEdge = this.estimateLiveEdge();
            if (liveEdge === null) {
              return null;
            }
            return liveEdge - this.currentTime;
          };
          _createClass2(LatencyController2, [{
            key: "latency",
            get: function get() {
              return this._latency || 0;
            }
          }, {
            key: "maxLatency",
            get: function get() {
              var config = this.config, levelDetails = this.levelDetails;
              if (config.liveMaxLatencyDuration !== void 0) {
                return config.liveMaxLatencyDuration;
              }
              return levelDetails ? config.liveMaxLatencyDurationCount * levelDetails.targetduration : 0;
            }
          }, {
            key: "targetLatency",
            get: function get() {
              var levelDetails = this.levelDetails;
              if (levelDetails === null) {
                return null;
              }
              var holdBack = levelDetails.holdBack, partHoldBack = levelDetails.partHoldBack, targetduration = levelDetails.targetduration;
              var _this$config2 = this.config, liveSyncDuration = _this$config2.liveSyncDuration, liveSyncDurationCount = _this$config2.liveSyncDurationCount, lowLatencyMode = _this$config2.lowLatencyMode;
              var userConfig = this.hls.userConfig;
              var targetLatency = lowLatencyMode ? partHoldBack || holdBack : holdBack;
              if (userConfig.liveSyncDuration || userConfig.liveSyncDurationCount || targetLatency === 0) {
                targetLatency = liveSyncDuration !== void 0 ? liveSyncDuration : liveSyncDurationCount * targetduration;
              }
              var maxLiveSyncOnStallIncrease = targetduration;
              var liveSyncOnStallIncrease = 1;
              return targetLatency + Math.min(this.stallCount * liveSyncOnStallIncrease, maxLiveSyncOnStallIncrease);
            }
          }, {
            key: "liveSyncPosition",
            get: function get() {
              var liveEdge = this.estimateLiveEdge();
              var targetLatency = this.targetLatency;
              var levelDetails = this.levelDetails;
              if (liveEdge === null || targetLatency === null || levelDetails === null) {
                return null;
              }
              var edge = levelDetails.edge;
              var syncPosition = liveEdge - targetLatency - this.edgeStalled;
              var min = edge - levelDetails.totalduration;
              var max = edge - (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration);
              return Math.min(Math.max(min, syncPosition), max);
            }
          }, {
            key: "drift",
            get: function get() {
              var levelDetails = this.levelDetails;
              if (levelDetails === null) {
                return 1;
              }
              return levelDetails.drift;
            }
          }, {
            key: "edgeStalled",
            get: function get() {
              var levelDetails = this.levelDetails;
              if (levelDetails === null) {
                return 0;
              }
              var maxLevelUpdateAge = (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration) * 3;
              return Math.max(levelDetails.age - maxLevelUpdateAge, 0);
            }
          }, {
            key: "forwardBufferLength",
            get: function get() {
              var media = this.media, levelDetails = this.levelDetails;
              if (!media || !levelDetails) {
                return 0;
              }
              var bufferedRanges = media.buffered.length;
              return (bufferedRanges ? media.buffered.end(bufferedRanges - 1) : levelDetails.edge) - this.currentTime;
            }
          }]);
          return LatencyController2;
        }();
        var HdcpLevels = ["NONE", "TYPE-0", "TYPE-1", null];
        function isHdcpLevel(value) {
          return HdcpLevels.indexOf(value) > -1;
        }
        var VideoRangeValues = ["SDR", "PQ", "HLG"];
        function isVideoRange(value) {
          return !!value && VideoRangeValues.indexOf(value) > -1;
        }
        var HlsSkip = {
          No: "",
          Yes: "YES",
          v2: "v2"
        };
        function getSkipValue(details) {
          var canSkipUntil = details.canSkipUntil, canSkipDateRanges = details.canSkipDateRanges, age = details.age;
          var playlistRecentEnough = age < canSkipUntil / 2;
          if (canSkipUntil && playlistRecentEnough) {
            if (canSkipDateRanges) {
              return HlsSkip.v2;
            }
            return HlsSkip.Yes;
          }
          return HlsSkip.No;
        }
        var HlsUrlParameters = function() {
          function HlsUrlParameters2(msn, part, skip) {
            this.msn = void 0;
            this.part = void 0;
            this.skip = void 0;
            this.msn = msn;
            this.part = part;
            this.skip = skip;
          }
          var _proto = HlsUrlParameters2.prototype;
          _proto.addDirectives = function addDirectives(uri) {
            var url = new self.URL(uri);
            if (this.msn !== void 0) {
              url.searchParams.set("_HLS_msn", this.msn.toString());
            }
            if (this.part !== void 0) {
              url.searchParams.set("_HLS_part", this.part.toString());
            }
            if (this.skip) {
              url.searchParams.set("_HLS_skip", this.skip);
            }
            return url.href;
          };
          return HlsUrlParameters2;
        }();
        var Level = function() {
          function Level2(data) {
            this._attrs = void 0;
            this.audioCodec = void 0;
            this.bitrate = void 0;
            this.codecSet = void 0;
            this.url = void 0;
            this.frameRate = void 0;
            this.height = void 0;
            this.id = void 0;
            this.name = void 0;
            this.videoCodec = void 0;
            this.width = void 0;
            this.details = void 0;
            this.fragmentError = 0;
            this.loadError = 0;
            this.loaded = void 0;
            this.realBitrate = 0;
            this.supportedPromise = void 0;
            this.supportedResult = void 0;
            this._avgBitrate = 0;
            this._audioGroups = void 0;
            this._subtitleGroups = void 0;
            this._urlId = 0;
            this.url = [data.url];
            this._attrs = [data.attrs];
            this.bitrate = data.bitrate;
            if (data.details) {
              this.details = data.details;
            }
            this.id = data.id || 0;
            this.name = data.name;
            this.width = data.width || 0;
            this.height = data.height || 0;
            this.frameRate = data.attrs.optionalFloat("FRAME-RATE", 0);
            this._avgBitrate = data.attrs.decimalInteger("AVERAGE-BANDWIDTH");
            this.audioCodec = data.audioCodec;
            this.videoCodec = data.videoCodec;
            this.codecSet = [data.videoCodec, data.audioCodec].filter(function(c) {
              return !!c;
            }).map(function(s) {
              return s.substring(0, 4);
            }).join(",");
            this.addGroupId("audio", data.attrs.AUDIO);
            this.addGroupId("text", data.attrs.SUBTITLES);
          }
          var _proto2 = Level2.prototype;
          _proto2.hasAudioGroup = function hasAudioGroup(groupId) {
            return hasGroup(this._audioGroups, groupId);
          };
          _proto2.hasSubtitleGroup = function hasSubtitleGroup(groupId) {
            return hasGroup(this._subtitleGroups, groupId);
          };
          _proto2.addGroupId = function addGroupId(type, groupId) {
            if (!groupId) {
              return;
            }
            if (type === "audio") {
              var audioGroups = this._audioGroups;
              if (!audioGroups) {
                audioGroups = this._audioGroups = [];
              }
              if (audioGroups.indexOf(groupId) === -1) {
                audioGroups.push(groupId);
              }
            } else if (type === "text") {
              var subtitleGroups = this._subtitleGroups;
              if (!subtitleGroups) {
                subtitleGroups = this._subtitleGroups = [];
              }
              if (subtitleGroups.indexOf(groupId) === -1) {
                subtitleGroups.push(groupId);
              }
            }
          };
          _proto2.addFallback = function addFallback() {
          };
          _createClass2(Level2, [{
            key: "maxBitrate",
            get: function get() {
              return Math.max(this.realBitrate, this.bitrate);
            }
          }, {
            key: "averageBitrate",
            get: function get() {
              return this._avgBitrate || this.realBitrate || this.bitrate;
            }
          }, {
            key: "attrs",
            get: function get() {
              return this._attrs[0];
            }
          }, {
            key: "codecs",
            get: function get() {
              return this.attrs.CODECS || "";
            }
          }, {
            key: "pathwayId",
            get: function get() {
              return this.attrs["PATHWAY-ID"] || ".";
            }
          }, {
            key: "videoRange",
            get: function get() {
              return this.attrs["VIDEO-RANGE"] || "SDR";
            }
          }, {
            key: "score",
            get: function get() {
              return this.attrs.optionalFloat("SCORE", 0);
            }
          }, {
            key: "uri",
            get: function get() {
              return this.url[0] || "";
            }
          }, {
            key: "audioGroups",
            get: function get() {
              return this._audioGroups;
            }
          }, {
            key: "subtitleGroups",
            get: function get() {
              return this._subtitleGroups;
            }
          }, {
            key: "urlId",
            get: function get() {
              return 0;
            },
            set: function set(value) {
            }
          }, {
            key: "audioGroupIds",
            get: function get() {
              return this.audioGroups ? [this.audioGroupId] : void 0;
            }
          }, {
            key: "textGroupIds",
            get: function get() {
              return this.subtitleGroups ? [this.textGroupId] : void 0;
            }
          }, {
            key: "audioGroupId",
            get: function get() {
              var _this$audioGroups;
              return (_this$audioGroups = this.audioGroups) == null ? void 0 : _this$audioGroups[0];
            }
          }, {
            key: "textGroupId",
            get: function get() {
              var _this$subtitleGroups;
              return (_this$subtitleGroups = this.subtitleGroups) == null ? void 0 : _this$subtitleGroups[0];
            }
          }]);
          return Level2;
        }();
        function hasGroup(groups, groupId) {
          if (!groupId || !groups) {
            return false;
          }
          return groups.indexOf(groupId) !== -1;
        }
        function updateFromToPTS(fragFrom, fragTo) {
          var fragToPTS = fragTo.startPTS;
          if (isFiniteNumber(fragToPTS)) {
            var duration = 0;
            var frag;
            if (fragTo.sn > fragFrom.sn) {
              duration = fragToPTS - fragFrom.start;
              frag = fragFrom;
            } else {
              duration = fragFrom.start - fragToPTS;
              frag = fragTo;
            }
            if (frag.duration !== duration) {
              frag.duration = duration;
            }
          } else if (fragTo.sn > fragFrom.sn) {
            var contiguous = fragFrom.cc === fragTo.cc;
            if (contiguous && fragFrom.minEndPTS) {
              fragTo.start = fragFrom.start + (fragFrom.minEndPTS - fragFrom.start);
            } else {
              fragTo.start = fragFrom.start + fragFrom.duration;
            }
          } else {
            fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);
          }
        }
        function updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {
          var parsedMediaDuration = endPTS - startPTS;
          if (parsedMediaDuration <= 0) {
            logger.warn("Fragment should have a positive duration", frag);
            endPTS = startPTS + frag.duration;
            endDTS = startDTS + frag.duration;
          }
          var maxStartPTS = startPTS;
          var minEndPTS = endPTS;
          var fragStartPts = frag.startPTS;
          var fragEndPts = frag.endPTS;
          if (isFiniteNumber(fragStartPts)) {
            var deltaPTS = Math.abs(fragStartPts - startPTS);
            if (!isFiniteNumber(frag.deltaPTS)) {
              frag.deltaPTS = deltaPTS;
            } else {
              frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);
            }
            maxStartPTS = Math.max(startPTS, fragStartPts);
            startPTS = Math.min(startPTS, fragStartPts);
            startDTS = Math.min(startDTS, frag.startDTS);
            minEndPTS = Math.min(endPTS, fragEndPts);
            endPTS = Math.max(endPTS, fragEndPts);
            endDTS = Math.max(endDTS, frag.endDTS);
          }
          var drift = startPTS - frag.start;
          if (frag.start !== 0) {
            frag.start = startPTS;
          }
          frag.duration = endPTS - frag.start;
          frag.startPTS = startPTS;
          frag.maxStartPTS = maxStartPTS;
          frag.startDTS = startDTS;
          frag.endPTS = endPTS;
          frag.minEndPTS = minEndPTS;
          frag.endDTS = endDTS;
          var sn = frag.sn;
          if (!details || sn < details.startSN || sn > details.endSN) {
            return 0;
          }
          var i;
          var fragIdx = sn - details.startSN;
          var fragments = details.fragments;
          fragments[fragIdx] = frag;
          for (i = fragIdx; i > 0; i--) {
            updateFromToPTS(fragments[i], fragments[i - 1]);
          }
          for (i = fragIdx; i < fragments.length - 1; i++) {
            updateFromToPTS(fragments[i], fragments[i + 1]);
          }
          if (details.fragmentHint) {
            updateFromToPTS(fragments[fragments.length - 1], details.fragmentHint);
          }
          details.PTSKnown = details.alignedSliding = true;
          return drift;
        }
        function mergeDetails(oldDetails, newDetails) {
          var currentInitSegment = null;
          var oldFragments = oldDetails.fragments;
          for (var i = oldFragments.length - 1; i >= 0; i--) {
            var oldInit = oldFragments[i].initSegment;
            if (oldInit) {
              currentInitSegment = oldInit;
              break;
            }
          }
          if (oldDetails.fragmentHint) {
            delete oldDetails.fragmentHint.endPTS;
          }
          var ccOffset = 0;
          var PTSFrag;
          mapFragmentIntersection(oldDetails, newDetails, function(oldFrag, newFrag) {
            if (oldFrag.relurl) {
              ccOffset = oldFrag.cc - newFrag.cc;
            }
            if (isFiniteNumber(oldFrag.startPTS) && isFiniteNumber(oldFrag.endPTS)) {
              newFrag.start = newFrag.startPTS = oldFrag.startPTS;
              newFrag.startDTS = oldFrag.startDTS;
              newFrag.maxStartPTS = oldFrag.maxStartPTS;
              newFrag.endPTS = oldFrag.endPTS;
              newFrag.endDTS = oldFrag.endDTS;
              newFrag.minEndPTS = oldFrag.minEndPTS;
              newFrag.duration = oldFrag.endPTS - oldFrag.startPTS;
              if (newFrag.duration) {
                PTSFrag = newFrag;
              }
              newDetails.PTSKnown = newDetails.alignedSliding = true;
            }
            newFrag.elementaryStreams = oldFrag.elementaryStreams;
            newFrag.loader = oldFrag.loader;
            newFrag.stats = oldFrag.stats;
            if (oldFrag.initSegment) {
              newFrag.initSegment = oldFrag.initSegment;
              currentInitSegment = oldFrag.initSegment;
            }
          });
          if (currentInitSegment) {
            var fragmentsToCheck = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;
            fragmentsToCheck.forEach(function(frag) {
              var _currentInitSegment;
              if (frag && (!frag.initSegment || frag.initSegment.relurl === ((_currentInitSegment = currentInitSegment) == null ? void 0 : _currentInitSegment.relurl))) {
                frag.initSegment = currentInitSegment;
              }
            });
          }
          if (newDetails.skippedSegments) {
            newDetails.deltaUpdateFailed = newDetails.fragments.some(function(frag) {
              return !frag;
            });
            if (newDetails.deltaUpdateFailed) {
              logger.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
              for (var _i = newDetails.skippedSegments; _i--; ) {
                newDetails.fragments.shift();
              }
              newDetails.startSN = newDetails.fragments[0].sn;
              newDetails.startCC = newDetails.fragments[0].cc;
            } else if (newDetails.canSkipDateRanges) {
              newDetails.dateRanges = mergeDateRanges(oldDetails.dateRanges, newDetails.dateRanges, newDetails.recentlyRemovedDateranges);
            }
          }
          var newFragments = newDetails.fragments;
          if (ccOffset) {
            logger.warn("discontinuity sliding from playlist, take drift into account");
            for (var _i2 = 0; _i2 < newFragments.length; _i2++) {
              newFragments[_i2].cc += ccOffset;
            }
          }
          if (newDetails.skippedSegments) {
            newDetails.startCC = newDetails.fragments[0].cc;
          }
          mapPartIntersection(oldDetails.partList, newDetails.partList, function(oldPart, newPart) {
            newPart.elementaryStreams = oldPart.elementaryStreams;
            newPart.stats = oldPart.stats;
          });
          if (PTSFrag) {
            updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);
          } else {
            adjustSliding(oldDetails, newDetails);
          }
          if (newFragments.length) {
            newDetails.totalduration = newDetails.edge - newFragments[0].start;
          }
          newDetails.driftStartTime = oldDetails.driftStartTime;
          newDetails.driftStart = oldDetails.driftStart;
          var advancedDateTime = newDetails.advancedDateTime;
          if (newDetails.advanced && advancedDateTime) {
            var edge = newDetails.edge;
            if (!newDetails.driftStart) {
              newDetails.driftStartTime = advancedDateTime;
              newDetails.driftStart = edge;
            }
            newDetails.driftEndTime = advancedDateTime;
            newDetails.driftEnd = edge;
          } else {
            newDetails.driftEndTime = oldDetails.driftEndTime;
            newDetails.driftEnd = oldDetails.driftEnd;
            newDetails.advancedDateTime = oldDetails.advancedDateTime;
          }
        }
        function mergeDateRanges(oldDateRanges, deltaDateRanges, recentlyRemovedDateranges) {
          var dateRanges = _extends({}, oldDateRanges);
          if (recentlyRemovedDateranges) {
            recentlyRemovedDateranges.forEach(function(id) {
              delete dateRanges[id];
            });
          }
          Object.keys(deltaDateRanges).forEach(function(id) {
            var dateRange = new DateRange(deltaDateRanges[id].attr, dateRanges[id]);
            if (dateRange.isValid) {
              dateRanges[id] = dateRange;
            } else {
              logger.warn('Ignoring invalid Playlist Delta Update DATERANGE tag: "' + JSON.stringify(deltaDateRanges[id].attr) + '"');
            }
          });
          return dateRanges;
        }
        function mapPartIntersection(oldParts, newParts, intersectionFn) {
          if (oldParts && newParts) {
            var delta = 0;
            for (var i = 0, len = oldParts.length; i <= len; i++) {
              var _oldPart = oldParts[i];
              var _newPart = newParts[i + delta];
              if (_oldPart && _newPart && _oldPart.index === _newPart.index && _oldPart.fragment.sn === _newPart.fragment.sn) {
                intersectionFn(_oldPart, _newPart);
              } else {
                delta--;
              }
            }
          }
        }
        function mapFragmentIntersection(oldDetails, newDetails, intersectionFn) {
          var skippedSegments = newDetails.skippedSegments;
          var start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN;
          var end = (oldDetails.fragmentHint ? 1 : 0) + (skippedSegments ? newDetails.endSN : Math.min(oldDetails.endSN, newDetails.endSN)) - newDetails.startSN;
          var delta = newDetails.startSN - oldDetails.startSN;
          var newFrags = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;
          var oldFrags = oldDetails.fragmentHint ? oldDetails.fragments.concat(oldDetails.fragmentHint) : oldDetails.fragments;
          for (var i = start; i <= end; i++) {
            var _oldFrag = oldFrags[delta + i];
            var _newFrag = newFrags[i];
            if (skippedSegments && !_newFrag && i < skippedSegments) {
              _newFrag = newDetails.fragments[i] = _oldFrag;
            }
            if (_oldFrag && _newFrag) {
              intersectionFn(_oldFrag, _newFrag);
            }
          }
        }
        function adjustSliding(oldDetails, newDetails) {
          var delta = newDetails.startSN + newDetails.skippedSegments - oldDetails.startSN;
          var oldFragments = oldDetails.fragments;
          if (delta < 0 || delta >= oldFragments.length) {
            return;
          }
          addSliding(newDetails, oldFragments[delta].start);
        }
        function addSliding(details, start) {
          if (start) {
            var fragments = details.fragments;
            for (var i = details.skippedSegments; i < fragments.length; i++) {
              fragments[i].start += start;
            }
            if (details.fragmentHint) {
              details.fragmentHint.start += start;
            }
          }
        }
        function computeReloadInterval(newDetails, distanceToLiveEdgeMs) {
          if (distanceToLiveEdgeMs === void 0) {
            distanceToLiveEdgeMs = Infinity;
          }
          var reloadInterval = 1e3 * newDetails.targetduration;
          if (newDetails.updated) {
            var fragments = newDetails.fragments;
            var liveEdgeMaxTargetDurations = 4;
            if (fragments.length && reloadInterval * liveEdgeMaxTargetDurations > distanceToLiveEdgeMs) {
              var lastSegmentDuration = fragments[fragments.length - 1].duration * 1e3;
              if (lastSegmentDuration < reloadInterval) {
                reloadInterval = lastSegmentDuration;
              }
            }
          } else {
            reloadInterval /= 2;
          }
          return Math.round(reloadInterval);
        }
        function getFragmentWithSN(level, sn, fragCurrent) {
          if (!(level != null && level.details)) {
            return null;
          }
          var levelDetails = level.details;
          var fragment = levelDetails.fragments[sn - levelDetails.startSN];
          if (fragment) {
            return fragment;
          }
          fragment = levelDetails.fragmentHint;
          if (fragment && fragment.sn === sn) {
            return fragment;
          }
          if (sn < levelDetails.startSN && fragCurrent && fragCurrent.sn === sn) {
            return fragCurrent;
          }
          return null;
        }
        function getPartWith(level, sn, partIndex) {
          var _level$details;
          if (!(level != null && level.details)) {
            return null;
          }
          return findPart((_level$details = level.details) == null ? void 0 : _level$details.partList, sn, partIndex);
        }
        function findPart(partList, sn, partIndex) {
          if (partList) {
            for (var i = partList.length; i--; ) {
              var part = partList[i];
              if (part.index === partIndex && part.fragment.sn === sn) {
                return part;
              }
            }
          }
          return null;
        }
        function reassignFragmentLevelIndexes(levels) {
          levels.forEach(function(level, index) {
            var details = level.details;
            if (details != null && details.fragments) {
              details.fragments.forEach(function(fragment) {
                fragment.level = index;
              });
            }
          });
        }
        function isTimeoutError(error) {
          switch (error.details) {
            case ErrorDetails.FRAG_LOAD_TIMEOUT:
            case ErrorDetails.KEY_LOAD_TIMEOUT:
            case ErrorDetails.LEVEL_LOAD_TIMEOUT:
            case ErrorDetails.MANIFEST_LOAD_TIMEOUT:
              return true;
          }
          return false;
        }
        function getRetryConfig(loadPolicy, error) {
          var isTimeout = isTimeoutError(error);
          return loadPolicy.default[(isTimeout ? "timeout" : "error") + "Retry"];
        }
        function getRetryDelay(retryConfig, retryCount) {
          var backoffFactor = retryConfig.backoff === "linear" ? 1 : Math.pow(2, retryCount);
          return Math.min(backoffFactor * retryConfig.retryDelayMs, retryConfig.maxRetryDelayMs);
        }
        function getLoaderConfigWithoutReties(loderConfig) {
          return _objectSpread2(_objectSpread2({}, loderConfig), {
            errorRetry: null,
            timeoutRetry: null
          });
        }
        function shouldRetry(retryConfig, retryCount, isTimeout, loaderResponse) {
          if (!retryConfig) {
            return false;
          }
          var httpStatus = loaderResponse == null ? void 0 : loaderResponse.code;
          var retry = retryCount < retryConfig.maxNumRetry && (retryForHttpStatus(httpStatus) || !!isTimeout);
          return retryConfig.shouldRetry ? retryConfig.shouldRetry(retryConfig, retryCount, isTimeout, loaderResponse, retry) : retry;
        }
        function retryForHttpStatus(httpStatus) {
          return httpStatus === 0 && navigator.onLine === false || !!httpStatus && (httpStatus < 400 || httpStatus > 499);
        }
        var BinarySearch = {
          /**
           * Searches for an item in an array which matches a certain condition.
           * This requires the condition to only match one item in the array,
           * and for the array to be ordered.
           *
           * @param list The array to search.
           * @param comparisonFn
           *      Called and provided a candidate item as the first argument.
           *      Should return:
           *          > -1 if the item should be located at a lower index than the provided item.
           *          > 1 if the item should be located at a higher index than the provided item.
           *          > 0 if the item is the item you're looking for.
           *
           * @returns the object if found, otherwise returns null
           */
          search: function search(list, comparisonFn) {
            var minIndex = 0;
            var maxIndex = list.length - 1;
            var currentIndex = null;
            var currentElement = null;
            while (minIndex <= maxIndex) {
              currentIndex = (minIndex + maxIndex) / 2 | 0;
              currentElement = list[currentIndex];
              var comparisonResult = comparisonFn(currentElement);
              if (comparisonResult > 0) {
                minIndex = currentIndex + 1;
              } else if (comparisonResult < 0) {
                maxIndex = currentIndex - 1;
              } else {
                return currentElement;
              }
            }
            return null;
          }
        };
        function findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {
          if (PDTValue === null || !Array.isArray(fragments) || !fragments.length || !isFiniteNumber(PDTValue)) {
            return null;
          }
          var startPDT = fragments[0].programDateTime;
          if (PDTValue < (startPDT || 0)) {
            return null;
          }
          var endPDT = fragments[fragments.length - 1].endProgramDateTime;
          if (PDTValue >= (endPDT || 0)) {
            return null;
          }
          maxFragLookUpTolerance = maxFragLookUpTolerance || 0;
          for (var seg = 0; seg < fragments.length; ++seg) {
            var frag = fragments[seg];
            if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {
              return frag;
            }
          }
          return null;
        }
        function findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance, nextFragLookupTolerance) {
          if (bufferEnd === void 0) {
            bufferEnd = 0;
          }
          if (maxFragLookUpTolerance === void 0) {
            maxFragLookUpTolerance = 0;
          }
          if (nextFragLookupTolerance === void 0) {
            nextFragLookupTolerance = 5e-3;
          }
          var fragNext = null;
          if (fragPrevious) {
            fragNext = fragments[fragPrevious.sn - fragments[0].sn + 1] || null;
            var bufferEdgeError = fragPrevious.endDTS - bufferEnd;
            if (bufferEdgeError > 0 && bufferEdgeError < 15e-7) {
              bufferEnd += 15e-7;
            }
          } else if (bufferEnd === 0 && fragments[0].start === 0) {
            fragNext = fragments[0];
          }
          if (fragNext && ((!fragPrevious || fragPrevious.level === fragNext.level) && fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext) === 0 || fragmentWithinFastStartSwitch(fragNext, fragPrevious, Math.min(nextFragLookupTolerance, maxFragLookUpTolerance)))) {
            return fragNext;
          }
          var foundFragment = BinarySearch.search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));
          if (foundFragment && (foundFragment !== fragPrevious || !fragNext)) {
            return foundFragment;
          }
          return fragNext;
        }
        function fragmentWithinFastStartSwitch(fragNext, fragPrevious, nextFragLookupTolerance) {
          if (fragPrevious && fragPrevious.start === 0 && fragPrevious.level < fragNext.level && (fragPrevious.endPTS || 0) > 0) {
            var firstDuration = fragPrevious.tagList.reduce(function(duration, tag) {
              if (tag[0] === "INF") {
                duration += parseFloat(tag[1]);
              }
              return duration;
            }, nextFragLookupTolerance);
            return fragNext.start <= firstDuration;
          }
          return false;
        }
        function fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, candidate) {
          if (bufferEnd === void 0) {
            bufferEnd = 0;
          }
          if (maxFragLookUpTolerance === void 0) {
            maxFragLookUpTolerance = 0;
          }
          if (candidate.start <= bufferEnd && candidate.start + candidate.duration > bufferEnd) {
            return 0;
          }
          var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));
          if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {
            return 1;
          } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {
            return -1;
          }
          return 0;
        }
        function pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {
          var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1e3;
          var endProgramDateTime = candidate.endProgramDateTime || 0;
          return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;
        }
        function findFragWithCC(fragments, cc) {
          return BinarySearch.search(fragments, function(candidate) {
            if (candidate.cc < cc) {
              return 1;
            } else if (candidate.cc > cc) {
              return -1;
            } else {
              return 0;
            }
          });
        }
        var NetworkErrorAction = {
          DoNothing: 0,
          SendEndCallback: 1,
          SendAlternateToPenaltyBox: 2,
          RemoveAlternatePermanently: 3,
          InsertDiscontinuity: 4,
          RetryRequest: 5
        };
        var ErrorActionFlags = {
          None: 0,
          MoveAllAlternatesMatchingHost: 1,
          MoveAllAlternatesMatchingHDCP: 2,
          SwitchToSDR: 4
        };
        var ErrorController = function() {
          function ErrorController2(hls) {
            this.hls = void 0;
            this.playlistError = 0;
            this.penalizedRenditions = {};
            this.log = void 0;
            this.warn = void 0;
            this.error = void 0;
            this.hls = hls;
            this.log = logger.log.bind(logger, "[info]:");
            this.warn = logger.warn.bind(logger, "[warning]:");
            this.error = logger.error.bind(logger, "[error]:");
            this.registerListeners();
          }
          var _proto = ErrorController2.prototype;
          _proto.registerListeners = function registerListeners() {
            var hls = this.hls;
            hls.on(Events.ERROR, this.onError, this);
            hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);
          };
          _proto.unregisterListeners = function unregisterListeners() {
            var hls = this.hls;
            if (!hls) {
              return;
            }
            hls.off(Events.ERROR, this.onError, this);
            hls.off(Events.ERROR, this.onErrorOut, this);
            hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);
          };
          _proto.destroy = function destroy() {
            this.unregisterListeners();
            this.hls = null;
            this.penalizedRenditions = {};
          };
          _proto.startLoad = function startLoad(startPosition) {
          };
          _proto.stopLoad = function stopLoad() {
            this.playlistError = 0;
          };
          _proto.getVariantLevelIndex = function getVariantLevelIndex(frag) {
            return (frag == null ? void 0 : frag.type) === PlaylistLevelType.MAIN ? frag.level : this.hls.loadLevel;
          };
          _proto.onManifestLoading = function onManifestLoading() {
            this.playlistError = 0;
            this.penalizedRenditions = {};
          };
          _proto.onLevelUpdated = function onLevelUpdated() {
            this.playlistError = 0;
          };
          _proto.onError = function onError(event, data) {
            var _data$frag, _data$level;
            if (data.fatal) {
              return;
            }
            var hls = this.hls;
            var context = data.context;
            switch (data.details) {
              case ErrorDetails.FRAG_LOAD_ERROR:
              case ErrorDetails.FRAG_LOAD_TIMEOUT:
              case ErrorDetails.KEY_LOAD_ERROR:
              case ErrorDetails.KEY_LOAD_TIMEOUT:
                data.errorAction = this.getFragRetryOrSwitchAction(data);
                return;
              case ErrorDetails.FRAG_PARSING_ERROR:
                if ((_data$frag = data.frag) != null && _data$frag.gap) {
                  data.errorAction = {
                    action: NetworkErrorAction.DoNothing,
                    flags: ErrorActionFlags.None
                  };
                  return;
                }
              case ErrorDetails.FRAG_GAP:
              case ErrorDetails.FRAG_DECRYPT_ERROR: {
                data.errorAction = this.getFragRetryOrSwitchAction(data);
                data.errorAction.action = NetworkErrorAction.SendAlternateToPenaltyBox;
                return;
              }
              case ErrorDetails.LEVEL_EMPTY_ERROR:
              case ErrorDetails.LEVEL_PARSING_ERROR:
                {
                  var _data$context, _data$context$levelDe;
                  var levelIndex = data.parent === PlaylistLevelType.MAIN ? data.level : hls.loadLevel;
                  if (data.details === ErrorDetails.LEVEL_EMPTY_ERROR && !!((_data$context = data.context) != null && (_data$context$levelDe = _data$context.levelDetails) != null && _data$context$levelDe.live)) {
                    data.errorAction = this.getPlaylistRetryOrSwitchAction(data, levelIndex);
                  } else {
                    data.levelRetry = false;
                    data.errorAction = this.getLevelSwitchAction(data, levelIndex);
                  }
                }
                return;
              case ErrorDetails.LEVEL_LOAD_ERROR:
              case ErrorDetails.LEVEL_LOAD_TIMEOUT:
                if (typeof (context == null ? void 0 : context.level) === "number") {
                  data.errorAction = this.getPlaylistRetryOrSwitchAction(data, context.level);
                }
                return;
              case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
              case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
              case ErrorDetails.SUBTITLE_LOAD_ERROR:
              case ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT:
                if (context) {
                  var level = hls.levels[hls.loadLevel];
                  if (level && (context.type === PlaylistContextType.AUDIO_TRACK && level.hasAudioGroup(context.groupId) || context.type === PlaylistContextType.SUBTITLE_TRACK && level.hasSubtitleGroup(context.groupId))) {
                    data.errorAction = this.getPlaylistRetryOrSwitchAction(data, hls.loadLevel);
                    data.errorAction.action = NetworkErrorAction.SendAlternateToPenaltyBox;
                    data.errorAction.flags = ErrorActionFlags.MoveAllAlternatesMatchingHost;
                    return;
                  }
                }
                return;
              case ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:
                {
                  var _level = hls.levels[hls.loadLevel];
                  var restrictedHdcpLevel = _level == null ? void 0 : _level.attrs["HDCP-LEVEL"];
                  if (restrictedHdcpLevel) {
                    data.errorAction = {
                      action: NetworkErrorAction.SendAlternateToPenaltyBox,
                      flags: ErrorActionFlags.MoveAllAlternatesMatchingHDCP,
                      hdcpLevel: restrictedHdcpLevel
                    };
                  } else {
                    this.keySystemError(data);
                  }
                }
                return;
              case ErrorDetails.BUFFER_ADD_CODEC_ERROR:
              case ErrorDetails.REMUX_ALLOC_ERROR:
              case ErrorDetails.BUFFER_APPEND_ERROR:
                data.errorAction = this.getLevelSwitchAction(data, (_data$level = data.level) != null ? _data$level : hls.loadLevel);
                return;
              case ErrorDetails.INTERNAL_EXCEPTION:
              case ErrorDetails.BUFFER_APPENDING_ERROR:
              case ErrorDetails.BUFFER_FULL_ERROR:
              case ErrorDetails.LEVEL_SWITCH_ERROR:
              case ErrorDetails.BUFFER_STALLED_ERROR:
              case ErrorDetails.BUFFER_SEEK_OVER_HOLE:
              case ErrorDetails.BUFFER_NUDGE_ON_STALL:
                data.errorAction = {
                  action: NetworkErrorAction.DoNothing,
                  flags: ErrorActionFlags.None
                };
                return;
            }
            if (data.type === ErrorTypes.KEY_SYSTEM_ERROR) {
              this.keySystemError(data);
            }
          };
          _proto.keySystemError = function keySystemError(data) {
            var levelIndex = this.getVariantLevelIndex(data.frag);
            data.levelRetry = false;
            data.errorAction = this.getLevelSwitchAction(data, levelIndex);
          };
          _proto.getPlaylistRetryOrSwitchAction = function getPlaylistRetryOrSwitchAction(data, levelIndex) {
            var hls = this.hls;
            var retryConfig = getRetryConfig(hls.config.playlistLoadPolicy, data);
            var retryCount = this.playlistError++;
            var retry = shouldRetry(retryConfig, retryCount, isTimeoutError(data), data.response);
            if (retry) {
              return {
                action: NetworkErrorAction.RetryRequest,
                flags: ErrorActionFlags.None,
                retryConfig,
                retryCount
              };
            }
            var errorAction = this.getLevelSwitchAction(data, levelIndex);
            if (retryConfig) {
              errorAction.retryConfig = retryConfig;
              errorAction.retryCount = retryCount;
            }
            return errorAction;
          };
          _proto.getFragRetryOrSwitchAction = function getFragRetryOrSwitchAction(data) {
            var hls = this.hls;
            var variantLevelIndex = this.getVariantLevelIndex(data.frag);
            var level = hls.levels[variantLevelIndex];
            var _hls$config = hls.config, fragLoadPolicy = _hls$config.fragLoadPolicy, keyLoadPolicy = _hls$config.keyLoadPolicy;
            var retryConfig = getRetryConfig(data.details.startsWith("key") ? keyLoadPolicy : fragLoadPolicy, data);
            var fragmentErrors = hls.levels.reduce(function(acc, level2) {
              return acc + level2.fragmentError;
            }, 0);
            if (level) {
              if (data.details !== ErrorDetails.FRAG_GAP) {
                level.fragmentError++;
              }
              var retry = shouldRetry(retryConfig, fragmentErrors, isTimeoutError(data), data.response);
              if (retry) {
                return {
                  action: NetworkErrorAction.RetryRequest,
                  flags: ErrorActionFlags.None,
                  retryConfig,
                  retryCount: fragmentErrors
                };
              }
            }
            var errorAction = this.getLevelSwitchAction(data, variantLevelIndex);
            if (retryConfig) {
              errorAction.retryConfig = retryConfig;
              errorAction.retryCount = fragmentErrors;
            }
            return errorAction;
          };
          _proto.getLevelSwitchAction = function getLevelSwitchAction(data, levelIndex) {
            var hls = this.hls;
            if (levelIndex === null || levelIndex === void 0) {
              levelIndex = hls.loadLevel;
            }
            var level = this.hls.levels[levelIndex];
            if (level) {
              var _data$frag2, _data$context2;
              var errorDetails = data.details;
              level.loadError++;
              if (errorDetails === ErrorDetails.BUFFER_APPEND_ERROR) {
                level.fragmentError++;
              }
              var nextLevel = -1;
              var levels = hls.levels, loadLevel = hls.loadLevel, minAutoLevel = hls.minAutoLevel, maxAutoLevel = hls.maxAutoLevel;
              if (!hls.autoLevelEnabled) {
                hls.loadLevel = -1;
              }
              var fragErrorType = (_data$frag2 = data.frag) == null ? void 0 : _data$frag2.type;
              var isAudioCodecError = fragErrorType === PlaylistLevelType.AUDIO && errorDetails === ErrorDetails.FRAG_PARSING_ERROR || data.sourceBufferName === "audio" && (errorDetails === ErrorDetails.BUFFER_ADD_CODEC_ERROR || errorDetails === ErrorDetails.BUFFER_APPEND_ERROR);
              var findAudioCodecAlternate = isAudioCodecError && levels.some(function(_ref) {
                var audioCodec = _ref.audioCodec;
                return level.audioCodec !== audioCodec;
              });
              var isVideoCodecError = data.sourceBufferName === "video" && (errorDetails === ErrorDetails.BUFFER_ADD_CODEC_ERROR || errorDetails === ErrorDetails.BUFFER_APPEND_ERROR);
              var findVideoCodecAlternate = isVideoCodecError && levels.some(function(_ref2) {
                var codecSet = _ref2.codecSet, audioCodec = _ref2.audioCodec;
                return level.codecSet !== codecSet && level.audioCodec === audioCodec;
              });
              var _ref3 = (_data$context2 = data.context) != null ? _data$context2 : {}, playlistErrorType = _ref3.type, playlistErrorGroupId = _ref3.groupId;
              var _loop = function _loop2() {
                var candidate = (i + loadLevel) % levels.length;
                if (candidate !== loadLevel && candidate >= minAutoLevel && candidate <= maxAutoLevel && levels[candidate].loadError === 0) {
                  var _level$audioGroups, _level$subtitleGroups;
                  var levelCandidate = levels[candidate];
                  if (errorDetails === ErrorDetails.FRAG_GAP && fragErrorType === PlaylistLevelType.MAIN && data.frag) {
                    var levelDetails = levels[candidate].details;
                    if (levelDetails) {
                      var fragCandidate = findFragmentByPTS(data.frag, levelDetails.fragments, data.frag.start);
                      if (fragCandidate != null && fragCandidate.gap) {
                        return 0;
                      }
                    }
                  } else if (playlistErrorType === PlaylistContextType.AUDIO_TRACK && levelCandidate.hasAudioGroup(playlistErrorGroupId) || playlistErrorType === PlaylistContextType.SUBTITLE_TRACK && levelCandidate.hasSubtitleGroup(playlistErrorGroupId)) {
                    return 0;
                  } else if (fragErrorType === PlaylistLevelType.AUDIO && (_level$audioGroups = level.audioGroups) != null && _level$audioGroups.some(function(groupId) {
                    return levelCandidate.hasAudioGroup(groupId);
                  }) || fragErrorType === PlaylistLevelType.SUBTITLE && (_level$subtitleGroups = level.subtitleGroups) != null && _level$subtitleGroups.some(function(groupId) {
                    return levelCandidate.hasSubtitleGroup(groupId);
                  }) || findAudioCodecAlternate && level.audioCodec === levelCandidate.audioCodec || !findAudioCodecAlternate && level.audioCodec !== levelCandidate.audioCodec || findVideoCodecAlternate && level.codecSet === levelCandidate.codecSet) {
                    return 0;
                  }
                  nextLevel = candidate;
                  return 1;
                }
              }, _ret;
              for (var i = levels.length; i--; ) {
                _ret = _loop();
                if (_ret === 0) continue;
                if (_ret === 1) break;
              }
              if (nextLevel > -1 && hls.loadLevel !== nextLevel) {
                data.levelRetry = true;
                this.playlistError = 0;
                return {
                  action: NetworkErrorAction.SendAlternateToPenaltyBox,
                  flags: ErrorActionFlags.None,
                  nextAutoLevel: nextLevel
                };
              }
            }
            return {
              action: NetworkErrorAction.SendAlternateToPenaltyBox,
              flags: ErrorActionFlags.MoveAllAlternatesMatchingHost
            };
          };
          _proto.onErrorOut = function onErrorOut(event, data) {
            var _data$errorAction;
            switch ((_data$errorAction = data.errorAction) == null ? void 0 : _data$errorAction.action) {
              case NetworkErrorAction.DoNothing:
                break;
              case NetworkErrorAction.SendAlternateToPenaltyBox:
                this.sendAlternateToPenaltyBox(data);
                if (!data.errorAction.resolved && data.details !== ErrorDetails.FRAG_GAP) {
                  data.fatal = true;
                } else if (/MediaSource readyState: ended/.test(data.error.message)) {
                  this.warn('MediaSource ended after "' + data.sourceBufferName + '" sourceBuffer append error. Attempting to recover from media error.');
                  this.hls.recoverMediaError();
                }
                break;
            }
            if (data.fatal) {
              this.hls.stopLoad();
              return;
            }
          };
          _proto.sendAlternateToPenaltyBox = function sendAlternateToPenaltyBox(data) {
            var hls = this.hls;
            var errorAction = data.errorAction;
            if (!errorAction) {
              return;
            }
            var flags = errorAction.flags, hdcpLevel = errorAction.hdcpLevel, nextAutoLevel = errorAction.nextAutoLevel;
            switch (flags) {
              case ErrorActionFlags.None:
                this.switchLevel(data, nextAutoLevel);
                break;
              case ErrorActionFlags.MoveAllAlternatesMatchingHDCP:
                if (hdcpLevel) {
                  hls.maxHdcpLevel = HdcpLevels[HdcpLevels.indexOf(hdcpLevel) - 1];
                  errorAction.resolved = true;
                }
                this.warn('Restricting playback to HDCP-LEVEL of "' + hls.maxHdcpLevel + '" or lower');
                break;
            }
            if (!errorAction.resolved) {
              this.switchLevel(data, nextAutoLevel);
            }
          };
          _proto.switchLevel = function switchLevel(data, levelIndex) {
            if (levelIndex !== void 0 && data.errorAction) {
              this.warn("switching to level " + levelIndex + " after " + data.details);
              this.hls.nextAutoLevel = levelIndex;
              data.errorAction.resolved = true;
              this.hls.nextLoadLevel = this.hls.nextAutoLevel;
            }
          };
          return ErrorController2;
        }();
        var BasePlaylistController = function() {
          function BasePlaylistController2(hls, logPrefix) {
            this.hls = void 0;
            this.timer = -1;
            this.requestScheduled = -1;
            this.canLoad = false;
            this.log = void 0;
            this.warn = void 0;
            this.log = logger.log.bind(logger, logPrefix + ":");
            this.warn = logger.warn.bind(logger, logPrefix + ":");
            this.hls = hls;
          }
          var _proto = BasePlaylistController2.prototype;
          _proto.destroy = function destroy() {
            this.clearTimer();
            this.hls = this.log = this.warn = null;
          };
          _proto.clearTimer = function clearTimer() {
            if (this.timer !== -1) {
              self.clearTimeout(this.timer);
              this.timer = -1;
            }
          };
          _proto.startLoad = function startLoad() {
            this.canLoad = true;
            this.requestScheduled = -1;
            this.loadPlaylist();
          };
          _proto.stopLoad = function stopLoad() {
            this.canLoad = false;
            this.clearTimer();
          };
          _proto.switchParams = function switchParams(playlistUri, previous, current) {
            var renditionReports = previous == null ? void 0 : previous.renditionReports;
            if (renditionReports) {
              var foundIndex = -1;
              for (var i = 0; i < renditionReports.length; i++) {
                var attr = renditionReports[i];
                var uri = void 0;
                try {
                  uri = new self.URL(attr.URI, previous.url).href;
                } catch (error) {
                  logger.warn("Could not construct new URL for Rendition Report: " + error);
                  uri = attr.URI || "";
                }
                if (uri === playlistUri) {
                  foundIndex = i;
                  break;
                } else if (uri === playlistUri.substring(0, uri.length)) {
                  foundIndex = i;
                }
              }
              if (foundIndex !== -1) {
                var _attr = renditionReports[foundIndex];
                var msn = parseInt(_attr["LAST-MSN"]) || (previous == null ? void 0 : previous.lastPartSn);
                var part = parseInt(_attr["LAST-PART"]) || (previous == null ? void 0 : previous.lastPartIndex);
                if (this.hls.config.lowLatencyMode) {
                  var currentGoal = Math.min(previous.age - previous.partTarget, previous.targetduration);
                  if (part >= 0 && currentGoal > previous.partTarget) {
                    part += 1;
                  }
                }
                var skip = current && getSkipValue(current);
                return new HlsUrlParameters(msn, part >= 0 ? part : void 0, skip);
              }
            }
          };
          _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
            if (this.requestScheduled === -1) {
              this.requestScheduled = self.performance.now();
            }
          };
          _proto.shouldLoadPlaylist = function shouldLoadPlaylist(playlist) {
            return this.canLoad && !!playlist && !!playlist.url && (!playlist.details || playlist.details.live);
          };
          _proto.shouldReloadPlaylist = function shouldReloadPlaylist(playlist) {
            return this.timer === -1 && this.requestScheduled === -1 && this.shouldLoadPlaylist(playlist);
          };
          _proto.playlistLoaded = function playlistLoaded(index, data, previousDetails) {
            var _this = this;
            var details = data.details, stats = data.stats;
            var now2 = self.performance.now();
            var elapsed = stats.loading.first ? Math.max(0, now2 - stats.loading.first) : 0;
            details.advancedDateTime = Date.now() - elapsed;
            if (details.live || previousDetails != null && previousDetails.live) {
              details.reloaded(previousDetails);
              if (previousDetails) {
                this.log("live playlist " + index + " " + (details.advanced ? "REFRESHED " + details.lastPartSn + "-" + details.lastPartIndex : details.updated ? "UPDATED" : "MISSED"));
              }
              if (previousDetails && details.fragments.length > 0) {
                mergeDetails(previousDetails, details);
              }
              if (!this.canLoad || !details.live) {
                return;
              }
              var deliveryDirectives;
              var msn = void 0;
              var part = void 0;
              if (details.canBlockReload && details.endSN && details.advanced) {
                var lowLatencyMode = this.hls.config.lowLatencyMode;
                var lastPartSn = details.lastPartSn;
                var endSn = details.endSN;
                var lastPartIndex = details.lastPartIndex;
                var hasParts = lastPartIndex !== -1;
                var lastPart = lastPartSn === endSn;
                var nextSnStartIndex = lowLatencyMode ? 0 : lastPartIndex;
                if (hasParts) {
                  msn = lastPart ? endSn + 1 : lastPartSn;
                  part = lastPart ? nextSnStartIndex : lastPartIndex + 1;
                } else {
                  msn = endSn + 1;
                }
                var lastAdvanced = details.age;
                var cdnAge = lastAdvanced + details.ageHeader;
                var currentGoal = Math.min(cdnAge - details.partTarget, details.targetduration * 1.5);
                if (currentGoal > 0) {
                  if (previousDetails && currentGoal > previousDetails.tuneInGoal) {
                    this.warn("CDN Tune-in goal increased from: " + previousDetails.tuneInGoal + " to: " + currentGoal + " with playlist age: " + details.age);
                    currentGoal = 0;
                  } else {
                    var segments = Math.floor(currentGoal / details.targetduration);
                    msn += segments;
                    if (part !== void 0) {
                      var parts = Math.round(currentGoal % details.targetduration / details.partTarget);
                      part += parts;
                    }
                    this.log("CDN Tune-in age: " + details.ageHeader + "s last advanced " + lastAdvanced.toFixed(2) + "s goal: " + currentGoal + " skip sn " + segments + " to part " + part);
                  }
                  details.tuneInGoal = currentGoal;
                }
                deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);
                if (lowLatencyMode || !lastPart) {
                  this.loadPlaylist(deliveryDirectives);
                  return;
                }
              } else if (details.canBlockReload || details.canSkipUntil) {
                deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);
              }
              var bufferInfo = this.hls.mainForwardBufferInfo;
              var position = bufferInfo ? bufferInfo.end - bufferInfo.len : 0;
              var distanceToLiveEdgeMs = (details.edge - position) * 1e3;
              var reloadInterval = computeReloadInterval(details, distanceToLiveEdgeMs);
              if (details.updated && now2 > this.requestScheduled + reloadInterval) {
                this.requestScheduled = stats.loading.start;
              }
              if (msn !== void 0 && details.canBlockReload) {
                this.requestScheduled = stats.loading.first + reloadInterval - (details.partTarget * 1e3 || 1e3);
              } else if (this.requestScheduled === -1 || this.requestScheduled + reloadInterval < now2) {
                this.requestScheduled = now2;
              } else if (this.requestScheduled - now2 <= 0) {
                this.requestScheduled += reloadInterval;
              }
              var estimatedTimeUntilUpdate = this.requestScheduled - now2;
              estimatedTimeUntilUpdate = Math.max(0, estimatedTimeUntilUpdate);
              this.log("reload live playlist " + index + " in " + Math.round(estimatedTimeUntilUpdate) + " ms");
              this.timer = self.setTimeout(function() {
                return _this.loadPlaylist(deliveryDirectives);
              }, estimatedTimeUntilUpdate);
            } else {
              this.clearTimer();
            }
          };
          _proto.getDeliveryDirectives = function getDeliveryDirectives(details, previousDeliveryDirectives, msn, part) {
            var skip = getSkipValue(details);
            if (previousDeliveryDirectives != null && previousDeliveryDirectives.skip && details.deltaUpdateFailed) {
              msn = previousDeliveryDirectives.msn;
              part = previousDeliveryDirectives.part;
              skip = HlsSkip.No;
            }
            return new HlsUrlParameters(msn, part, skip);
          };
          _proto.checkRetry = function checkRetry(errorEvent) {
            var _this2 = this;
            var errorDetails = errorEvent.details;
            var isTimeout = isTimeoutError(errorEvent);
            var errorAction = errorEvent.errorAction;
            var _ref = errorAction || {}, action = _ref.action, _ref$retryCount = _ref.retryCount, retryCount = _ref$retryCount === void 0 ? 0 : _ref$retryCount, retryConfig = _ref.retryConfig;
            var retry = !!errorAction && !!retryConfig && (action === NetworkErrorAction.RetryRequest || !errorAction.resolved && action === NetworkErrorAction.SendAlternateToPenaltyBox);
            if (retry) {
              var _errorEvent$context;
              this.requestScheduled = -1;
              if (retryCount >= retryConfig.maxNumRetry) {
                return false;
              }
              if (isTimeout && (_errorEvent$context = errorEvent.context) != null && _errorEvent$context.deliveryDirectives) {
                this.warn("Retrying playlist loading " + (retryCount + 1) + "/" + retryConfig.maxNumRetry + ' after "' + errorDetails + '" without delivery-directives');
                this.loadPlaylist();
              } else {
                var delay = getRetryDelay(retryConfig, retryCount);
                this.timer = self.setTimeout(function() {
                  return _this2.loadPlaylist();
                }, delay);
                this.warn("Retrying playlist loading " + (retryCount + 1) + "/" + retryConfig.maxNumRetry + ' after "' + errorDetails + '" in ' + delay + "ms");
              }
              errorEvent.levelRetry = true;
              errorAction.resolved = true;
            }
            return retry;
          };
          return BasePlaylistController2;
        }();
        var EWMA = function() {
          function EWMA2(halfLife, estimate, weight) {
            if (estimate === void 0) {
              estimate = 0;
            }
            if (weight === void 0) {
              weight = 0;
            }
            this.halfLife = void 0;
            this.alpha_ = void 0;
            this.estimate_ = void 0;
            this.totalWeight_ = void 0;
            this.halfLife = halfLife;
            this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;
            this.estimate_ = estimate;
            this.totalWeight_ = weight;
          }
          var _proto = EWMA2.prototype;
          _proto.sample = function sample(weight, value) {
            var adjAlpha = Math.pow(this.alpha_, weight);
            this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;
            this.totalWeight_ += weight;
          };
          _proto.getTotalWeight = function getTotalWeight() {
            return this.totalWeight_;
          };
          _proto.getEstimate = function getEstimate() {
            if (this.alpha_) {
              var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);
              if (zeroFactor) {
                return this.estimate_ / zeroFactor;
              }
            }
            return this.estimate_;
          };
          return EWMA2;
        }();
        var EwmaBandWidthEstimator = function() {
          function EwmaBandWidthEstimator2(slow, fast, defaultEstimate, defaultTTFB) {
            if (defaultTTFB === void 0) {
              defaultTTFB = 100;
            }
            this.defaultEstimate_ = void 0;
            this.minWeight_ = void 0;
            this.minDelayMs_ = void 0;
            this.slow_ = void 0;
            this.fast_ = void 0;
            this.defaultTTFB_ = void 0;
            this.ttfb_ = void 0;
            this.defaultEstimate_ = defaultEstimate;
            this.minWeight_ = 1e-3;
            this.minDelayMs_ = 50;
            this.slow_ = new EWMA(slow);
            this.fast_ = new EWMA(fast);
            this.defaultTTFB_ = defaultTTFB;
            this.ttfb_ = new EWMA(slow);
          }
          var _proto = EwmaBandWidthEstimator2.prototype;
          _proto.update = function update(slow, fast) {
            var slow_ = this.slow_, fast_ = this.fast_, ttfb_ = this.ttfb_;
            if (slow_.halfLife !== slow) {
              this.slow_ = new EWMA(slow, slow_.getEstimate(), slow_.getTotalWeight());
            }
            if (fast_.halfLife !== fast) {
              this.fast_ = new EWMA(fast, fast_.getEstimate(), fast_.getTotalWeight());
            }
            if (ttfb_.halfLife !== slow) {
              this.ttfb_ = new EWMA(slow, ttfb_.getEstimate(), ttfb_.getTotalWeight());
            }
          };
          _proto.sample = function sample(durationMs, numBytes) {
            durationMs = Math.max(durationMs, this.minDelayMs_);
            var numBits = 8 * numBytes;
            var durationS = durationMs / 1e3;
            var bandwidthInBps = numBits / durationS;
            this.fast_.sample(durationS, bandwidthInBps);
            this.slow_.sample(durationS, bandwidthInBps);
          };
          _proto.sampleTTFB = function sampleTTFB(ttfb) {
            var seconds = ttfb / 1e3;
            var weight = Math.sqrt(2) * Math.exp(-Math.pow(seconds, 2) / 2);
            this.ttfb_.sample(weight, Math.max(ttfb, 5));
          };
          _proto.canEstimate = function canEstimate() {
            return this.fast_.getTotalWeight() >= this.minWeight_;
          };
          _proto.getEstimate = function getEstimate() {
            if (this.canEstimate()) {
              return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
            } else {
              return this.defaultEstimate_;
            }
          };
          _proto.getEstimateTTFB = function getEstimateTTFB() {
            if (this.ttfb_.getTotalWeight() >= this.minWeight_) {
              return this.ttfb_.getEstimate();
            } else {
              return this.defaultTTFB_;
            }
          };
          _proto.destroy = function destroy() {
          };
          return EwmaBandWidthEstimator2;
        }();
        function isHdrSupported() {
          if (typeof matchMedia === "function") {
            var mediaQueryList = matchMedia("(dynamic-range: high)");
            var badQuery = matchMedia("bad query");
            if (mediaQueryList.media !== badQuery.media) {
              return mediaQueryList.matches === true;
            }
          }
          return false;
        }
        function getVideoSelectionOptions(currentVideoRange, videoPreference) {
          var preferHDR = false;
          var allowedVideoRanges = [];
          if (currentVideoRange) {
            preferHDR = currentVideoRange !== "SDR";
            allowedVideoRanges = [currentVideoRange];
          }
          if (videoPreference) {
            allowedVideoRanges = videoPreference.allowedVideoRanges || VideoRangeValues.slice(0);
            preferHDR = videoPreference.preferHDR !== void 0 ? videoPreference.preferHDR : isHdrSupported();
            if (preferHDR) {
              allowedVideoRanges = allowedVideoRanges.filter(function(range) {
                return range !== "SDR";
              });
            } else {
              allowedVideoRanges = ["SDR"];
            }
          }
          return {
            preferHDR,
            allowedVideoRanges
          };
        }
        function getStartCodecTier(codecTiers, currentVideoRange, currentBw, audioPreference, videoPreference) {
          var codecSets = Object.keys(codecTiers);
          var channelsPreference = audioPreference == null ? void 0 : audioPreference.channels;
          var audioCodecPreference = audioPreference == null ? void 0 : audioPreference.audioCodec;
          var preferStereo = channelsPreference && parseInt(channelsPreference) === 2;
          var hasStereo = true;
          var hasCurrentVideoRange = false;
          var minHeight = Infinity;
          var minFramerate = Infinity;
          var minBitrate = Infinity;
          var selectedScore = 0;
          var videoRanges = [];
          var _getVideoSelectionOpt = getVideoSelectionOptions(currentVideoRange, videoPreference), preferHDR = _getVideoSelectionOpt.preferHDR, allowedVideoRanges = _getVideoSelectionOpt.allowedVideoRanges;
          var _loop = function _loop2() {
            var tier = codecTiers[codecSets[i]];
            hasStereo = tier.channels[2] > 0;
            minHeight = Math.min(minHeight, tier.minHeight);
            minFramerate = Math.min(minFramerate, tier.minFramerate);
            minBitrate = Math.min(minBitrate, tier.minBitrate);
            var matchingVideoRanges = allowedVideoRanges.filter(function(range) {
              return tier.videoRanges[range] > 0;
            });
            if (matchingVideoRanges.length > 0) {
              hasCurrentVideoRange = true;
              videoRanges = matchingVideoRanges;
            }
          };
          for (var i = codecSets.length; i--; ) {
            _loop();
          }
          minHeight = isFiniteNumber(minHeight) ? minHeight : 0;
          minFramerate = isFiniteNumber(minFramerate) ? minFramerate : 0;
          var maxHeight = Math.max(1080, minHeight);
          var maxFramerate = Math.max(30, minFramerate);
          minBitrate = isFiniteNumber(minBitrate) ? minBitrate : currentBw;
          currentBw = Math.max(minBitrate, currentBw);
          if (!hasCurrentVideoRange) {
            currentVideoRange = void 0;
            videoRanges = [];
          }
          var codecSet = codecSets.reduce(function(selected, candidate) {
            var candidateTier = codecTiers[candidate];
            if (candidate === selected) {
              return selected;
            }
            if (candidateTier.minBitrate > currentBw) {
              logStartCodecCandidateIgnored(candidate, "min bitrate of " + candidateTier.minBitrate + " > current estimate of " + currentBw);
              return selected;
            }
            if (!candidateTier.hasDefaultAudio) {
              logStartCodecCandidateIgnored(candidate, "no renditions with default or auto-select sound found");
              return selected;
            }
            if (audioCodecPreference && candidate.indexOf(audioCodecPreference.substring(0, 4)) % 5 !== 0) {
              logStartCodecCandidateIgnored(candidate, 'audio codec preference "' + audioCodecPreference + '" not found');
              return selected;
            }
            if (channelsPreference && !preferStereo) {
              if (!candidateTier.channels[channelsPreference]) {
                logStartCodecCandidateIgnored(candidate, "no renditions with " + channelsPreference + " channel sound found (channels options: " + Object.keys(candidateTier.channels) + ")");
                return selected;
              }
            } else if ((!audioCodecPreference || preferStereo) && hasStereo && candidateTier.channels["2"] === 0) {
              logStartCodecCandidateIgnored(candidate, "no renditions with stereo sound found");
              return selected;
            }
            if (candidateTier.minHeight > maxHeight) {
              logStartCodecCandidateIgnored(candidate, "min resolution of " + candidateTier.minHeight + " > maximum of " + maxHeight);
              return selected;
            }
            if (candidateTier.minFramerate > maxFramerate) {
              logStartCodecCandidateIgnored(candidate, "min framerate of " + candidateTier.minFramerate + " > maximum of " + maxFramerate);
              return selected;
            }
            if (!videoRanges.some(function(range) {
              return candidateTier.videoRanges[range] > 0;
            })) {
              logStartCodecCandidateIgnored(candidate, "no variants with VIDEO-RANGE of " + JSON.stringify(videoRanges) + " found");
              return selected;
            }
            if (candidateTier.maxScore < selectedScore) {
              logStartCodecCandidateIgnored(candidate, "max score of " + candidateTier.maxScore + " < selected max of " + selectedScore);
              return selected;
            }
            if (selected && (codecsSetSelectionPreferenceValue(candidate) >= codecsSetSelectionPreferenceValue(selected) || candidateTier.fragmentError > codecTiers[selected].fragmentError)) {
              return selected;
            }
            selectedScore = candidateTier.maxScore;
            return candidate;
          }, void 0);
          return {
            codecSet,
            videoRanges,
            preferHDR,
            minFramerate,
            minBitrate
          };
        }
        function logStartCodecCandidateIgnored(codeSet, reason) {
          logger.log('[abr] start candidates with "' + codeSet + '" ignored because ' + reason);
        }
        function getAudioTracksByGroup(allAudioTracks) {
          return allAudioTracks.reduce(function(audioTracksByGroup, track) {
            var trackGroup = audioTracksByGroup.groups[track.groupId];
            if (!trackGroup) {
              trackGroup = audioTracksByGroup.groups[track.groupId] = {
                tracks: [],
                channels: {
                  2: 0
                },
                hasDefault: false,
                hasAutoSelect: false
              };
            }
            trackGroup.tracks.push(track);
            var channelsKey = track.channels || "2";
            trackGroup.channels[channelsKey] = (trackGroup.channels[channelsKey] || 0) + 1;
            trackGroup.hasDefault = trackGroup.hasDefault || track.default;
            trackGroup.hasAutoSelect = trackGroup.hasAutoSelect || track.autoselect;
            if (trackGroup.hasDefault) {
              audioTracksByGroup.hasDefaultAudio = true;
            }
            if (trackGroup.hasAutoSelect) {
              audioTracksByGroup.hasAutoSelectAudio = true;
            }
            return audioTracksByGroup;
          }, {
            hasDefaultAudio: false,
            hasAutoSelectAudio: false,
            groups: {}
          });
        }
        function getCodecTiers(levels, audioTracksByGroup, minAutoLevel, maxAutoLevel) {
          return levels.slice(minAutoLevel, maxAutoLevel + 1).reduce(function(tiers, level) {
            if (!level.codecSet) {
              return tiers;
            }
            var audioGroups = level.audioGroups;
            var tier = tiers[level.codecSet];
            if (!tier) {
              tiers[level.codecSet] = tier = {
                minBitrate: Infinity,
                minHeight: Infinity,
                minFramerate: Infinity,
                maxScore: 0,
                videoRanges: {
                  SDR: 0
                },
                channels: {
                  "2": 0
                },
                hasDefaultAudio: !audioGroups,
                fragmentError: 0
              };
            }
            tier.minBitrate = Math.min(tier.minBitrate, level.bitrate);
            var lesserWidthOrHeight = Math.min(level.height, level.width);
            tier.minHeight = Math.min(tier.minHeight, lesserWidthOrHeight);
            tier.minFramerate = Math.min(tier.minFramerate, level.frameRate);
            tier.maxScore = Math.max(tier.maxScore, level.score);
            tier.fragmentError += level.fragmentError;
            tier.videoRanges[level.videoRange] = (tier.videoRanges[level.videoRange] || 0) + 1;
            return tiers;
          }, {});
        }
        var AbrController = function() {
          function AbrController2(_hls) {
            var _this = this;
            this.hls = void 0;
            this.lastLevelLoadSec = 0;
            this.lastLoadedFragLevel = -1;
            this.firstSelection = -1;
            this._nextAutoLevel = -1;
            this.nextAutoLevelKey = "";
            this.audioTracksByGroup = null;
            this.codecTiers = null;
            this.timer = -1;
            this.fragCurrent = null;
            this.partCurrent = null;
            this.bitrateTestDelay = 0;
            this.bwEstimator = void 0;
            this._abandonRulesCheck = function() {
              var frag = _this.fragCurrent, part = _this.partCurrent, hls = _this.hls;
              var autoLevelEnabled = hls.autoLevelEnabled, media = hls.media;
              if (!frag || !media) {
                return;
              }
              var now2 = performance.now();
              var stats = part ? part.stats : frag.stats;
              var duration = part ? part.duration : frag.duration;
              var timeLoading = now2 - stats.loading.start;
              var minAutoLevel = hls.minAutoLevel;
              if (stats.aborted || stats.loaded && stats.loaded === stats.total || frag.level <= minAutoLevel) {
                _this.clearTimer();
                _this._nextAutoLevel = -1;
                return;
              }
              if (!autoLevelEnabled || media.paused || !media.playbackRate || !media.readyState) {
                return;
              }
              var bufferInfo = hls.mainForwardBufferInfo;
              if (bufferInfo === null) {
                return;
              }
              var ttfbEstimate = _this.bwEstimator.getEstimateTTFB();
              var playbackRate = Math.abs(media.playbackRate);
              if (timeLoading <= Math.max(ttfbEstimate, 1e3 * (duration / (playbackRate * 2)))) {
                return;
              }
              var bufferStarvationDelay = bufferInfo.len / playbackRate;
              var ttfb = stats.loading.first ? stats.loading.first - stats.loading.start : -1;
              var loadedFirstByte = stats.loaded && ttfb > -1;
              var bwEstimate = _this.getBwEstimate();
              var levels = hls.levels;
              var level = levels[frag.level];
              var expectedLen = stats.total || Math.max(stats.loaded, Math.round(duration * level.averageBitrate / 8));
              var timeStreaming = loadedFirstByte ? timeLoading - ttfb : timeLoading;
              if (timeStreaming < 1 && loadedFirstByte) {
                timeStreaming = Math.min(timeLoading, stats.loaded * 8 / bwEstimate);
              }
              var loadRate = loadedFirstByte ? stats.loaded * 1e3 / timeStreaming : 0;
              var fragLoadedDelay = loadRate ? (expectedLen - stats.loaded) / loadRate : expectedLen * 8 / bwEstimate + ttfbEstimate / 1e3;
              if (fragLoadedDelay <= bufferStarvationDelay) {
                return;
              }
              var bwe = loadRate ? loadRate * 8 : bwEstimate;
              var fragLevelNextLoadedDelay = Number.POSITIVE_INFINITY;
              var nextLoadLevel;
              for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {
                var levelNextBitrate = levels[nextLoadLevel].maxBitrate;
                fragLevelNextLoadedDelay = _this.getTimeToLoadFrag(ttfbEstimate / 1e3, bwe, duration * levelNextBitrate, !levels[nextLoadLevel].details);
                if (fragLevelNextLoadedDelay < bufferStarvationDelay) {
                  break;
                }
              }
              if (fragLevelNextLoadedDelay >= fragLoadedDelay) {
                return;
              }
              if (fragLevelNextLoadedDelay > duration * 10) {
                return;
              }
              hls.nextLoadLevel = hls.nextAutoLevel = nextLoadLevel;
              if (loadedFirstByte) {
                _this.bwEstimator.sample(timeLoading - Math.min(ttfbEstimate, ttfb), stats.loaded);
              } else {
                _this.bwEstimator.sampleTTFB(timeLoading);
              }
              var nextLoadLevelBitrate = levels[nextLoadLevel].maxBitrate;
              if (_this.getBwEstimate() * _this.hls.config.abrBandWidthUpFactor > nextLoadLevelBitrate) {
                _this.resetEstimator(nextLoadLevelBitrate);
              }
              _this.clearTimer();
              logger.warn("[abr] Fragment " + frag.sn + (part ? " part " + part.index : "") + " of level " + frag.level + " is loading too slowly;\n      Time to underbuffer: " + bufferStarvationDelay.toFixed(3) + " s\n      Estimated load time for current fragment: " + fragLoadedDelay.toFixed(3) + " s\n      Estimated load time for down switch fragment: " + fragLevelNextLoadedDelay.toFixed(3) + " s\n      TTFB estimate: " + (ttfb | 0) + " ms\n      Current BW estimate: " + (isFiniteNumber(bwEstimate) ? bwEstimate | 0 : "Unknown") + " bps\n      New BW estimate: " + (_this.getBwEstimate() | 0) + " bps\n      Switching to level " + nextLoadLevel + " @ " + (nextLoadLevelBitrate | 0) + " bps");
              hls.trigger(Events.FRAG_LOAD_EMERGENCY_ABORTED, {
                frag,
                part,
                stats
              });
            };
            this.hls = _hls;
            this.bwEstimator = this.initEstimator();
            this.registerListeners();
          }
          var _proto = AbrController2.prototype;
          _proto.resetEstimator = function resetEstimator(abrEwmaDefaultEstimate) {
            if (abrEwmaDefaultEstimate) {
              logger.log("setting initial bwe to " + abrEwmaDefaultEstimate);
              this.hls.config.abrEwmaDefaultEstimate = abrEwmaDefaultEstimate;
            }
            this.firstSelection = -1;
            this.bwEstimator = this.initEstimator();
          };
          _proto.initEstimator = function initEstimator() {
            var config = this.hls.config;
            return new EwmaBandWidthEstimator(config.abrEwmaSlowVoD, config.abrEwmaFastVoD, config.abrEwmaDefaultEstimate);
          };
          _proto.registerListeners = function registerListeners() {
            var hls = this.hls;
            hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.on(Events.FRAG_LOADING, this.onFragLoading, this);
            hls.on(Events.FRAG_LOADED, this.onFragLoaded, this);
            hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);
            hls.on(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);
            hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);
            hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);
            hls.on(Events.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this);
            hls.on(Events.ERROR, this.onError, this);
          };
          _proto.unregisterListeners = function unregisterListeners() {
            var hls = this.hls;
            if (!hls) {
              return;
            }
            hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.off(Events.FRAG_LOADING, this.onFragLoading, this);
            hls.off(Events.FRAG_LOADED, this.onFragLoaded, this);
            hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);
            hls.off(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);
            hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);
            hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);
            hls.off(Events.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this);
            hls.off(Events.ERROR, this.onError, this);
          };
          _proto.destroy = function destroy() {
            this.unregisterListeners();
            this.clearTimer();
            this.hls = this._abandonRulesCheck = null;
            this.fragCurrent = this.partCurrent = null;
          };
          _proto.onManifestLoading = function onManifestLoading(event, data) {
            this.lastLoadedFragLevel = -1;
            this.firstSelection = -1;
            this.lastLevelLoadSec = 0;
            this.fragCurrent = this.partCurrent = null;
            this.onLevelsUpdated();
            this.clearTimer();
          };
          _proto.onLevelsUpdated = function onLevelsUpdated() {
            if (this.lastLoadedFragLevel > -1 && this.fragCurrent) {
              this.lastLoadedFragLevel = this.fragCurrent.level;
            }
            this._nextAutoLevel = -1;
            this.onMaxAutoLevelUpdated();
            this.codecTiers = null;
            this.audioTracksByGroup = null;
          };
          _proto.onMaxAutoLevelUpdated = function onMaxAutoLevelUpdated() {
            this.firstSelection = -1;
            this.nextAutoLevelKey = "";
          };
          _proto.onFragLoading = function onFragLoading(event, data) {
            var frag = data.frag;
            if (this.ignoreFragment(frag)) {
              return;
            }
            if (!frag.bitrateTest) {
              var _data$part;
              this.fragCurrent = frag;
              this.partCurrent = (_data$part = data.part) != null ? _data$part : null;
            }
            this.clearTimer();
            this.timer = self.setInterval(this._abandonRulesCheck, 100);
          };
          _proto.onLevelSwitching = function onLevelSwitching(event, data) {
            this.clearTimer();
          };
          _proto.onError = function onError(event, data) {
            if (data.fatal) {
              return;
            }
            switch (data.details) {
              case ErrorDetails.BUFFER_ADD_CODEC_ERROR:
              case ErrorDetails.BUFFER_APPEND_ERROR:
                this.lastLoadedFragLevel = -1;
                this.firstSelection = -1;
                break;
              case ErrorDetails.FRAG_LOAD_TIMEOUT: {
                var frag = data.frag;
                var fragCurrent = this.fragCurrent, part = this.partCurrent;
                if (frag && fragCurrent && frag.sn === fragCurrent.sn && frag.level === fragCurrent.level) {
                  var now2 = performance.now();
                  var stats = part ? part.stats : frag.stats;
                  var timeLoading = now2 - stats.loading.start;
                  var ttfb = stats.loading.first ? stats.loading.first - stats.loading.start : -1;
                  var loadedFirstByte = stats.loaded && ttfb > -1;
                  if (loadedFirstByte) {
                    var ttfbEstimate = this.bwEstimator.getEstimateTTFB();
                    this.bwEstimator.sample(timeLoading - Math.min(ttfbEstimate, ttfb), stats.loaded);
                  } else {
                    this.bwEstimator.sampleTTFB(timeLoading);
                  }
                }
                break;
              }
            }
          };
          _proto.getTimeToLoadFrag = function getTimeToLoadFrag(timeToFirstByteSec, bandwidth, fragSizeBits, isSwitch) {
            var fragLoadSec = timeToFirstByteSec + fragSizeBits / bandwidth;
            var playlistLoadSec = isSwitch ? this.lastLevelLoadSec : 0;
            return fragLoadSec + playlistLoadSec;
          };
          _proto.onLevelLoaded = function onLevelLoaded(event, data) {
            var config = this.hls.config;
            var loading = data.stats.loading;
            var timeLoadingMs = loading.end - loading.start;
            if (isFiniteNumber(timeLoadingMs)) {
              this.lastLevelLoadSec = timeLoadingMs / 1e3;
            }
            if (data.details.live) {
              this.bwEstimator.update(config.abrEwmaSlowLive, config.abrEwmaFastLive);
            } else {
              this.bwEstimator.update(config.abrEwmaSlowVoD, config.abrEwmaFastVoD);
            }
          };
          _proto.onFragLoaded = function onFragLoaded(event, _ref) {
            var frag = _ref.frag, part = _ref.part;
            var stats = part ? part.stats : frag.stats;
            if (frag.type === PlaylistLevelType.MAIN) {
              this.bwEstimator.sampleTTFB(stats.loading.first - stats.loading.start);
            }
            if (this.ignoreFragment(frag)) {
              return;
            }
            this.clearTimer();
            if (frag.level === this._nextAutoLevel) {
              this._nextAutoLevel = -1;
            }
            this.firstSelection = -1;
            if (this.hls.config.abrMaxWithRealBitrate) {
              var duration = part ? part.duration : frag.duration;
              var level = this.hls.levels[frag.level];
              var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + stats.loaded;
              var loadedDuration = (level.loaded ? level.loaded.duration : 0) + duration;
              level.loaded = {
                bytes: loadedBytes,
                duration: loadedDuration
              };
              level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);
            }
            if (frag.bitrateTest) {
              var fragBufferedData = {
                stats,
                frag,
                part,
                id: frag.type
              };
              this.onFragBuffered(Events.FRAG_BUFFERED, fragBufferedData);
              frag.bitrateTest = false;
            } else {
              this.lastLoadedFragLevel = frag.level;
            }
          };
          _proto.onFragBuffered = function onFragBuffered(event, data) {
            var frag = data.frag, part = data.part;
            var stats = part != null && part.stats.loaded ? part.stats : frag.stats;
            if (stats.aborted) {
              return;
            }
            if (this.ignoreFragment(frag)) {
              return;
            }
            var processingMs = stats.parsing.end - stats.loading.start - Math.min(stats.loading.first - stats.loading.start, this.bwEstimator.getEstimateTTFB());
            this.bwEstimator.sample(processingMs, stats.loaded);
            stats.bwEstimate = this.getBwEstimate();
            if (frag.bitrateTest) {
              this.bitrateTestDelay = processingMs / 1e3;
            } else {
              this.bitrateTestDelay = 0;
            }
          };
          _proto.ignoreFragment = function ignoreFragment(frag) {
            return frag.type !== PlaylistLevelType.MAIN || frag.sn === "initSegment";
          };
          _proto.clearTimer = function clearTimer() {
            if (this.timer > -1) {
              self.clearInterval(this.timer);
              this.timer = -1;
            }
          };
          _proto.getAutoLevelKey = function getAutoLevelKey() {
            return this.getBwEstimate() + "_" + this.getStarvationDelay().toFixed(2);
          };
          _proto.getNextABRAutoLevel = function getNextABRAutoLevel() {
            var fragCurrent = this.fragCurrent, partCurrent = this.partCurrent, hls = this.hls;
            var maxAutoLevel = hls.maxAutoLevel, config = hls.config, minAutoLevel = hls.minAutoLevel;
            var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;
            var avgbw = this.getBwEstimate();
            var bufferStarvationDelay = this.getStarvationDelay();
            var bwFactor = config.abrBandWidthFactor;
            var bwUpFactor = config.abrBandWidthUpFactor;
            if (bufferStarvationDelay) {
              var _bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, 0, bwFactor, bwUpFactor);
              if (_bestLevel >= 0) {
                return _bestLevel;
              }
            }
            var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;
            if (!bufferStarvationDelay) {
              var bitrateTestDelay = this.bitrateTestDelay;
              if (bitrateTestDelay) {
                var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;
                maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;
                logger.info("[abr] bitrate test took " + Math.round(1e3 * bitrateTestDelay) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * maxStarvationDelay) + " ms");
                bwFactor = bwUpFactor = 1;
              }
            }
            var bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, maxStarvationDelay, bwFactor, bwUpFactor);
            logger.info("[abr] " + (bufferStarvationDelay ? "rebuffering expected" : "buffer is empty") + ", optimal quality level " + bestLevel);
            if (bestLevel > -1) {
              return bestLevel;
            }
            var minLevel = hls.levels[minAutoLevel];
            var autoLevel = hls.levels[hls.loadLevel];
            if ((minLevel == null ? void 0 : minLevel.bitrate) < (autoLevel == null ? void 0 : autoLevel.bitrate)) {
              return minAutoLevel;
            }
            return hls.loadLevel;
          };
          _proto.getStarvationDelay = function getStarvationDelay() {
            var hls = this.hls;
            var media = hls.media;
            if (!media) {
              return Infinity;
            }
            var playbackRate = media && media.playbackRate !== 0 ? Math.abs(media.playbackRate) : 1;
            var bufferInfo = hls.mainForwardBufferInfo;
            return (bufferInfo ? bufferInfo.len : 0) / playbackRate;
          };
          _proto.getBwEstimate = function getBwEstimate() {
            return this.bwEstimator.canEstimate() ? this.bwEstimator.getEstimate() : this.hls.config.abrEwmaDefaultEstimate;
          };
          _proto.findBestLevel = function findBestLevel(currentBw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, maxStarvationDelay, bwFactor, bwUpFactor) {
            var _level$details, _this2 = this;
            var maxFetchDuration = bufferStarvationDelay + maxStarvationDelay;
            var lastLoadedFragLevel = this.lastLoadedFragLevel;
            var selectionBaseLevel = lastLoadedFragLevel === -1 ? this.hls.firstLevel : lastLoadedFragLevel;
            var fragCurrent = this.fragCurrent, partCurrent = this.partCurrent;
            var _this$hls = this.hls, levels = _this$hls.levels, allAudioTracks = _this$hls.allAudioTracks, loadLevel = _this$hls.loadLevel, config = _this$hls.config;
            if (levels.length === 1) {
              return 0;
            }
            var level = levels[selectionBaseLevel];
            var live = !!(level != null && (_level$details = level.details) != null && _level$details.live);
            var firstSelection = loadLevel === -1 || lastLoadedFragLevel === -1;
            var currentCodecSet;
            var currentVideoRange = "SDR";
            var currentFrameRate = (level == null ? void 0 : level.frameRate) || 0;
            var audioPreference = config.audioPreference, videoPreference = config.videoPreference;
            var audioTracksByGroup = this.audioTracksByGroup || (this.audioTracksByGroup = getAudioTracksByGroup(allAudioTracks));
            if (firstSelection) {
              if (this.firstSelection !== -1) {
                return this.firstSelection;
              }
              var codecTiers = this.codecTiers || (this.codecTiers = getCodecTiers(levels, audioTracksByGroup, minAutoLevel, maxAutoLevel));
              var startTier = getStartCodecTier(codecTiers, currentVideoRange, currentBw, audioPreference, videoPreference);
              var codecSet = startTier.codecSet, videoRanges = startTier.videoRanges, minFramerate = startTier.minFramerate, minBitrate = startTier.minBitrate, preferHDR = startTier.preferHDR;
              currentCodecSet = codecSet;
              currentVideoRange = preferHDR ? videoRanges[videoRanges.length - 1] : videoRanges[0];
              currentFrameRate = minFramerate;
              currentBw = Math.max(currentBw, minBitrate);
              logger.log("[abr] picked start tier " + JSON.stringify(startTier));
            } else {
              currentCodecSet = level == null ? void 0 : level.codecSet;
              currentVideoRange = level == null ? void 0 : level.videoRange;
            }
            var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;
            var ttfbEstimateSec = this.bwEstimator.getEstimateTTFB() / 1e3;
            var levelsSkipped = [];
            var _loop = function _loop2() {
              var _levelInfo$supportedR;
              var levelInfo = levels[i];
              var upSwitch = i > selectionBaseLevel;
              if (!levelInfo) {
                return 0;
              }
              if (currentCodecSet && levelInfo.codecSet !== currentCodecSet || currentVideoRange && levelInfo.videoRange !== currentVideoRange || upSwitch && currentFrameRate > levelInfo.frameRate || !upSwitch && currentFrameRate > 0 && currentFrameRate < levelInfo.frameRate || levelInfo.supportedResult && !((_levelInfo$supportedR = levelInfo.supportedResult.decodingInfoResults) != null && _levelInfo$supportedR[0].smooth)) {
                levelsSkipped.push(i);
                return 0;
              }
              var levelDetails = levelInfo.details;
              var avgDuration = (partCurrent ? levelDetails == null ? void 0 : levelDetails.partTarget : levelDetails == null ? void 0 : levelDetails.averagetargetduration) || currentFragDuration;
              var adjustedbw;
              if (!upSwitch) {
                adjustedbw = bwFactor * currentBw;
              } else {
                adjustedbw = bwUpFactor * currentBw;
              }
              var bitrate = currentFragDuration && bufferStarvationDelay >= currentFragDuration * 2 && maxStarvationDelay === 0 ? levels[i].averageBitrate : levels[i].maxBitrate;
              var fetchDuration = _this2.getTimeToLoadFrag(ttfbEstimateSec, adjustedbw, bitrate * avgDuration, levelDetails === void 0);
              var canSwitchWithinTolerance = (
                // if adjusted bw is greater than level bitrate AND
                adjustedbw >= bitrate && // no level change, or new level has no error history
                (i === lastLoadedFragLevel || levelInfo.loadError === 0 && levelInfo.fragmentError === 0) && // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches
                // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
                // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that findBestLevel will return -1
                (fetchDuration <= ttfbEstimateSec || !isFiniteNumber(fetchDuration) || live && !_this2.bitrateTestDelay || fetchDuration < maxFetchDuration)
              );
              if (canSwitchWithinTolerance) {
                var forcedAutoLevel = _this2.forcedAutoLevel;
                if (i !== loadLevel && (forcedAutoLevel === -1 || forcedAutoLevel !== loadLevel)) {
                  if (levelsSkipped.length) {
                    logger.trace("[abr] Skipped level(s) " + levelsSkipped.join(",") + " of " + maxAutoLevel + ' max with CODECS and VIDEO-RANGE:"' + levels[levelsSkipped[0]].codecs + '" ' + levels[levelsSkipped[0]].videoRange + '; not compatible with "' + level.codecs + '" ' + currentVideoRange);
                  }
                  logger.info("[abr] switch candidate:" + selectionBaseLevel + "->" + i + " adjustedbw(" + Math.round(adjustedbw) + ")-bitrate=" + Math.round(adjustedbw - bitrate) + " ttfb:" + ttfbEstimateSec.toFixed(1) + " avgDuration:" + avgDuration.toFixed(1) + " maxFetchDuration:" + maxFetchDuration.toFixed(1) + " fetchDuration:" + fetchDuration.toFixed(1) + " firstSelection:" + firstSelection + " codecSet:" + currentCodecSet + " videoRange:" + currentVideoRange + " hls.loadLevel:" + loadLevel);
                }
                if (firstSelection) {
                  _this2.firstSelection = i;
                }
                return {
                  v: i
                };
              }
            }, _ret;
            for (var i = maxAutoLevel; i >= minAutoLevel; i--) {
              _ret = _loop();
              if (_ret === 0) continue;
              if (_ret) return _ret.v;
            }
            return -1;
          };
          _createClass2(AbrController2, [{
            key: "firstAutoLevel",
            get: function get() {
              var _this$hls2 = this.hls, maxAutoLevel = _this$hls2.maxAutoLevel, minAutoLevel = _this$hls2.minAutoLevel;
              var bwEstimate = this.getBwEstimate();
              var maxStartDelay = this.hls.config.maxStarvationDelay;
              var abrAutoLevel = this.findBestLevel(bwEstimate, minAutoLevel, maxAutoLevel, 0, maxStartDelay, 1, 1);
              if (abrAutoLevel > -1) {
                return abrAutoLevel;
              }
              var firstLevel = this.hls.firstLevel;
              var clamped = Math.min(Math.max(firstLevel, minAutoLevel), maxAutoLevel);
              logger.warn("[abr] Could not find best starting auto level. Defaulting to first in playlist " + firstLevel + " clamped to " + clamped);
              return clamped;
            }
          }, {
            key: "forcedAutoLevel",
            get: function get() {
              if (this.nextAutoLevelKey) {
                return -1;
              }
              return this._nextAutoLevel;
            }
            // return next auto level
          }, {
            key: "nextAutoLevel",
            get: function get() {
              var forcedAutoLevel = this.forcedAutoLevel;
              var bwEstimator = this.bwEstimator;
              var useEstimate = bwEstimator.canEstimate();
              var loadedFirstFrag = this.lastLoadedFragLevel > -1;
              if (forcedAutoLevel !== -1 && (!useEstimate || !loadedFirstFrag || this.nextAutoLevelKey === this.getAutoLevelKey())) {
                return forcedAutoLevel;
              }
              var nextABRAutoLevel = useEstimate && loadedFirstFrag ? this.getNextABRAutoLevel() : this.firstAutoLevel;
              if (forcedAutoLevel !== -1) {
                var levels = this.hls.levels;
                if (levels.length > Math.max(forcedAutoLevel, nextABRAutoLevel) && levels[forcedAutoLevel].loadError <= levels[nextABRAutoLevel].loadError) {
                  return forcedAutoLevel;
                }
              }
              this._nextAutoLevel = nextABRAutoLevel;
              this.nextAutoLevelKey = this.getAutoLevelKey();
              return nextABRAutoLevel;
            },
            set: function set(nextLevel) {
              var _this$hls3 = this.hls, maxAutoLevel = _this$hls3.maxAutoLevel, minAutoLevel = _this$hls3.minAutoLevel;
              var value = Math.min(Math.max(nextLevel, minAutoLevel), maxAutoLevel);
              if (this._nextAutoLevel !== value) {
                this.nextAutoLevelKey = "";
                this._nextAutoLevel = value;
              }
            }
          }]);
          return AbrController2;
        }();
        var noopBuffered = {
          length: 0,
          start: function start() {
            return 0;
          },
          end: function end() {
            return 0;
          }
        };
        var BufferHelper = function() {
          function BufferHelper2() {
          }
          BufferHelper2.isBuffered = function isBuffered(media, position) {
            try {
              if (media) {
                var buffered = BufferHelper2.getBuffered(media);
                for (var i = 0; i < buffered.length; i++) {
                  if (position >= buffered.start(i) && position <= buffered.end(i)) {
                    return true;
                  }
                }
              }
            } catch (error) {
            }
            return false;
          };
          BufferHelper2.bufferInfo = function bufferInfo(media, pos, maxHoleDuration) {
            try {
              if (media) {
                var vbuffered = BufferHelper2.getBuffered(media);
                var buffered = [];
                var i;
                for (i = 0; i < vbuffered.length; i++) {
                  buffered.push({
                    start: vbuffered.start(i),
                    end: vbuffered.end(i)
                  });
                }
                return this.bufferedInfo(buffered, pos, maxHoleDuration);
              }
            } catch (error) {
            }
            return {
              len: 0,
              start: pos,
              end: pos,
              nextStart: void 0
            };
          };
          BufferHelper2.bufferedInfo = function bufferedInfo(buffered, pos, maxHoleDuration) {
            pos = Math.max(0, pos);
            buffered.sort(function(a, b) {
              var diff = a.start - b.start;
              if (diff) {
                return diff;
              } else {
                return b.end - a.end;
              }
            });
            var buffered2 = [];
            if (maxHoleDuration) {
              for (var i = 0; i < buffered.length; i++) {
                var buf2len = buffered2.length;
                if (buf2len) {
                  var buf2end = buffered2[buf2len - 1].end;
                  if (buffered[i].start - buf2end < maxHoleDuration) {
                    if (buffered[i].end > buf2end) {
                      buffered2[buf2len - 1].end = buffered[i].end;
                    }
                  } else {
                    buffered2.push(buffered[i]);
                  }
                } else {
                  buffered2.push(buffered[i]);
                }
              }
            } else {
              buffered2 = buffered;
            }
            var bufferLen = 0;
            var bufferStartNext;
            var bufferStart = pos;
            var bufferEnd = pos;
            for (var _i = 0; _i < buffered2.length; _i++) {
              var start = buffered2[_i].start;
              var end = buffered2[_i].end;
              if (pos + maxHoleDuration >= start && pos < end) {
                bufferStart = start;
                bufferEnd = end;
                bufferLen = bufferEnd - pos;
              } else if (pos + maxHoleDuration < start) {
                bufferStartNext = start;
                break;
              }
            }
            return {
              len: bufferLen,
              start: bufferStart || 0,
              end: bufferEnd || 0,
              nextStart: bufferStartNext
            };
          };
          BufferHelper2.getBuffered = function getBuffered(media) {
            try {
              return media.buffered;
            } catch (e) {
              logger.log("failed to get media.buffered", e);
              return noopBuffered;
            }
          };
          return BufferHelper2;
        }();
        var BufferOperationQueue = function() {
          function BufferOperationQueue2(sourceBufferReference) {
            this.buffers = void 0;
            this.queues = {
              video: [],
              audio: [],
              audiovideo: []
            };
            this.buffers = sourceBufferReference;
          }
          var _proto = BufferOperationQueue2.prototype;
          _proto.append = function append(operation, type, pending) {
            var queue = this.queues[type];
            queue.push(operation);
            if (queue.length === 1 && !pending) {
              this.executeNext(type);
            }
          };
          _proto.insertAbort = function insertAbort(operation, type) {
            var queue = this.queues[type];
            queue.unshift(operation);
            this.executeNext(type);
          };
          _proto.appendBlocker = function appendBlocker(type) {
            var execute;
            var promise = new Promise(function(resolve) {
              execute = resolve;
            });
            var operation = {
              execute,
              onStart: function onStart() {
              },
              onComplete: function onComplete() {
              },
              onError: function onError() {
              }
            };
            this.append(operation, type);
            return promise;
          };
          _proto.executeNext = function executeNext(type) {
            var queue = this.queues[type];
            if (queue.length) {
              var operation = queue[0];
              try {
                operation.execute();
              } catch (error) {
                logger.warn('[buffer-operation-queue]: Exception executing "' + type + '" SourceBuffer operation: ' + error);
                operation.onError(error);
                var sb = this.buffers[type];
                if (!(sb != null && sb.updating)) {
                  this.shiftAndExecuteNext(type);
                }
              }
            }
          };
          _proto.shiftAndExecuteNext = function shiftAndExecuteNext(type) {
            this.queues[type].shift();
            this.executeNext(type);
          };
          _proto.current = function current(type) {
            return this.queues[type][0];
          };
          return BufferOperationQueue2;
        }();
        var VIDEO_CODEC_PROFILE_REPLACE = /(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\.[^.,]+)+/;
        var BufferController = function() {
          function BufferController2(hls) {
            var _this = this;
            this.details = null;
            this._objectUrl = null;
            this.operationQueue = void 0;
            this.listeners = void 0;
            this.hls = void 0;
            this.bufferCodecEventsExpected = 0;
            this._bufferCodecEventsTotal = 0;
            this.media = null;
            this.mediaSource = null;
            this.lastMpegAudioChunk = null;
            this.appendSource = void 0;
            this.appendErrors = {
              audio: 0,
              video: 0,
              audiovideo: 0
            };
            this.tracks = {};
            this.pendingTracks = {};
            this.sourceBuffer = void 0;
            this.log = void 0;
            this.warn = void 0;
            this.error = void 0;
            this._onEndStreaming = function(event) {
              if (!_this.hls) {
                return;
              }
              _this.hls.pauseBuffering();
            };
            this._onStartStreaming = function(event) {
              if (!_this.hls) {
                return;
              }
              _this.hls.resumeBuffering();
            };
            this._onMediaSourceOpen = function() {
              var media = _this.media, mediaSource = _this.mediaSource;
              _this.log("Media source opened");
              if (media) {
                media.removeEventListener("emptied", _this._onMediaEmptied);
                _this.updateMediaElementDuration();
                _this.hls.trigger(Events.MEDIA_ATTACHED, {
                  media,
                  mediaSource
                });
              }
              if (mediaSource) {
                mediaSource.removeEventListener("sourceopen", _this._onMediaSourceOpen);
              }
              _this.checkPendingTracks();
            };
            this._onMediaSourceClose = function() {
              _this.log("Media source closed");
            };
            this._onMediaSourceEnded = function() {
              _this.log("Media source ended");
            };
            this._onMediaEmptied = function() {
              var mediaSrc = _this.mediaSrc, _objectUrl = _this._objectUrl;
              if (mediaSrc !== _objectUrl) {
                logger.error("Media element src was set while attaching MediaSource (" + _objectUrl + " > " + mediaSrc + ")");
              }
            };
            this.hls = hls;
            var logPrefix = "[buffer-controller]";
            this.appendSource = isManagedMediaSource(getMediaSource(hls.config.preferManagedMediaSource));
            this.log = logger.log.bind(logger, logPrefix);
            this.warn = logger.warn.bind(logger, logPrefix);
            this.error = logger.error.bind(logger, logPrefix);
            this._initSourceBuffer();
            this.registerListeners();
          }
          var _proto = BufferController2.prototype;
          _proto.hasSourceTypes = function hasSourceTypes() {
            return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
          };
          _proto.destroy = function destroy() {
            this.unregisterListeners();
            this.details = null;
            this.lastMpegAudioChunk = null;
            this.hls = null;
          };
          _proto.registerListeners = function registerListeners() {
            var hls = this.hls;
            hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
            hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
            hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);
            hls.on(Events.BUFFER_RESET, this.onBufferReset, this);
            hls.on(Events.BUFFER_APPENDING, this.onBufferAppending, this);
            hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);
            hls.on(Events.BUFFER_EOS, this.onBufferEos, this);
            hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
            hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);
            hls.on(Events.FRAG_PARSED, this.onFragParsed, this);
            hls.on(Events.FRAG_CHANGED, this.onFragChanged, this);
          };
          _proto.unregisterListeners = function unregisterListeners() {
            var hls = this.hls;
            hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
            hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
            hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);
            hls.off(Events.BUFFER_RESET, this.onBufferReset, this);
            hls.off(Events.BUFFER_APPENDING, this.onBufferAppending, this);
            hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);
            hls.off(Events.BUFFER_EOS, this.onBufferEos, this);
            hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
            hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);
            hls.off(Events.FRAG_PARSED, this.onFragParsed, this);
            hls.off(Events.FRAG_CHANGED, this.onFragChanged, this);
          };
          _proto._initSourceBuffer = function _initSourceBuffer() {
            this.sourceBuffer = {};
            this.operationQueue = new BufferOperationQueue(this.sourceBuffer);
            this.listeners = {
              audio: [],
              video: [],
              audiovideo: []
            };
            this.appendErrors = {
              audio: 0,
              video: 0,
              audiovideo: 0
            };
            this.lastMpegAudioChunk = null;
          };
          _proto.onManifestLoading = function onManifestLoading() {
            this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = 0;
            this.details = null;
          };
          _proto.onManifestParsed = function onManifestParsed(event, data) {
            var codecEvents = 2;
            if (data.audio && !data.video || !data.altAudio || true) {
              codecEvents = 1;
            }
            this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = codecEvents;
            this.log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
          };
          _proto.onMediaAttaching = function onMediaAttaching(event, data) {
            var media = this.media = data.media;
            var MediaSource = getMediaSource(this.appendSource);
            if (media && MediaSource) {
              var _ms$constructor;
              var ms = this.mediaSource = new MediaSource();
              this.log("created media source: " + ((_ms$constructor = ms.constructor) == null ? void 0 : _ms$constructor.name));
              ms.addEventListener("sourceopen", this._onMediaSourceOpen);
              ms.addEventListener("sourceended", this._onMediaSourceEnded);
              ms.addEventListener("sourceclose", this._onMediaSourceClose);
              if (this.appendSource) {
                ms.addEventListener("startstreaming", this._onStartStreaming);
                ms.addEventListener("endstreaming", this._onEndStreaming);
              }
              var objectUrl = this._objectUrl = self.URL.createObjectURL(ms);
              if (this.appendSource) {
                try {
                  media.removeAttribute("src");
                  var MMS = self.ManagedMediaSource;
                  media.disableRemotePlayback = media.disableRemotePlayback || MMS && ms instanceof MMS;
                  removeSourceChildren(media);
                  addSource(media, objectUrl);
                  media.load();
                } catch (error) {
                  media.src = objectUrl;
                }
              } else {
                media.src = objectUrl;
              }
              media.addEventListener("emptied", this._onMediaEmptied);
            }
          };
          _proto.onMediaDetaching = function onMediaDetaching() {
            var media = this.media, mediaSource = this.mediaSource, _objectUrl = this._objectUrl;
            if (mediaSource) {
              this.log("media source detaching");
              if (mediaSource.readyState === "open") {
                try {
                  mediaSource.endOfStream();
                } catch (err) {
                  this.warn("onMediaDetaching: " + err.message + " while calling endOfStream");
                }
              }
              this.onBufferReset();
              mediaSource.removeEventListener("sourceopen", this._onMediaSourceOpen);
              mediaSource.removeEventListener("sourceended", this._onMediaSourceEnded);
              mediaSource.removeEventListener("sourceclose", this._onMediaSourceClose);
              if (this.appendSource) {
                mediaSource.removeEventListener("startstreaming", this._onStartStreaming);
                mediaSource.removeEventListener("endstreaming", this._onEndStreaming);
              }
              if (media) {
                media.removeEventListener("emptied", this._onMediaEmptied);
                if (_objectUrl) {
                  self.URL.revokeObjectURL(_objectUrl);
                }
                if (this.mediaSrc === _objectUrl) {
                  media.removeAttribute("src");
                  if (this.appendSource) {
                    removeSourceChildren(media);
                  }
                  media.load();
                } else {
                  this.warn("media|source.src was changed by a third party - skip cleanup");
                }
              }
              this.mediaSource = null;
              this.media = null;
              this._objectUrl = null;
              this.bufferCodecEventsExpected = this._bufferCodecEventsTotal;
              this.pendingTracks = {};
              this.tracks = {};
            }
            this.hls.trigger(Events.MEDIA_DETACHED, void 0);
          };
          _proto.onBufferReset = function onBufferReset() {
            var _this2 = this;
            this.getSourceBufferTypes().forEach(function(type) {
              _this2.resetBuffer(type);
            });
            this._initSourceBuffer();
            this.hls.resumeBuffering();
          };
          _proto.resetBuffer = function resetBuffer(type) {
            var sb = this.sourceBuffer[type];
            try {
              if (sb) {
                var _this$mediaSource;
                this.removeBufferListeners(type);
                this.sourceBuffer[type] = void 0;
                if ((_this$mediaSource = this.mediaSource) != null && _this$mediaSource.sourceBuffers.length) {
                  this.mediaSource.removeSourceBuffer(sb);
                }
              }
            } catch (err) {
              this.warn("onBufferReset " + type, err);
            }
          };
          _proto.onBufferCodecs = function onBufferCodecs(event, data) {
            var _this3 = this;
            var sourceBufferCount = this.getSourceBufferTypes().length;
            var trackNames = Object.keys(data);
            trackNames.forEach(function(trackName) {
              if (sourceBufferCount) {
                var track = _this3.tracks[trackName];
                if (track && typeof track.buffer.changeType === "function") {
                  var _trackCodec;
                  var _data$trackName = data[trackName], id = _data$trackName.id, codec = _data$trackName.codec, levelCodec = _data$trackName.levelCodec, container = _data$trackName.container, metadata = _data$trackName.metadata;
                  var currentCodecFull = pickMostCompleteCodecName(track.codec, track.levelCodec);
                  var currentCodec = currentCodecFull == null ? void 0 : currentCodecFull.replace(VIDEO_CODEC_PROFILE_REPLACE, "$1");
                  var trackCodec = pickMostCompleteCodecName(codec, levelCodec);
                  var nextCodec = (_trackCodec = trackCodec) == null ? void 0 : _trackCodec.replace(VIDEO_CODEC_PROFILE_REPLACE, "$1");
                  if (trackCodec && currentCodec !== nextCodec) {
                    if (trackName.slice(0, 5) === "audio") {
                      trackCodec = getCodecCompatibleName(trackCodec, _this3.appendSource);
                    }
                    var mimeType = container + ";codecs=" + trackCodec;
                    _this3.appendChangeType(trackName, mimeType);
                    _this3.log("switching codec " + currentCodecFull + " to " + trackCodec);
                    _this3.tracks[trackName] = {
                      buffer: track.buffer,
                      codec,
                      container,
                      levelCodec,
                      metadata,
                      id
                    };
                  }
                }
              } else {
                _this3.pendingTracks[trackName] = data[trackName];
              }
            });
            if (sourceBufferCount) {
              return;
            }
            var bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);
            if (this.bufferCodecEventsExpected !== bufferCodecEventsExpected) {
              this.log(bufferCodecEventsExpected + " bufferCodec event(s) expected " + trackNames.join(","));
              this.bufferCodecEventsExpected = bufferCodecEventsExpected;
            }
            if (this.mediaSource && this.mediaSource.readyState === "open") {
              this.checkPendingTracks();
            }
          };
          _proto.appendChangeType = function appendChangeType(type, mimeType) {
            var _this4 = this;
            var operationQueue = this.operationQueue;
            var operation = {
              execute: function execute() {
                var sb = _this4.sourceBuffer[type];
                if (sb) {
                  _this4.log("changing " + type + " sourceBuffer type to " + mimeType);
                  sb.changeType(mimeType);
                }
                operationQueue.shiftAndExecuteNext(type);
              },
              onStart: function onStart() {
              },
              onComplete: function onComplete() {
              },
              onError: function onError(error) {
                _this4.warn("Failed to change " + type + " SourceBuffer type", error);
              }
            };
            operationQueue.append(operation, type, !!this.pendingTracks[type]);
          };
          _proto.onBufferAppending = function onBufferAppending(event, eventData) {
            var _this5 = this;
            var hls = this.hls, operationQueue = this.operationQueue, tracks = this.tracks;
            var data = eventData.data, type = eventData.type, frag = eventData.frag, part = eventData.part, chunkMeta = eventData.chunkMeta;
            var chunkStats = chunkMeta.buffering[type];
            var bufferAppendingStart = self.performance.now();
            chunkStats.start = bufferAppendingStart;
            var fragBuffering = frag.stats.buffering;
            var partBuffering = part ? part.stats.buffering : null;
            if (fragBuffering.start === 0) {
              fragBuffering.start = bufferAppendingStart;
            }
            if (partBuffering && partBuffering.start === 0) {
              partBuffering.start = bufferAppendingStart;
            }
            var audioTrack = tracks.audio;
            var checkTimestampOffset = false;
            if (type === "audio" && (audioTrack == null ? void 0 : audioTrack.container) === "audio/mpeg") {
              checkTimestampOffset = !this.lastMpegAudioChunk || chunkMeta.id === 1 || this.lastMpegAudioChunk.sn !== chunkMeta.sn;
              this.lastMpegAudioChunk = chunkMeta;
            }
            var fragStart = frag.start;
            var operation = {
              execute: function execute() {
                chunkStats.executeStart = self.performance.now();
                if (checkTimestampOffset) {
                  var sb = _this5.sourceBuffer[type];
                  if (sb) {
                    var delta = fragStart - sb.timestampOffset;
                    if (Math.abs(delta) >= 0.1) {
                      _this5.log("Updating audio SourceBuffer timestampOffset to " + fragStart + " (delta: " + delta + ") sn: " + frag.sn + ")");
                      sb.timestampOffset = fragStart;
                    }
                  }
                }
                _this5.appendExecutor(data, type);
              },
              onStart: function onStart() {
              },
              onComplete: function onComplete() {
                var end = self.performance.now();
                chunkStats.executeEnd = chunkStats.end = end;
                if (fragBuffering.first === 0) {
                  fragBuffering.first = end;
                }
                if (partBuffering && partBuffering.first === 0) {
                  partBuffering.first = end;
                }
                var sourceBuffer = _this5.sourceBuffer;
                var timeRanges = {};
                for (var _type in sourceBuffer) {
                  timeRanges[_type] = BufferHelper.getBuffered(sourceBuffer[_type]);
                }
                _this5.appendErrors[type] = 0;
                if (type === "audio" || type === "video") {
                  _this5.appendErrors.audiovideo = 0;
                } else {
                  _this5.appendErrors.audio = 0;
                  _this5.appendErrors.video = 0;
                }
                _this5.hls.trigger(Events.BUFFER_APPENDED, {
                  type,
                  frag,
                  part,
                  chunkMeta,
                  parent: frag.type,
                  timeRanges
                });
              },
              onError: function onError(error) {
                var event2 = {
                  type: ErrorTypes.MEDIA_ERROR,
                  parent: frag.type,
                  details: ErrorDetails.BUFFER_APPEND_ERROR,
                  sourceBufferName: type,
                  frag,
                  part,
                  chunkMeta,
                  error,
                  err: error,
                  fatal: false
                };
                if (error.code === DOMException.QUOTA_EXCEEDED_ERR) {
                  event2.details = ErrorDetails.BUFFER_FULL_ERROR;
                } else {
                  var appendErrorCount = ++_this5.appendErrors[type];
                  event2.details = ErrorDetails.BUFFER_APPEND_ERROR;
                  _this5.warn("Failed " + appendErrorCount + "/" + hls.config.appendErrorMaxRetry + ' times to append segment in "' + type + '" sourceBuffer');
                  if (appendErrorCount >= hls.config.appendErrorMaxRetry) {
                    event2.fatal = true;
                  }
                }
                hls.trigger(Events.ERROR, event2);
              }
            };
            operationQueue.append(operation, type, !!this.pendingTracks[type]);
          };
          _proto.onBufferFlushing = function onBufferFlushing(event, data) {
            var _this6 = this;
            var operationQueue = this.operationQueue;
            var flushOperation = function flushOperation2(type) {
              return {
                execute: _this6.removeExecutor.bind(_this6, type, data.startOffset, data.endOffset),
                onStart: function onStart() {
                },
                onComplete: function onComplete() {
                  _this6.hls.trigger(Events.BUFFER_FLUSHED, {
                    type
                  });
                },
                onError: function onError(error) {
                  _this6.warn("Failed to remove from " + type + " SourceBuffer", error);
                }
              };
            };
            if (data.type) {
              operationQueue.append(flushOperation(data.type), data.type);
            } else {
              this.getSourceBufferTypes().forEach(function(type) {
                operationQueue.append(flushOperation(type), type);
              });
            }
          };
          _proto.onFragParsed = function onFragParsed(event, data) {
            var _this7 = this;
            var frag = data.frag, part = data.part;
            var buffersAppendedTo = [];
            var elementaryStreams = part ? part.elementaryStreams : frag.elementaryStreams;
            if (elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO]) {
              buffersAppendedTo.push("audiovideo");
            } else {
              if (elementaryStreams[ElementaryStreamTypes.AUDIO]) {
                buffersAppendedTo.push("audio");
              }
              if (elementaryStreams[ElementaryStreamTypes.VIDEO]) {
                buffersAppendedTo.push("video");
              }
            }
            var onUnblocked = function onUnblocked2() {
              var now2 = self.performance.now();
              frag.stats.buffering.end = now2;
              if (part) {
                part.stats.buffering.end = now2;
              }
              var stats = part ? part.stats : frag.stats;
              _this7.hls.trigger(Events.FRAG_BUFFERED, {
                frag,
                part,
                stats,
                id: frag.type
              });
            };
            if (buffersAppendedTo.length === 0) {
              this.warn("Fragments must have at least one ElementaryStreamType set. type: " + frag.type + " level: " + frag.level + " sn: " + frag.sn);
            }
            this.blockBuffers(onUnblocked, buffersAppendedTo);
          };
          _proto.onFragChanged = function onFragChanged(event, data) {
            this.trimBuffers();
          };
          _proto.onBufferEos = function onBufferEos(event, data) {
            var _this8 = this;
            var ended = this.getSourceBufferTypes().reduce(function(acc, type) {
              var sb = _this8.sourceBuffer[type];
              if (sb && (!data.type || data.type === type)) {
                sb.ending = true;
                if (!sb.ended) {
                  sb.ended = true;
                  _this8.log(type + " sourceBuffer now EOS");
                }
              }
              return acc && !!(!sb || sb.ended);
            }, true);
            if (ended) {
              this.log("Queueing mediaSource.endOfStream()");
              this.blockBuffers(function() {
                _this8.getSourceBufferTypes().forEach(function(type) {
                  var sb = _this8.sourceBuffer[type];
                  if (sb) {
                    sb.ending = false;
                  }
                });
                var mediaSource = _this8.mediaSource;
                if (!mediaSource || mediaSource.readyState !== "open") {
                  if (mediaSource) {
                    _this8.log("Could not call mediaSource.endOfStream(). mediaSource.readyState: " + mediaSource.readyState);
                  }
                  return;
                }
                _this8.log("Calling mediaSource.endOfStream()");
                mediaSource.endOfStream();
              });
            }
          };
          _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {
            var details = _ref.details;
            if (!details.fragments.length) {
              return;
            }
            this.details = details;
            if (this.getSourceBufferTypes().length) {
              this.blockBuffers(this.updateMediaElementDuration.bind(this));
            } else {
              this.updateMediaElementDuration();
            }
          };
          _proto.trimBuffers = function trimBuffers() {
            var hls = this.hls, details = this.details, media = this.media;
            if (!media || details === null) {
              return;
            }
            var sourceBufferTypes = this.getSourceBufferTypes();
            if (!sourceBufferTypes.length) {
              return;
            }
            var config = hls.config;
            var currentTime = media.currentTime;
            var targetDuration = details.levelTargetDuration;
            var backBufferLength = details.live && config.liveBackBufferLength !== null ? config.liveBackBufferLength : config.backBufferLength;
            if (isFiniteNumber(backBufferLength) && backBufferLength > 0) {
              var maxBackBufferLength = Math.max(backBufferLength, targetDuration);
              var targetBackBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration - maxBackBufferLength;
              this.flushBackBuffer(currentTime, targetDuration, targetBackBufferPosition);
            }
            if (isFiniteNumber(config.frontBufferFlushThreshold) && config.frontBufferFlushThreshold > 0) {
              var frontBufferLength = Math.max(config.maxBufferLength, config.frontBufferFlushThreshold);
              var maxFrontBufferLength = Math.max(frontBufferLength, targetDuration);
              var targetFrontBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration + maxFrontBufferLength;
              this.flushFrontBuffer(currentTime, targetDuration, targetFrontBufferPosition);
            }
          };
          _proto.flushBackBuffer = function flushBackBuffer(currentTime, targetDuration, targetBackBufferPosition) {
            var _this9 = this;
            var details = this.details, sourceBuffer = this.sourceBuffer;
            var sourceBufferTypes = this.getSourceBufferTypes();
            sourceBufferTypes.forEach(function(type) {
              var sb = sourceBuffer[type];
              if (sb) {
                var buffered = BufferHelper.getBuffered(sb);
                if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {
                  _this9.hls.trigger(Events.BACK_BUFFER_REACHED, {
                    bufferEnd: targetBackBufferPosition
                  });
                  if (details != null && details.live) {
                    _this9.hls.trigger(Events.LIVE_BACK_BUFFER_REACHED, {
                      bufferEnd: targetBackBufferPosition
                    });
                  } else if (sb.ended && buffered.end(buffered.length - 1) - currentTime < targetDuration * 2) {
                    _this9.log("Cannot flush " + type + " back buffer while SourceBuffer is in ended state");
                    return;
                  }
                  _this9.hls.trigger(Events.BUFFER_FLUSHING, {
                    startOffset: 0,
                    endOffset: targetBackBufferPosition,
                    type
                  });
                }
              }
            });
          };
          _proto.flushFrontBuffer = function flushFrontBuffer(currentTime, targetDuration, targetFrontBufferPosition) {
            var _this10 = this;
            var sourceBuffer = this.sourceBuffer;
            var sourceBufferTypes = this.getSourceBufferTypes();
            sourceBufferTypes.forEach(function(type) {
              var sb = sourceBuffer[type];
              if (sb) {
                var buffered = BufferHelper.getBuffered(sb);
                var numBufferedRanges = buffered.length;
                if (numBufferedRanges < 2) {
                  return;
                }
                var bufferStart = buffered.start(numBufferedRanges - 1);
                var bufferEnd = buffered.end(numBufferedRanges - 1);
                if (targetFrontBufferPosition > bufferStart || currentTime >= bufferStart && currentTime <= bufferEnd) {
                  return;
                } else if (sb.ended && currentTime - bufferEnd < 2 * targetDuration) {
                  _this10.log("Cannot flush " + type + " front buffer while SourceBuffer is in ended state");
                  return;
                }
                _this10.hls.trigger(Events.BUFFER_FLUSHING, {
                  startOffset: bufferStart,
                  endOffset: Infinity,
                  type
                });
              }
            });
          };
          _proto.updateMediaElementDuration = function updateMediaElementDuration() {
            if (!this.details || !this.media || !this.mediaSource || this.mediaSource.readyState !== "open") {
              return;
            }
            var details = this.details, hls = this.hls, media = this.media, mediaSource = this.mediaSource;
            var levelDuration = details.fragments[0].start + details.totalduration;
            var mediaDuration = media.duration;
            var msDuration = isFiniteNumber(mediaSource.duration) ? mediaSource.duration : 0;
            if (details.live && hls.config.liveDurationInfinity) {
              mediaSource.duration = Infinity;
              this.updateSeekableRange(details);
            } else if (levelDuration > msDuration && levelDuration > mediaDuration || !isFiniteNumber(mediaDuration)) {
              this.log("Updating Media Source duration to " + levelDuration.toFixed(3));
              mediaSource.duration = levelDuration;
            }
          };
          _proto.updateSeekableRange = function updateSeekableRange(levelDetails) {
            var mediaSource = this.mediaSource;
            var fragments = levelDetails.fragments;
            var len = fragments.length;
            if (len && levelDetails.live && mediaSource != null && mediaSource.setLiveSeekableRange) {
              var start = Math.max(0, fragments[0].start);
              var end = Math.max(start, start + levelDetails.totalduration);
              this.log("Media Source duration is set to " + mediaSource.duration + ". Setting seekable range to " + start + "-" + end + ".");
              mediaSource.setLiveSeekableRange(start, end);
            }
          };
          _proto.checkPendingTracks = function checkPendingTracks() {
            var bufferCodecEventsExpected = this.bufferCodecEventsExpected, operationQueue = this.operationQueue, pendingTracks = this.pendingTracks;
            var pendingTracksCount = Object.keys(pendingTracks).length;
            if (pendingTracksCount && (!bufferCodecEventsExpected || pendingTracksCount === 2 || "audiovideo" in pendingTracks)) {
              this.createSourceBuffers(pendingTracks);
              this.pendingTracks = {};
              var buffers = this.getSourceBufferTypes();
              if (buffers.length) {
                this.hls.trigger(Events.BUFFER_CREATED, {
                  tracks: this.tracks
                });
                buffers.forEach(function(type) {
                  operationQueue.executeNext(type);
                });
              } else {
                var error = new Error("could not create source buffer for media codec(s)");
                this.hls.trigger(Events.ERROR, {
                  type: ErrorTypes.MEDIA_ERROR,
                  details: ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR,
                  fatal: true,
                  error,
                  reason: error.message
                });
              }
            }
          };
          _proto.createSourceBuffers = function createSourceBuffers(tracks) {
            var _this11 = this;
            var sourceBuffer = this.sourceBuffer, mediaSource = this.mediaSource;
            if (!mediaSource) {
              throw Error("createSourceBuffers called when mediaSource was null");
            }
            var _loop = function _loop2(trackName2) {
              if (!sourceBuffer[trackName2]) {
                var _track$levelCodec;
                var track = tracks[trackName2];
                if (!track) {
                  throw Error("source buffer exists for track " + trackName2 + ", however track does not");
                }
                var codec = ((_track$levelCodec = track.levelCodec) == null ? void 0 : _track$levelCodec.indexOf(",")) === -1 ? track.levelCodec : track.codec;
                if (codec) {
                  if (trackName2.slice(0, 5) === "audio") {
                    codec = getCodecCompatibleName(codec, _this11.appendSource);
                  }
                }
                var mimeType = track.container + ";codecs=" + codec;
                _this11.log("creating sourceBuffer(" + mimeType + ")");
                try {
                  var sb = sourceBuffer[trackName2] = mediaSource.addSourceBuffer(mimeType);
                  var sbName = trackName2;
                  _this11.addBufferListener(sbName, "updatestart", _this11._onSBUpdateStart);
                  _this11.addBufferListener(sbName, "updateend", _this11._onSBUpdateEnd);
                  _this11.addBufferListener(sbName, "error", _this11._onSBUpdateError);
                  if (_this11.appendSource) {
                    _this11.addBufferListener(sbName, "bufferedchange", function(type, event) {
                      var removedRanges = event.removedRanges;
                      if (removedRanges != null && removedRanges.length) {
                        _this11.hls.trigger(Events.BUFFER_FLUSHED, {
                          type: trackName2
                        });
                      }
                    });
                  }
                  _this11.tracks[trackName2] = {
                    buffer: sb,
                    codec,
                    container: track.container,
                    levelCodec: track.levelCodec,
                    metadata: track.metadata,
                    id: track.id
                  };
                } catch (err) {
                  _this11.error("error while trying to add sourceBuffer: " + err.message);
                  _this11.hls.trigger(Events.ERROR, {
                    type: ErrorTypes.MEDIA_ERROR,
                    details: ErrorDetails.BUFFER_ADD_CODEC_ERROR,
                    fatal: false,
                    error: err,
                    sourceBufferName: trackName2,
                    mimeType
                  });
                }
              }
            };
            for (var trackName in tracks) {
              _loop(trackName);
            }
          };
          _proto._onSBUpdateStart = function _onSBUpdateStart(type) {
            var operationQueue = this.operationQueue;
            var operation = operationQueue.current(type);
            operation.onStart();
          };
          _proto._onSBUpdateEnd = function _onSBUpdateEnd(type) {
            var _this$mediaSource2;
            if (((_this$mediaSource2 = this.mediaSource) == null ? void 0 : _this$mediaSource2.readyState) === "closed") {
              this.resetBuffer(type);
              return;
            }
            var operationQueue = this.operationQueue;
            var operation = operationQueue.current(type);
            operation.onComplete();
            operationQueue.shiftAndExecuteNext(type);
          };
          _proto._onSBUpdateError = function _onSBUpdateError(type, event) {
            var _this$mediaSource3;
            var error = new Error(type + " SourceBuffer error. MediaSource readyState: " + ((_this$mediaSource3 = this.mediaSource) == null ? void 0 : _this$mediaSource3.readyState));
            this.error("" + error, event);
            this.hls.trigger(Events.ERROR, {
              type: ErrorTypes.MEDIA_ERROR,
              details: ErrorDetails.BUFFER_APPENDING_ERROR,
              sourceBufferName: type,
              error,
              fatal: false
            });
            var operation = this.operationQueue.current(type);
            if (operation) {
              operation.onError(error);
            }
          };
          _proto.removeExecutor = function removeExecutor(type, startOffset, endOffset) {
            var media = this.media, mediaSource = this.mediaSource, operationQueue = this.operationQueue, sourceBuffer = this.sourceBuffer;
            var sb = sourceBuffer[type];
            if (!media || !mediaSource || !sb) {
              this.warn("Attempting to remove from the " + type + " SourceBuffer, but it does not exist");
              operationQueue.shiftAndExecuteNext(type);
              return;
            }
            var mediaDuration = isFiniteNumber(media.duration) ? media.duration : Infinity;
            var msDuration = isFiniteNumber(mediaSource.duration) ? mediaSource.duration : Infinity;
            var removeStart = Math.max(0, startOffset);
            var removeEnd = Math.min(endOffset, mediaDuration, msDuration);
            if (removeEnd > removeStart && (!sb.ending || sb.ended)) {
              sb.ended = false;
              this.log("Removing [" + removeStart + "," + removeEnd + "] from the " + type + " SourceBuffer");
              sb.remove(removeStart, removeEnd);
            } else {
              operationQueue.shiftAndExecuteNext(type);
            }
          };
          _proto.appendExecutor = function appendExecutor(data, type) {
            var sb = this.sourceBuffer[type];
            if (!sb) {
              if (!this.pendingTracks[type]) {
                throw new Error("Attempting to append to the " + type + " SourceBuffer, but it does not exist");
              }
              return;
            }
            sb.ended = false;
            sb.appendBuffer(data);
          };
          _proto.blockBuffers = function blockBuffers(onUnblocked, buffers) {
            var _this12 = this;
            if (buffers === void 0) {
              buffers = this.getSourceBufferTypes();
            }
            if (!buffers.length) {
              this.log("Blocking operation requested, but no SourceBuffers exist");
              Promise.resolve().then(onUnblocked);
              return;
            }
            var operationQueue = this.operationQueue;
            var blockingOperations = buffers.map(function(type) {
              return operationQueue.appendBlocker(type);
            });
            Promise.all(blockingOperations).then(function() {
              onUnblocked();
              buffers.forEach(function(type) {
                var sb = _this12.sourceBuffer[type];
                if (!(sb != null && sb.updating)) {
                  operationQueue.shiftAndExecuteNext(type);
                }
              });
            });
          };
          _proto.getSourceBufferTypes = function getSourceBufferTypes() {
            return Object.keys(this.sourceBuffer);
          };
          _proto.addBufferListener = function addBufferListener(type, event, fn) {
            var buffer = this.sourceBuffer[type];
            if (!buffer) {
              return;
            }
            var listener = fn.bind(this, type);
            this.listeners[type].push({
              event,
              listener
            });
            buffer.addEventListener(event, listener);
          };
          _proto.removeBufferListeners = function removeBufferListeners(type) {
            var buffer = this.sourceBuffer[type];
            if (!buffer) {
              return;
            }
            this.listeners[type].forEach(function(l) {
              buffer.removeEventListener(l.event, l.listener);
            });
          };
          _createClass2(BufferController2, [{
            key: "mediaSrc",
            get: function get() {
              var _this$media, _this$media$querySele;
              var media = ((_this$media = this.media) == null ? void 0 : (_this$media$querySele = _this$media.querySelector) == null ? void 0 : _this$media$querySele.call(_this$media, "source")) || this.media;
              return media == null ? void 0 : media.src;
            }
          }]);
          return BufferController2;
        }();
        function removeSourceChildren(node) {
          var sourceChildren = node.querySelectorAll("source");
          [].slice.call(sourceChildren).forEach(function(source) {
            node.removeChild(source);
          });
        }
        function addSource(media, url) {
          var source = self.document.createElement("source");
          source.type = "video/mp4";
          source.src = url;
          media.appendChild(source);
        }
        var CapLevelController = function() {
          function CapLevelController2(hls) {
            this.hls = void 0;
            this.autoLevelCapping = void 0;
            this.firstLevel = void 0;
            this.media = void 0;
            this.restrictedLevels = void 0;
            this.timer = void 0;
            this.clientRect = void 0;
            this.streamController = void 0;
            this.hls = hls;
            this.autoLevelCapping = Number.POSITIVE_INFINITY;
            this.firstLevel = -1;
            this.media = null;
            this.restrictedLevels = [];
            this.timer = void 0;
            this.clientRect = null;
            this.registerListeners();
          }
          var _proto = CapLevelController2.prototype;
          _proto.setStreamController = function setStreamController(streamController) {
            this.streamController = streamController;
          };
          _proto.destroy = function destroy() {
            if (this.hls) {
              this.unregisterListener();
            }
            if (this.timer) {
              this.stopCapping();
            }
            this.media = null;
            this.clientRect = null;
            this.hls = this.streamController = null;
          };
          _proto.registerListeners = function registerListeners() {
            var hls = this.hls;
            hls.on(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);
            hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
            hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);
            hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);
            hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);
            hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
          };
          _proto.unregisterListener = function unregisterListener() {
            var hls = this.hls;
            hls.off(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);
            hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
            hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);
            hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);
            hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);
            hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
          };
          _proto.onFpsDropLevelCapping = function onFpsDropLevelCapping(event, data) {
            var level = this.hls.levels[data.droppedLevel];
            if (this.isLevelAllowed(level)) {
              this.restrictedLevels.push({
                bitrate: level.bitrate,
                height: level.height,
                width: level.width
              });
            }
          };
          _proto.onMediaAttaching = function onMediaAttaching(event, data) {
            this.media = data.media instanceof HTMLVideoElement ? data.media : null;
            this.clientRect = null;
            if (this.timer && this.hls.levels.length) {
              this.detectPlayerSize();
            }
          };
          _proto.onManifestParsed = function onManifestParsed(event, data) {
            var hls = this.hls;
            this.restrictedLevels = [];
            this.firstLevel = data.firstLevel;
            if (hls.config.capLevelToPlayerSize && data.video) {
              this.startCapping();
            }
          };
          _proto.onLevelsUpdated = function onLevelsUpdated(event, data) {
            if (this.timer && isFiniteNumber(this.autoLevelCapping)) {
              this.detectPlayerSize();
            }
          };
          _proto.onBufferCodecs = function onBufferCodecs(event, data) {
            var hls = this.hls;
            if (hls.config.capLevelToPlayerSize && data.video) {
              this.startCapping();
            }
          };
          _proto.onMediaDetaching = function onMediaDetaching() {
            this.stopCapping();
          };
          _proto.detectPlayerSize = function detectPlayerSize() {
            if (this.media) {
              if (this.mediaHeight <= 0 || this.mediaWidth <= 0) {
                this.clientRect = null;
                return;
              }
              var levels = this.hls.levels;
              if (levels.length) {
                var hls = this.hls;
                var maxLevel = this.getMaxLevel(levels.length - 1);
                if (maxLevel !== this.autoLevelCapping) {
                  logger.log("Setting autoLevelCapping to " + maxLevel + ": " + levels[maxLevel].height + "p@" + levels[maxLevel].bitrate + " for media " + this.mediaWidth + "x" + this.mediaHeight);
                }
                hls.autoLevelCapping = maxLevel;
                if (hls.autoLevelCapping > this.autoLevelCapping && this.streamController) {
                  this.streamController.nextLevelSwitch();
                }
                this.autoLevelCapping = hls.autoLevelCapping;
              }
            }
          };
          _proto.getMaxLevel = function getMaxLevel(capLevelIndex) {
            var _this = this;
            var levels = this.hls.levels;
            if (!levels.length) {
              return -1;
            }
            var validLevels = levels.filter(function(level, index) {
              return _this.isLevelAllowed(level) && index <= capLevelIndex;
            });
            this.clientRect = null;
            return CapLevelController2.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);
          };
          _proto.startCapping = function startCapping() {
            if (this.timer) {
              return;
            }
            this.autoLevelCapping = Number.POSITIVE_INFINITY;
            self.clearInterval(this.timer);
            this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3);
            this.detectPlayerSize();
          };
          _proto.stopCapping = function stopCapping() {
            this.restrictedLevels = [];
            this.firstLevel = -1;
            this.autoLevelCapping = Number.POSITIVE_INFINITY;
            if (this.timer) {
              self.clearInterval(this.timer);
              this.timer = void 0;
            }
          };
          _proto.getDimensions = function getDimensions() {
            if (this.clientRect) {
              return this.clientRect;
            }
            var media = this.media;
            var boundsRect = {
              width: 0,
              height: 0
            };
            if (media) {
              var clientRect = media.getBoundingClientRect();
              boundsRect.width = clientRect.width;
              boundsRect.height = clientRect.height;
              if (!boundsRect.width && !boundsRect.height) {
                boundsRect.width = clientRect.right - clientRect.left || media.width || 0;
                boundsRect.height = clientRect.bottom - clientRect.top || media.height || 0;
              }
            }
            this.clientRect = boundsRect;
            return boundsRect;
          };
          _proto.isLevelAllowed = function isLevelAllowed(level) {
            var restrictedLevels = this.restrictedLevels;
            return !restrictedLevels.some(function(restrictedLevel) {
              return level.bitrate === restrictedLevel.bitrate && level.width === restrictedLevel.width && level.height === restrictedLevel.height;
            });
          };
          CapLevelController2.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {
            if (!(levels != null && levels.length)) {
              return -1;
            }
            var atGreatestBandwidth = function atGreatestBandwidth2(curLevel, nextLevel) {
              if (!nextLevel) {
                return true;
              }
              return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;
            };
            var maxLevelIndex = levels.length - 1;
            var squareSize = Math.max(width, height);
            for (var i = 0; i < levels.length; i += 1) {
              var level = levels[i];
              if ((level.width >= squareSize || level.height >= squareSize) && atGreatestBandwidth(level, levels[i + 1])) {
                maxLevelIndex = i;
                break;
              }
            }
            return maxLevelIndex;
          };
          _createClass2(CapLevelController2, [{
            key: "mediaWidth",
            get: function get() {
              return this.getDimensions().width * this.contentScaleFactor;
            }
          }, {
            key: "mediaHeight",
            get: function get() {
              return this.getDimensions().height * this.contentScaleFactor;
            }
          }, {
            key: "contentScaleFactor",
            get: function get() {
              var pixelRatio = 1;
              if (!this.hls.config.ignoreDevicePixelRatio) {
                try {
                  pixelRatio = self.devicePixelRatio;
                } catch (e) {
                }
              }
              return pixelRatio;
            }
          }]);
          return CapLevelController2;
        }();
        var FPSController = function() {
          function FPSController2(hls) {
            this.hls = void 0;
            this.isVideoPlaybackQualityAvailable = false;
            this.timer = void 0;
            this.media = null;
            this.lastTime = void 0;
            this.lastDroppedFrames = 0;
            this.lastDecodedFrames = 0;
            this.streamController = void 0;
            this.hls = hls;
            this.registerListeners();
          }
          var _proto = FPSController2.prototype;
          _proto.setStreamController = function setStreamController(streamController) {
            this.streamController = streamController;
          };
          _proto.registerListeners = function registerListeners() {
            this.hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
          };
          _proto.unregisterListeners = function unregisterListeners() {
            this.hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
          };
          _proto.destroy = function destroy() {
            if (this.timer) {
              clearInterval(this.timer);
            }
            this.unregisterListeners();
            this.isVideoPlaybackQualityAvailable = false;
            this.media = null;
          };
          _proto.onMediaAttaching = function onMediaAttaching(event, data) {
            var config = this.hls.config;
            if (config.capLevelOnFPSDrop) {
              var media = data.media instanceof self.HTMLVideoElement ? data.media : null;
              this.media = media;
              if (media && typeof media.getVideoPlaybackQuality === "function") {
                this.isVideoPlaybackQualityAvailable = true;
              }
              self.clearInterval(this.timer);
              this.timer = self.setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);
            }
          };
          _proto.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {
            var currentTime = performance.now();
            if (decodedFrames) {
              if (this.lastTime) {
                var currentPeriod = currentTime - this.lastTime;
                var currentDropped = droppedFrames - this.lastDroppedFrames;
                var currentDecoded = decodedFrames - this.lastDecodedFrames;
                var droppedFPS = 1e3 * currentDropped / currentPeriod;
                var hls = this.hls;
                hls.trigger(Events.FPS_DROP, {
                  currentDropped,
                  currentDecoded,
                  totalDroppedFrames: droppedFrames
                });
                if (droppedFPS > 0) {
                  if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {
                    var currentLevel = hls.currentLevel;
                    logger.warn("drop FPS ratio greater than max allowed value for currentLevel: " + currentLevel);
                    if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {
                      currentLevel = currentLevel - 1;
                      hls.trigger(Events.FPS_DROP_LEVEL_CAPPING, {
                        level: currentLevel,
                        droppedLevel: hls.currentLevel
                      });
                      hls.autoLevelCapping = currentLevel;
                      this.streamController.nextLevelSwitch();
                    }
                  }
                }
              }
              this.lastTime = currentTime;
              this.lastDroppedFrames = droppedFrames;
              this.lastDecodedFrames = decodedFrames;
            }
          };
          _proto.checkFPSInterval = function checkFPSInterval() {
            var video = this.media;
            if (video) {
              if (this.isVideoPlaybackQualityAvailable) {
                var videoPlaybackQuality = video.getVideoPlaybackQuality();
                this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);
              } else {
                this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);
              }
            }
          };
          return FPSController2;
        }();
        var PATHWAY_PENALTY_DURATION_MS = 3e5;
        var ContentSteeringController = function() {
          function ContentSteeringController2(hls) {
            this.hls = void 0;
            this.log = void 0;
            this.loader = null;
            this.uri = null;
            this.pathwayId = ".";
            this.pathwayPriority = null;
            this.timeToLoad = 300;
            this.reloadTimer = -1;
            this.updated = 0;
            this.started = false;
            this.enabled = true;
            this.levels = null;
            this.audioTracks = null;
            this.subtitleTracks = null;
            this.penalizedPathways = {};
            this.hls = hls;
            this.log = logger.log.bind(logger, "[content-steering]:");
            this.registerListeners();
          }
          var _proto = ContentSteeringController2.prototype;
          _proto.registerListeners = function registerListeners() {
            var hls = this.hls;
            hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);
            hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);
            hls.on(Events.ERROR, this.onError, this);
          };
          _proto.unregisterListeners = function unregisterListeners() {
            var hls = this.hls;
            if (!hls) {
              return;
            }
            hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);
            hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);
            hls.off(Events.ERROR, this.onError, this);
          };
          _proto.startLoad = function startLoad() {
            this.started = true;
            this.clearTimeout();
            if (this.enabled && this.uri) {
              if (this.updated) {
                var ttl = this.timeToLoad * 1e3 - (performance.now() - this.updated);
                if (ttl > 0) {
                  this.scheduleRefresh(this.uri, ttl);
                  return;
                }
              }
              this.loadSteeringManifest(this.uri);
            }
          };
          _proto.stopLoad = function stopLoad() {
            this.started = false;
            if (this.loader) {
              this.loader.destroy();
              this.loader = null;
            }
            this.clearTimeout();
          };
          _proto.clearTimeout = function clearTimeout() {
            if (this.reloadTimer !== -1) {
              self.clearTimeout(this.reloadTimer);
              this.reloadTimer = -1;
            }
          };
          _proto.destroy = function destroy() {
            this.unregisterListeners();
            this.stopLoad();
            this.hls = null;
            this.levels = this.audioTracks = this.subtitleTracks = null;
          };
          _proto.removeLevel = function removeLevel(levelToRemove) {
            var levels = this.levels;
            if (levels) {
              this.levels = levels.filter(function(level) {
                return level !== levelToRemove;
              });
            }
          };
          _proto.onManifestLoading = function onManifestLoading() {
            this.stopLoad();
            this.enabled = true;
            this.timeToLoad = 300;
            this.updated = 0;
            this.uri = null;
            this.pathwayId = ".";
            this.levels = this.audioTracks = this.subtitleTracks = null;
          };
          _proto.onManifestLoaded = function onManifestLoaded(event, data) {
            var contentSteering = data.contentSteering;
            if (contentSteering === null) {
              return;
            }
            this.pathwayId = contentSteering.pathwayId;
            this.uri = contentSteering.uri;
            if (this.started) {
              this.startLoad();
            }
          };
          _proto.onManifestParsed = function onManifestParsed(event, data) {
            this.audioTracks = data.audioTracks;
            this.subtitleTracks = data.subtitleTracks;
          };
          _proto.onError = function onError(event, data) {
            var errorAction = data.errorAction;
            if ((errorAction == null ? void 0 : errorAction.action) === NetworkErrorAction.SendAlternateToPenaltyBox && errorAction.flags === ErrorActionFlags.MoveAllAlternatesMatchingHost) {
              var levels = this.levels;
              var pathwayPriority = this.pathwayPriority;
              var errorPathway = this.pathwayId;
              if (data.context) {
                var _data$context = data.context, groupId = _data$context.groupId, _pathwayId = _data$context.pathwayId, type = _data$context.type;
                if (groupId && levels) {
                  errorPathway = this.getPathwayForGroupId(groupId, type, errorPathway);
                } else if (_pathwayId) {
                  errorPathway = _pathwayId;
                }
              }
              if (!(errorPathway in this.penalizedPathways)) {
                this.penalizedPathways[errorPathway] = performance.now();
              }
              if (!pathwayPriority && levels) {
                pathwayPriority = levels.reduce(function(pathways, level) {
                  if (pathways.indexOf(level.pathwayId) === -1) {
                    pathways.push(level.pathwayId);
                  }
                  return pathways;
                }, []);
              }
              if (pathwayPriority && pathwayPriority.length > 1) {
                this.updatePathwayPriority(pathwayPriority);
                errorAction.resolved = this.pathwayId !== errorPathway;
              }
              if (!errorAction.resolved) {
                logger.warn("Could not resolve " + data.details + ' ("' + data.error.message + '") with content-steering for Pathway: ' + errorPathway + " levels: " + (levels ? levels.length : levels) + " priorities: " + JSON.stringify(pathwayPriority) + " penalized: " + JSON.stringify(this.penalizedPathways));
              }
            }
          };
          _proto.filterParsedLevels = function filterParsedLevels(levels) {
            this.levels = levels;
            var pathwayLevels = this.getLevelsForPathway(this.pathwayId);
            if (pathwayLevels.length === 0) {
              var _pathwayId2 = levels[0].pathwayId;
              this.log("No levels found in Pathway " + this.pathwayId + '. Setting initial Pathway to "' + _pathwayId2 + '"');
              pathwayLevels = this.getLevelsForPathway(_pathwayId2);
              this.pathwayId = _pathwayId2;
            }
            if (pathwayLevels.length !== levels.length) {
              this.log("Found " + pathwayLevels.length + "/" + levels.length + ' levels in Pathway "' + this.pathwayId + '"');
            }
            return pathwayLevels;
          };
          _proto.getLevelsForPathway = function getLevelsForPathway(pathwayId) {
            if (this.levels === null) {
              return [];
            }
            return this.levels.filter(function(level) {
              return pathwayId === level.pathwayId;
            });
          };
          _proto.updatePathwayPriority = function updatePathwayPriority(pathwayPriority) {
            this.pathwayPriority = pathwayPriority;
            var levels;
            var penalizedPathways = this.penalizedPathways;
            var now2 = performance.now();
            Object.keys(penalizedPathways).forEach(function(pathwayId) {
              if (now2 - penalizedPathways[pathwayId] > PATHWAY_PENALTY_DURATION_MS) {
                delete penalizedPathways[pathwayId];
              }
            });
            for (var i = 0; i < pathwayPriority.length; i++) {
              var _pathwayId3 = pathwayPriority[i];
              if (_pathwayId3 in penalizedPathways) {
                continue;
              }
              if (_pathwayId3 === this.pathwayId) {
                return;
              }
              var selectedIndex = this.hls.nextLoadLevel;
              var selectedLevel = this.hls.levels[selectedIndex];
              levels = this.getLevelsForPathway(_pathwayId3);
              if (levels.length > 0) {
                this.log('Setting Pathway to "' + _pathwayId3 + '"');
                this.pathwayId = _pathwayId3;
                reassignFragmentLevelIndexes(levels);
                this.hls.trigger(Events.LEVELS_UPDATED, {
                  levels
                });
                var levelAfterChange = this.hls.levels[selectedIndex];
                if (selectedLevel && levelAfterChange && this.levels) {
                  if (levelAfterChange.attrs["STABLE-VARIANT-ID"] !== selectedLevel.attrs["STABLE-VARIANT-ID"] && levelAfterChange.bitrate !== selectedLevel.bitrate) {
                    this.log("Unstable Pathways change from bitrate " + selectedLevel.bitrate + " to " + levelAfterChange.bitrate);
                  }
                  this.hls.nextLoadLevel = selectedIndex;
                }
                break;
              }
            }
          };
          _proto.getPathwayForGroupId = function getPathwayForGroupId(groupId, type, defaultPathway) {
            var levels = this.getLevelsForPathway(defaultPathway).concat(this.levels || []);
            for (var i = 0; i < levels.length; i++) {
              if (type === PlaylistContextType.AUDIO_TRACK && levels[i].hasAudioGroup(groupId) || type === PlaylistContextType.SUBTITLE_TRACK && levels[i].hasSubtitleGroup(groupId)) {
                return levels[i].pathwayId;
              }
            }
            return defaultPathway;
          };
          _proto.clonePathways = function clonePathways(pathwayClones) {
            var _this = this;
            var levels = this.levels;
            if (!levels) {
              return;
            }
            var audioGroupCloneMap = {};
            var subtitleGroupCloneMap = {};
            pathwayClones.forEach(function(pathwayClone) {
              var cloneId = pathwayClone.ID, baseId = pathwayClone["BASE-ID"], uriReplacement = pathwayClone["URI-REPLACEMENT"];
              if (levels.some(function(level) {
                return level.pathwayId === cloneId;
              })) {
                return;
              }
              var clonedVariants = _this.getLevelsForPathway(baseId).map(function(baseLevel) {
                var attributes = new AttrList(baseLevel.attrs);
                attributes["PATHWAY-ID"] = cloneId;
                var clonedAudioGroupId = attributes.AUDIO && attributes.AUDIO + "_clone_" + cloneId;
                var clonedSubtitleGroupId = attributes.SUBTITLES && attributes.SUBTITLES + "_clone_" + cloneId;
                if (clonedAudioGroupId) {
                  audioGroupCloneMap[attributes.AUDIO] = clonedAudioGroupId;
                  attributes.AUDIO = clonedAudioGroupId;
                }
                if (clonedSubtitleGroupId) {
                  subtitleGroupCloneMap[attributes.SUBTITLES] = clonedSubtitleGroupId;
                  attributes.SUBTITLES = clonedSubtitleGroupId;
                }
                var url = performUriReplacement(baseLevel.uri, attributes["STABLE-VARIANT-ID"], "PER-VARIANT-URIS", uriReplacement);
                var clonedLevel = new Level({
                  attrs: attributes,
                  audioCodec: baseLevel.audioCodec,
                  bitrate: baseLevel.bitrate,
                  height: baseLevel.height,
                  name: baseLevel.name,
                  url,
                  videoCodec: baseLevel.videoCodec,
                  width: baseLevel.width
                });
                if (baseLevel.audioGroups) {
                  for (var i = 1; i < baseLevel.audioGroups.length; i++) {
                    clonedLevel.addGroupId("audio", baseLevel.audioGroups[i] + "_clone_" + cloneId);
                  }
                }
                if (baseLevel.subtitleGroups) {
                  for (var _i = 1; _i < baseLevel.subtitleGroups.length; _i++) {
                    clonedLevel.addGroupId("text", baseLevel.subtitleGroups[_i] + "_clone_" + cloneId);
                  }
                }
                return clonedLevel;
              });
              levels.push.apply(levels, clonedVariants);
              cloneRenditionGroups(_this.audioTracks, audioGroupCloneMap, uriReplacement, cloneId);
              cloneRenditionGroups(_this.subtitleTracks, subtitleGroupCloneMap, uriReplacement, cloneId);
            });
          };
          _proto.loadSteeringManifest = function loadSteeringManifest(uri) {
            var _this2 = this;
            var config = this.hls.config;
            var Loader = config.loader;
            if (this.loader) {
              this.loader.destroy();
            }
            this.loader = new Loader(config);
            var url;
            try {
              url = new self.URL(uri);
            } catch (error) {
              this.enabled = false;
              this.log("Failed to parse Steering Manifest URI: " + uri);
              return;
            }
            if (url.protocol !== "data:") {
              var throughput = (this.hls.bandwidthEstimate || config.abrEwmaDefaultEstimate) | 0;
              url.searchParams.set("_HLS_pathway", this.pathwayId);
              url.searchParams.set("_HLS_throughput", "" + throughput);
            }
            var context = {
              responseType: "json",
              url: url.href
            };
            var loadPolicy = config.steeringManifestLoadPolicy.default;
            var legacyRetryCompatibility = loadPolicy.errorRetry || loadPolicy.timeoutRetry || {};
            var loaderConfig = {
              loadPolicy,
              timeout: loadPolicy.maxLoadTimeMs,
              maxRetry: legacyRetryCompatibility.maxNumRetry || 0,
              retryDelay: legacyRetryCompatibility.retryDelayMs || 0,
              maxRetryDelay: legacyRetryCompatibility.maxRetryDelayMs || 0
            };
            var callbacks = {
              onSuccess: function onSuccess(response, stats, context2, networkDetails) {
                _this2.log('Loaded steering manifest: "' + url + '"');
                var steeringData = response.data;
                if (steeringData.VERSION !== 1) {
                  _this2.log("Steering VERSION " + steeringData.VERSION + " not supported!");
                  return;
                }
                _this2.updated = performance.now();
                _this2.timeToLoad = steeringData.TTL;
                var reloadUri = steeringData["RELOAD-URI"], pathwayClones = steeringData["PATHWAY-CLONES"], pathwayPriority = steeringData["PATHWAY-PRIORITY"];
                if (reloadUri) {
                  try {
                    _this2.uri = new self.URL(reloadUri, url).href;
                  } catch (error) {
                    _this2.enabled = false;
                    _this2.log("Failed to parse Steering Manifest RELOAD-URI: " + reloadUri);
                    return;
                  }
                }
                _this2.scheduleRefresh(_this2.uri || context2.url);
                if (pathwayClones) {
                  _this2.clonePathways(pathwayClones);
                }
                var loadedSteeringData = {
                  steeringManifest: steeringData,
                  url: url.toString()
                };
                _this2.hls.trigger(Events.STEERING_MANIFEST_LOADED, loadedSteeringData);
                if (pathwayPriority) {
                  _this2.updatePathwayPriority(pathwayPriority);
                }
              },
              onError: function onError(error, context2, networkDetails, stats) {
                _this2.log("Error loading steering manifest: " + error.code + " " + error.text + " (" + context2.url + ")");
                _this2.stopLoad();
                if (error.code === 410) {
                  _this2.enabled = false;
                  _this2.log("Steering manifest " + context2.url + " no longer available");
                  return;
                }
                var ttl = _this2.timeToLoad * 1e3;
                if (error.code === 429) {
                  var loader = _this2.loader;
                  if (typeof (loader == null ? void 0 : loader.getResponseHeader) === "function") {
                    var retryAfter = loader.getResponseHeader("Retry-After");
                    if (retryAfter) {
                      ttl = parseFloat(retryAfter) * 1e3;
                    }
                  }
                  _this2.log("Steering manifest " + context2.url + " rate limited");
                  return;
                }
                _this2.scheduleRefresh(_this2.uri || context2.url, ttl);
              },
              onTimeout: function onTimeout(stats, context2, networkDetails) {
                _this2.log("Timeout loading steering manifest (" + context2.url + ")");
                _this2.scheduleRefresh(_this2.uri || context2.url);
              }
            };
            this.log("Requesting steering manifest: " + url);
            this.loader.load(context, loaderConfig, callbacks);
          };
          _proto.scheduleRefresh = function scheduleRefresh(uri, ttlMs) {
            var _this3 = this;
            if (ttlMs === void 0) {
              ttlMs = this.timeToLoad * 1e3;
            }
            this.clearTimeout();
            this.reloadTimer = self.setTimeout(function() {
              var _this3$hls;
              var media = (_this3$hls = _this3.hls) == null ? void 0 : _this3$hls.media;
              if (media && !media.ended) {
                _this3.loadSteeringManifest(uri);
                return;
              }
              _this3.scheduleRefresh(uri, _this3.timeToLoad * 1e3);
            }, ttlMs);
          };
          return ContentSteeringController2;
        }();
        function cloneRenditionGroups(tracks, groupCloneMap, uriReplacement, cloneId) {
          if (!tracks) {
            return;
          }
          Object.keys(groupCloneMap).forEach(function(audioGroupId) {
            var clonedTracks = tracks.filter(function(track) {
              return track.groupId === audioGroupId;
            }).map(function(track) {
              var clonedTrack = _extends({}, track);
              clonedTrack.details = void 0;
              clonedTrack.attrs = new AttrList(clonedTrack.attrs);
              clonedTrack.url = clonedTrack.attrs.URI = performUriReplacement(track.url, track.attrs["STABLE-RENDITION-ID"], "PER-RENDITION-URIS", uriReplacement);
              clonedTrack.groupId = clonedTrack.attrs["GROUP-ID"] = groupCloneMap[audioGroupId];
              clonedTrack.attrs["PATHWAY-ID"] = cloneId;
              return clonedTrack;
            });
            tracks.push.apply(tracks, clonedTracks);
          });
        }
        function performUriReplacement(uri, stableId, perOptionKey, uriReplacement) {
          var host = uriReplacement.HOST, params = uriReplacement.PARAMS, perOptionUris = uriReplacement[perOptionKey];
          var perVariantUri;
          if (stableId) {
            perVariantUri = perOptionUris == null ? void 0 : perOptionUris[stableId];
            if (perVariantUri) {
              uri = perVariantUri;
            }
          }
          var url = new self.URL(uri);
          if (host && !perVariantUri) {
            url.host = host;
          }
          if (params) {
            Object.keys(params).sort().forEach(function(key) {
              if (key) {
                url.searchParams.set(key, params[key]);
              }
            });
          }
          return url.href;
        }
        var AGE_HEADER_LINE_REGEX = /^age:\s*[\d.]+\s*$/im;
        var XhrLoader = function() {
          function XhrLoader2(config) {
            this.xhrSetup = void 0;
            this.requestTimeout = void 0;
            this.retryTimeout = void 0;
            this.retryDelay = void 0;
            this.config = null;
            this.callbacks = null;
            this.context = null;
            this.loader = null;
            this.stats = void 0;
            this.xhrSetup = config ? config.xhrSetup || null : null;
            this.stats = new LoadStats();
            this.retryDelay = 0;
          }
          var _proto = XhrLoader2.prototype;
          _proto.destroy = function destroy() {
            this.callbacks = null;
            this.abortInternal();
            this.loader = null;
            this.config = null;
            this.context = null;
            this.xhrSetup = null;
          };
          _proto.abortInternal = function abortInternal() {
            var loader = this.loader;
            self.clearTimeout(this.requestTimeout);
            self.clearTimeout(this.retryTimeout);
            if (loader) {
              loader.onreadystatechange = null;
              loader.onprogress = null;
              if (loader.readyState !== 4) {
                this.stats.aborted = true;
                loader.abort();
              }
            }
          };
          _proto.abort = function abort() {
            var _this$callbacks;
            this.abortInternal();
            if ((_this$callbacks = this.callbacks) != null && _this$callbacks.onAbort) {
              this.callbacks.onAbort(this.stats, this.context, this.loader);
            }
          };
          _proto.load = function load(context, config, callbacks) {
            if (this.stats.loading.start) {
              throw new Error("Loader can only be used once.");
            }
            this.stats.loading.start = self.performance.now();
            this.context = context;
            this.config = config;
            this.callbacks = callbacks;
            this.loadInternal();
          };
          _proto.loadInternal = function loadInternal() {
            var _this = this;
            var config = this.config, context = this.context;
            if (!config || !context) {
              return;
            }
            var xhr = this.loader = new self.XMLHttpRequest();
            var stats = this.stats;
            stats.loading.first = 0;
            stats.loaded = 0;
            stats.aborted = false;
            var xhrSetup = this.xhrSetup;
            if (xhrSetup) {
              Promise.resolve().then(function() {
                if (_this.loader !== xhr || _this.stats.aborted) return;
                return xhrSetup(xhr, context.url);
              }).catch(function(error) {
                if (_this.loader !== xhr || _this.stats.aborted) return;
                xhr.open("GET", context.url, true);
                return xhrSetup(xhr, context.url);
              }).then(function() {
                if (_this.loader !== xhr || _this.stats.aborted) return;
                _this.openAndSendXhr(xhr, context, config);
              }).catch(function(error) {
                _this.callbacks.onError({
                  code: xhr.status,
                  text: error.message
                }, context, xhr, stats);
                return;
              });
            } else {
              this.openAndSendXhr(xhr, context, config);
            }
          };
          _proto.openAndSendXhr = function openAndSendXhr(xhr, context, config) {
            if (!xhr.readyState) {
              xhr.open("GET", context.url, true);
            }
            var headers = context.headers;
            var _config$loadPolicy = config.loadPolicy, maxTimeToFirstByteMs = _config$loadPolicy.maxTimeToFirstByteMs, maxLoadTimeMs = _config$loadPolicy.maxLoadTimeMs;
            if (headers) {
              for (var header in headers) {
                xhr.setRequestHeader(header, headers[header]);
              }
            }
            if (context.rangeEnd) {
              xhr.setRequestHeader("Range", "bytes=" + context.rangeStart + "-" + (context.rangeEnd - 1));
            }
            xhr.onreadystatechange = this.readystatechange.bind(this);
            xhr.onprogress = this.loadprogress.bind(this);
            xhr.responseType = context.responseType;
            self.clearTimeout(this.requestTimeout);
            config.timeout = maxTimeToFirstByteMs && isFiniteNumber(maxTimeToFirstByteMs) ? maxTimeToFirstByteMs : maxLoadTimeMs;
            this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.timeout);
            xhr.send();
          };
          _proto.readystatechange = function readystatechange() {
            var context = this.context, xhr = this.loader, stats = this.stats;
            if (!context || !xhr) {
              return;
            }
            var readyState = xhr.readyState;
            var config = this.config;
            if (stats.aborted) {
              return;
            }
            if (readyState >= 2) {
              if (stats.loading.first === 0) {
                stats.loading.first = Math.max(self.performance.now(), stats.loading.start);
                if (config.timeout !== config.loadPolicy.maxLoadTimeMs) {
                  self.clearTimeout(this.requestTimeout);
                  config.timeout = config.loadPolicy.maxLoadTimeMs;
                  this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.loadPolicy.maxLoadTimeMs - (stats.loading.first - stats.loading.start));
                }
              }
              if (readyState === 4) {
                self.clearTimeout(this.requestTimeout);
                xhr.onreadystatechange = null;
                xhr.onprogress = null;
                var _status = xhr.status;
                var useResponseText = xhr.responseType === "text" ? xhr.responseText : null;
                if (_status >= 200 && _status < 300) {
                  var data = useResponseText != null ? useResponseText : xhr.response;
                  if (data != null) {
                    stats.loading.end = Math.max(self.performance.now(), stats.loading.first);
                    var len = xhr.responseType === "arraybuffer" ? data.byteLength : data.length;
                    stats.loaded = stats.total = len;
                    stats.bwEstimate = stats.total * 8e3 / (stats.loading.end - stats.loading.first);
                    if (!this.callbacks) {
                      return;
                    }
                    var onProgress = this.callbacks.onProgress;
                    if (onProgress) {
                      onProgress(stats, context, data, xhr);
                    }
                    if (!this.callbacks) {
                      return;
                    }
                    var _response = {
                      url: xhr.responseURL,
                      data,
                      code: _status
                    };
                    this.callbacks.onSuccess(_response, stats, context, xhr);
                    return;
                  }
                }
                var retryConfig = config.loadPolicy.errorRetry;
                var retryCount = stats.retry;
                var response = {
                  url: context.url,
                  data: void 0,
                  code: _status
                };
                if (shouldRetry(retryConfig, retryCount, false, response)) {
                  this.retry(retryConfig);
                } else {
                  logger.error(_status + " while loading " + context.url);
                  this.callbacks.onError({
                    code: _status,
                    text: xhr.statusText
                  }, context, xhr, stats);
                }
              }
            }
          };
          _proto.loadtimeout = function loadtimeout() {
            if (!this.config) return;
            var retryConfig = this.config.loadPolicy.timeoutRetry;
            var retryCount = this.stats.retry;
            if (shouldRetry(retryConfig, retryCount, true)) {
              this.retry(retryConfig);
            } else {
              var _this$context;
              logger.warn("timeout while loading " + ((_this$context = this.context) == null ? void 0 : _this$context.url));
              var callbacks = this.callbacks;
              if (callbacks) {
                this.abortInternal();
                callbacks.onTimeout(this.stats, this.context, this.loader);
              }
            }
          };
          _proto.retry = function retry(retryConfig) {
            var context = this.context, stats = this.stats;
            this.retryDelay = getRetryDelay(retryConfig, stats.retry);
            stats.retry++;
            logger.warn((status ? "HTTP Status " + status : "Timeout") + " while loading " + (context == null ? void 0 : context.url) + ", retrying " + stats.retry + "/" + retryConfig.maxNumRetry + " in " + this.retryDelay + "ms");
            this.abortInternal();
            this.loader = null;
            self.clearTimeout(this.retryTimeout);
            this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay);
          };
          _proto.loadprogress = function loadprogress(event) {
            var stats = this.stats;
            stats.loaded = event.loaded;
            if (event.lengthComputable) {
              stats.total = event.total;
            }
          };
          _proto.getCacheAge = function getCacheAge() {
            var result = null;
            if (this.loader && AGE_HEADER_LINE_REGEX.test(this.loader.getAllResponseHeaders())) {
              var ageHeader = this.loader.getResponseHeader("age");
              result = ageHeader ? parseFloat(ageHeader) : null;
            }
            return result;
          };
          _proto.getResponseHeader = function getResponseHeader(name) {
            if (this.loader && new RegExp("^" + name + ":\\s*[\\d.]+\\s*$", "im").test(this.loader.getAllResponseHeaders())) {
              return this.loader.getResponseHeader(name);
            }
            return null;
          };
          return XhrLoader2;
        }();
        var ChunkCache = function() {
          function ChunkCache2() {
            this.chunks = [];
            this.dataLength = 0;
          }
          var _proto = ChunkCache2.prototype;
          _proto.push = function push2(chunk) {
            this.chunks.push(chunk);
            this.dataLength += chunk.length;
          };
          _proto.flush = function flush() {
            var chunks = this.chunks, dataLength = this.dataLength;
            var result;
            if (!chunks.length) {
              return new Uint8Array(0);
            } else if (chunks.length === 1) {
              result = chunks[0];
            } else {
              result = concatUint8Arrays(chunks, dataLength);
            }
            this.reset();
            return result;
          };
          _proto.reset = function reset() {
            this.chunks.length = 0;
            this.dataLength = 0;
          };
          return ChunkCache2;
        }();
        function concatUint8Arrays(chunks, dataLength) {
          var result = new Uint8Array(dataLength);
          var offset = 0;
          for (var i = 0; i < chunks.length; i++) {
            var chunk = chunks[i];
            result.set(chunk, offset);
            offset += chunk.length;
          }
          return result;
        }
        function fetchSupported() {
          if (
            // @ts-ignore
            self.fetch && self.AbortController && self.ReadableStream && self.Request
          ) {
            try {
              new self.ReadableStream({});
              return true;
            } catch (e) {
            }
          }
          return false;
        }
        var BYTERANGE = /(\d+)-(\d+)\/(\d+)/;
        var FetchLoader = function() {
          function FetchLoader2(config) {
            this.fetchSetup = void 0;
            this.requestTimeout = void 0;
            this.request = null;
            this.response = null;
            this.controller = void 0;
            this.context = null;
            this.config = null;
            this.callbacks = null;
            this.stats = void 0;
            this.loader = null;
            this.fetchSetup = config.fetchSetup || getRequest;
            this.controller = new self.AbortController();
            this.stats = new LoadStats();
          }
          var _proto = FetchLoader2.prototype;
          _proto.destroy = function destroy() {
            this.loader = this.callbacks = this.context = this.config = this.request = null;
            this.abortInternal();
            this.response = null;
            this.fetchSetup = this.controller = this.stats = null;
          };
          _proto.abortInternal = function abortInternal() {
            if (this.controller && !this.stats.loading.end) {
              this.stats.aborted = true;
              this.controller.abort();
            }
          };
          _proto.abort = function abort() {
            var _this$callbacks;
            this.abortInternal();
            if ((_this$callbacks = this.callbacks) != null && _this$callbacks.onAbort) {
              this.callbacks.onAbort(this.stats, this.context, this.response);
            }
          };
          _proto.load = function load(context, config, callbacks) {
            var _this = this;
            var stats = this.stats;
            if (stats.loading.start) {
              throw new Error("Loader can only be used once.");
            }
            stats.loading.start = self.performance.now();
            var initParams = getRequestParameters(context, this.controller.signal);
            var onProgress = callbacks.onProgress;
            var isArrayBuffer = context.responseType === "arraybuffer";
            var LENGTH = isArrayBuffer ? "byteLength" : "length";
            var _config$loadPolicy = config.loadPolicy, maxTimeToFirstByteMs = _config$loadPolicy.maxTimeToFirstByteMs, maxLoadTimeMs = _config$loadPolicy.maxLoadTimeMs;
            this.context = context;
            this.config = config;
            this.callbacks = callbacks;
            this.request = this.fetchSetup(context, initParams);
            self.clearTimeout(this.requestTimeout);
            config.timeout = maxTimeToFirstByteMs && isFiniteNumber(maxTimeToFirstByteMs) ? maxTimeToFirstByteMs : maxLoadTimeMs;
            this.requestTimeout = self.setTimeout(function() {
              _this.abortInternal();
              callbacks.onTimeout(stats, context, _this.response);
            }, config.timeout);
            self.fetch(this.request).then(function(response) {
              _this.response = _this.loader = response;
              var first = Math.max(self.performance.now(), stats.loading.start);
              self.clearTimeout(_this.requestTimeout);
              config.timeout = maxLoadTimeMs;
              _this.requestTimeout = self.setTimeout(function() {
                _this.abortInternal();
                callbacks.onTimeout(stats, context, _this.response);
              }, maxLoadTimeMs - (first - stats.loading.start));
              if (!response.ok) {
                var status2 = response.status, statusText = response.statusText;
                throw new FetchError(statusText || "fetch, bad network response", status2, response);
              }
              stats.loading.first = first;
              stats.total = getContentLength(response.headers) || stats.total;
              if (onProgress && isFiniteNumber(config.highWaterMark)) {
                return _this.loadProgressively(response, stats, context, config.highWaterMark, onProgress);
              }
              if (isArrayBuffer) {
                return response.arrayBuffer();
              }
              if (context.responseType === "json") {
                return response.json();
              }
              return response.text();
            }).then(function(responseData) {
              var response = _this.response;
              if (!response) {
                throw new Error("loader destroyed");
              }
              self.clearTimeout(_this.requestTimeout);
              stats.loading.end = Math.max(self.performance.now(), stats.loading.first);
              var total = responseData[LENGTH];
              if (total) {
                stats.loaded = stats.total = total;
              }
              var loaderResponse = {
                url: response.url,
                data: responseData,
                code: response.status
              };
              if (onProgress && !isFiniteNumber(config.highWaterMark)) {
                onProgress(stats, context, responseData, response);
              }
              callbacks.onSuccess(loaderResponse, stats, context, response);
            }).catch(function(error) {
              self.clearTimeout(_this.requestTimeout);
              if (stats.aborted) {
                return;
              }
              var code = !error ? 0 : error.code || 0;
              var text = !error ? null : error.message;
              callbacks.onError({
                code,
                text
              }, context, error ? error.details : null, stats);
            });
          };
          _proto.getCacheAge = function getCacheAge() {
            var result = null;
            if (this.response) {
              var ageHeader = this.response.headers.get("age");
              result = ageHeader ? parseFloat(ageHeader) : null;
            }
            return result;
          };
          _proto.getResponseHeader = function getResponseHeader(name) {
            return this.response ? this.response.headers.get(name) : null;
          };
          _proto.loadProgressively = function loadProgressively(response, stats, context, highWaterMark, onProgress) {
            if (highWaterMark === void 0) {
              highWaterMark = 0;
            }
            var chunkCache = new ChunkCache();
            var reader = response.body.getReader();
            var pump = function pump2() {
              return reader.read().then(function(data) {
                if (data.done) {
                  if (chunkCache.dataLength) {
                    onProgress(stats, context, chunkCache.flush(), response);
                  }
                  return Promise.resolve(new ArrayBuffer(0));
                }
                var chunk = data.value;
                var len = chunk.length;
                stats.loaded += len;
                if (len < highWaterMark || chunkCache.dataLength) {
                  chunkCache.push(chunk);
                  if (chunkCache.dataLength >= highWaterMark) {
                    onProgress(stats, context, chunkCache.flush(), response);
                  }
                } else {
                  onProgress(stats, context, chunk, response);
                }
                return pump2();
              }).catch(function() {
                return Promise.reject();
              });
            };
            return pump();
          };
          return FetchLoader2;
        }();
        function getRequestParameters(context, signal) {
          var initParams = {
            method: "GET",
            mode: "cors",
            credentials: "same-origin",
            signal,
            headers: new self.Headers(_extends({}, context.headers))
          };
          if (context.rangeEnd) {
            initParams.headers.set("Range", "bytes=" + context.rangeStart + "-" + String(context.rangeEnd - 1));
          }
          return initParams;
        }
        function getByteRangeLength(byteRangeHeader) {
          var result = BYTERANGE.exec(byteRangeHeader);
          if (result) {
            return parseInt(result[2]) - parseInt(result[1]) + 1;
          }
        }
        function getContentLength(headers) {
          var contentRange = headers.get("Content-Range");
          if (contentRange) {
            var byteRangeLength = getByteRangeLength(contentRange);
            if (isFiniteNumber(byteRangeLength)) {
              return byteRangeLength;
            }
          }
          var contentLength = headers.get("Content-Length");
          if (contentLength) {
            return parseInt(contentLength);
          }
        }
        function getRequest(context, initParams) {
          return new self.Request(context.url, initParams);
        }
        var FetchError = function(_Error) {
          _inheritsLoose(FetchError2, _Error);
          function FetchError2(message, code, details) {
            var _this2;
            _this2 = _Error.call(this, message) || this;
            _this2.code = void 0;
            _this2.details = void 0;
            _this2.code = code;
            _this2.details = details;
            return _this2;
          }
          return FetchError2;
        }(_wrapNativeSuper(Error));
        var defaultLoadPolicy = {
          maxTimeToFirstByteMs: 8e3,
          maxLoadTimeMs: 2e4,
          timeoutRetry: null,
          errorRetry: null
        };
        var hlsDefaultConfig = _objectSpread2(_objectSpread2({
          autoStartLoad: true,
          // used by stream-controller
          startPosition: -1,
          // used by stream-controller
          defaultAudioCodec: void 0,
          // used by stream-controller
          debug: false,
          // used by logger
          capLevelOnFPSDrop: false,
          // used by fps-controller
          capLevelToPlayerSize: false,
          // used by cap-level-controller
          ignoreDevicePixelRatio: false,
          // used by cap-level-controller
          preferManagedMediaSource: true,
          initialLiveManifestSize: 1,
          // used by stream-controller
          maxBufferLength: 30,
          // used by stream-controller
          backBufferLength: Infinity,
          // used by buffer-controller
          frontBufferFlushThreshold: Infinity,
          maxBufferSize: 60 * 1e3 * 1e3,
          // used by stream-controller
          maxBufferHole: 0.1,
          // used by stream-controller
          highBufferWatchdogPeriod: 2,
          // used by stream-controller
          nudgeOffset: 0.1,
          // used by stream-controller
          nudgeMaxRetry: 3,
          // used by stream-controller
          maxFragLookUpTolerance: 0.25,
          // used by stream-controller
          liveSyncDurationCount: 3,
          // used by latency-controller
          liveMaxLatencyDurationCount: Infinity,
          // used by latency-controller
          liveSyncDuration: void 0,
          // used by latency-controller
          liveMaxLatencyDuration: void 0,
          // used by latency-controller
          maxLiveSyncPlaybackRate: 1,
          // used by latency-controller
          liveDurationInfinity: false,
          // used by buffer-controller
          /**
           * @deprecated use backBufferLength
           */
          liveBackBufferLength: null,
          // used by buffer-controller
          maxMaxBufferLength: 600,
          // used by stream-controller
          enableWorker: true,
          // used by transmuxer
          workerPath: null,
          // used by transmuxer
          enableSoftwareAES: true,
          // used by decrypter
          startLevel: void 0,
          // used by level-controller
          startFragPrefetch: false,
          // used by stream-controller
          fpsDroppedMonitoringPeriod: 5e3,
          // used by fps-controller
          fpsDroppedMonitoringThreshold: 0.2,
          // used by fps-controller
          appendErrorMaxRetry: 3,
          // used by buffer-controller
          loader: XhrLoader,
          // loader: FetchLoader,
          fLoader: void 0,
          // used by fragment-loader
          pLoader: void 0,
          // used by playlist-loader
          xhrSetup: void 0,
          // used by xhr-loader
          licenseXhrSetup: void 0,
          // used by eme-controller
          licenseResponseCallback: void 0,
          // used by eme-controller
          abrController: AbrController,
          bufferController: BufferController,
          capLevelController: CapLevelController,
          errorController: ErrorController,
          fpsController: FPSController,
          stretchShortVideoTrack: false,
          // used by mp4-remuxer
          maxAudioFramesDrift: 1,
          // used by mp4-remuxer
          forceKeyFrameOnDiscontinuity: true,
          // used by ts-demuxer
          abrEwmaFastLive: 3,
          // used by abr-controller
          abrEwmaSlowLive: 9,
          // used by abr-controller
          abrEwmaFastVoD: 3,
          // used by abr-controller
          abrEwmaSlowVoD: 9,
          // used by abr-controller
          abrEwmaDefaultEstimate: 5e5,
          // 500 kbps  // used by abr-controller
          abrEwmaDefaultEstimateMax: 5e6,
          // 5 mbps
          abrBandWidthFactor: 0.95,
          // used by abr-controller
          abrBandWidthUpFactor: 0.7,
          // used by abr-controller
          abrMaxWithRealBitrate: false,
          // used by abr-controller
          maxStarvationDelay: 4,
          // used by abr-controller
          maxLoadingDelay: 4,
          // used by abr-controller
          minAutoBitrate: 0,
          // used by hls
          emeEnabled: false,
          // used by eme-controller
          widevineLicenseUrl: void 0,
          // used by eme-controller
          drmSystems: {},
          // used by eme-controller
          drmSystemOptions: {},
          // used by eme-controller
          requestMediaKeySystemAccessFunc: null,
          // used by eme-controller
          testBandwidth: true,
          progressive: false,
          lowLatencyMode: true,
          cmcd: void 0,
          enableDateRangeMetadataCues: true,
          enableEmsgMetadataCues: true,
          enableID3MetadataCues: true,
          useMediaCapabilities: false,
          certLoadPolicy: {
            default: defaultLoadPolicy
          },
          keyLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 8e3,
              maxLoadTimeMs: 2e4,
              timeoutRetry: {
                maxNumRetry: 1,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 2e4,
                backoff: "linear"
              },
              errorRetry: {
                maxNumRetry: 8,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 2e4,
                backoff: "linear"
              }
            }
          },
          manifestLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: Infinity,
              maxLoadTimeMs: 2e4,
              timeoutRetry: {
                maxNumRetry: 2,
                retryDelayMs: 0,
                maxRetryDelayMs: 0
              },
              errorRetry: {
                maxNumRetry: 1,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 8e3
              }
            }
          },
          playlistLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 1e4,
              maxLoadTimeMs: 2e4,
              timeoutRetry: {
                maxNumRetry: 2,
                retryDelayMs: 0,
                maxRetryDelayMs: 0
              },
              errorRetry: {
                maxNumRetry: 2,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 8e3
              }
            }
          },
          fragLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 1e4,
              maxLoadTimeMs: 12e4,
              timeoutRetry: {
                maxNumRetry: 4,
                retryDelayMs: 0,
                maxRetryDelayMs: 0
              },
              errorRetry: {
                maxNumRetry: 6,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 8e3
              }
            }
          },
          steeringManifestLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 1e4,
              maxLoadTimeMs: 2e4,
              timeoutRetry: {
                maxNumRetry: 2,
                retryDelayMs: 0,
                maxRetryDelayMs: 0
              },
              errorRetry: {
                maxNumRetry: 1,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 8e3
              }
            }
          },
          // These default settings are deprecated in favor of the above policies
          // and are maintained for backwards compatibility
          manifestLoadingTimeOut: 1e4,
          manifestLoadingMaxRetry: 1,
          manifestLoadingRetryDelay: 1e3,
          manifestLoadingMaxRetryTimeout: 64e3,
          levelLoadingTimeOut: 1e4,
          levelLoadingMaxRetry: 4,
          levelLoadingRetryDelay: 1e3,
          levelLoadingMaxRetryTimeout: 64e3,
          fragLoadingTimeOut: 2e4,
          fragLoadingMaxRetry: 6,
          fragLoadingRetryDelay: 1e3,
          fragLoadingMaxRetryTimeout: 64e3
        }, timelineConfig()), {}, {
          subtitleStreamController: void 0,
          subtitleTrackController: void 0,
          timelineController: void 0,
          audioStreamController: void 0,
          audioTrackController: void 0,
          emeController: void 0,
          cmcdController: void 0,
          contentSteeringController: ContentSteeringController
        });
        function timelineConfig() {
          return {
            cueHandler: Cues,
            // used by timeline-controller
            enableWebVTT: false,
            // used by timeline-controller
            enableIMSC1: false,
            // used by timeline-controller
            enableCEA708Captions: false,
            // used by timeline-controller
            captionsTextTrack1Label: "English",
            // used by timeline-controller
            captionsTextTrack1LanguageCode: "en",
            // used by timeline-controller
            captionsTextTrack2Label: "Spanish",
            // used by timeline-controller
            captionsTextTrack2LanguageCode: "es",
            // used by timeline-controller
            captionsTextTrack3Label: "Unknown CC",
            // used by timeline-controller
            captionsTextTrack3LanguageCode: "",
            // used by timeline-controller
            captionsTextTrack4Label: "Unknown CC",
            // used by timeline-controller
            captionsTextTrack4LanguageCode: "",
            // used by timeline-controller
            renderTextTracksNatively: true
          };
        }
        function mergeConfig(defaultConfig, userConfig) {
          if ((userConfig.liveSyncDurationCount || userConfig.liveMaxLatencyDurationCount) && (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)) {
            throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
          }
          if (userConfig.liveMaxLatencyDurationCount !== void 0 && (userConfig.liveSyncDurationCount === void 0 || userConfig.liveMaxLatencyDurationCount <= userConfig.liveSyncDurationCount)) {
            throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
          }
          if (userConfig.liveMaxLatencyDuration !== void 0 && (userConfig.liveSyncDuration === void 0 || userConfig.liveMaxLatencyDuration <= userConfig.liveSyncDuration)) {
            throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
          }
          var defaultsCopy = deepCpy(defaultConfig);
          var deprecatedSettingTypes = ["manifest", "level", "frag"];
          var deprecatedSettings = ["TimeOut", "MaxRetry", "RetryDelay", "MaxRetryTimeout"];
          deprecatedSettingTypes.forEach(function(type) {
            var policyName = (type === "level" ? "playlist" : type) + "LoadPolicy";
            var policyNotSet = userConfig[policyName] === void 0;
            var report = [];
            deprecatedSettings.forEach(function(setting) {
              var deprecatedSetting = type + "Loading" + setting;
              var value = userConfig[deprecatedSetting];
              if (value !== void 0 && policyNotSet) {
                report.push(deprecatedSetting);
                var settings = defaultsCopy[policyName].default;
                userConfig[policyName] = {
                  default: settings
                };
                switch (setting) {
                  case "TimeOut":
                    settings.maxLoadTimeMs = value;
                    settings.maxTimeToFirstByteMs = value;
                    break;
                  case "MaxRetry":
                    settings.errorRetry.maxNumRetry = value;
                    settings.timeoutRetry.maxNumRetry = value;
                    break;
                  case "RetryDelay":
                    settings.errorRetry.retryDelayMs = value;
                    settings.timeoutRetry.retryDelayMs = value;
                    break;
                  case "MaxRetryTimeout":
                    settings.errorRetry.maxRetryDelayMs = value;
                    settings.timeoutRetry.maxRetryDelayMs = value;
                    break;
                }
              }
            });
            if (report.length) {
              logger.warn('hls.js config: "' + report.join('", "') + '" setting(s) are deprecated, use "' + policyName + '": ' + JSON.stringify(userConfig[policyName]));
            }
          });
          return _objectSpread2(_objectSpread2({}, defaultsCopy), userConfig);
        }
        function deepCpy(obj) {
          if (obj && typeof obj === "object") {
            if (Array.isArray(obj)) {
              return obj.map(deepCpy);
            }
            return Object.keys(obj).reduce(function(result, key) {
              result[key] = deepCpy(obj[key]);
              return result;
            }, {});
          }
          return obj;
        }
        function enableStreamingMode(config) {
          var currentLoader = config.loader;
          if (currentLoader !== FetchLoader && currentLoader !== XhrLoader) {
            logger.log("[config]: Custom loader detected, cannot enable progressive streaming");
            config.progressive = false;
          } else {
            var canStreamProgressively = fetchSupported();
            if (canStreamProgressively) {
              config.loader = FetchLoader;
              config.progressive = true;
              config.enableSoftwareAES = true;
              logger.log("[config]: Progressive streaming enabled, using FetchLoader");
            }
          }
        }
        var chromeOrFirefox;
        var LevelController = function(_BasePlaylistControll) {
          _inheritsLoose(LevelController2, _BasePlaylistControll);
          function LevelController2(hls, contentSteeringController) {
            var _this;
            _this = _BasePlaylistControll.call(this, hls, "[level-controller]") || this;
            _this._levels = [];
            _this._firstLevel = -1;
            _this._maxAutoLevel = -1;
            _this._startLevel = void 0;
            _this.currentLevel = null;
            _this.currentLevelIndex = -1;
            _this.manualLevelIndex = -1;
            _this.steering = void 0;
            _this.onParsedComplete = void 0;
            _this.steering = contentSteeringController;
            _this._registerListeners();
            return _this;
          }
          var _proto = LevelController2.prototype;
          _proto._registerListeners = function _registerListeners() {
            var hls = this.hls;
            hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);
            hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);
            hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);
            hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);
            hls.on(Events.ERROR, this.onError, this);
          };
          _proto._unregisterListeners = function _unregisterListeners() {
            var hls = this.hls;
            hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);
            hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);
            hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);
            hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);
            hls.off(Events.ERROR, this.onError, this);
          };
          _proto.destroy = function destroy() {
            this._unregisterListeners();
            this.steering = null;
            this.resetLevels();
            _BasePlaylistControll.prototype.destroy.call(this);
          };
          _proto.stopLoad = function stopLoad() {
            var levels = this._levels;
            levels.forEach(function(level) {
              level.loadError = 0;
              level.fragmentError = 0;
            });
            _BasePlaylistControll.prototype.stopLoad.call(this);
          };
          _proto.resetLevels = function resetLevels() {
            this._startLevel = void 0;
            this.manualLevelIndex = -1;
            this.currentLevelIndex = -1;
            this.currentLevel = null;
            this._levels = [];
            this._maxAutoLevel = -1;
          };
          _proto.onManifestLoading = function onManifestLoading(event, data) {
            this.resetLevels();
          };
          _proto.onManifestLoaded = function onManifestLoaded(event, data) {
            var preferManagedMediaSource = this.hls.config.preferManagedMediaSource;
            var levels = [];
            var redundantSet = {};
            var generatePathwaySet = {};
            var resolutionFound = false;
            var videoCodecFound = false;
            var audioCodecFound = false;
            data.levels.forEach(function(levelParsed) {
              var _audioCodec, _videoCodec;
              var attributes = levelParsed.attrs;
              var audioCodec = levelParsed.audioCodec, videoCodec = levelParsed.videoCodec;
              if (((_audioCodec = audioCodec) == null ? void 0 : _audioCodec.indexOf("mp4a.40.34")) !== -1) {
                chromeOrFirefox || (chromeOrFirefox = /chrome|firefox/i.test(navigator.userAgent));
                if (chromeOrFirefox) {
                  levelParsed.audioCodec = audioCodec = void 0;
                }
              }
              if (audioCodec) {
                levelParsed.audioCodec = audioCodec = getCodecCompatibleName(audioCodec, preferManagedMediaSource);
              }
              if (((_videoCodec = videoCodec) == null ? void 0 : _videoCodec.indexOf("avc1")) === 0) {
                videoCodec = levelParsed.videoCodec = convertAVC1ToAVCOTI(videoCodec);
              }
              var width = levelParsed.width, height = levelParsed.height, unknownCodecs = levelParsed.unknownCodecs;
              resolutionFound || (resolutionFound = !!(width && height));
              videoCodecFound || (videoCodecFound = !!videoCodec);
              audioCodecFound || (audioCodecFound = !!audioCodec);
              if (unknownCodecs != null && unknownCodecs.length || audioCodec && !areCodecsMediaSourceSupported(audioCodec, "audio", preferManagedMediaSource) || videoCodec && !areCodecsMediaSourceSupported(videoCodec, "video", preferManagedMediaSource)) {
                return;
              }
              var CODECS = attributes.CODECS, FRAMERATE = attributes["FRAME-RATE"], HDCP = attributes["HDCP-LEVEL"], PATHWAY = attributes["PATHWAY-ID"], RESOLUTION = attributes.RESOLUTION, VIDEO_RANGE = attributes["VIDEO-RANGE"];
              var contentSteeringPrefix = (PATHWAY || ".") + "-";
              var levelKey = "" + contentSteeringPrefix + levelParsed.bitrate + "-" + RESOLUTION + "-" + FRAMERATE + "-" + CODECS + "-" + VIDEO_RANGE + "-" + HDCP;
              if (!redundantSet[levelKey]) {
                var level = new Level(levelParsed);
                redundantSet[levelKey] = level;
                generatePathwaySet[levelKey] = 1;
                levels.push(level);
              } else if (redundantSet[levelKey].uri !== levelParsed.url && !levelParsed.attrs["PATHWAY-ID"]) {
                var pathwayCount = generatePathwaySet[levelKey] += 1;
                levelParsed.attrs["PATHWAY-ID"] = new Array(pathwayCount + 1).join(".");
                var _level = new Level(levelParsed);
                redundantSet[levelKey] = _level;
                levels.push(_level);
              } else {
                redundantSet[levelKey].addGroupId("audio", attributes.AUDIO);
                redundantSet[levelKey].addGroupId("text", attributes.SUBTITLES);
              }
            });
            this.filterAndSortMediaOptions(levels, data, resolutionFound, videoCodecFound, audioCodecFound);
          };
          _proto.filterAndSortMediaOptions = function filterAndSortMediaOptions(filteredLevels, data, resolutionFound, videoCodecFound, audioCodecFound) {
            var _this2 = this;
            var audioTracks = [];
            var subtitleTracks = [];
            var levels = filteredLevels;
            if ((resolutionFound || videoCodecFound) && audioCodecFound) {
              levels = levels.filter(function(_ref) {
                var videoCodec = _ref.videoCodec, videoRange = _ref.videoRange, width = _ref.width, height = _ref.height;
                return (!!videoCodec || !!(width && height)) && isVideoRange(videoRange);
              });
            }
            if (levels.length === 0) {
              Promise.resolve().then(function() {
                if (_this2.hls) {
                  if (data.levels.length) {
                    _this2.warn("One or more CODECS in variant not supported: " + JSON.stringify(data.levels[0].attrs));
                  }
                  var error = new Error("no level with compatible codecs found in manifest");
                  _this2.hls.trigger(Events.ERROR, {
                    type: ErrorTypes.MEDIA_ERROR,
                    details: ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                    fatal: true,
                    url: data.url,
                    error,
                    reason: error.message
                  });
                }
              });
              return;
            }
            if (data.audioTracks) {
              var preferManagedMediaSource = this.hls.config.preferManagedMediaSource;
              audioTracks = data.audioTracks.filter(function(track) {
                return !track.audioCodec || areCodecsMediaSourceSupported(track.audioCodec, "audio", preferManagedMediaSource);
              });
              assignTrackIdsByGroup(audioTracks);
            }
            if (data.subtitles) {
              subtitleTracks = data.subtitles;
              assignTrackIdsByGroup(subtitleTracks);
            }
            var unsortedLevels = levels.slice(0);
            levels.sort(function(a, b) {
              if (a.attrs["HDCP-LEVEL"] !== b.attrs["HDCP-LEVEL"]) {
                return (a.attrs["HDCP-LEVEL"] || "") > (b.attrs["HDCP-LEVEL"] || "") ? 1 : -1;
              }
              if (resolutionFound && a.height !== b.height) {
                return a.height - b.height;
              }
              if (a.frameRate !== b.frameRate) {
                return a.frameRate - b.frameRate;
              }
              if (a.videoRange !== b.videoRange) {
                return VideoRangeValues.indexOf(a.videoRange) - VideoRangeValues.indexOf(b.videoRange);
              }
              if (a.videoCodec !== b.videoCodec) {
                var valueA = videoCodecPreferenceValue(a.videoCodec);
                var valueB = videoCodecPreferenceValue(b.videoCodec);
                if (valueA !== valueB) {
                  return valueB - valueA;
                }
              }
              if (a.uri === b.uri && a.codecSet !== b.codecSet) {
                var _valueA = codecsSetSelectionPreferenceValue(a.codecSet);
                var _valueB = codecsSetSelectionPreferenceValue(b.codecSet);
                if (_valueA !== _valueB) {
                  return _valueB - _valueA;
                }
              }
              if (a.averageBitrate !== b.averageBitrate) {
                return a.averageBitrate - b.averageBitrate;
              }
              return 0;
            });
            var firstLevelInPlaylist = unsortedLevels[0];
            if (this.steering) {
              levels = this.steering.filterParsedLevels(levels);
              if (levels.length !== unsortedLevels.length) {
                for (var i = 0; i < unsortedLevels.length; i++) {
                  if (unsortedLevels[i].pathwayId === levels[0].pathwayId) {
                    firstLevelInPlaylist = unsortedLevels[i];
                    break;
                  }
                }
              }
            }
            this._levels = levels;
            for (var _i = 0; _i < levels.length; _i++) {
              if (levels[_i] === firstLevelInPlaylist) {
                var _this$hls$userConfig;
                this._firstLevel = _i;
                var firstLevelBitrate = firstLevelInPlaylist.bitrate;
                var bandwidthEstimate = this.hls.bandwidthEstimate;
                this.log("manifest loaded, " + levels.length + " level(s) found, first bitrate: " + firstLevelBitrate);
                if (((_this$hls$userConfig = this.hls.userConfig) == null ? void 0 : _this$hls$userConfig.abrEwmaDefaultEstimate) === void 0) {
                  var startingBwEstimate = Math.min(firstLevelBitrate, this.hls.config.abrEwmaDefaultEstimateMax);
                  if (startingBwEstimate > bandwidthEstimate && bandwidthEstimate === hlsDefaultConfig.abrEwmaDefaultEstimate) {
                    this.hls.bandwidthEstimate = startingBwEstimate;
                  }
                }
                break;
              }
            }
            var audioOnly = audioCodecFound && !videoCodecFound;
            var edata = {
              levels,
              audioTracks,
              subtitleTracks,
              sessionData: data.sessionData,
              sessionKeys: data.sessionKeys,
              firstLevel: this._firstLevel,
              stats: data.stats,
              audio: audioCodecFound,
              video: videoCodecFound,
              altAudio: !audioOnly && audioTracks.some(function(t) {
                return !!t.url;
              })
            };
            this.hls.trigger(Events.MANIFEST_PARSED, edata);
            if (this.hls.config.autoStartLoad || this.hls.forceStartLoad) {
              this.hls.startLoad(this.hls.config.startPosition);
            }
          };
          _proto.onError = function onError(event, data) {
            if (data.fatal || !data.context) {
              return;
            }
            if (data.context.type === PlaylistContextType.LEVEL && data.context.level === this.level) {
              this.checkRetry(data);
            }
          };
          _proto.onFragBuffered = function onFragBuffered(event, _ref2) {
            var frag = _ref2.frag;
            if (frag !== void 0 && frag.type === PlaylistLevelType.MAIN) {
              var el = frag.elementaryStreams;
              if (!Object.keys(el).some(function(type) {
                return !!el[type];
              })) {
                return;
              }
              var level = this._levels[frag.level];
              if (level != null && level.loadError) {
                this.log("Resetting level error count of " + level.loadError + " on frag buffered");
                level.loadError = 0;
              }
            }
          };
          _proto.onLevelLoaded = function onLevelLoaded(event, data) {
            var _data$deliveryDirecti2;
            var level = data.level, details = data.details;
            var curLevel = this._levels[level];
            if (!curLevel) {
              var _data$deliveryDirecti;
              this.warn("Invalid level index " + level);
              if ((_data$deliveryDirecti = data.deliveryDirectives) != null && _data$deliveryDirecti.skip) {
                details.deltaUpdateFailed = true;
              }
              return;
            }
            if (level === this.currentLevelIndex) {
              if (curLevel.fragmentError === 0) {
                curLevel.loadError = 0;
              }
              this.playlistLoaded(level, data, curLevel.details);
            } else if ((_data$deliveryDirecti2 = data.deliveryDirectives) != null && _data$deliveryDirecti2.skip) {
              details.deltaUpdateFailed = true;
            }
          };
          _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
            _BasePlaylistControll.prototype.loadPlaylist.call(this);
            var currentLevelIndex = this.currentLevelIndex;
            var currentLevel = this.currentLevel;
            if (currentLevel && this.shouldLoadPlaylist(currentLevel)) {
              var url = currentLevel.uri;
              if (hlsUrlParameters) {
                try {
                  url = hlsUrlParameters.addDirectives(url);
                } catch (error) {
                  this.warn("Could not construct new URL with HLS Delivery Directives: " + error);
                }
              }
              var pathwayId = currentLevel.attrs["PATHWAY-ID"];
              this.log("Loading level index " + currentLevelIndex + ((hlsUrlParameters == null ? void 0 : hlsUrlParameters.msn) !== void 0 ? " at sn " + hlsUrlParameters.msn + " part " + hlsUrlParameters.part : "") + " with" + (pathwayId ? " Pathway " + pathwayId : "") + " " + url);
              this.clearTimer();
              this.hls.trigger(Events.LEVEL_LOADING, {
                url,
                level: currentLevelIndex,
                pathwayId: currentLevel.attrs["PATHWAY-ID"],
                id: 0,
                // Deprecated Level urlId
                deliveryDirectives: hlsUrlParameters || null
              });
            }
          };
          _proto.removeLevel = function removeLevel(levelIndex) {
            var _this3 = this, _this$currentLevel;
            var levels = this._levels.filter(function(level, index) {
              if (index !== levelIndex) {
                return true;
              }
              if (_this3.steering) {
                _this3.steering.removeLevel(level);
              }
              if (level === _this3.currentLevel) {
                _this3.currentLevel = null;
                _this3.currentLevelIndex = -1;
                if (level.details) {
                  level.details.fragments.forEach(function(f) {
                    return f.level = -1;
                  });
                }
              }
              return false;
            });
            reassignFragmentLevelIndexes(levels);
            this._levels = levels;
            if (this.currentLevelIndex > -1 && (_this$currentLevel = this.currentLevel) != null && _this$currentLevel.details) {
              this.currentLevelIndex = this.currentLevel.details.fragments[0].level;
            }
            this.hls.trigger(Events.LEVELS_UPDATED, {
              levels
            });
          };
          _proto.onLevelsUpdated = function onLevelsUpdated(event, _ref3) {
            var levels = _ref3.levels;
            this._levels = levels;
          };
          _proto.checkMaxAutoUpdated = function checkMaxAutoUpdated() {
            var _this$hls = this.hls, autoLevelCapping = _this$hls.autoLevelCapping, maxAutoLevel = _this$hls.maxAutoLevel, maxHdcpLevel = _this$hls.maxHdcpLevel;
            if (this._maxAutoLevel !== maxAutoLevel) {
              this._maxAutoLevel = maxAutoLevel;
              this.hls.trigger(Events.MAX_AUTO_LEVEL_UPDATED, {
                autoLevelCapping,
                levels: this.levels,
                maxAutoLevel,
                minAutoLevel: this.hls.minAutoLevel,
                maxHdcpLevel
              });
            }
          };
          _createClass2(LevelController2, [{
            key: "levels",
            get: function get() {
              if (this._levels.length === 0) {
                return null;
              }
              return this._levels;
            }
          }, {
            key: "level",
            get: function get() {
              return this.currentLevelIndex;
            },
            set: function set(newLevel) {
              var levels = this._levels;
              if (levels.length === 0) {
                return;
              }
              if (newLevel < 0 || newLevel >= levels.length) {
                var error = new Error("invalid level idx");
                var fatal = newLevel < 0;
                this.hls.trigger(Events.ERROR, {
                  type: ErrorTypes.OTHER_ERROR,
                  details: ErrorDetails.LEVEL_SWITCH_ERROR,
                  level: newLevel,
                  fatal,
                  error,
                  reason: error.message
                });
                if (fatal) {
                  return;
                }
                newLevel = Math.min(newLevel, levels.length - 1);
              }
              var lastLevelIndex = this.currentLevelIndex;
              var lastLevel = this.currentLevel;
              var lastPathwayId = lastLevel ? lastLevel.attrs["PATHWAY-ID"] : void 0;
              var level = levels[newLevel];
              var pathwayId = level.attrs["PATHWAY-ID"];
              this.currentLevelIndex = newLevel;
              this.currentLevel = level;
              if (lastLevelIndex === newLevel && level.details && lastLevel && lastPathwayId === pathwayId) {
                return;
              }
              this.log("Switching to level " + newLevel + " (" + (level.height ? level.height + "p " : "") + (level.videoRange ? level.videoRange + " " : "") + (level.codecSet ? level.codecSet + " " : "") + "@" + level.bitrate + ")" + (pathwayId ? " with Pathway " + pathwayId : "") + " from level " + lastLevelIndex + (lastPathwayId ? " with Pathway " + lastPathwayId : ""));
              var levelSwitchingData = {
                level: newLevel,
                attrs: level.attrs,
                details: level.details,
                bitrate: level.bitrate,
                averageBitrate: level.averageBitrate,
                maxBitrate: level.maxBitrate,
                realBitrate: level.realBitrate,
                width: level.width,
                height: level.height,
                codecSet: level.codecSet,
                audioCodec: level.audioCodec,
                videoCodec: level.videoCodec,
                audioGroups: level.audioGroups,
                subtitleGroups: level.subtitleGroups,
                loaded: level.loaded,
                loadError: level.loadError,
                fragmentError: level.fragmentError,
                name: level.name,
                id: level.id,
                uri: level.uri,
                url: level.url,
                urlId: 0,
                audioGroupIds: level.audioGroupIds,
                textGroupIds: level.textGroupIds
              };
              this.hls.trigger(Events.LEVEL_SWITCHING, levelSwitchingData);
              var levelDetails = level.details;
              if (!levelDetails || levelDetails.live) {
                var hlsUrlParameters = this.switchParams(level.uri, lastLevel == null ? void 0 : lastLevel.details, levelDetails);
                this.loadPlaylist(hlsUrlParameters);
              }
            }
          }, {
            key: "manualLevel",
            get: function get() {
              return this.manualLevelIndex;
            },
            set: function set(newLevel) {
              this.manualLevelIndex = newLevel;
              if (this._startLevel === void 0) {
                this._startLevel = newLevel;
              }
              if (newLevel !== -1) {
                this.level = newLevel;
              }
            }
          }, {
            key: "firstLevel",
            get: function get() {
              return this._firstLevel;
            },
            set: function set(newLevel) {
              this._firstLevel = newLevel;
            }
          }, {
            key: "startLevel",
            get: function get() {
              if (this._startLevel === void 0) {
                var configStartLevel = this.hls.config.startLevel;
                if (configStartLevel !== void 0) {
                  return configStartLevel;
                }
                return this.hls.firstAutoLevel;
              }
              return this._startLevel;
            },
            set: function set(newLevel) {
              this._startLevel = newLevel;
            }
          }, {
            key: "nextLoadLevel",
            get: function get() {
              if (this.manualLevelIndex !== -1) {
                return this.manualLevelIndex;
              } else {
                return this.hls.nextAutoLevel;
              }
            },
            set: function set(nextLevel) {
              this.level = nextLevel;
              if (this.manualLevelIndex === -1) {
                this.hls.nextAutoLevel = nextLevel;
              }
            }
          }]);
          return LevelController2;
        }(BasePlaylistController);
        function assignTrackIdsByGroup(tracks) {
          var groups = {};
          tracks.forEach(function(track) {
            var groupId = track.groupId || "";
            track.id = groups[groupId] = groups[groupId] || 0;
            groups[groupId]++;
          });
        }
        var FragmentState = {
          NOT_LOADED: "NOT_LOADED",
          APPENDING: "APPENDING",
          PARTIAL: "PARTIAL",
          OK: "OK"
        };
        var FragmentTracker = function() {
          function FragmentTracker2(hls) {
            this.activePartLists = /* @__PURE__ */ Object.create(null);
            this.endListFragments = /* @__PURE__ */ Object.create(null);
            this.fragments = /* @__PURE__ */ Object.create(null);
            this.timeRanges = /* @__PURE__ */ Object.create(null);
            this.bufferPadding = 0.2;
            this.hls = void 0;
            this.hasGaps = false;
            this.hls = hls;
            this._registerListeners();
          }
          var _proto = FragmentTracker2.prototype;
          _proto._registerListeners = function _registerListeners() {
            var hls = this.hls;
            hls.on(Events.BUFFER_APPENDED, this.onBufferAppended, this);
            hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);
            hls.on(Events.FRAG_LOADED, this.onFragLoaded, this);
          };
          _proto._unregisterListeners = function _unregisterListeners() {
            var hls = this.hls;
            hls.off(Events.BUFFER_APPENDED, this.onBufferAppended, this);
            hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);
            hls.off(Events.FRAG_LOADED, this.onFragLoaded, this);
          };
          _proto.destroy = function destroy() {
            this._unregisterListeners();
            this.fragments = // @ts-ignore
            this.activePartLists = // @ts-ignore
            this.endListFragments = this.timeRanges = null;
          };
          _proto.getAppendedFrag = function getAppendedFrag(position, levelType) {
            var activeParts = this.activePartLists[levelType];
            if (activeParts) {
              for (var i = activeParts.length; i--; ) {
                var activePart = activeParts[i];
                if (!activePart) {
                  break;
                }
                var appendedPTS = activePart.end;
                if (activePart.start <= position && appendedPTS !== null && position <= appendedPTS) {
                  return activePart;
                }
              }
            }
            return this.getBufferedFrag(position, levelType);
          };
          _proto.getBufferedFrag = function getBufferedFrag(position, levelType) {
            var fragments = this.fragments;
            var keys = Object.keys(fragments);
            for (var i = keys.length; i--; ) {
              var fragmentEntity = fragments[keys[i]];
              if ((fragmentEntity == null ? void 0 : fragmentEntity.body.type) === levelType && fragmentEntity.buffered) {
                var frag = fragmentEntity.body;
                if (frag.start <= position && position <= frag.end) {
                  return frag;
                }
              }
            }
            return null;
          };
          _proto.detectEvictedFragments = function detectEvictedFragments(elementaryStream, timeRange, playlistType, appendedPart) {
            var _this = this;
            if (this.timeRanges) {
              this.timeRanges[elementaryStream] = timeRange;
            }
            var appendedPartSn = (appendedPart == null ? void 0 : appendedPart.fragment.sn) || -1;
            Object.keys(this.fragments).forEach(function(key) {
              var fragmentEntity = _this.fragments[key];
              if (!fragmentEntity) {
                return;
              }
              if (appendedPartSn >= fragmentEntity.body.sn) {
                return;
              }
              if (!fragmentEntity.buffered && !fragmentEntity.loaded) {
                if (fragmentEntity.body.type === playlistType) {
                  _this.removeFragment(fragmentEntity.body);
                }
                return;
              }
              var esData = fragmentEntity.range[elementaryStream];
              if (!esData) {
                return;
              }
              esData.time.some(function(time) {
                var isNotBuffered = !_this.isTimeBuffered(time.startPTS, time.endPTS, timeRange);
                if (isNotBuffered) {
                  _this.removeFragment(fragmentEntity.body);
                }
                return isNotBuffered;
              });
            });
          };
          _proto.detectPartialFragments = function detectPartialFragments(data) {
            var _this2 = this;
            var timeRanges = this.timeRanges;
            var frag = data.frag, part = data.part;
            if (!timeRanges || frag.sn === "initSegment") {
              return;
            }
            var fragKey = getFragmentKey(frag);
            var fragmentEntity = this.fragments[fragKey];
            if (!fragmentEntity || fragmentEntity.buffered && frag.gap) {
              return;
            }
            var isFragHint = !frag.relurl;
            Object.keys(timeRanges).forEach(function(elementaryStream) {
              var streamInfo = frag.elementaryStreams[elementaryStream];
              if (!streamInfo) {
                return;
              }
              var timeRange = timeRanges[elementaryStream];
              var partial = isFragHint || streamInfo.partial === true;
              fragmentEntity.range[elementaryStream] = _this2.getBufferedTimes(frag, part, partial, timeRange);
            });
            fragmentEntity.loaded = null;
            if (Object.keys(fragmentEntity.range).length) {
              fragmentEntity.buffered = true;
              var endList = fragmentEntity.body.endList = frag.endList || fragmentEntity.body.endList;
              if (endList) {
                this.endListFragments[fragmentEntity.body.type] = fragmentEntity;
              }
              if (!isPartial(fragmentEntity)) {
                this.removeParts(frag.sn - 1, frag.type);
              }
            } else {
              this.removeFragment(fragmentEntity.body);
            }
          };
          _proto.removeParts = function removeParts(snToKeep, levelType) {
            var activeParts = this.activePartLists[levelType];
            if (!activeParts) {
              return;
            }
            this.activePartLists[levelType] = activeParts.filter(function(part) {
              return part.fragment.sn >= snToKeep;
            });
          };
          _proto.fragBuffered = function fragBuffered(frag, force) {
            var fragKey = getFragmentKey(frag);
            var fragmentEntity = this.fragments[fragKey];
            if (!fragmentEntity && force) {
              fragmentEntity = this.fragments[fragKey] = {
                body: frag,
                appendedPTS: null,
                loaded: null,
                buffered: false,
                range: /* @__PURE__ */ Object.create(null)
              };
              if (frag.gap) {
                this.hasGaps = true;
              }
            }
            if (fragmentEntity) {
              fragmentEntity.loaded = null;
              fragmentEntity.buffered = true;
            }
          };
          _proto.getBufferedTimes = function getBufferedTimes(fragment, part, partial, timeRange) {
            var buffered = {
              time: [],
              partial
            };
            var startPTS = fragment.start;
            var endPTS = fragment.end;
            var minEndPTS = fragment.minEndPTS || endPTS;
            var maxStartPTS = fragment.maxStartPTS || startPTS;
            for (var i = 0; i < timeRange.length; i++) {
              var startTime = timeRange.start(i) - this.bufferPadding;
              var endTime = timeRange.end(i) + this.bufferPadding;
              if (maxStartPTS >= startTime && minEndPTS <= endTime) {
                buffered.time.push({
                  startPTS: Math.max(startPTS, timeRange.start(i)),
                  endPTS: Math.min(endPTS, timeRange.end(i))
                });
                break;
              } else if (startPTS < endTime && endPTS > startTime) {
                var start = Math.max(startPTS, timeRange.start(i));
                var end = Math.min(endPTS, timeRange.end(i));
                if (end > start) {
                  buffered.partial = true;
                  buffered.time.push({
                    startPTS: start,
                    endPTS: end
                  });
                }
              } else if (endPTS <= startTime) {
                break;
              }
            }
            return buffered;
          };
          _proto.getPartialFragment = function getPartialFragment(time) {
            var bestFragment = null;
            var timePadding;
            var startTime;
            var endTime;
            var bestOverlap = 0;
            var bufferPadding = this.bufferPadding, fragments = this.fragments;
            Object.keys(fragments).forEach(function(key) {
              var fragmentEntity = fragments[key];
              if (!fragmentEntity) {
                return;
              }
              if (isPartial(fragmentEntity)) {
                startTime = fragmentEntity.body.start - bufferPadding;
                endTime = fragmentEntity.body.end + bufferPadding;
                if (time >= startTime && time <= endTime) {
                  timePadding = Math.min(time - startTime, endTime - time);
                  if (bestOverlap <= timePadding) {
                    bestFragment = fragmentEntity.body;
                    bestOverlap = timePadding;
                  }
                }
              }
            });
            return bestFragment;
          };
          _proto.isEndListAppended = function isEndListAppended(type) {
            var lastFragmentEntity = this.endListFragments[type];
            return lastFragmentEntity !== void 0 && (lastFragmentEntity.buffered || isPartial(lastFragmentEntity));
          };
          _proto.getState = function getState(fragment) {
            var fragKey = getFragmentKey(fragment);
            var fragmentEntity = this.fragments[fragKey];
            if (fragmentEntity) {
              if (!fragmentEntity.buffered) {
                return FragmentState.APPENDING;
              } else if (isPartial(fragmentEntity)) {
                return FragmentState.PARTIAL;
              } else {
                return FragmentState.OK;
              }
            }
            return FragmentState.NOT_LOADED;
          };
          _proto.isTimeBuffered = function isTimeBuffered(startPTS, endPTS, timeRange) {
            var startTime;
            var endTime;
            for (var i = 0; i < timeRange.length; i++) {
              startTime = timeRange.start(i) - this.bufferPadding;
              endTime = timeRange.end(i) + this.bufferPadding;
              if (startPTS >= startTime && endPTS <= endTime) {
                return true;
              }
              if (endPTS <= startTime) {
                return false;
              }
            }
            return false;
          };
          _proto.onFragLoaded = function onFragLoaded(event, data) {
            var frag = data.frag, part = data.part;
            if (frag.sn === "initSegment" || frag.bitrateTest) {
              return;
            }
            var loaded = part ? null : data;
            var fragKey = getFragmentKey(frag);
            this.fragments[fragKey] = {
              body: frag,
              appendedPTS: null,
              loaded,
              buffered: false,
              range: /* @__PURE__ */ Object.create(null)
            };
          };
          _proto.onBufferAppended = function onBufferAppended(event, data) {
            var _this3 = this;
            var frag = data.frag, part = data.part, timeRanges = data.timeRanges;
            if (frag.sn === "initSegment") {
              return;
            }
            var playlistType = frag.type;
            if (part) {
              var activeParts = this.activePartLists[playlistType];
              if (!activeParts) {
                this.activePartLists[playlistType] = activeParts = [];
              }
              activeParts.push(part);
            }
            this.timeRanges = timeRanges;
            Object.keys(timeRanges).forEach(function(elementaryStream) {
              var timeRange = timeRanges[elementaryStream];
              _this3.detectEvictedFragments(elementaryStream, timeRange, playlistType, part);
            });
          };
          _proto.onFragBuffered = function onFragBuffered(event, data) {
            this.detectPartialFragments(data);
          };
          _proto.hasFragment = function hasFragment(fragment) {
            var fragKey = getFragmentKey(fragment);
            return !!this.fragments[fragKey];
          };
          _proto.hasParts = function hasParts(type) {
            var _this$activePartLists;
            return !!((_this$activePartLists = this.activePartLists[type]) != null && _this$activePartLists.length);
          };
          _proto.removeFragmentsInRange = function removeFragmentsInRange(start, end, playlistType, withGapOnly, unbufferedOnly) {
            var _this4 = this;
            if (withGapOnly && !this.hasGaps) {
              return;
            }
            Object.keys(this.fragments).forEach(function(key) {
              var fragmentEntity = _this4.fragments[key];
              if (!fragmentEntity) {
                return;
              }
              var frag = fragmentEntity.body;
              if (frag.type !== playlistType || withGapOnly && !frag.gap) {
                return;
              }
              if (frag.start < end && frag.end > start && (fragmentEntity.buffered || unbufferedOnly)) {
                _this4.removeFragment(frag);
              }
            });
          };
          _proto.removeFragment = function removeFragment(fragment) {
            var fragKey = getFragmentKey(fragment);
            fragment.stats.loaded = 0;
            fragment.clearElementaryStreamInfo();
            var activeParts = this.activePartLists[fragment.type];
            if (activeParts) {
              var snToRemove = fragment.sn;
              this.activePartLists[fragment.type] = activeParts.filter(function(part) {
                return part.fragment.sn !== snToRemove;
              });
            }
            delete this.fragments[fragKey];
            if (fragment.endList) {
              delete this.endListFragments[fragment.type];
            }
          };
          _proto.removeAllFragments = function removeAllFragments() {
            this.fragments = /* @__PURE__ */ Object.create(null);
            this.endListFragments = /* @__PURE__ */ Object.create(null);
            this.activePartLists = /* @__PURE__ */ Object.create(null);
            this.hasGaps = false;
          };
          return FragmentTracker2;
        }();
        function isPartial(fragmentEntity) {
          var _fragmentEntity$range, _fragmentEntity$range2, _fragmentEntity$range3;
          return fragmentEntity.buffered && (fragmentEntity.body.gap || ((_fragmentEntity$range = fragmentEntity.range.video) == null ? void 0 : _fragmentEntity$range.partial) || ((_fragmentEntity$range2 = fragmentEntity.range.audio) == null ? void 0 : _fragmentEntity$range2.partial) || ((_fragmentEntity$range3 = fragmentEntity.range.audiovideo) == null ? void 0 : _fragmentEntity$range3.partial));
        }
        function getFragmentKey(fragment) {
          return fragment.type + "_" + fragment.level + "_" + fragment.sn;
        }
        var MIN_CHUNK_SIZE = Math.pow(2, 17);
        var FragmentLoader = function() {
          function FragmentLoader2(config) {
            this.config = void 0;
            this.loader = null;
            this.partLoadTimeout = -1;
            this.config = config;
          }
          var _proto = FragmentLoader2.prototype;
          _proto.destroy = function destroy() {
            if (this.loader) {
              this.loader.destroy();
              this.loader = null;
            }
          };
          _proto.abort = function abort() {
            if (this.loader) {
              this.loader.abort();
            }
          };
          _proto.load = function load(frag, _onProgress) {
            var _this = this;
            var url = frag.url;
            if (!url) {
              return Promise.reject(new LoadError({
                type: ErrorTypes.NETWORK_ERROR,
                details: ErrorDetails.FRAG_LOAD_ERROR,
                fatal: false,
                frag,
                error: new Error("Fragment does not have a " + (url ? "part list" : "url")),
                networkDetails: null
              }));
            }
            this.abort();
            var config = this.config;
            var FragmentILoader = config.fLoader;
            var DefaultILoader = config.loader;
            return new Promise(function(resolve, reject) {
              if (_this.loader) {
                _this.loader.destroy();
              }
              if (frag.gap) {
                if (frag.tagList.some(function(tags) {
                  return tags[0] === "GAP";
                })) {
                  reject(createGapLoadError(frag));
                  return;
                } else {
                  frag.gap = false;
                }
              }
              var loader = _this.loader = frag.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);
              var loaderContext = createLoaderContext(frag);
              var loadPolicy = getLoaderConfigWithoutReties(config.fragLoadPolicy.default);
              var loaderConfig = {
                loadPolicy,
                timeout: loadPolicy.maxLoadTimeMs,
                maxRetry: 0,
                retryDelay: 0,
                maxRetryDelay: 0,
                highWaterMark: frag.sn === "initSegment" ? Infinity : MIN_CHUNK_SIZE
              };
              frag.stats = loader.stats;
              loader.load(loaderContext, loaderConfig, {
                onSuccess: function onSuccess(response, stats, context, networkDetails) {
                  _this.resetLoader(frag, loader);
                  var payload = response.data;
                  if (context.resetIV && frag.decryptdata) {
                    frag.decryptdata.iv = new Uint8Array(payload.slice(0, 16));
                    payload = payload.slice(16);
                  }
                  resolve({
                    frag,
                    part: null,
                    payload,
                    networkDetails
                  });
                },
                onError: function onError(response, context, networkDetails, stats) {
                  _this.resetLoader(frag, loader);
                  reject(new LoadError({
                    type: ErrorTypes.NETWORK_ERROR,
                    details: ErrorDetails.FRAG_LOAD_ERROR,
                    fatal: false,
                    frag,
                    response: _objectSpread2({
                      url,
                      data: void 0
                    }, response),
                    error: new Error("HTTP Error " + response.code + " " + response.text),
                    networkDetails,
                    stats
                  }));
                },
                onAbort: function onAbort(stats, context, networkDetails) {
                  _this.resetLoader(frag, loader);
                  reject(new LoadError({
                    type: ErrorTypes.NETWORK_ERROR,
                    details: ErrorDetails.INTERNAL_ABORTED,
                    fatal: false,
                    frag,
                    error: new Error("Aborted"),
                    networkDetails,
                    stats
                  }));
                },
                onTimeout: function onTimeout(stats, context, networkDetails) {
                  _this.resetLoader(frag, loader);
                  reject(new LoadError({
                    type: ErrorTypes.NETWORK_ERROR,
                    details: ErrorDetails.FRAG_LOAD_TIMEOUT,
                    fatal: false,
                    frag,
                    error: new Error("Timeout after " + loaderConfig.timeout + "ms"),
                    networkDetails,
                    stats
                  }));
                },
                onProgress: function onProgress(stats, context, data, networkDetails) {
                  if (_onProgress) {
                    _onProgress({
                      frag,
                      part: null,
                      payload: data,
                      networkDetails
                    });
                  }
                }
              });
            });
          };
          _proto.loadPart = function loadPart(frag, part, onProgress) {
            var _this2 = this;
            this.abort();
            var config = this.config;
            var FragmentILoader = config.fLoader;
            var DefaultILoader = config.loader;
            return new Promise(function(resolve, reject) {
              if (_this2.loader) {
                _this2.loader.destroy();
              }
              if (frag.gap || part.gap) {
                reject(createGapLoadError(frag, part));
                return;
              }
              var loader = _this2.loader = frag.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);
              var loaderContext = createLoaderContext(frag, part);
              var loadPolicy = getLoaderConfigWithoutReties(config.fragLoadPolicy.default);
              var loaderConfig = {
                loadPolicy,
                timeout: loadPolicy.maxLoadTimeMs,
                maxRetry: 0,
                retryDelay: 0,
                maxRetryDelay: 0,
                highWaterMark: MIN_CHUNK_SIZE
              };
              part.stats = loader.stats;
              loader.load(loaderContext, loaderConfig, {
                onSuccess: function onSuccess(response, stats, context, networkDetails) {
                  _this2.resetLoader(frag, loader);
                  _this2.updateStatsFromPart(frag, part);
                  var partLoadedData = {
                    frag,
                    part,
                    payload: response.data,
                    networkDetails
                  };
                  onProgress(partLoadedData);
                  resolve(partLoadedData);
                },
                onError: function onError(response, context, networkDetails, stats) {
                  _this2.resetLoader(frag, loader);
                  reject(new LoadError({
                    type: ErrorTypes.NETWORK_ERROR,
                    details: ErrorDetails.FRAG_LOAD_ERROR,
                    fatal: false,
                    frag,
                    part,
                    response: _objectSpread2({
                      url: loaderContext.url,
                      data: void 0
                    }, response),
                    error: new Error("HTTP Error " + response.code + " " + response.text),
                    networkDetails,
                    stats
                  }));
                },
                onAbort: function onAbort(stats, context, networkDetails) {
                  frag.stats.aborted = part.stats.aborted;
                  _this2.resetLoader(frag, loader);
                  reject(new LoadError({
                    type: ErrorTypes.NETWORK_ERROR,
                    details: ErrorDetails.INTERNAL_ABORTED,
                    fatal: false,
                    frag,
                    part,
                    error: new Error("Aborted"),
                    networkDetails,
                    stats
                  }));
                },
                onTimeout: function onTimeout(stats, context, networkDetails) {
                  _this2.resetLoader(frag, loader);
                  reject(new LoadError({
                    type: ErrorTypes.NETWORK_ERROR,
                    details: ErrorDetails.FRAG_LOAD_TIMEOUT,
                    fatal: false,
                    frag,
                    part,
                    error: new Error("Timeout after " + loaderConfig.timeout + "ms"),
                    networkDetails,
                    stats
                  }));
                }
              });
            });
          };
          _proto.updateStatsFromPart = function updateStatsFromPart(frag, part) {
            var fragStats = frag.stats;
            var partStats = part.stats;
            var partTotal = partStats.total;
            fragStats.loaded += partStats.loaded;
            if (partTotal) {
              var estTotalParts = Math.round(frag.duration / part.duration);
              var estLoadedParts = Math.min(Math.round(fragStats.loaded / partTotal), estTotalParts);
              var estRemainingParts = estTotalParts - estLoadedParts;
              var estRemainingBytes = estRemainingParts * Math.round(fragStats.loaded / estLoadedParts);
              fragStats.total = fragStats.loaded + estRemainingBytes;
            } else {
              fragStats.total = Math.max(fragStats.loaded, fragStats.total);
            }
            var fragLoading = fragStats.loading;
            var partLoading = partStats.loading;
            if (fragLoading.start) {
              fragLoading.first += partLoading.first - partLoading.start;
            } else {
              fragLoading.start = partLoading.start;
              fragLoading.first = partLoading.first;
            }
            fragLoading.end = partLoading.end;
          };
          _proto.resetLoader = function resetLoader(frag, loader) {
            frag.loader = null;
            if (this.loader === loader) {
              self.clearTimeout(this.partLoadTimeout);
              this.loader = null;
            }
            loader.destroy();
          };
          return FragmentLoader2;
        }();
        function createLoaderContext(frag, part) {
          if (part === void 0) {
            part = null;
          }
          var segment = part || frag;
          var loaderContext = {
            frag,
            part,
            responseType: "arraybuffer",
            url: segment.url,
            headers: {},
            rangeStart: 0,
            rangeEnd: 0
          };
          var start = segment.byteRangeStartOffset;
          var end = segment.byteRangeEndOffset;
          if (isFiniteNumber(start) && isFiniteNumber(end)) {
            var _frag$decryptdata;
            var byteRangeStart = start;
            var byteRangeEnd = end;
            if (frag.sn === "initSegment" && ((_frag$decryptdata = frag.decryptdata) == null ? void 0 : _frag$decryptdata.method) === "AES-128") {
              var fragmentLen = end - start;
              if (fragmentLen % 16) {
                byteRangeEnd = end + (16 - fragmentLen % 16);
              }
              if (start !== 0) {
                loaderContext.resetIV = true;
                byteRangeStart = start - 16;
              }
            }
            loaderContext.rangeStart = byteRangeStart;
            loaderContext.rangeEnd = byteRangeEnd;
          }
          return loaderContext;
        }
        function createGapLoadError(frag, part) {
          var error = new Error("GAP " + (frag.gap ? "tag" : "attribute") + " found");
          var errorData = {
            type: ErrorTypes.MEDIA_ERROR,
            details: ErrorDetails.FRAG_GAP,
            fatal: false,
            frag,
            error,
            networkDetails: null
          };
          if (part) {
            errorData.part = part;
          }
          (part ? part : frag).stats.aborted = true;
          return new LoadError(errorData);
        }
        var LoadError = function(_Error) {
          _inheritsLoose(LoadError2, _Error);
          function LoadError2(data) {
            var _this3;
            _this3 = _Error.call(this, data.error.message) || this;
            _this3.data = void 0;
            _this3.data = data;
            return _this3;
          }
          return LoadError2;
        }(_wrapNativeSuper(Error));
        var KeyLoader = function() {
          function KeyLoader2(config) {
            this.config = void 0;
            this.keyUriToKeyInfo = {};
            this.emeController = null;
            this.config = config;
          }
          var _proto = KeyLoader2.prototype;
          _proto.abort = function abort(type) {
            for (var uri in this.keyUriToKeyInfo) {
              var loader = this.keyUriToKeyInfo[uri].loader;
              if (loader) {
                var _loader$context;
                if (type && type !== ((_loader$context = loader.context) == null ? void 0 : _loader$context.frag.type)) {
                  return;
                }
                loader.abort();
              }
            }
          };
          _proto.detach = function detach() {
            for (var uri in this.keyUriToKeyInfo) {
              var keyInfo = this.keyUriToKeyInfo[uri];
              if (keyInfo.mediaKeySessionContext || keyInfo.decryptdata.isCommonEncryption) {
                delete this.keyUriToKeyInfo[uri];
              }
            }
          };
          _proto.destroy = function destroy() {
            this.detach();
            for (var uri in this.keyUriToKeyInfo) {
              var loader = this.keyUriToKeyInfo[uri].loader;
              if (loader) {
                loader.destroy();
              }
            }
            this.keyUriToKeyInfo = {};
          };
          _proto.createKeyLoadError = function createKeyLoadError(frag, details, error, networkDetails, response) {
            if (details === void 0) {
              details = ErrorDetails.KEY_LOAD_ERROR;
            }
            return new LoadError({
              type: ErrorTypes.NETWORK_ERROR,
              details,
              fatal: false,
              frag,
              response,
              error,
              networkDetails
            });
          };
          _proto.loadClear = function loadClear(loadingFrag, encryptedFragments) {
            var _this = this;
            if (this.emeController && this.config.emeEnabled) {
              var sn = loadingFrag.sn, cc = loadingFrag.cc;
              var _loop = function _loop2() {
                var frag = encryptedFragments[i];
                if (cc <= frag.cc && (sn === "initSegment" || frag.sn === "initSegment" || sn < frag.sn)) {
                  _this.emeController.selectKeySystemFormat(frag).then(function(keySystemFormat) {
                    frag.setKeyFormat(keySystemFormat);
                  });
                  return 1;
                }
              };
              for (var i = 0; i < encryptedFragments.length; i++) {
                if (_loop()) break;
              }
            }
          };
          _proto.load = function load(frag) {
            var _this2 = this;
            if (!frag.decryptdata && frag.encrypted && this.emeController) {
              return this.emeController.selectKeySystemFormat(frag).then(function(keySystemFormat) {
                return _this2.loadInternal(frag, keySystemFormat);
              });
            }
            return this.loadInternal(frag);
          };
          _proto.loadInternal = function loadInternal(frag, keySystemFormat) {
            var _keyInfo, _keyInfo2;
            if (keySystemFormat) {
              frag.setKeyFormat(keySystemFormat);
            }
            var decryptdata = frag.decryptdata;
            if (!decryptdata) {
              var error = new Error(keySystemFormat ? "Expected frag.decryptdata to be defined after setting format " + keySystemFormat : "Missing decryption data on fragment in onKeyLoading");
              return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, error));
            }
            var uri = decryptdata.uri;
            if (!uri) {
              return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error('Invalid key URI: "' + uri + '"')));
            }
            var keyInfo = this.keyUriToKeyInfo[uri];
            if ((_keyInfo = keyInfo) != null && _keyInfo.decryptdata.key) {
              decryptdata.key = keyInfo.decryptdata.key;
              return Promise.resolve({
                frag,
                keyInfo
              });
            }
            if ((_keyInfo2 = keyInfo) != null && _keyInfo2.keyLoadPromise) {
              var _keyInfo$mediaKeySess;
              switch ((_keyInfo$mediaKeySess = keyInfo.mediaKeySessionContext) == null ? void 0 : _keyInfo$mediaKeySess.keyStatus) {
                case void 0:
                case "status-pending":
                case "usable":
                case "usable-in-future":
                  return keyInfo.keyLoadPromise.then(function(keyLoadedData) {
                    decryptdata.key = keyLoadedData.keyInfo.decryptdata.key;
                    return {
                      frag,
                      keyInfo
                    };
                  });
              }
            }
            keyInfo = this.keyUriToKeyInfo[uri] = {
              decryptdata,
              keyLoadPromise: null,
              loader: null,
              mediaKeySessionContext: null
            };
            switch (decryptdata.method) {
              case "ISO-23001-7":
              case "SAMPLE-AES":
              case "SAMPLE-AES-CENC":
              case "SAMPLE-AES-CTR":
                if (decryptdata.keyFormat === "identity") {
                  return this.loadKeyHTTP(keyInfo, frag);
                }
                return this.loadKeyEME(keyInfo, frag);
              case "AES-128":
                return this.loadKeyHTTP(keyInfo, frag);
              default:
                return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error('Key supplied with unsupported METHOD: "' + decryptdata.method + '"')));
            }
          };
          _proto.loadKeyEME = function loadKeyEME(keyInfo, frag) {
            var keyLoadedData = {
              frag,
              keyInfo
            };
            if (this.emeController && this.config.emeEnabled) {
              var keySessionContextPromise = this.emeController.loadKey(keyLoadedData);
              if (keySessionContextPromise) {
                return (keyInfo.keyLoadPromise = keySessionContextPromise.then(function(keySessionContext) {
                  keyInfo.mediaKeySessionContext = keySessionContext;
                  return keyLoadedData;
                })).catch(function(error) {
                  keyInfo.keyLoadPromise = null;
                  throw error;
                });
              }
            }
            return Promise.resolve(keyLoadedData);
          };
          _proto.loadKeyHTTP = function loadKeyHTTP(keyInfo, frag) {
            var _this3 = this;
            var config = this.config;
            var Loader = config.loader;
            var keyLoader = new Loader(config);
            frag.keyLoader = keyInfo.loader = keyLoader;
            return keyInfo.keyLoadPromise = new Promise(function(resolve, reject) {
              var loaderContext = {
                keyInfo,
                frag,
                responseType: "arraybuffer",
                url: keyInfo.decryptdata.uri
              };
              var loadPolicy = config.keyLoadPolicy.default;
              var loaderConfig = {
                loadPolicy,
                timeout: loadPolicy.maxLoadTimeMs,
                maxRetry: 0,
                retryDelay: 0,
                maxRetryDelay: 0
              };
              var loaderCallbacks = {
                onSuccess: function onSuccess(response, stats, context, networkDetails) {
                  var frag2 = context.frag, keyInfo2 = context.keyInfo, uri = context.url;
                  if (!frag2.decryptdata || keyInfo2 !== _this3.keyUriToKeyInfo[uri]) {
                    return reject(_this3.createKeyLoadError(frag2, ErrorDetails.KEY_LOAD_ERROR, new Error("after key load, decryptdata unset or changed"), networkDetails));
                  }
                  keyInfo2.decryptdata.key = frag2.decryptdata.key = new Uint8Array(response.data);
                  frag2.keyLoader = null;
                  keyInfo2.loader = null;
                  resolve({
                    frag: frag2,
                    keyInfo: keyInfo2
                  });
                },
                onError: function onError(response, context, networkDetails, stats) {
                  _this3.resetLoader(context);
                  reject(_this3.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error("HTTP Error " + response.code + " loading key " + response.text), networkDetails, _objectSpread2({
                    url: loaderContext.url,
                    data: void 0
                  }, response)));
                },
                onTimeout: function onTimeout(stats, context, networkDetails) {
                  _this3.resetLoader(context);
                  reject(_this3.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_TIMEOUT, new Error("key loading timed out"), networkDetails));
                },
                onAbort: function onAbort(stats, context, networkDetails) {
                  _this3.resetLoader(context);
                  reject(_this3.createKeyLoadError(frag, ErrorDetails.INTERNAL_ABORTED, new Error("key loading aborted"), networkDetails));
                }
              };
              keyLoader.load(loaderContext, loaderConfig, loaderCallbacks);
            });
          };
          _proto.resetLoader = function resetLoader(context) {
            var frag = context.frag, keyInfo = context.keyInfo, uri = context.url;
            var loader = keyInfo.loader;
            if (frag.keyLoader === loader) {
              frag.keyLoader = null;
              keyInfo.loader = null;
            }
            delete this.keyUriToKeyInfo[uri];
            if (loader) {
              loader.destroy();
            }
          };
          return KeyLoader2;
        }();
        var TaskLoop = function() {
          function TaskLoop2() {
            this._boundTick = void 0;
            this._tickTimer = null;
            this._tickInterval = null;
            this._tickCallCount = 0;
            this._boundTick = this.tick.bind(this);
          }
          var _proto = TaskLoop2.prototype;
          _proto.destroy = function destroy() {
            this.onHandlerDestroying();
            this.onHandlerDestroyed();
          };
          _proto.onHandlerDestroying = function onHandlerDestroying() {
            this.clearNextTick();
            this.clearInterval();
          };
          _proto.onHandlerDestroyed = function onHandlerDestroyed() {
          };
          _proto.hasInterval = function hasInterval() {
            return !!this._tickInterval;
          };
          _proto.hasNextTick = function hasNextTick() {
            return !!this._tickTimer;
          };
          _proto.setInterval = function setInterval2(millis) {
            if (!this._tickInterval) {
              this._tickCallCount = 0;
              this._tickInterval = self.setInterval(this._boundTick, millis);
              return true;
            }
            return false;
          };
          _proto.clearInterval = function clearInterval2() {
            if (this._tickInterval) {
              self.clearInterval(this._tickInterval);
              this._tickInterval = null;
              return true;
            }
            return false;
          };
          _proto.clearNextTick = function clearNextTick() {
            if (this._tickTimer) {
              self.clearTimeout(this._tickTimer);
              this._tickTimer = null;
              return true;
            }
            return false;
          };
          _proto.tick = function tick() {
            this._tickCallCount++;
            if (this._tickCallCount === 1) {
              this.doTick();
              if (this._tickCallCount > 1) {
                this.tickImmediate();
              }
              this._tickCallCount = 0;
            }
          };
          _proto.tickImmediate = function tickImmediate() {
            this.clearNextTick();
            this._tickTimer = self.setTimeout(this._boundTick, 0);
          };
          _proto.doTick = function doTick() {
          };
          return TaskLoop2;
        }();
        var ChunkMetadata = function ChunkMetadata2(level, sn, id, size, part, partial) {
          if (size === void 0) {
            size = 0;
          }
          if (part === void 0) {
            part = -1;
          }
          if (partial === void 0) {
            partial = false;
          }
          this.level = void 0;
          this.sn = void 0;
          this.part = void 0;
          this.id = void 0;
          this.size = void 0;
          this.partial = void 0;
          this.transmuxing = getNewPerformanceTiming();
          this.buffering = {
            audio: getNewPerformanceTiming(),
            video: getNewPerformanceTiming(),
            audiovideo: getNewPerformanceTiming()
          };
          this.level = level;
          this.sn = sn;
          this.id = id;
          this.size = size;
          this.part = part;
          this.partial = partial;
        };
        function getNewPerformanceTiming() {
          return {
            start: 0,
            executeStart: 0,
            executeEnd: 0,
            end: 0
          };
        }
        function findFirstFragWithCC(fragments, cc) {
          for (var i = 0, len = fragments.length; i < len; i++) {
            var _fragments$i;
            if (((_fragments$i = fragments[i]) == null ? void 0 : _fragments$i.cc) === cc) {
              return fragments[i];
            }
          }
          return null;
        }
        function shouldAlignOnDiscontinuities(lastFrag, switchDetails, details) {
          if (switchDetails) {
            if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) {
              return true;
            }
          }
          return false;
        }
        function findDiscontinuousReferenceFrag(prevDetails, curDetails) {
          var prevFrags = prevDetails.fragments;
          var curFrags = curDetails.fragments;
          if (!curFrags.length || !prevFrags.length) {
            logger.log("No fragments to align");
            return;
          }
          var prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);
          if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {
            logger.log("No frag in previous level to align on");
            return;
          }
          return prevStartFrag;
        }
        function adjustFragmentStart(frag, sliding) {
          if (frag) {
            var start = frag.start + sliding;
            frag.start = frag.startPTS = start;
            frag.endPTS = start + frag.duration;
          }
        }
        function adjustSlidingStart(sliding, details) {
          var fragments = details.fragments;
          for (var i = 0, len = fragments.length; i < len; i++) {
            adjustFragmentStart(fragments[i], sliding);
          }
          if (details.fragmentHint) {
            adjustFragmentStart(details.fragmentHint, sliding);
          }
          details.alignedSliding = true;
        }
        function alignStream(lastFrag, switchDetails, details) {
          if (!switchDetails) {
            return;
          }
          alignDiscontinuities(lastFrag, details, switchDetails);
          if (!details.alignedSliding && switchDetails) {
            alignMediaPlaylistByPDT(details, switchDetails);
          }
          if (!details.alignedSliding && switchDetails && !details.skippedSegments) {
            adjustSliding(switchDetails, details);
          }
        }
        function alignDiscontinuities(lastFrag, details, switchDetails) {
          if (shouldAlignOnDiscontinuities(lastFrag, switchDetails, details)) {
            var referenceFrag = findDiscontinuousReferenceFrag(switchDetails, details);
            if (referenceFrag && isFiniteNumber(referenceFrag.start)) {
              logger.log("Adjusting PTS using last level due to CC increase within current level " + details.url);
              adjustSlidingStart(referenceFrag.start, details);
            }
          }
        }
        function alignMediaPlaylistByPDT(details, refDetails) {
          if (!details.hasProgramDateTime || !refDetails.hasProgramDateTime) {
            return;
          }
          var fragments = details.fragments;
          var refFragments = refDetails.fragments;
          if (!fragments.length || !refFragments.length) {
            return;
          }
          var refFrag;
          var frag;
          var targetCC = Math.min(refDetails.endCC, details.endCC);
          if (refDetails.startCC < targetCC && details.startCC < targetCC) {
            refFrag = findFirstFragWithCC(refFragments, targetCC);
            frag = findFirstFragWithCC(fragments, targetCC);
          }
          if (!refFrag || !frag) {
            refFrag = refFragments[Math.floor(refFragments.length / 2)];
            frag = findFirstFragWithCC(fragments, refFrag.cc) || fragments[Math.floor(fragments.length / 2)];
          }
          var refPDT = refFrag.programDateTime;
          var targetPDT = frag.programDateTime;
          if (!refPDT || !targetPDT) {
            return;
          }
          var delta = (targetPDT - refPDT) / 1e3 - (frag.start - refFrag.start);
          adjustSlidingStart(delta, details);
        }
        var AESCrypto = function() {
          function AESCrypto2(subtle, iv) {
            this.subtle = void 0;
            this.aesIV = void 0;
            this.subtle = subtle;
            this.aesIV = iv;
          }
          var _proto = AESCrypto2.prototype;
          _proto.decrypt = function decrypt(data, key) {
            return this.subtle.decrypt({
              name: "AES-CBC",
              iv: this.aesIV
            }, key, data);
          };
          return AESCrypto2;
        }();
        var FastAESKey = function() {
          function FastAESKey2(subtle, key) {
            this.subtle = void 0;
            this.key = void 0;
            this.subtle = subtle;
            this.key = key;
          }
          var _proto = FastAESKey2.prototype;
          _proto.expandKey = function expandKey() {
            return this.subtle.importKey("raw", this.key, {
              name: "AES-CBC"
            }, false, ["encrypt", "decrypt"]);
          };
          return FastAESKey2;
        }();
        function removePadding(array) {
          var outputBytes = array.byteLength;
          var paddingBytes = outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);
          if (paddingBytes) {
            return sliceUint8(array, 0, outputBytes - paddingBytes);
          }
          return array;
        }
        var AESDecryptor = function() {
          function AESDecryptor2() {
            this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
            this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
            this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
            this.sBox = new Uint32Array(256);
            this.invSBox = new Uint32Array(256);
            this.key = new Uint32Array(0);
            this.ksRows = 0;
            this.keySize = 0;
            this.keySchedule = void 0;
            this.invKeySchedule = void 0;
            this.initTable();
          }
          var _proto = AESDecryptor2.prototype;
          _proto.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {
            var view = new DataView(arrayBuffer);
            var newArray = new Uint32Array(4);
            for (var i = 0; i < 4; i++) {
              newArray[i] = view.getUint32(i * 4);
            }
            return newArray;
          };
          _proto.initTable = function initTable() {
            var sBox = this.sBox;
            var invSBox = this.invSBox;
            var subMix = this.subMix;
            var subMix0 = subMix[0];
            var subMix1 = subMix[1];
            var subMix2 = subMix[2];
            var subMix3 = subMix[3];
            var invSubMix = this.invSubMix;
            var invSubMix0 = invSubMix[0];
            var invSubMix1 = invSubMix[1];
            var invSubMix2 = invSubMix[2];
            var invSubMix3 = invSubMix[3];
            var d = new Uint32Array(256);
            var x = 0;
            var xi = 0;
            var i = 0;
            for (i = 0; i < 256; i++) {
              if (i < 128) {
                d[i] = i << 1;
              } else {
                d[i] = i << 1 ^ 283;
              }
            }
            for (i = 0; i < 256; i++) {
              var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
              sx = sx >>> 8 ^ sx & 255 ^ 99;
              sBox[x] = sx;
              invSBox[sx] = x;
              var x2 = d[x];
              var x4 = d[x2];
              var x8 = d[x4];
              var t = d[sx] * 257 ^ sx * 16843008;
              subMix0[x] = t << 24 | t >>> 8;
              subMix1[x] = t << 16 | t >>> 16;
              subMix2[x] = t << 8 | t >>> 24;
              subMix3[x] = t;
              t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
              invSubMix0[sx] = t << 24 | t >>> 8;
              invSubMix1[sx] = t << 16 | t >>> 16;
              invSubMix2[sx] = t << 8 | t >>> 24;
              invSubMix3[sx] = t;
              if (!x) {
                x = xi = 1;
              } else {
                x = x2 ^ d[d[d[x8 ^ x2]]];
                xi ^= d[d[xi]];
              }
            }
          };
          _proto.expandKey = function expandKey(keyBuffer) {
            var key = this.uint8ArrayToUint32Array_(keyBuffer);
            var sameKey = true;
            var offset = 0;
            while (offset < key.length && sameKey) {
              sameKey = key[offset] === this.key[offset];
              offset++;
            }
            if (sameKey) {
              return;
            }
            this.key = key;
            var keySize = this.keySize = key.length;
            if (keySize !== 4 && keySize !== 6 && keySize !== 8) {
              throw new Error("Invalid aes key size=" + keySize);
            }
            var ksRows = this.ksRows = (keySize + 6 + 1) * 4;
            var ksRow;
            var invKsRow;
            var keySchedule = this.keySchedule = new Uint32Array(ksRows);
            var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);
            var sbox = this.sBox;
            var rcon = this.rcon;
            var invSubMix = this.invSubMix;
            var invSubMix0 = invSubMix[0];
            var invSubMix1 = invSubMix[1];
            var invSubMix2 = invSubMix[2];
            var invSubMix3 = invSubMix[3];
            var prev;
            var t;
            for (ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                prev = keySchedule[ksRow] = key[ksRow];
                continue;
              }
              t = prev;
              if (ksRow % keySize === 0) {
                t = t << 8 | t >>> 24;
                t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 255] << 16 | sbox[t >>> 8 & 255] << 8 | sbox[t & 255];
                t ^= rcon[ksRow / keySize | 0] << 24;
              } else if (keySize > 6 && ksRow % keySize === 4) {
                t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 255] << 16 | sbox[t >>> 8 & 255] << 8 | sbox[t & 255];
              }
              keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;
            }
            for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              ksRow = ksRows - invKsRow;
              if (invKsRow & 3) {
                t = keySchedule[ksRow];
              } else {
                t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 255]] ^ invSubMix2[sbox[t >>> 8 & 255]] ^ invSubMix3[sbox[t & 255]];
              }
              invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;
            }
          };
          _proto.networkToHostOrderSwap = function networkToHostOrderSwap(word) {
            return word << 24 | (word & 65280) << 8 | (word & 16711680) >> 8 | word >>> 24;
          };
          _proto.decrypt = function decrypt(inputArrayBuffer, offset, aesIV) {
            var nRounds = this.keySize + 6;
            var invKeySchedule = this.invKeySchedule;
            var invSBOX = this.invSBox;
            var invSubMix = this.invSubMix;
            var invSubMix0 = invSubMix[0];
            var invSubMix1 = invSubMix[1];
            var invSubMix2 = invSubMix[2];
            var invSubMix3 = invSubMix[3];
            var initVector = this.uint8ArrayToUint32Array_(aesIV);
            var initVector0 = initVector[0];
            var initVector1 = initVector[1];
            var initVector2 = initVector[2];
            var initVector3 = initVector[3];
            var inputInt32 = new Int32Array(inputArrayBuffer);
            var outputInt32 = new Int32Array(inputInt32.length);
            var t0, t1, t2, t3;
            var s0, s1, s2, s3;
            var inputWords0, inputWords1, inputWords2, inputWords3;
            var ksRow, i;
            var swapWord = this.networkToHostOrderSwap;
            while (offset < inputInt32.length) {
              inputWords0 = swapWord(inputInt32[offset]);
              inputWords1 = swapWord(inputInt32[offset + 1]);
              inputWords2 = swapWord(inputInt32[offset + 2]);
              inputWords3 = swapWord(inputInt32[offset + 3]);
              s0 = inputWords0 ^ invKeySchedule[0];
              s1 = inputWords3 ^ invKeySchedule[1];
              s2 = inputWords2 ^ invKeySchedule[2];
              s3 = inputWords1 ^ invKeySchedule[3];
              ksRow = 4;
              for (i = 1; i < nRounds; i++) {
                t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 255] ^ invSubMix2[s2 >> 8 & 255] ^ invSubMix3[s3 & 255] ^ invKeySchedule[ksRow];
                t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 255] ^ invSubMix2[s3 >> 8 & 255] ^ invSubMix3[s0 & 255] ^ invKeySchedule[ksRow + 1];
                t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 255] ^ invSubMix2[s0 >> 8 & 255] ^ invSubMix3[s1 & 255] ^ invKeySchedule[ksRow + 2];
                t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 255] ^ invSubMix2[s1 >> 8 & 255] ^ invSubMix3[s2 & 255] ^ invKeySchedule[ksRow + 3];
                s0 = t0;
                s1 = t1;
                s2 = t2;
                s3 = t3;
                ksRow = ksRow + 4;
              }
              t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 255] << 16 ^ invSBOX[s2 >> 8 & 255] << 8 ^ invSBOX[s3 & 255] ^ invKeySchedule[ksRow];
              t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 255] << 16 ^ invSBOX[s3 >> 8 & 255] << 8 ^ invSBOX[s0 & 255] ^ invKeySchedule[ksRow + 1];
              t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 255] << 16 ^ invSBOX[s0 >> 8 & 255] << 8 ^ invSBOX[s1 & 255] ^ invKeySchedule[ksRow + 2];
              t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 255] << 16 ^ invSBOX[s1 >> 8 & 255] << 8 ^ invSBOX[s2 & 255] ^ invKeySchedule[ksRow + 3];
              outputInt32[offset] = swapWord(t0 ^ initVector0);
              outputInt32[offset + 1] = swapWord(t3 ^ initVector1);
              outputInt32[offset + 2] = swapWord(t2 ^ initVector2);
              outputInt32[offset + 3] = swapWord(t1 ^ initVector3);
              initVector0 = inputWords0;
              initVector1 = inputWords1;
              initVector2 = inputWords2;
              initVector3 = inputWords3;
              offset = offset + 4;
            }
            return outputInt32.buffer;
          };
          return AESDecryptor2;
        }();
        var CHUNK_SIZE = 16;
        var Decrypter = function() {
          function Decrypter2(config, _temp) {
            var _ref = _temp === void 0 ? {} : _temp, _ref$removePKCS7Paddi = _ref.removePKCS7Padding, removePKCS7Padding = _ref$removePKCS7Paddi === void 0 ? true : _ref$removePKCS7Paddi;
            this.logEnabled = true;
            this.removePKCS7Padding = void 0;
            this.subtle = null;
            this.softwareDecrypter = null;
            this.key = null;
            this.fastAesKey = null;
            this.remainderData = null;
            this.currentIV = null;
            this.currentResult = null;
            this.useSoftware = void 0;
            this.useSoftware = config.enableSoftwareAES;
            this.removePKCS7Padding = removePKCS7Padding;
            if (removePKCS7Padding) {
              try {
                var browserCrypto = self.crypto;
                if (browserCrypto) {
                  this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;
                }
              } catch (e) {
              }
            }
            this.useSoftware = !this.subtle;
          }
          var _proto = Decrypter2.prototype;
          _proto.destroy = function destroy() {
            this.subtle = null;
            this.softwareDecrypter = null;
            this.key = null;
            this.fastAesKey = null;
            this.remainderData = null;
            this.currentIV = null;
            this.currentResult = null;
          };
          _proto.isSync = function isSync() {
            return this.useSoftware;
          };
          _proto.flush = function flush() {
            var currentResult = this.currentResult, remainderData = this.remainderData;
            if (!currentResult || remainderData) {
              this.reset();
              return null;
            }
            var data = new Uint8Array(currentResult);
            this.reset();
            if (this.removePKCS7Padding) {
              return removePadding(data);
            }
            return data;
          };
          _proto.reset = function reset() {
            this.currentResult = null;
            this.currentIV = null;
            this.remainderData = null;
            if (this.softwareDecrypter) {
              this.softwareDecrypter = null;
            }
          };
          _proto.decrypt = function decrypt(data, key, iv) {
            var _this = this;
            if (this.useSoftware) {
              return new Promise(function(resolve, reject) {
                _this.softwareDecrypt(new Uint8Array(data), key, iv);
                var decryptResult = _this.flush();
                if (decryptResult) {
                  resolve(decryptResult.buffer);
                } else {
                  reject(new Error("[softwareDecrypt] Failed to decrypt data"));
                }
              });
            }
            return this.webCryptoDecrypt(new Uint8Array(data), key, iv);
          };
          _proto.softwareDecrypt = function softwareDecrypt(data, key, iv) {
            var currentIV = this.currentIV, currentResult = this.currentResult, remainderData = this.remainderData;
            this.logOnce("JS AES decrypt");
            if (remainderData) {
              data = appendUint8Array(remainderData, data);
              this.remainderData = null;
            }
            var currentChunk = this.getValidChunk(data);
            if (!currentChunk.length) {
              return null;
            }
            if (currentIV) {
              iv = currentIV;
            }
            var softwareDecrypter = this.softwareDecrypter;
            if (!softwareDecrypter) {
              softwareDecrypter = this.softwareDecrypter = new AESDecryptor();
            }
            softwareDecrypter.expandKey(key);
            var result = currentResult;
            this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);
            this.currentIV = sliceUint8(currentChunk, -16).buffer;
            if (!result) {
              return null;
            }
            return result;
          };
          _proto.webCryptoDecrypt = function webCryptoDecrypt(data, key, iv) {
            var _this2 = this;
            if (this.key !== key || !this.fastAesKey) {
              if (!this.subtle) {
                return Promise.resolve(this.onWebCryptoError(data, key, iv));
              }
              this.key = key;
              this.fastAesKey = new FastAESKey(this.subtle, key);
            }
            return this.fastAesKey.expandKey().then(function(aesKey) {
              if (!_this2.subtle) {
                return Promise.reject(new Error("web crypto not initialized"));
              }
              _this2.logOnce("WebCrypto AES decrypt");
              var crypto = new AESCrypto(_this2.subtle, new Uint8Array(iv));
              return crypto.decrypt(data.buffer, aesKey);
            }).catch(function(err) {
              logger.warn("[decrypter]: WebCrypto Error, disable WebCrypto API, " + err.name + ": " + err.message);
              return _this2.onWebCryptoError(data, key, iv);
            });
          };
          _proto.onWebCryptoError = function onWebCryptoError(data, key, iv) {
            this.useSoftware = true;
            this.logEnabled = true;
            this.softwareDecrypt(data, key, iv);
            var decryptResult = this.flush();
            if (decryptResult) {
              return decryptResult.buffer;
            }
            throw new Error("WebCrypto and softwareDecrypt: failed to decrypt data");
          };
          _proto.getValidChunk = function getValidChunk(data) {
            var currentChunk = data;
            var splitPoint = data.length - data.length % CHUNK_SIZE;
            if (splitPoint !== data.length) {
              currentChunk = sliceUint8(data, 0, splitPoint);
              this.remainderData = sliceUint8(data, splitPoint);
            }
            return currentChunk;
          };
          _proto.logOnce = function logOnce(msg) {
            if (!this.logEnabled) {
              return;
            }
            logger.log("[decrypter]: " + msg);
            this.logEnabled = false;
          };
          return Decrypter2;
        }();
        var TimeRanges = {
          toString: function toString(r) {
            var log = "";
            var len = r.length;
            for (var i = 0; i < len; i++) {
              log += "[" + r.start(i).toFixed(3) + "-" + r.end(i).toFixed(3) + "]";
            }
            return log;
          }
        };
        var State = {
          STOPPED: "STOPPED",
          IDLE: "IDLE",
          KEY_LOADING: "KEY_LOADING",
          FRAG_LOADING: "FRAG_LOADING",
          FRAG_LOADING_WAITING_RETRY: "FRAG_LOADING_WAITING_RETRY",
          WAITING_TRACK: "WAITING_TRACK",
          PARSING: "PARSING",
          PARSED: "PARSED",
          ENDED: "ENDED",
          ERROR: "ERROR",
          WAITING_INIT_PTS: "WAITING_INIT_PTS",
          WAITING_LEVEL: "WAITING_LEVEL"
        };
        var BaseStreamController = function(_TaskLoop) {
          _inheritsLoose(BaseStreamController2, _TaskLoop);
          function BaseStreamController2(hls, fragmentTracker, keyLoader, logPrefix, playlistType) {
            var _this;
            _this = _TaskLoop.call(this) || this;
            _this.hls = void 0;
            _this.fragPrevious = null;
            _this.fragCurrent = null;
            _this.fragmentTracker = void 0;
            _this.transmuxer = null;
            _this._state = State.STOPPED;
            _this.playlistType = void 0;
            _this.media = null;
            _this.mediaBuffer = null;
            _this.config = void 0;
            _this.bitrateTest = false;
            _this.lastCurrentTime = 0;
            _this.nextLoadPosition = 0;
            _this.startPosition = 0;
            _this.startTimeOffset = null;
            _this.loadedmetadata = false;
            _this.retryDate = 0;
            _this.levels = null;
            _this.fragmentLoader = void 0;
            _this.keyLoader = void 0;
            _this.levelLastLoaded = null;
            _this.startFragRequested = false;
            _this.decrypter = void 0;
            _this.initPTS = [];
            _this.buffering = true;
            _this.onvseeking = null;
            _this.onvended = null;
            _this.logPrefix = "";
            _this.log = void 0;
            _this.warn = void 0;
            _this.playlistType = playlistType;
            _this.logPrefix = logPrefix;
            _this.log = logger.log.bind(logger, logPrefix + ":");
            _this.warn = logger.warn.bind(logger, logPrefix + ":");
            _this.hls = hls;
            _this.fragmentLoader = new FragmentLoader(hls.config);
            _this.keyLoader = keyLoader;
            _this.fragmentTracker = fragmentTracker;
            _this.config = hls.config;
            _this.decrypter = new Decrypter(hls.config);
            hls.on(Events.MANIFEST_LOADED, _this.onManifestLoaded, _assertThisInitialized2(_this));
            return _this;
          }
          var _proto = BaseStreamController2.prototype;
          _proto.doTick = function doTick() {
            this.onTickEnd();
          };
          _proto.onTickEnd = function onTickEnd() {
          };
          _proto.startLoad = function startLoad(startPosition) {
          };
          _proto.stopLoad = function stopLoad() {
            this.fragmentLoader.abort();
            this.keyLoader.abort(this.playlistType);
            var frag = this.fragCurrent;
            if (frag != null && frag.loader) {
              frag.abortRequests();
              this.fragmentTracker.removeFragment(frag);
            }
            this.resetTransmuxer();
            this.fragCurrent = null;
            this.fragPrevious = null;
            this.clearInterval();
            this.clearNextTick();
            this.state = State.STOPPED;
          };
          _proto.pauseBuffering = function pauseBuffering() {
            this.buffering = false;
          };
          _proto.resumeBuffering = function resumeBuffering() {
            this.buffering = true;
          };
          _proto._streamEnded = function _streamEnded(bufferInfo, levelDetails) {
            if (levelDetails.live || bufferInfo.nextStart || !bufferInfo.end || !this.media) {
              return false;
            }
            var partList = levelDetails.partList;
            if (partList != null && partList.length) {
              var lastPart = partList[partList.length - 1];
              var lastPartBuffered = BufferHelper.isBuffered(this.media, lastPart.start + lastPart.duration / 2);
              return lastPartBuffered;
            }
            var playlistType = levelDetails.fragments[levelDetails.fragments.length - 1].type;
            return this.fragmentTracker.isEndListAppended(playlistType);
          };
          _proto.getLevelDetails = function getLevelDetails() {
            if (this.levels && this.levelLastLoaded !== null) {
              var _this$levelLastLoaded;
              return (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details;
            }
          };
          _proto.onMediaAttached = function onMediaAttached(event, data) {
            var media = this.media = this.mediaBuffer = data.media;
            this.onvseeking = this.onMediaSeeking.bind(this);
            this.onvended = this.onMediaEnded.bind(this);
            media.addEventListener("seeking", this.onvseeking);
            media.addEventListener("ended", this.onvended);
            var config = this.config;
            if (this.levels && config.autoStartLoad && this.state === State.STOPPED) {
              this.startLoad(config.startPosition);
            }
          };
          _proto.onMediaDetaching = function onMediaDetaching() {
            var media = this.media;
            if (media != null && media.ended) {
              this.log("MSE detaching and video ended, reset startPosition");
              this.startPosition = this.lastCurrentTime = 0;
            }
            if (media && this.onvseeking && this.onvended) {
              media.removeEventListener("seeking", this.onvseeking);
              media.removeEventListener("ended", this.onvended);
              this.onvseeking = this.onvended = null;
            }
            if (this.keyLoader) {
              this.keyLoader.detach();
            }
            this.media = this.mediaBuffer = null;
            this.loadedmetadata = false;
            this.fragmentTracker.removeAllFragments();
            this.stopLoad();
          };
          _proto.onMediaSeeking = function onMediaSeeking() {
            var config = this.config, fragCurrent = this.fragCurrent, media = this.media, mediaBuffer = this.mediaBuffer, state = this.state;
            var currentTime = media ? media.currentTime : 0;
            var bufferInfo = BufferHelper.bufferInfo(mediaBuffer ? mediaBuffer : media, currentTime, config.maxBufferHole);
            this.log("media seeking to " + (isFiniteNumber(currentTime) ? currentTime.toFixed(3) : currentTime) + ", state: " + state);
            if (this.state === State.ENDED) {
              this.resetLoadingState();
            } else if (fragCurrent) {
              var tolerance = config.maxFragLookUpTolerance;
              var fragStartOffset = fragCurrent.start - tolerance;
              var fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;
              if (!bufferInfo.len || fragEndOffset < bufferInfo.start || fragStartOffset > bufferInfo.end) {
                var pastFragment = currentTime > fragEndOffset;
                if (currentTime < fragStartOffset || pastFragment) {
                  if (pastFragment && fragCurrent.loader) {
                    this.log("seeking outside of buffer while fragment load in progress, cancel fragment load");
                    fragCurrent.abortRequests();
                    this.resetLoadingState();
                  }
                  this.fragPrevious = null;
                }
              }
            }
            if (media) {
              this.fragmentTracker.removeFragmentsInRange(currentTime, Infinity, this.playlistType, true);
              this.lastCurrentTime = currentTime;
            }
            if (!this.loadedmetadata && !bufferInfo.len) {
              this.nextLoadPosition = this.startPosition = currentTime;
            }
            this.tickImmediate();
          };
          _proto.onMediaEnded = function onMediaEnded() {
            this.startPosition = this.lastCurrentTime = 0;
          };
          _proto.onManifestLoaded = function onManifestLoaded(event, data) {
            this.startTimeOffset = data.startTimeOffset;
            this.initPTS = [];
          };
          _proto.onHandlerDestroying = function onHandlerDestroying() {
            this.hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);
            this.stopLoad();
            _TaskLoop.prototype.onHandlerDestroying.call(this);
            this.hls = null;
          };
          _proto.onHandlerDestroyed = function onHandlerDestroyed() {
            this.state = State.STOPPED;
            if (this.fragmentLoader) {
              this.fragmentLoader.destroy();
            }
            if (this.keyLoader) {
              this.keyLoader.destroy();
            }
            if (this.decrypter) {
              this.decrypter.destroy();
            }
            this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null;
            _TaskLoop.prototype.onHandlerDestroyed.call(this);
          };
          _proto.loadFragment = function loadFragment(frag, level, targetBufferTime) {
            this._loadFragForPlayback(frag, level, targetBufferTime);
          };
          _proto._loadFragForPlayback = function _loadFragForPlayback(frag, level, targetBufferTime) {
            var _this2 = this;
            var progressCallback = function progressCallback2(data) {
              if (_this2.fragContextChanged(frag)) {
                _this2.warn("Fragment " + frag.sn + (data.part ? " p: " + data.part.index : "") + " of level " + frag.level + " was dropped during download.");
                _this2.fragmentTracker.removeFragment(frag);
                return;
              }
              frag.stats.chunkCount++;
              _this2._handleFragmentLoadProgress(data);
            };
            this._doFragLoad(frag, level, targetBufferTime, progressCallback).then(function(data) {
              if (!data) {
                return;
              }
              var state = _this2.state;
              if (_this2.fragContextChanged(frag)) {
                if (state === State.FRAG_LOADING || !_this2.fragCurrent && state === State.PARSING) {
                  _this2.fragmentTracker.removeFragment(frag);
                  _this2.state = State.IDLE;
                }
                return;
              }
              if ("payload" in data) {
                _this2.log("Loaded fragment " + frag.sn + " of level " + frag.level);
                _this2.hls.trigger(Events.FRAG_LOADED, data);
              }
              _this2._handleFragmentLoadComplete(data);
            }).catch(function(reason) {
              if (_this2.state === State.STOPPED || _this2.state === State.ERROR) {
                return;
              }
              _this2.warn("Frag error: " + ((reason == null ? void 0 : reason.message) || reason));
              _this2.resetFragmentLoading(frag);
            });
          };
          _proto.clearTrackerIfNeeded = function clearTrackerIfNeeded(frag) {
            var _this$mediaBuffer;
            var fragmentTracker = this.fragmentTracker;
            var fragState = fragmentTracker.getState(frag);
            if (fragState === FragmentState.APPENDING) {
              var playlistType = frag.type;
              var bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, playlistType);
              var minForwardBufferLength = Math.max(frag.duration, bufferedInfo ? bufferedInfo.len : this.config.maxBufferLength);
              var backtrackFragment = this.backtrackFragment;
              var backtracked = backtrackFragment ? frag.sn - backtrackFragment.sn : 0;
              if (backtracked === 1 || this.reduceMaxBufferLength(minForwardBufferLength, frag.duration)) {
                fragmentTracker.removeFragment(frag);
              }
            } else if (((_this$mediaBuffer = this.mediaBuffer) == null ? void 0 : _this$mediaBuffer.buffered.length) === 0) {
              fragmentTracker.removeAllFragments();
            } else if (fragmentTracker.hasParts(frag.type)) {
              fragmentTracker.detectPartialFragments({
                frag,
                part: null,
                stats: frag.stats,
                id: frag.type
              });
              if (fragmentTracker.getState(frag) === FragmentState.PARTIAL) {
                fragmentTracker.removeFragment(frag);
              }
            }
          };
          _proto.checkLiveUpdate = function checkLiveUpdate(details) {
            if (details.updated && !details.live) {
              var lastFragment = details.fragments[details.fragments.length - 1];
              this.fragmentTracker.detectPartialFragments({
                frag: lastFragment,
                part: null,
                stats: lastFragment.stats,
                id: lastFragment.type
              });
            }
            if (!details.fragments[0]) {
              details.deltaUpdateFailed = true;
            }
          };
          _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset, type) {
            if (type === void 0) {
              type = null;
            }
            if (!(startOffset - endOffset)) {
              return;
            }
            var flushScope = {
              startOffset,
              endOffset,
              type
            };
            this.hls.trigger(Events.BUFFER_FLUSHING, flushScope);
          };
          _proto._loadInitSegment = function _loadInitSegment(frag, level) {
            var _this3 = this;
            this._doFragLoad(frag, level).then(function(data) {
              if (!data || _this3.fragContextChanged(frag) || !_this3.levels) {
                throw new Error("init load aborted");
              }
              return data;
            }).then(function(data) {
              var hls = _this3.hls;
              var payload = data.payload;
              var decryptData = frag.decryptdata;
              if (payload && payload.byteLength > 0 && decryptData != null && decryptData.key && decryptData.iv && decryptData.method === "AES-128") {
                var startTime = self.performance.now();
                return _this3.decrypter.decrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).catch(function(err) {
                  hls.trigger(Events.ERROR, {
                    type: ErrorTypes.MEDIA_ERROR,
                    details: ErrorDetails.FRAG_DECRYPT_ERROR,
                    fatal: false,
                    error: err,
                    reason: err.message,
                    frag
                  });
                  throw err;
                }).then(function(decryptedData) {
                  var endTime = self.performance.now();
                  hls.trigger(Events.FRAG_DECRYPTED, {
                    frag,
                    payload: decryptedData,
                    stats: {
                      tstart: startTime,
                      tdecrypt: endTime
                    }
                  });
                  data.payload = decryptedData;
                  return _this3.completeInitSegmentLoad(data);
                });
              }
              return _this3.completeInitSegmentLoad(data);
            }).catch(function(reason) {
              if (_this3.state === State.STOPPED || _this3.state === State.ERROR) {
                return;
              }
              _this3.warn(reason);
              _this3.resetFragmentLoading(frag);
            });
          };
          _proto.completeInitSegmentLoad = function completeInitSegmentLoad(data) {
            var levels = this.levels;
            if (!levels) {
              throw new Error("init load aborted, missing levels");
            }
            var stats = data.frag.stats;
            this.state = State.IDLE;
            data.frag.data = new Uint8Array(data.payload);
            stats.parsing.start = stats.buffering.start = self.performance.now();
            stats.parsing.end = stats.buffering.end = self.performance.now();
            this.tick();
          };
          _proto.fragContextChanged = function fragContextChanged(frag) {
            var fragCurrent = this.fragCurrent;
            return !frag || !fragCurrent || frag.sn !== fragCurrent.sn || frag.level !== fragCurrent.level;
          };
          _proto.fragBufferedComplete = function fragBufferedComplete(frag, part) {
            var _frag$startPTS, _frag$endPTS, _this$fragCurrent, _this$fragPrevious;
            var media = this.mediaBuffer ? this.mediaBuffer : this.media;
            this.log("Buffered " + frag.type + " sn: " + frag.sn + (part ? " part: " + part.index : "") + " of " + (this.playlistType === PlaylistLevelType.MAIN ? "level" : "track") + " " + frag.level + " (frag:[" + ((_frag$startPTS = frag.startPTS) != null ? _frag$startPTS : NaN).toFixed(3) + "-" + ((_frag$endPTS = frag.endPTS) != null ? _frag$endPTS : NaN).toFixed(3) + "] > buffer:" + (media ? TimeRanges.toString(BufferHelper.getBuffered(media)) : "(detached)") + ")");
            if (frag.sn !== "initSegment") {
              var _this$levels;
              if (frag.type !== PlaylistLevelType.SUBTITLE) {
                var el = frag.elementaryStreams;
                if (!Object.keys(el).some(function(type) {
                  return !!el[type];
                })) {
                  this.state = State.IDLE;
                  return;
                }
              }
              var level = (_this$levels = this.levels) == null ? void 0 : _this$levels[frag.level];
              if (level != null && level.fragmentError) {
                this.log("Resetting level fragment error count of " + level.fragmentError + " on frag buffered");
                level.fragmentError = 0;
              }
            }
            this.state = State.IDLE;
            if (!media) {
              return;
            }
            if (!this.loadedmetadata && frag.type == PlaylistLevelType.MAIN && media.buffered.length && ((_this$fragCurrent = this.fragCurrent) == null ? void 0 : _this$fragCurrent.sn) === ((_this$fragPrevious = this.fragPrevious) == null ? void 0 : _this$fragPrevious.sn)) {
              this.loadedmetadata = true;
              this.seekToStartPos();
            }
            this.tick();
          };
          _proto.seekToStartPos = function seekToStartPos() {
          };
          _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedEndData) {
            var transmuxer = this.transmuxer;
            if (!transmuxer) {
              return;
            }
            var frag = fragLoadedEndData.frag, part = fragLoadedEndData.part, partsLoaded = fragLoadedEndData.partsLoaded;
            var complete = !partsLoaded || partsLoaded.length === 0 || partsLoaded.some(function(fragLoaded) {
              return !fragLoaded;
            });
            var chunkMeta = new ChunkMetadata(frag.level, frag.sn, frag.stats.chunkCount + 1, 0, part ? part.index : -1, !complete);
            transmuxer.flush(chunkMeta);
          };
          _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(frag) {
          };
          _proto._doFragLoad = function _doFragLoad(frag, level, targetBufferTime, progressCallback) {
            var _frag$decryptdata, _this4 = this;
            if (targetBufferTime === void 0) {
              targetBufferTime = null;
            }
            var details = level == null ? void 0 : level.details;
            if (!this.levels || !details) {
              throw new Error("frag load aborted, missing level" + (details ? "" : " detail") + "s");
            }
            var keyLoadingPromise = null;
            if (frag.encrypted && !((_frag$decryptdata = frag.decryptdata) != null && _frag$decryptdata.key)) {
              this.log("Loading key for " + frag.sn + " of [" + details.startSN + "-" + details.endSN + "], " + (this.logPrefix === "[stream-controller]" ? "level" : "track") + " " + frag.level);
              this.state = State.KEY_LOADING;
              this.fragCurrent = frag;
              keyLoadingPromise = this.keyLoader.load(frag).then(function(keyLoadedData) {
                if (!_this4.fragContextChanged(keyLoadedData.frag)) {
                  _this4.hls.trigger(Events.KEY_LOADED, keyLoadedData);
                  if (_this4.state === State.KEY_LOADING) {
                    _this4.state = State.IDLE;
                  }
                  return keyLoadedData;
                }
              });
              this.hls.trigger(Events.KEY_LOADING, {
                frag
              });
              if (this.fragCurrent === null) {
                keyLoadingPromise = Promise.reject(new Error("frag load aborted, context changed in KEY_LOADING"));
              }
            } else if (!frag.encrypted && details.encryptedFragments.length) {
              this.keyLoader.loadClear(frag, details.encryptedFragments);
            }
            targetBufferTime = Math.max(frag.start, targetBufferTime || 0);
            if (this.config.lowLatencyMode && frag.sn !== "initSegment") {
              var partList = details.partList;
              if (partList && progressCallback) {
                if (targetBufferTime > frag.end && details.fragmentHint) {
                  frag = details.fragmentHint;
                }
                var partIndex = this.getNextPart(partList, frag, targetBufferTime);
                if (partIndex > -1) {
                  var part = partList[partIndex];
                  this.log("Loading part sn: " + frag.sn + " p: " + part.index + " cc: " + frag.cc + " of playlist [" + details.startSN + "-" + details.endSN + "] parts [0-" + partIndex + "-" + (partList.length - 1) + "] " + (this.logPrefix === "[stream-controller]" ? "level" : "track") + ": " + frag.level + ", target: " + parseFloat(targetBufferTime.toFixed(3)));
                  this.nextLoadPosition = part.start + part.duration;
                  this.state = State.FRAG_LOADING;
                  var _result;
                  if (keyLoadingPromise) {
                    _result = keyLoadingPromise.then(function(keyLoadedData) {
                      if (!keyLoadedData || _this4.fragContextChanged(keyLoadedData.frag)) {
                        return null;
                      }
                      return _this4.doFragPartsLoad(frag, part, level, progressCallback);
                    }).catch(function(error) {
                      return _this4.handleFragLoadError(error);
                    });
                  } else {
                    _result = this.doFragPartsLoad(frag, part, level, progressCallback).catch(function(error) {
                      return _this4.handleFragLoadError(error);
                    });
                  }
                  this.hls.trigger(Events.FRAG_LOADING, {
                    frag,
                    part,
                    targetBufferTime
                  });
                  if (this.fragCurrent === null) {
                    return Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING parts"));
                  }
                  return _result;
                } else if (!frag.url || this.loadedEndOfParts(partList, targetBufferTime)) {
                  return Promise.resolve(null);
                }
              }
            }
            this.log("Loading fragment " + frag.sn + " cc: " + frag.cc + " " + (details ? "of [" + details.startSN + "-" + details.endSN + "] " : "") + (this.logPrefix === "[stream-controller]" ? "level" : "track") + ": " + frag.level + ", target: " + parseFloat(targetBufferTime.toFixed(3)));
            if (isFiniteNumber(frag.sn) && !this.bitrateTest) {
              this.nextLoadPosition = frag.start + frag.duration;
            }
            this.state = State.FRAG_LOADING;
            var dataOnProgress = this.config.progressive;
            var result;
            if (dataOnProgress && keyLoadingPromise) {
              result = keyLoadingPromise.then(function(keyLoadedData) {
                if (!keyLoadedData || _this4.fragContextChanged(keyLoadedData == null ? void 0 : keyLoadedData.frag)) {
                  return null;
                }
                return _this4.fragmentLoader.load(frag, progressCallback);
              }).catch(function(error) {
                return _this4.handleFragLoadError(error);
              });
            } else {
              result = Promise.all([this.fragmentLoader.load(frag, dataOnProgress ? progressCallback : void 0), keyLoadingPromise]).then(function(_ref) {
                var fragLoadedData = _ref[0];
                if (!dataOnProgress && fragLoadedData && progressCallback) {
                  progressCallback(fragLoadedData);
                }
                return fragLoadedData;
              }).catch(function(error) {
                return _this4.handleFragLoadError(error);
              });
            }
            this.hls.trigger(Events.FRAG_LOADING, {
              frag,
              targetBufferTime
            });
            if (this.fragCurrent === null) {
              return Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING"));
            }
            return result;
          };
          _proto.doFragPartsLoad = function doFragPartsLoad(frag, fromPart, level, progressCallback) {
            var _this5 = this;
            return new Promise(function(resolve, reject) {
              var _level$details;
              var partsLoaded = [];
              var initialPartList = (_level$details = level.details) == null ? void 0 : _level$details.partList;
              var loadPart = function loadPart2(part) {
                _this5.fragmentLoader.loadPart(frag, part, progressCallback).then(function(partLoadedData) {
                  partsLoaded[part.index] = partLoadedData;
                  var loadedPart = partLoadedData.part;
                  _this5.hls.trigger(Events.FRAG_LOADED, partLoadedData);
                  var nextPart = getPartWith(level, frag.sn, part.index + 1) || findPart(initialPartList, frag.sn, part.index + 1);
                  if (nextPart) {
                    loadPart2(nextPart);
                  } else {
                    return resolve({
                      frag,
                      part: loadedPart,
                      partsLoaded
                    });
                  }
                }).catch(reject);
              };
              loadPart(fromPart);
            });
          };
          _proto.handleFragLoadError = function handleFragLoadError(error) {
            if ("data" in error) {
              var data = error.data;
              if (error.data && data.details === ErrorDetails.INTERNAL_ABORTED) {
                this.handleFragLoadAborted(data.frag, data.part);
              } else {
                this.hls.trigger(Events.ERROR, data);
              }
            } else {
              this.hls.trigger(Events.ERROR, {
                type: ErrorTypes.OTHER_ERROR,
                details: ErrorDetails.INTERNAL_EXCEPTION,
                err: error,
                error,
                fatal: true
              });
            }
            return null;
          };
          _proto._handleTransmuxerFlush = function _handleTransmuxerFlush(chunkMeta) {
            var context = this.getCurrentContext(chunkMeta);
            if (!context || this.state !== State.PARSING) {
              if (!this.fragCurrent && this.state !== State.STOPPED && this.state !== State.ERROR) {
                this.state = State.IDLE;
              }
              return;
            }
            var frag = context.frag, part = context.part, level = context.level;
            var now2 = self.performance.now();
            frag.stats.parsing.end = now2;
            if (part) {
              part.stats.parsing.end = now2;
            }
            this.updateLevelTiming(frag, part, level, chunkMeta.partial);
          };
          _proto.getCurrentContext = function getCurrentContext(chunkMeta) {
            var levels = this.levels, fragCurrent = this.fragCurrent;
            var levelIndex = chunkMeta.level, sn = chunkMeta.sn, partIndex = chunkMeta.part;
            if (!(levels != null && levels[levelIndex])) {
              this.warn("Levels object was unset while buffering fragment " + sn + " of level " + levelIndex + ". The current chunk will not be buffered.");
              return null;
            }
            var level = levels[levelIndex];
            var part = partIndex > -1 ? getPartWith(level, sn, partIndex) : null;
            var frag = part ? part.fragment : getFragmentWithSN(level, sn, fragCurrent);
            if (!frag) {
              return null;
            }
            if (fragCurrent && fragCurrent !== frag) {
              frag.stats = fragCurrent.stats;
            }
            return {
              frag,
              part,
              level
            };
          };
          _proto.bufferFragmentData = function bufferFragmentData(data, frag, part, chunkMeta, noBacktracking) {
            var _buffer;
            if (!data || this.state !== State.PARSING) {
              return;
            }
            var data1 = data.data1, data2 = data.data2;
            var buffer = data1;
            if (data1 && data2) {
              buffer = appendUint8Array(data1, data2);
            }
            if (!((_buffer = buffer) != null && _buffer.length)) {
              return;
            }
            var segment = {
              type: data.type,
              frag,
              part,
              chunkMeta,
              parent: frag.type,
              data: buffer
            };
            this.hls.trigger(Events.BUFFER_APPENDING, segment);
            if (data.dropped && data.independent && !part) {
              if (noBacktracking) {
                return;
              }
              this.flushBufferGap(frag);
            }
          };
          _proto.flushBufferGap = function flushBufferGap(frag) {
            var media = this.media;
            if (!media) {
              return;
            }
            if (!BufferHelper.isBuffered(media, media.currentTime)) {
              this.flushMainBuffer(0, frag.start);
              return;
            }
            var currentTime = media.currentTime;
            var bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);
            var fragDuration = frag.duration;
            var segmentFraction = Math.min(this.config.maxFragLookUpTolerance * 2, fragDuration * 0.25);
            var start = Math.max(Math.min(frag.start - segmentFraction, bufferInfo.end - segmentFraction), currentTime + segmentFraction);
            if (frag.start - start > segmentFraction) {
              this.flushMainBuffer(start, frag.start);
            }
          };
          _proto.getFwdBufferInfo = function getFwdBufferInfo(bufferable, type) {
            var pos = this.getLoadPosition();
            if (!isFiniteNumber(pos)) {
              return null;
            }
            return this.getFwdBufferInfoAtPos(bufferable, pos, type);
          };
          _proto.getFwdBufferInfoAtPos = function getFwdBufferInfoAtPos(bufferable, pos, type) {
            var maxBufferHole = this.config.maxBufferHole;
            var bufferInfo = BufferHelper.bufferInfo(bufferable, pos, maxBufferHole);
            if (bufferInfo.len === 0 && bufferInfo.nextStart !== void 0) {
              var bufferedFragAtPos = this.fragmentTracker.getBufferedFrag(pos, type);
              if (bufferedFragAtPos && bufferInfo.nextStart < bufferedFragAtPos.end) {
                return BufferHelper.bufferInfo(bufferable, pos, Math.max(bufferInfo.nextStart, maxBufferHole));
              }
            }
            return bufferInfo;
          };
          _proto.getMaxBufferLength = function getMaxBufferLength(levelBitrate) {
            var config = this.config;
            var maxBufLen;
            if (levelBitrate) {
              maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);
            } else {
              maxBufLen = config.maxBufferLength;
            }
            return Math.min(maxBufLen, config.maxMaxBufferLength);
          };
          _proto.reduceMaxBufferLength = function reduceMaxBufferLength(threshold, fragDuration) {
            var config = this.config;
            var minLength = Math.max(Math.min(threshold - fragDuration, config.maxBufferLength), fragDuration);
            var reducedLength = Math.max(threshold - fragDuration * 3, config.maxMaxBufferLength / 2, minLength);
            if (reducedLength >= minLength) {
              config.maxMaxBufferLength = reducedLength;
              this.warn("Reduce max buffer length to " + reducedLength + "s");
              return true;
            }
            return false;
          };
          _proto.getAppendedFrag = function getAppendedFrag(position, playlistType) {
            var fragOrPart = this.fragmentTracker.getAppendedFrag(position, PlaylistLevelType.MAIN);
            if (fragOrPart && "fragment" in fragOrPart) {
              return fragOrPart.fragment;
            }
            return fragOrPart;
          };
          _proto.getNextFragment = function getNextFragment(pos, levelDetails) {
            var fragments = levelDetails.fragments;
            var fragLen = fragments.length;
            if (!fragLen) {
              return null;
            }
            var config = this.config;
            var start = fragments[0].start;
            var frag;
            if (levelDetails.live) {
              var initialLiveManifestSize = config.initialLiveManifestSize;
              if (fragLen < initialLiveManifestSize) {
                this.warn("Not enough fragments to start playback (have: " + fragLen + ", need: " + initialLiveManifestSize + ")");
                return null;
              }
              if (!levelDetails.PTSKnown && !this.startFragRequested && this.startPosition === -1 || pos < start) {
                frag = this.getInitialLiveFragment(levelDetails, fragments);
                this.startPosition = this.nextLoadPosition = frag ? this.hls.liveSyncPosition || frag.start : pos;
              }
            } else if (pos <= start) {
              frag = fragments[0];
            }
            if (!frag) {
              var end = config.lowLatencyMode ? levelDetails.partEnd : levelDetails.fragmentEnd;
              frag = this.getFragmentAtPosition(pos, end, levelDetails);
            }
            return this.mapToInitFragWhenRequired(frag);
          };
          _proto.isLoopLoading = function isLoopLoading(frag, targetBufferTime) {
            var trackerState = this.fragmentTracker.getState(frag);
            return (trackerState === FragmentState.OK || trackerState === FragmentState.PARTIAL && !!frag.gap) && this.nextLoadPosition > targetBufferTime;
          };
          _proto.getNextFragmentLoopLoading = function getNextFragmentLoopLoading(frag, levelDetails, bufferInfo, playlistType, maxBufLen) {
            var gapStart = frag.gap;
            var nextFragment = this.getNextFragment(this.nextLoadPosition, levelDetails);
            if (nextFragment === null) {
              return nextFragment;
            }
            frag = nextFragment;
            if (gapStart && frag && !frag.gap && bufferInfo.nextStart) {
              var nextbufferInfo = this.getFwdBufferInfoAtPos(this.mediaBuffer ? this.mediaBuffer : this.media, bufferInfo.nextStart, playlistType);
              if (nextbufferInfo !== null && bufferInfo.len + nextbufferInfo.len >= maxBufLen) {
                this.log('buffer full after gaps in "' + playlistType + '" playlist starting at sn: ' + frag.sn);
                return null;
              }
            }
            return frag;
          };
          _proto.mapToInitFragWhenRequired = function mapToInitFragWhenRequired(frag) {
            if (frag != null && frag.initSegment && !(frag != null && frag.initSegment.data) && !this.bitrateTest) {
              return frag.initSegment;
            }
            return frag;
          };
          _proto.getNextPart = function getNextPart(partList, frag, targetBufferTime) {
            var nextPart = -1;
            var contiguous = false;
            var independentAttrOmitted = true;
            for (var i = 0, len = partList.length; i < len; i++) {
              var part = partList[i];
              independentAttrOmitted = independentAttrOmitted && !part.independent;
              if (nextPart > -1 && targetBufferTime < part.start) {
                break;
              }
              var loaded = part.loaded;
              if (loaded) {
                nextPart = -1;
              } else if ((contiguous || part.independent || independentAttrOmitted) && part.fragment === frag) {
                nextPart = i;
              }
              contiguous = loaded;
            }
            return nextPart;
          };
          _proto.loadedEndOfParts = function loadedEndOfParts(partList, targetBufferTime) {
            var lastPart = partList[partList.length - 1];
            return lastPart && targetBufferTime > lastPart.start && lastPart.loaded;
          };
          _proto.getInitialLiveFragment = function getInitialLiveFragment(levelDetails, fragments) {
            var fragPrevious = this.fragPrevious;
            var frag = null;
            if (fragPrevious) {
              if (levelDetails.hasProgramDateTime) {
                this.log("Live playlist, switching playlist, load frag with same PDT: " + fragPrevious.programDateTime);
                frag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, this.config.maxFragLookUpTolerance);
              }
              if (!frag) {
                var targetSN = fragPrevious.sn + 1;
                if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {
                  var fragNext = fragments[targetSN - levelDetails.startSN];
                  if (fragPrevious.cc === fragNext.cc) {
                    frag = fragNext;
                    this.log("Live playlist, switching playlist, load frag with next SN: " + frag.sn);
                  }
                }
                if (!frag) {
                  frag = findFragWithCC(fragments, fragPrevious.cc);
                  if (frag) {
                    this.log("Live playlist, switching playlist, load frag with same CC: " + frag.sn);
                  }
                }
              }
            } else {
              var liveStart = this.hls.liveSyncPosition;
              if (liveStart !== null) {
                frag = this.getFragmentAtPosition(liveStart, this.bitrateTest ? levelDetails.fragmentEnd : levelDetails.edge, levelDetails);
              }
            }
            return frag;
          };
          _proto.getFragmentAtPosition = function getFragmentAtPosition(bufferEnd, end, levelDetails) {
            var config = this.config;
            var fragPrevious = this.fragPrevious;
            var fragments = levelDetails.fragments, endSN = levelDetails.endSN;
            var fragmentHint = levelDetails.fragmentHint;
            var maxFragLookUpTolerance = config.maxFragLookUpTolerance;
            var partList = levelDetails.partList;
            var loadingParts = !!(config.lowLatencyMode && partList != null && partList.length && fragmentHint);
            if (loadingParts && fragmentHint && !this.bitrateTest) {
              fragments = fragments.concat(fragmentHint);
              endSN = fragmentHint.sn;
            }
            var frag;
            if (bufferEnd < end) {
              var lookupTolerance = bufferEnd > end - maxFragLookUpTolerance ? 0 : maxFragLookUpTolerance;
              frag = findFragmentByPTS(fragPrevious, fragments, bufferEnd, lookupTolerance);
            } else {
              frag = fragments[fragments.length - 1];
            }
            if (frag) {
              var curSNIdx = frag.sn - levelDetails.startSN;
              var fragState = this.fragmentTracker.getState(frag);
              if (fragState === FragmentState.OK || fragState === FragmentState.PARTIAL && frag.gap) {
                fragPrevious = frag;
              }
              if (fragPrevious && frag.sn === fragPrevious.sn && (!loadingParts || partList[0].fragment.sn > frag.sn)) {
                var sameLevel = fragPrevious && frag.level === fragPrevious.level;
                if (sameLevel) {
                  var nextFrag = fragments[curSNIdx + 1];
                  if (frag.sn < endSN && this.fragmentTracker.getState(nextFrag) !== FragmentState.OK) {
                    frag = nextFrag;
                  } else {
                    frag = null;
                  }
                }
              }
            }
            return frag;
          };
          _proto.synchronizeToLiveEdge = function synchronizeToLiveEdge(levelDetails) {
            var config = this.config, media = this.media;
            if (!media) {
              return;
            }
            var liveSyncPosition = this.hls.liveSyncPosition;
            var currentTime = media.currentTime;
            var start = levelDetails.fragments[0].start;
            var end = levelDetails.edge;
            var withinSlidingWindow = currentTime >= start - config.maxFragLookUpTolerance && currentTime <= end;
            if (liveSyncPosition !== null && media.duration > liveSyncPosition && (currentTime < liveSyncPosition || !withinSlidingWindow)) {
              var maxLatency = config.liveMaxLatencyDuration !== void 0 ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;
              if (!withinSlidingWindow && media.readyState < 4 || currentTime < end - maxLatency) {
                if (!this.loadedmetadata) {
                  this.nextLoadPosition = liveSyncPosition;
                }
                if (media.readyState) {
                  this.warn("Playback: " + currentTime.toFixed(3) + " is located too far from the end of live sliding playlist: " + end + ", reset currentTime to : " + liveSyncPosition.toFixed(3));
                  media.currentTime = liveSyncPosition;
                }
              }
            }
          };
          _proto.alignPlaylists = function alignPlaylists(details, previousDetails, switchDetails) {
            var length = details.fragments.length;
            if (!length) {
              this.warn("No fragments in live playlist");
              return 0;
            }
            var slidingStart = details.fragments[0].start;
            var firstLevelLoad = !previousDetails;
            var aligned = details.alignedSliding && isFiniteNumber(slidingStart);
            if (firstLevelLoad || !aligned && !slidingStart) {
              var fragPrevious = this.fragPrevious;
              alignStream(fragPrevious, switchDetails, details);
              var alignedSlidingStart = details.fragments[0].start;
              this.log("Live playlist sliding: " + alignedSlidingStart.toFixed(2) + " start-sn: " + (previousDetails ? previousDetails.startSN : "na") + "->" + details.startSN + " prev-sn: " + (fragPrevious ? fragPrevious.sn : "na") + " fragments: " + length);
              return alignedSlidingStart;
            }
            return slidingStart;
          };
          _proto.waitForCdnTuneIn = function waitForCdnTuneIn(details) {
            var advancePartLimit = 3;
            return details.live && details.canBlockReload && details.partTarget && details.tuneInGoal > Math.max(details.partHoldBack, details.partTarget * advancePartLimit);
          };
          _proto.setStartPosition = function setStartPosition(details, sliding) {
            var startPosition = this.startPosition;
            if (startPosition < sliding) {
              startPosition = -1;
            }
            if (startPosition === -1 || this.lastCurrentTime === -1) {
              var offsetInMultivariantPlaylist = this.startTimeOffset !== null;
              var startTimeOffset = offsetInMultivariantPlaylist ? this.startTimeOffset : details.startTimeOffset;
              if (startTimeOffset !== null && isFiniteNumber(startTimeOffset)) {
                startPosition = sliding + startTimeOffset;
                if (startTimeOffset < 0) {
                  startPosition += details.totalduration;
                }
                startPosition = Math.min(Math.max(sliding, startPosition), sliding + details.totalduration);
                this.log("Start time offset " + startTimeOffset + " found in " + (offsetInMultivariantPlaylist ? "multivariant" : "media") + " playlist, adjust startPosition to " + startPosition);
                this.startPosition = startPosition;
              } else if (details.live) {
                startPosition = this.hls.liveSyncPosition || sliding;
              } else {
                this.startPosition = startPosition = 0;
              }
              this.lastCurrentTime = startPosition;
            }
            this.nextLoadPosition = startPosition;
          };
          _proto.getLoadPosition = function getLoadPosition() {
            var media = this.media;
            var pos = 0;
            if (this.loadedmetadata && media) {
              pos = media.currentTime;
            } else if (this.nextLoadPosition) {
              pos = this.nextLoadPosition;
            }
            return pos;
          };
          _proto.handleFragLoadAborted = function handleFragLoadAborted(frag, part) {
            if (this.transmuxer && frag.sn !== "initSegment" && frag.stats.aborted) {
              this.warn("Fragment " + frag.sn + (part ? " part " + part.index : "") + " of level " + frag.level + " was aborted");
              this.resetFragmentLoading(frag);
            }
          };
          _proto.resetFragmentLoading = function resetFragmentLoading(frag) {
            if (!this.fragCurrent || !this.fragContextChanged(frag) && this.state !== State.FRAG_LOADING_WAITING_RETRY) {
              this.state = State.IDLE;
            }
          };
          _proto.onFragmentOrKeyLoadError = function onFragmentOrKeyLoadError(filterType, data) {
            if (data.chunkMeta && !data.frag) {
              var context = this.getCurrentContext(data.chunkMeta);
              if (context) {
                data.frag = context.frag;
              }
            }
            var frag = data.frag;
            if (!frag || frag.type !== filterType || !this.levels) {
              return;
            }
            if (this.fragContextChanged(frag)) {
              var _this$fragCurrent2;
              this.warn("Frag load error must match current frag to retry " + frag.url + " > " + ((_this$fragCurrent2 = this.fragCurrent) == null ? void 0 : _this$fragCurrent2.url));
              return;
            }
            var gapTagEncountered = data.details === ErrorDetails.FRAG_GAP;
            if (gapTagEncountered) {
              this.fragmentTracker.fragBuffered(frag, true);
            }
            var errorAction = data.errorAction;
            var _ref2 = errorAction || {}, action = _ref2.action, _ref2$retryCount = _ref2.retryCount, retryCount = _ref2$retryCount === void 0 ? 0 : _ref2$retryCount, retryConfig = _ref2.retryConfig;
            if (errorAction && action === NetworkErrorAction.RetryRequest && retryConfig) {
              this.resetStartWhenNotLoaded(this.levelLastLoaded);
              var delay = getRetryDelay(retryConfig, retryCount);
              this.warn("Fragment " + frag.sn + " of " + filterType + " " + frag.level + " errored with " + data.details + ", retrying loading " + (retryCount + 1) + "/" + retryConfig.maxNumRetry + " in " + delay + "ms");
              errorAction.resolved = true;
              this.retryDate = self.performance.now() + delay;
              this.state = State.FRAG_LOADING_WAITING_RETRY;
            } else if (retryConfig && errorAction) {
              this.resetFragmentErrors(filterType);
              if (retryCount < retryConfig.maxNumRetry) {
                if (!gapTagEncountered && action !== NetworkErrorAction.RemoveAlternatePermanently) {
                  errorAction.resolved = true;
                }
              } else {
                logger.warn(data.details + " reached or exceeded max retry (" + retryCount + ")");
                return;
              }
            } else if ((errorAction == null ? void 0 : errorAction.action) === NetworkErrorAction.SendAlternateToPenaltyBox) {
              this.state = State.WAITING_LEVEL;
            } else {
              this.state = State.ERROR;
            }
            this.tickImmediate();
          };
          _proto.reduceLengthAndFlushBuffer = function reduceLengthAndFlushBuffer(data) {
            if (this.state === State.PARSING || this.state === State.PARSED) {
              var frag = data.frag;
              var playlistType = data.parent;
              var bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, playlistType);
              var buffered = bufferedInfo && bufferedInfo.len > 0.5;
              if (buffered) {
                this.reduceMaxBufferLength(bufferedInfo.len, (frag == null ? void 0 : frag.duration) || 10);
              }
              var flushBuffer = !buffered;
              if (flushBuffer) {
                this.warn("Buffer full error while media.currentTime is not buffered, flush " + playlistType + " buffer");
              }
              if (frag) {
                this.fragmentTracker.removeFragment(frag);
                this.nextLoadPosition = frag.start;
              }
              this.resetLoadingState();
              return flushBuffer;
            }
            return false;
          };
          _proto.resetFragmentErrors = function resetFragmentErrors(filterType) {
            if (filterType === PlaylistLevelType.AUDIO) {
              this.fragCurrent = null;
            }
            if (!this.loadedmetadata) {
              this.startFragRequested = false;
            }
            if (this.state !== State.STOPPED) {
              this.state = State.IDLE;
            }
          };
          _proto.afterBufferFlushed = function afterBufferFlushed(media, bufferType, playlistType) {
            if (!media) {
              return;
            }
            var bufferedTimeRanges = BufferHelper.getBuffered(media);
            this.fragmentTracker.detectEvictedFragments(bufferType, bufferedTimeRanges, playlistType);
            if (this.state === State.ENDED) {
              this.resetLoadingState();
            }
          };
          _proto.resetLoadingState = function resetLoadingState() {
            this.log("Reset loading state");
            this.fragCurrent = null;
            this.fragPrevious = null;
            this.state = State.IDLE;
          };
          _proto.resetStartWhenNotLoaded = function resetStartWhenNotLoaded(level) {
            if (!this.loadedmetadata) {
              this.startFragRequested = false;
              var details = level ? level.details : null;
              if (details != null && details.live) {
                this.startPosition = -1;
                this.setStartPosition(details, 0);
                this.resetLoadingState();
              } else {
                this.nextLoadPosition = this.startPosition;
              }
            }
          };
          _proto.resetWhenMissingContext = function resetWhenMissingContext(chunkMeta) {
            this.warn("The loading context changed while buffering fragment " + chunkMeta.sn + " of level " + chunkMeta.level + ". This chunk will not be buffered.");
            this.removeUnbufferedFrags();
            this.resetStartWhenNotLoaded(this.levelLastLoaded);
            this.resetLoadingState();
          };
          _proto.removeUnbufferedFrags = function removeUnbufferedFrags(start) {
            if (start === void 0) {
              start = 0;
            }
            this.fragmentTracker.removeFragmentsInRange(start, Infinity, this.playlistType, false, true);
          };
          _proto.updateLevelTiming = function updateLevelTiming(frag, part, level, partial) {
            var _this6 = this, _this$transmuxer;
            var details = level.details;
            if (!details) {
              this.warn("level.details undefined");
              return;
            }
            var parsed = Object.keys(frag.elementaryStreams).reduce(function(result, type) {
              var info = frag.elementaryStreams[type];
              if (info) {
                var parsedDuration = info.endPTS - info.startPTS;
                if (parsedDuration <= 0) {
                  _this6.warn("Could not parse fragment " + frag.sn + " " + type + " duration reliably (" + parsedDuration + ")");
                  return result || false;
                }
                var drift = partial ? 0 : updateFragPTSDTS(details, frag, info.startPTS, info.endPTS, info.startDTS, info.endDTS);
                _this6.hls.trigger(Events.LEVEL_PTS_UPDATED, {
                  details,
                  level,
                  drift,
                  type,
                  frag,
                  start: info.startPTS,
                  end: info.endPTS
                });
                return true;
              }
              return result;
            }, false);
            if (!parsed && ((_this$transmuxer = this.transmuxer) == null ? void 0 : _this$transmuxer.error) === null) {
              var error = new Error("Found no media in fragment " + frag.sn + " of level " + frag.level + " resetting transmuxer to fallback to playlist timing");
              if (level.fragmentError === 0) {
                level.fragmentError++;
                frag.gap = true;
                this.fragmentTracker.removeFragment(frag);
                this.fragmentTracker.fragBuffered(frag, true);
              }
              this.warn(error.message);
              this.hls.trigger(Events.ERROR, {
                type: ErrorTypes.MEDIA_ERROR,
                details: ErrorDetails.FRAG_PARSING_ERROR,
                fatal: false,
                error,
                frag,
                reason: "Found no media in msn " + frag.sn + ' of level "' + level.url + '"'
              });
              if (!this.hls) {
                return;
              }
              this.resetTransmuxer();
            }
            this.state = State.PARSED;
            this.hls.trigger(Events.FRAG_PARSED, {
              frag,
              part
            });
          };
          _proto.resetTransmuxer = function resetTransmuxer() {
            if (this.transmuxer) {
              this.transmuxer.destroy();
              this.transmuxer = null;
            }
          };
          _proto.recoverWorkerError = function recoverWorkerError(data) {
            if (data.event === "demuxerWorker") {
              this.fragmentTracker.removeAllFragments();
              this.resetTransmuxer();
              this.resetStartWhenNotLoaded(this.levelLastLoaded);
              this.resetLoadingState();
            }
          };
          _createClass2(BaseStreamController2, [{
            key: "state",
            get: function get() {
              return this._state;
            },
            set: function set(nextState) {
              var previousState = this._state;
              if (previousState !== nextState) {
                this._state = nextState;
                this.log(previousState + "->" + nextState);
              }
            }
          }]);
          return BaseStreamController2;
        }(TaskLoop);
        function getSourceBuffer() {
          return self.SourceBuffer || self.WebKitSourceBuffer;
        }
        function isMSESupported() {
          var mediaSource = getMediaSource();
          if (!mediaSource) {
            return false;
          }
          var sourceBuffer = getSourceBuffer();
          return !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === "function" && typeof sourceBuffer.prototype.remove === "function";
        }
        function isSupported() {
          if (!isMSESupported()) {
            return false;
          }
          var mediaSource = getMediaSource();
          return typeof (mediaSource == null ? void 0 : mediaSource.isTypeSupported) === "function" && (["avc1.42E01E,mp4a.40.2", "av01.0.01M.08", "vp09.00.50.08"].some(function(codecsForVideoContainer) {
            return mediaSource.isTypeSupported(mimeTypeForCodec(codecsForVideoContainer, "video"));
          }) || ["mp4a.40.2", "fLaC"].some(function(codecForAudioContainer) {
            return mediaSource.isTypeSupported(mimeTypeForCodec(codecForAudioContainer, "audio"));
          }));
        }
        function changeTypeSupported() {
          var _sourceBuffer$prototy;
          var sourceBuffer = getSourceBuffer();
          return typeof (sourceBuffer == null ? void 0 : (_sourceBuffer$prototy = sourceBuffer.prototype) == null ? void 0 : _sourceBuffer$prototy.changeType) === "function";
        }
        function dummyTrack(type, inputTimeScale) {
          if (type === void 0) {
            type = "";
          }
          if (inputTimeScale === void 0) {
            inputTimeScale = 9e4;
          }
          return {
            type,
            id: -1,
            pid: -1,
            inputTimeScale,
            sequenceNumber: -1,
            samples: [],
            dropped: 0
          };
        }
        var BaseAudioDemuxer = function() {
          function BaseAudioDemuxer2() {
            this._audioTrack = void 0;
            this._id3Track = void 0;
            this.frameIndex = 0;
            this.cachedData = null;
            this.basePTS = null;
            this.initPTS = null;
            this.lastPTS = null;
          }
          var _proto = BaseAudioDemuxer2.prototype;
          _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
            this._id3Track = {
              type: "id3",
              id: 3,
              pid: -1,
              inputTimeScale: 9e4,
              sequenceNumber: 0,
              samples: [],
              dropped: 0
            };
          };
          _proto.resetTimeStamp = function resetTimeStamp(deaultTimestamp) {
            this.initPTS = deaultTimestamp;
            this.resetContiguity();
          };
          _proto.resetContiguity = function resetContiguity() {
            this.basePTS = null;
            this.lastPTS = null;
            this.frameIndex = 0;
          };
          _proto.canParse = function canParse2(data, offset) {
            return false;
          };
          _proto.appendFrame = function appendFrame2(track, data, offset) {
          };
          _proto.demux = function demux(data, timeOffset) {
            if (this.cachedData) {
              data = appendUint8Array(this.cachedData, data);
              this.cachedData = null;
            }
            var id3Data = getID3Data(data, 0);
            var offset = id3Data ? id3Data.length : 0;
            var lastDataIndex;
            var track = this._audioTrack;
            var id3Track = this._id3Track;
            var timestamp = id3Data ? getTimeStamp(id3Data) : void 0;
            var length = data.length;
            if (this.basePTS === null || this.frameIndex === 0 && isFiniteNumber(timestamp)) {
              this.basePTS = initPTSFn(timestamp, timeOffset, this.initPTS);
              this.lastPTS = this.basePTS;
            }
            if (this.lastPTS === null) {
              this.lastPTS = this.basePTS;
            }
            if (id3Data && id3Data.length > 0) {
              id3Track.samples.push({
                pts: this.lastPTS,
                dts: this.lastPTS,
                data: id3Data,
                type: MetadataSchema.audioId3,
                duration: Number.POSITIVE_INFINITY
              });
            }
            while (offset < length) {
              if (this.canParse(data, offset)) {
                var frame = this.appendFrame(track, data, offset);
                if (frame) {
                  this.frameIndex++;
                  this.lastPTS = frame.sample.pts;
                  offset += frame.length;
                  lastDataIndex = offset;
                } else {
                  offset = length;
                }
              } else if (canParse$2(data, offset)) {
                id3Data = getID3Data(data, offset);
                id3Track.samples.push({
                  pts: this.lastPTS,
                  dts: this.lastPTS,
                  data: id3Data,
                  type: MetadataSchema.audioId3,
                  duration: Number.POSITIVE_INFINITY
                });
                offset += id3Data.length;
                lastDataIndex = offset;
              } else {
                offset++;
              }
              if (offset === length && lastDataIndex !== length) {
                var partialData = sliceUint8(data, lastDataIndex);
                if (this.cachedData) {
                  this.cachedData = appendUint8Array(this.cachedData, partialData);
                } else {
                  this.cachedData = partialData;
                }
              }
            }
            return {
              audioTrack: track,
              videoTrack: dummyTrack(),
              id3Track,
              textTrack: dummyTrack()
            };
          };
          _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
            return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"));
          };
          _proto.flush = function flush(timeOffset) {
            var cachedData = this.cachedData;
            if (cachedData) {
              this.cachedData = null;
              this.demux(cachedData, 0);
            }
            return {
              audioTrack: this._audioTrack,
              videoTrack: dummyTrack(),
              id3Track: this._id3Track,
              textTrack: dummyTrack()
            };
          };
          _proto.destroy = function destroy() {
          };
          return BaseAudioDemuxer2;
        }();
        var initPTSFn = function initPTSFn2(timestamp, timeOffset, initPTS) {
          if (isFiniteNumber(timestamp)) {
            return timestamp * 90;
          }
          var init90kHz = initPTS ? initPTS.baseTime * 9e4 / initPTS.timescale : 0;
          return timeOffset * 9e4 + init90kHz;
        };
        function getAudioConfig(observer, data, offset, audioCodec) {
          var adtsObjectType;
          var adtsExtensionSamplingIndex;
          var adtsChannelConfig;
          var config;
          var userAgent = navigator.userAgent.toLowerCase();
          var manifestCodec = audioCodec;
          var adtsSamplingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
          adtsObjectType = ((data[offset + 2] & 192) >>> 6) + 1;
          var adtsSamplingIndex = (data[offset + 2] & 60) >>> 2;
          if (adtsSamplingIndex > adtsSamplingRates.length - 1) {
            var error = new Error("invalid ADTS sampling index:" + adtsSamplingIndex);
            observer.emit(Events.ERROR, Events.ERROR, {
              type: ErrorTypes.MEDIA_ERROR,
              details: ErrorDetails.FRAG_PARSING_ERROR,
              fatal: true,
              error,
              reason: error.message
            });
            return;
          }
          adtsChannelConfig = (data[offset + 2] & 1) << 2;
          adtsChannelConfig |= (data[offset + 3] & 192) >>> 6;
          logger.log("manifest codec:" + audioCodec + ", ADTS type:" + adtsObjectType + ", samplingIndex:" + adtsSamplingIndex);
          if (/firefox/i.test(userAgent)) {
            if (adtsSamplingIndex >= 6) {
              adtsObjectType = 5;
              config = new Array(4);
              adtsExtensionSamplingIndex = adtsSamplingIndex - 3;
            } else {
              adtsObjectType = 2;
              config = new Array(2);
              adtsExtensionSamplingIndex = adtsSamplingIndex;
            }
          } else if (userAgent.indexOf("android") !== -1) {
            adtsObjectType = 2;
            config = new Array(2);
            adtsExtensionSamplingIndex = adtsSamplingIndex;
          } else {
            adtsObjectType = 5;
            config = new Array(4);
            if (audioCodec && (audioCodec.indexOf("mp4a.40.29") !== -1 || audioCodec.indexOf("mp4a.40.5") !== -1) || !audioCodec && adtsSamplingIndex >= 6) {
              adtsExtensionSamplingIndex = adtsSamplingIndex - 3;
            } else {
              if (audioCodec && audioCodec.indexOf("mp4a.40.2") !== -1 && (adtsSamplingIndex >= 6 && adtsChannelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChannelConfig === 1) {
                adtsObjectType = 2;
                config = new Array(2);
              }
              adtsExtensionSamplingIndex = adtsSamplingIndex;
            }
          }
          config[0] = adtsObjectType << 3;
          config[0] |= (adtsSamplingIndex & 14) >> 1;
          config[1] |= (adtsSamplingIndex & 1) << 7;
          config[1] |= adtsChannelConfig << 3;
          if (adtsObjectType === 5) {
            config[1] |= (adtsExtensionSamplingIndex & 14) >> 1;
            config[2] = (adtsExtensionSamplingIndex & 1) << 7;
            config[2] |= 2 << 2;
            config[3] = 0;
          }
          return {
            config,
            samplerate: adtsSamplingRates[adtsSamplingIndex],
            channelCount: adtsChannelConfig,
            codec: "mp4a.40." + adtsObjectType,
            manifestCodec
          };
        }
        function isHeaderPattern$1(data, offset) {
          return data[offset] === 255 && (data[offset + 1] & 246) === 240;
        }
        function getHeaderLength(data, offset) {
          return data[offset + 1] & 1 ? 7 : 9;
        }
        function getFullFrameLength(data, offset) {
          return (data[offset + 3] & 3) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 224) >>> 5;
        }
        function canGetFrameLength(data, offset) {
          return offset + 5 < data.length;
        }
        function isHeader$1(data, offset) {
          return offset + 1 < data.length && isHeaderPattern$1(data, offset);
        }
        function canParse$1(data, offset) {
          return canGetFrameLength(data, offset) && isHeaderPattern$1(data, offset) && getFullFrameLength(data, offset) <= data.length - offset;
        }
        function probe$1(data, offset) {
          if (isHeader$1(data, offset)) {
            var headerLength = getHeaderLength(data, offset);
            if (offset + headerLength >= data.length) {
              return false;
            }
            var frameLength = getFullFrameLength(data, offset);
            if (frameLength <= headerLength) {
              return false;
            }
            var newOffset = offset + frameLength;
            return newOffset === data.length || isHeader$1(data, newOffset);
          }
          return false;
        }
        function initTrackConfig(track, observer, data, offset, audioCodec) {
          if (!track.samplerate) {
            var config = getAudioConfig(observer, data, offset, audioCodec);
            if (!config) {
              return;
            }
            track.config = config.config;
            track.samplerate = config.samplerate;
            track.channelCount = config.channelCount;
            track.codec = config.codec;
            track.manifestCodec = config.manifestCodec;
            logger.log("parsed codec:" + track.codec + ", rate:" + config.samplerate + ", channels:" + config.channelCount);
          }
        }
        function getFrameDuration(samplerate) {
          return 1024 * 9e4 / samplerate;
        }
        function parseFrameHeader(data, offset) {
          var headerLength = getHeaderLength(data, offset);
          if (offset + headerLength <= data.length) {
            var frameLength = getFullFrameLength(data, offset) - headerLength;
            if (frameLength > 0) {
              return {
                headerLength,
                frameLength
              };
            }
          }
        }
        function appendFrame$1(track, data, offset, pts, frameIndex) {
          var frameDuration = getFrameDuration(track.samplerate);
          var stamp = pts + frameIndex * frameDuration;
          var header = parseFrameHeader(data, offset);
          var unit;
          if (header) {
            var frameLength = header.frameLength, headerLength = header.headerLength;
            var _length = headerLength + frameLength;
            var missing = Math.max(0, offset + _length - data.length);
            if (missing) {
              unit = new Uint8Array(_length - headerLength);
              unit.set(data.subarray(offset + headerLength, data.length), 0);
            } else {
              unit = data.subarray(offset + headerLength, offset + _length);
            }
            var _sample = {
              unit,
              pts: stamp
            };
            if (!missing) {
              track.samples.push(_sample);
            }
            return {
              sample: _sample,
              length: _length,
              missing
            };
          }
          var length = data.length - offset;
          unit = new Uint8Array(length);
          unit.set(data.subarray(offset, data.length), 0);
          var sample = {
            unit,
            pts: stamp
          };
          return {
            sample,
            length,
            missing: -1
          };
        }
        var chromeVersion$1 = null;
        var BitratesMap = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160];
        var SamplingRateMap = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3];
        var SamplesCoefficients = [
          // MPEG 2.5
          [
            0,
            // Reserved
            72,
            // Layer3
            144,
            // Layer2
            12
            // Layer1
          ],
          // Reserved
          [
            0,
            // Reserved
            0,
            // Layer3
            0,
            // Layer2
            0
            // Layer1
          ],
          // MPEG 2
          [
            0,
            // Reserved
            72,
            // Layer3
            144,
            // Layer2
            12
            // Layer1
          ],
          // MPEG 1
          [
            0,
            // Reserved
            144,
            // Layer3
            144,
            // Layer2
            12
            // Layer1
          ]
        ];
        var BytesInSlot = [
          0,
          // Reserved
          1,
          // Layer3
          1,
          // Layer2
          4
          // Layer1
        ];
        function appendFrame(track, data, offset, pts, frameIndex) {
          if (offset + 24 > data.length) {
            return;
          }
          var header = parseHeader(data, offset);
          if (header && offset + header.frameLength <= data.length) {
            var frameDuration = header.samplesPerFrame * 9e4 / header.sampleRate;
            var stamp = pts + frameIndex * frameDuration;
            var sample = {
              unit: data.subarray(offset, offset + header.frameLength),
              pts: stamp,
              dts: stamp
            };
            track.config = [];
            track.channelCount = header.channelCount;
            track.samplerate = header.sampleRate;
            track.samples.push(sample);
            return {
              sample,
              length: header.frameLength,
              missing: 0
            };
          }
        }
        function parseHeader(data, offset) {
          var mpegVersion = data[offset + 1] >> 3 & 3;
          var mpegLayer = data[offset + 1] >> 1 & 3;
          var bitRateIndex = data[offset + 2] >> 4 & 15;
          var sampleRateIndex = data[offset + 2] >> 2 & 3;
          if (mpegVersion !== 1 && bitRateIndex !== 0 && bitRateIndex !== 15 && sampleRateIndex !== 3) {
            var paddingBit = data[offset + 2] >> 1 & 1;
            var channelMode = data[offset + 3] >> 6;
            var columnInBitrates = mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;
            var bitRate = BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1e3;
            var columnInSampleRates = mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;
            var sampleRate = SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];
            var channelCount = channelMode === 3 ? 1 : 2;
            var sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];
            var bytesInSlot = BytesInSlot[mpegLayer];
            var samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;
            var frameLength = Math.floor(sampleCoefficient * bitRate / sampleRate + paddingBit) * bytesInSlot;
            if (chromeVersion$1 === null) {
              var userAgent = navigator.userAgent || "";
              var result = userAgent.match(/Chrome\/(\d+)/i);
              chromeVersion$1 = result ? parseInt(result[1]) : 0;
            }
            var needChromeFix = !!chromeVersion$1 && chromeVersion$1 <= 87;
            if (needChromeFix && mpegLayer === 2 && bitRate >= 224e3 && channelMode === 0) {
              data[offset + 3] = data[offset + 3] | 128;
            }
            return {
              sampleRate,
              channelCount,
              frameLength,
              samplesPerFrame
            };
          }
        }
        function isHeaderPattern(data, offset) {
          return data[offset] === 255 && (data[offset + 1] & 224) === 224 && (data[offset + 1] & 6) !== 0;
        }
        function isHeader(data, offset) {
          return offset + 1 < data.length && isHeaderPattern(data, offset);
        }
        function canParse(data, offset) {
          var headerSize = 4;
          return isHeaderPattern(data, offset) && headerSize <= data.length - offset;
        }
        function probe(data, offset) {
          if (offset + 1 < data.length && isHeaderPattern(data, offset)) {
            var headerLength = 4;
            var header = parseHeader(data, offset);
            var frameLength = headerLength;
            if (header != null && header.frameLength) {
              frameLength = header.frameLength;
            }
            var newOffset = offset + frameLength;
            return newOffset === data.length || isHeader(data, newOffset);
          }
          return false;
        }
        var AACDemuxer = function(_BaseAudioDemuxer) {
          _inheritsLoose(AACDemuxer2, _BaseAudioDemuxer);
          function AACDemuxer2(observer, config) {
            var _this;
            _this = _BaseAudioDemuxer.call(this) || this;
            _this.observer = void 0;
            _this.config = void 0;
            _this.observer = observer;
            _this.config = config;
            return _this;
          }
          var _proto = AACDemuxer2.prototype;
          _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
            _BaseAudioDemuxer.prototype.resetInitSegment.call(this, initSegment, audioCodec, videoCodec, trackDuration);
            this._audioTrack = {
              container: "audio/adts",
              type: "audio",
              id: 2,
              pid: -1,
              sequenceNumber: 0,
              segmentCodec: "aac",
              samples: [],
              manifestCodec: audioCodec,
              duration: trackDuration,
              inputTimeScale: 9e4,
              dropped: 0
            };
          };
          AACDemuxer2.probe = function probe$2(data) {
            if (!data) {
              return false;
            }
            var id3Data = getID3Data(data, 0);
            var offset = (id3Data == null ? void 0 : id3Data.length) || 0;
            if (probe(data, offset)) {
              return false;
            }
            for (var length = data.length; offset < length; offset++) {
              if (probe$1(data, offset)) {
                logger.log("ADTS sync word found !");
                return true;
              }
            }
            return false;
          };
          _proto.canParse = function canParse2(data, offset) {
            return canParse$1(data, offset);
          };
          _proto.appendFrame = function appendFrame2(track, data, offset) {
            initTrackConfig(track, this.observer, data, offset, track.manifestCodec);
            var frame = appendFrame$1(track, data, offset, this.basePTS, this.frameIndex);
            if (frame && frame.missing === 0) {
              return frame;
            }
          };
          return AACDemuxer2;
        }(BaseAudioDemuxer);
        var emsgSchemePattern = /\/emsg[-/]ID3/i;
        var MP4Demuxer = function() {
          function MP4Demuxer2(observer, config) {
            this.remainderData = null;
            this.timeOffset = 0;
            this.config = void 0;
            this.videoTrack = void 0;
            this.audioTrack = void 0;
            this.id3Track = void 0;
            this.txtTrack = void 0;
            this.config = config;
          }
          var _proto = MP4Demuxer2.prototype;
          _proto.resetTimeStamp = function resetTimeStamp() {
          };
          _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
            var videoTrack = this.videoTrack = dummyTrack("video", 1);
            var audioTrack = this.audioTrack = dummyTrack("audio", 1);
            var captionTrack = this.txtTrack = dummyTrack("text", 1);
            this.id3Track = dummyTrack("id3", 1);
            this.timeOffset = 0;
            if (!(initSegment != null && initSegment.byteLength)) {
              return;
            }
            var initData = parseInitSegment(initSegment);
            if (initData.video) {
              var _initData$video = initData.video, id = _initData$video.id, timescale = _initData$video.timescale, codec = _initData$video.codec;
              videoTrack.id = id;
              videoTrack.timescale = captionTrack.timescale = timescale;
              videoTrack.codec = codec;
            }
            if (initData.audio) {
              var _initData$audio = initData.audio, _id = _initData$audio.id, _timescale = _initData$audio.timescale, _codec = _initData$audio.codec;
              audioTrack.id = _id;
              audioTrack.timescale = _timescale;
              audioTrack.codec = _codec;
            }
            captionTrack.id = RemuxerTrackIdConfig.text;
            videoTrack.sampleDuration = 0;
            videoTrack.duration = audioTrack.duration = trackDuration;
          };
          _proto.resetContiguity = function resetContiguity() {
            this.remainderData = null;
          };
          MP4Demuxer2.probe = function probe2(data) {
            return hasMoofData(data);
          };
          _proto.demux = function demux(data, timeOffset) {
            this.timeOffset = timeOffset;
            var videoSamples = data;
            var videoTrack = this.videoTrack;
            var textTrack = this.txtTrack;
            if (this.config.progressive) {
              if (this.remainderData) {
                videoSamples = appendUint8Array(this.remainderData, data);
              }
              var segmentedData = segmentValidRange(videoSamples);
              this.remainderData = segmentedData.remainder;
              videoTrack.samples = segmentedData.valid || new Uint8Array();
            } else {
              videoTrack.samples = videoSamples;
            }
            var id3Track = this.extractID3Track(videoTrack, timeOffset);
            textTrack.samples = parseSamples(timeOffset, videoTrack);
            return {
              videoTrack,
              audioTrack: this.audioTrack,
              id3Track,
              textTrack: this.txtTrack
            };
          };
          _proto.flush = function flush() {
            var timeOffset = this.timeOffset;
            var videoTrack = this.videoTrack;
            var textTrack = this.txtTrack;
            videoTrack.samples = this.remainderData || new Uint8Array();
            this.remainderData = null;
            var id3Track = this.extractID3Track(videoTrack, this.timeOffset);
            textTrack.samples = parseSamples(timeOffset, videoTrack);
            return {
              videoTrack,
              audioTrack: dummyTrack(),
              id3Track,
              textTrack: dummyTrack()
            };
          };
          _proto.extractID3Track = function extractID3Track(videoTrack, timeOffset) {
            var id3Track = this.id3Track;
            if (videoTrack.samples.length) {
              var emsgs = findBox(videoTrack.samples, ["emsg"]);
              if (emsgs) {
                emsgs.forEach(function(data) {
                  var emsgInfo = parseEmsg(data);
                  if (emsgSchemePattern.test(emsgInfo.schemeIdUri)) {
                    var pts = isFiniteNumber(emsgInfo.presentationTime) ? emsgInfo.presentationTime / emsgInfo.timeScale : timeOffset + emsgInfo.presentationTimeDelta / emsgInfo.timeScale;
                    var duration = emsgInfo.eventDuration === 4294967295 ? Number.POSITIVE_INFINITY : emsgInfo.eventDuration / emsgInfo.timeScale;
                    if (duration <= 1e-3) {
                      duration = Number.POSITIVE_INFINITY;
                    }
                    var payload = emsgInfo.payload;
                    id3Track.samples.push({
                      data: payload,
                      len: payload.byteLength,
                      dts: pts,
                      pts,
                      type: MetadataSchema.emsg,
                      duration
                    });
                  }
                });
              }
            }
            return id3Track;
          };
          _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
            return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"));
          };
          _proto.destroy = function destroy() {
          };
          return MP4Demuxer2;
        }();
        var getAudioBSID = function getAudioBSID2(data, offset) {
          var bsid = 0;
          var numBits = 5;
          offset += numBits;
          var temp = new Uint32Array(1);
          var mask = new Uint32Array(1);
          var _byte = new Uint8Array(1);
          while (numBits > 0) {
            _byte[0] = data[offset];
            var bits = Math.min(numBits, 8);
            var shift = 8 - bits;
            mask[0] = 4278190080 >>> 24 + shift << shift;
            temp[0] = (_byte[0] & mask[0]) >> shift;
            bsid = !bsid ? temp[0] : bsid << bits | temp[0];
            offset += 1;
            numBits -= bits;
          }
          return bsid;
        };
        var BaseVideoParser = function() {
          function BaseVideoParser2() {
            this.VideoSample = null;
          }
          var _proto = BaseVideoParser2.prototype;
          _proto.createVideoSample = function createVideoSample(key, pts, dts, debug) {
            return {
              key,
              frame: false,
              pts,
              dts,
              units: [],
              debug,
              length: 0
            };
          };
          _proto.getLastNalUnit = function getLastNalUnit(samples) {
            var _VideoSample;
            var VideoSample = this.VideoSample;
            var lastUnit;
            if (!VideoSample || VideoSample.units.length === 0) {
              VideoSample = samples[samples.length - 1];
            }
            if ((_VideoSample = VideoSample) != null && _VideoSample.units) {
              var units = VideoSample.units;
              lastUnit = units[units.length - 1];
            }
            return lastUnit;
          };
          _proto.pushAccessUnit = function pushAccessUnit(VideoSample, videoTrack) {
            if (VideoSample.units.length && VideoSample.frame) {
              if (VideoSample.pts === void 0) {
                var samples = videoTrack.samples;
                var nbSamples = samples.length;
                if (nbSamples) {
                  var lastSample = samples[nbSamples - 1];
                  VideoSample.pts = lastSample.pts;
                  VideoSample.dts = lastSample.dts;
                } else {
                  videoTrack.dropped++;
                  return;
                }
              }
              videoTrack.samples.push(VideoSample);
            }
            if (VideoSample.debug.length) {
              logger.log(VideoSample.pts + "/" + VideoSample.dts + ":" + VideoSample.debug);
            }
          };
          return BaseVideoParser2;
        }();
        var ExpGolomb = function() {
          function ExpGolomb2(data) {
            this.data = void 0;
            this.bytesAvailable = void 0;
            this.word = void 0;
            this.bitsAvailable = void 0;
            this.data = data;
            this.bytesAvailable = data.byteLength;
            this.word = 0;
            this.bitsAvailable = 0;
          }
          var _proto = ExpGolomb2.prototype;
          _proto.loadWord = function loadWord() {
            var data = this.data;
            var bytesAvailable = this.bytesAvailable;
            var position = data.byteLength - bytesAvailable;
            var workingBytes = new Uint8Array(4);
            var availableBytes = Math.min(4, bytesAvailable);
            if (availableBytes === 0) {
              throw new Error("no bytes available");
            }
            workingBytes.set(data.subarray(position, position + availableBytes));
            this.word = new DataView(workingBytes.buffer).getUint32(0);
            this.bitsAvailable = availableBytes * 8;
            this.bytesAvailable -= availableBytes;
          };
          _proto.skipBits = function skipBits(count) {
            var skipBytes;
            count = Math.min(count, this.bytesAvailable * 8 + this.bitsAvailable);
            if (this.bitsAvailable > count) {
              this.word <<= count;
              this.bitsAvailable -= count;
            } else {
              count -= this.bitsAvailable;
              skipBytes = count >> 3;
              count -= skipBytes << 3;
              this.bytesAvailable -= skipBytes;
              this.loadWord();
              this.word <<= count;
              this.bitsAvailable -= count;
            }
          };
          _proto.readBits = function readBits(size) {
            var bits = Math.min(this.bitsAvailable, size);
            var valu = this.word >>> 32 - bits;
            if (size > 32) {
              logger.error("Cannot read more than 32 bits at a time");
            }
            this.bitsAvailable -= bits;
            if (this.bitsAvailable > 0) {
              this.word <<= bits;
            } else if (this.bytesAvailable > 0) {
              this.loadWord();
            } else {
              throw new Error("no bits available");
            }
            bits = size - bits;
            if (bits > 0 && this.bitsAvailable) {
              return valu << bits | this.readBits(bits);
            } else {
              return valu;
            }
          };
          _proto.skipLZ = function skipLZ() {
            var leadingZeroCount;
            for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {
              if ((this.word & 2147483648 >>> leadingZeroCount) !== 0) {
                this.word <<= leadingZeroCount;
                this.bitsAvailable -= leadingZeroCount;
                return leadingZeroCount;
              }
            }
            this.loadWord();
            return leadingZeroCount + this.skipLZ();
          };
          _proto.skipUEG = function skipUEG() {
            this.skipBits(1 + this.skipLZ());
          };
          _proto.skipEG = function skipEG() {
            this.skipBits(1 + this.skipLZ());
          };
          _proto.readUEG = function readUEG() {
            var clz = this.skipLZ();
            return this.readBits(clz + 1) - 1;
          };
          _proto.readEG = function readEG() {
            var valu = this.readUEG();
            if (1 & valu) {
              return 1 + valu >>> 1;
            } else {
              return -1 * (valu >>> 1);
            }
          };
          _proto.readBoolean = function readBoolean() {
            return this.readBits(1) === 1;
          };
          _proto.readUByte = function readUByte() {
            return this.readBits(8);
          };
          _proto.readUShort = function readUShort() {
            return this.readBits(16);
          };
          _proto.readUInt = function readUInt() {
            return this.readBits(32);
          };
          _proto.skipScalingList = function skipScalingList(count) {
            var lastScale = 8;
            var nextScale = 8;
            var deltaScale;
            for (var j = 0; j < count; j++) {
              if (nextScale !== 0) {
                deltaScale = this.readEG();
                nextScale = (lastScale + deltaScale + 256) % 256;
              }
              lastScale = nextScale === 0 ? lastScale : nextScale;
            }
          };
          _proto.readSPS = function readSPS() {
            var frameCropLeftOffset = 0;
            var frameCropRightOffset = 0;
            var frameCropTopOffset = 0;
            var frameCropBottomOffset = 0;
            var numRefFramesInPicOrderCntCycle;
            var scalingListCount;
            var i;
            var readUByte = this.readUByte.bind(this);
            var readBits = this.readBits.bind(this);
            var readUEG = this.readUEG.bind(this);
            var readBoolean = this.readBoolean.bind(this);
            var skipBits = this.skipBits.bind(this);
            var skipEG = this.skipEG.bind(this);
            var skipUEG = this.skipUEG.bind(this);
            var skipScalingList = this.skipScalingList.bind(this);
            readUByte();
            var profileIdc = readUByte();
            readBits(5);
            skipBits(3);
            readUByte();
            skipUEG();
            if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {
              var chromaFormatIdc = readUEG();
              if (chromaFormatIdc === 3) {
                skipBits(1);
              }
              skipUEG();
              skipUEG();
              skipBits(1);
              if (readBoolean()) {
                scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
                for (i = 0; i < scalingListCount; i++) {
                  if (readBoolean()) {
                    if (i < 6) {
                      skipScalingList(16);
                    } else {
                      skipScalingList(64);
                    }
                  }
                }
              }
            }
            skipUEG();
            var picOrderCntType = readUEG();
            if (picOrderCntType === 0) {
              readUEG();
            } else if (picOrderCntType === 1) {
              skipBits(1);
              skipEG();
              skipEG();
              numRefFramesInPicOrderCntCycle = readUEG();
              for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
                skipEG();
              }
            }
            skipUEG();
            skipBits(1);
            var picWidthInMbsMinus1 = readUEG();
            var picHeightInMapUnitsMinus1 = readUEG();
            var frameMbsOnlyFlag = readBits(1);
            if (frameMbsOnlyFlag === 0) {
              skipBits(1);
            }
            skipBits(1);
            if (readBoolean()) {
              frameCropLeftOffset = readUEG();
              frameCropRightOffset = readUEG();
              frameCropTopOffset = readUEG();
              frameCropBottomOffset = readUEG();
            }
            var pixelRatio = [1, 1];
            if (readBoolean()) {
              if (readBoolean()) {
                var aspectRatioIdc = readUByte();
                switch (aspectRatioIdc) {
                  case 1:
                    pixelRatio = [1, 1];
                    break;
                  case 2:
                    pixelRatio = [12, 11];
                    break;
                  case 3:
                    pixelRatio = [10, 11];
                    break;
                  case 4:
                    pixelRatio = [16, 11];
                    break;
                  case 5:
                    pixelRatio = [40, 33];
                    break;
                  case 6:
                    pixelRatio = [24, 11];
                    break;
                  case 7:
                    pixelRatio = [20, 11];
                    break;
                  case 8:
                    pixelRatio = [32, 11];
                    break;
                  case 9:
                    pixelRatio = [80, 33];
                    break;
                  case 10:
                    pixelRatio = [18, 11];
                    break;
                  case 11:
                    pixelRatio = [15, 11];
                    break;
                  case 12:
                    pixelRatio = [64, 33];
                    break;
                  case 13:
                    pixelRatio = [160, 99];
                    break;
                  case 14:
                    pixelRatio = [4, 3];
                    break;
                  case 15:
                    pixelRatio = [3, 2];
                    break;
                  case 16:
                    pixelRatio = [2, 1];
                    break;
                  case 255: {
                    pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];
                    break;
                  }
                }
              }
            }
            return {
              width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),
              height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
              pixelRatio
            };
          };
          _proto.readSliceType = function readSliceType() {
            this.readUByte();
            this.readUEG();
            return this.readUEG();
          };
          return ExpGolomb2;
        }();
        var AvcVideoParser = function(_BaseVideoParser) {
          _inheritsLoose(AvcVideoParser2, _BaseVideoParser);
          function AvcVideoParser2() {
            return _BaseVideoParser.apply(this, arguments) || this;
          }
          var _proto = AvcVideoParser2.prototype;
          _proto.parseAVCPES = function parseAVCPES(track, textTrack, pes, last, duration) {
            var _this = this;
            var units = this.parseAVCNALu(track, pes.data);
            var VideoSample = this.VideoSample;
            var push2;
            var spsfound = false;
            pes.data = null;
            if (VideoSample && units.length && !track.audFound) {
              this.pushAccessUnit(VideoSample, track);
              VideoSample = this.VideoSample = this.createVideoSample(false, pes.pts, pes.dts, "");
            }
            units.forEach(function(unit) {
              var _VideoSample2;
              switch (unit.type) {
                case 1: {
                  var iskey = false;
                  push2 = true;
                  var data = unit.data;
                  if (spsfound && data.length > 4) {
                    var sliceType = new ExpGolomb(data).readSliceType();
                    if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {
                      iskey = true;
                    }
                  }
                  if (iskey) {
                    var _VideoSample;
                    if ((_VideoSample = VideoSample) != null && _VideoSample.frame && !VideoSample.key) {
                      _this.pushAccessUnit(VideoSample, track);
                      VideoSample = _this.VideoSample = null;
                    }
                  }
                  if (!VideoSample) {
                    VideoSample = _this.VideoSample = _this.createVideoSample(true, pes.pts, pes.dts, "");
                  }
                  VideoSample.frame = true;
                  VideoSample.key = iskey;
                  break;
                }
                case 5:
                  push2 = true;
                  if ((_VideoSample2 = VideoSample) != null && _VideoSample2.frame && !VideoSample.key) {
                    _this.pushAccessUnit(VideoSample, track);
                    VideoSample = _this.VideoSample = null;
                  }
                  if (!VideoSample) {
                    VideoSample = _this.VideoSample = _this.createVideoSample(true, pes.pts, pes.dts, "");
                  }
                  VideoSample.key = true;
                  VideoSample.frame = true;
                  break;
                case 6: {
                  push2 = true;
                  parseSEIMessageFromNALu(unit.data, 1, pes.pts, textTrack.samples);
                  break;
                }
                case 7: {
                  var _track$pixelRatio, _track$pixelRatio2;
                  push2 = true;
                  spsfound = true;
                  var sps = unit.data;
                  var expGolombDecoder = new ExpGolomb(sps);
                  var config = expGolombDecoder.readSPS();
                  if (!track.sps || track.width !== config.width || track.height !== config.height || ((_track$pixelRatio = track.pixelRatio) == null ? void 0 : _track$pixelRatio[0]) !== config.pixelRatio[0] || ((_track$pixelRatio2 = track.pixelRatio) == null ? void 0 : _track$pixelRatio2[1]) !== config.pixelRatio[1]) {
                    track.width = config.width;
                    track.height = config.height;
                    track.pixelRatio = config.pixelRatio;
                    track.sps = [sps];
                    track.duration = duration;
                    var codecarray = sps.subarray(1, 4);
                    var codecstring = "avc1.";
                    for (var i = 0; i < 3; i++) {
                      var h = codecarray[i].toString(16);
                      if (h.length < 2) {
                        h = "0" + h;
                      }
                      codecstring += h;
                    }
                    track.codec = codecstring;
                  }
                  break;
                }
                case 8:
                  push2 = true;
                  track.pps = [unit.data];
                  break;
                case 9:
                  push2 = true;
                  track.audFound = true;
                  if (VideoSample) {
                    _this.pushAccessUnit(VideoSample, track);
                  }
                  VideoSample = _this.VideoSample = _this.createVideoSample(false, pes.pts, pes.dts, "");
                  break;
                case 12:
                  push2 = true;
                  break;
                default:
                  push2 = false;
                  if (VideoSample) {
                    VideoSample.debug += "unknown NAL " + unit.type + " ";
                  }
                  break;
              }
              if (VideoSample && push2) {
                var _units = VideoSample.units;
                _units.push(unit);
              }
            });
            if (last && VideoSample) {
              this.pushAccessUnit(VideoSample, track);
              this.VideoSample = null;
            }
          };
          _proto.parseAVCNALu = function parseAVCNALu(track, array) {
            var len = array.byteLength;
            var state = track.naluState || 0;
            var lastState = state;
            var units = [];
            var i = 0;
            var value;
            var overflow;
            var unitType;
            var lastUnitStart = -1;
            var lastUnitType = 0;
            if (state === -1) {
              lastUnitStart = 0;
              lastUnitType = array[0] & 31;
              state = 0;
              i = 1;
            }
            while (i < len) {
              value = array[i++];
              if (!state) {
                state = value ? 0 : 1;
                continue;
              }
              if (state === 1) {
                state = value ? 0 : 2;
                continue;
              }
              if (!value) {
                state = 3;
              } else if (value === 1) {
                overflow = i - state - 1;
                if (lastUnitStart >= 0) {
                  var unit = {
                    data: array.subarray(lastUnitStart, overflow),
                    type: lastUnitType
                  };
                  units.push(unit);
                } else {
                  var lastUnit = this.getLastNalUnit(track.samples);
                  if (lastUnit) {
                    if (lastState && i <= 4 - lastState) {
                      if (lastUnit.state) {
                        lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);
                      }
                    }
                    if (overflow > 0) {
                      lastUnit.data = appendUint8Array(lastUnit.data, array.subarray(0, overflow));
                      lastUnit.state = 0;
                    }
                  }
                }
                if (i < len) {
                  unitType = array[i] & 31;
                  lastUnitStart = i;
                  lastUnitType = unitType;
                  state = 0;
                } else {
                  state = -1;
                }
              } else {
                state = 0;
              }
            }
            if (lastUnitStart >= 0 && state >= 0) {
              var _unit = {
                data: array.subarray(lastUnitStart, len),
                type: lastUnitType,
                state
              };
              units.push(_unit);
            }
            if (units.length === 0) {
              var _lastUnit = this.getLastNalUnit(track.samples);
              if (_lastUnit) {
                _lastUnit.data = appendUint8Array(_lastUnit.data, array);
              }
            }
            track.naluState = state;
            return units;
          };
          return AvcVideoParser2;
        }(BaseVideoParser);
        var SampleAesDecrypter = function() {
          function SampleAesDecrypter2(observer, config, keyData) {
            this.keyData = void 0;
            this.decrypter = void 0;
            this.keyData = keyData;
            this.decrypter = new Decrypter(config, {
              removePKCS7Padding: false
            });
          }
          var _proto = SampleAesDecrypter2.prototype;
          _proto.decryptBuffer = function decryptBuffer(encryptedData) {
            return this.decrypter.decrypt(encryptedData, this.keyData.key.buffer, this.keyData.iv.buffer);
          };
          _proto.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback) {
            var _this = this;
            var curUnit = samples[sampleIndex].unit;
            if (curUnit.length <= 16) {
              return;
            }
            var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);
            var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);
            this.decryptBuffer(encryptedBuffer).then(function(decryptedBuffer) {
              var decryptedData = new Uint8Array(decryptedBuffer);
              curUnit.set(decryptedData, 16);
              if (!_this.decrypter.isSync()) {
                _this.decryptAacSamples(samples, sampleIndex + 1, callback);
              }
            });
          };
          _proto.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {
            for (; ; sampleIndex++) {
              if (sampleIndex >= samples.length) {
                callback();
                return;
              }
              if (samples[sampleIndex].unit.length < 32) {
                continue;
              }
              this.decryptAacSample(samples, sampleIndex, callback);
              if (!this.decrypter.isSync()) {
                return;
              }
            }
          };
          _proto.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {
            var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;
            var encryptedData = new Int8Array(encryptedDataLen);
            var outputPos = 0;
            for (var inputPos = 32; inputPos < decodedData.length - 16; inputPos += 160, outputPos += 16) {
              encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);
            }
            return encryptedData;
          };
          _proto.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {
            var uint8DecryptedData = new Uint8Array(decryptedData);
            var inputPos = 0;
            for (var outputPos = 32; outputPos < decodedData.length - 16; outputPos += 160, inputPos += 16) {
              decodedData.set(uint8DecryptedData.subarray(inputPos, inputPos + 16), outputPos);
            }
            return decodedData;
          };
          _proto.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit) {
            var _this2 = this;
            var decodedData = discardEPB(curUnit.data);
            var encryptedData = this.getAvcEncryptedData(decodedData);
            this.decryptBuffer(encryptedData.buffer).then(function(decryptedBuffer) {
              curUnit.data = _this2.getAvcDecryptedUnit(decodedData, decryptedBuffer);
              if (!_this2.decrypter.isSync()) {
                _this2.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);
              }
            });
          };
          _proto.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {
            if (samples instanceof Uint8Array) {
              throw new Error("Cannot decrypt samples of type Uint8Array");
            }
            for (; ; sampleIndex++, unitIndex = 0) {
              if (sampleIndex >= samples.length) {
                callback();
                return;
              }
              var curUnits = samples[sampleIndex].units;
              for (; ; unitIndex++) {
                if (unitIndex >= curUnits.length) {
                  break;
                }
                var curUnit = curUnits[unitIndex];
                if (curUnit.data.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {
                  continue;
                }
                this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit);
                if (!this.decrypter.isSync()) {
                  return;
                }
              }
            }
          };
          return SampleAesDecrypter2;
        }();
        var PACKET_LENGTH = 188;
        var TSDemuxer = function() {
          function TSDemuxer2(observer, config, typeSupported) {
            this.observer = void 0;
            this.config = void 0;
            this.typeSupported = void 0;
            this.sampleAes = null;
            this.pmtParsed = false;
            this.audioCodec = void 0;
            this.videoCodec = void 0;
            this._duration = 0;
            this._pmtId = -1;
            this._videoTrack = void 0;
            this._audioTrack = void 0;
            this._id3Track = void 0;
            this._txtTrack = void 0;
            this.aacOverFlow = null;
            this.remainderData = null;
            this.videoParser = void 0;
            this.observer = observer;
            this.config = config;
            this.typeSupported = typeSupported;
            this.videoParser = new AvcVideoParser();
          }
          TSDemuxer2.probe = function probe2(data) {
            var syncOffset = TSDemuxer2.syncOffset(data);
            if (syncOffset > 0) {
              logger.warn("MPEG2-TS detected but first sync word found @ offset " + syncOffset);
            }
            return syncOffset !== -1;
          };
          TSDemuxer2.syncOffset = function syncOffset(data) {
            var length = data.length;
            var scanwindow = Math.min(PACKET_LENGTH * 5, length - PACKET_LENGTH) + 1;
            var i = 0;
            while (i < scanwindow) {
              var foundPat = false;
              var packetStart = -1;
              var tsPackets = 0;
              for (var j = i; j < length; j += PACKET_LENGTH) {
                if (data[j] === 71 && (length - j === PACKET_LENGTH || data[j + PACKET_LENGTH] === 71)) {
                  tsPackets++;
                  if (packetStart === -1) {
                    packetStart = j;
                    if (packetStart !== 0) {
                      scanwindow = Math.min(packetStart + PACKET_LENGTH * 99, data.length - PACKET_LENGTH) + 1;
                    }
                  }
                  if (!foundPat) {
                    foundPat = parsePID(data, j) === 0;
                  }
                  if (foundPat && tsPackets > 1 && (packetStart === 0 && tsPackets > 2 || j + PACKET_LENGTH > scanwindow)) {
                    return packetStart;
                  }
                } else if (tsPackets) {
                  return -1;
                } else {
                  break;
                }
              }
              i++;
            }
            return -1;
          };
          TSDemuxer2.createTrack = function createTrack(type, duration) {
            return {
              container: type === "video" || type === "audio" ? "video/mp2t" : void 0,
              type,
              id: RemuxerTrackIdConfig[type],
              pid: -1,
              inputTimeScale: 9e4,
              sequenceNumber: 0,
              samples: [],
              dropped: 0,
              duration: type === "audio" ? duration : void 0
            };
          };
          var _proto = TSDemuxer2.prototype;
          _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
            this.pmtParsed = false;
            this._pmtId = -1;
            this._videoTrack = TSDemuxer2.createTrack("video");
            this._audioTrack = TSDemuxer2.createTrack("audio", trackDuration);
            this._id3Track = TSDemuxer2.createTrack("id3");
            this._txtTrack = TSDemuxer2.createTrack("text");
            this._audioTrack.segmentCodec = "aac";
            this.aacOverFlow = null;
            this.remainderData = null;
            this.audioCodec = audioCodec;
            this.videoCodec = videoCodec;
            this._duration = trackDuration;
          };
          _proto.resetTimeStamp = function resetTimeStamp() {
          };
          _proto.resetContiguity = function resetContiguity() {
            var _audioTrack = this._audioTrack, _videoTrack = this._videoTrack, _id3Track = this._id3Track;
            if (_audioTrack) {
              _audioTrack.pesData = null;
            }
            if (_videoTrack) {
              _videoTrack.pesData = null;
            }
            if (_id3Track) {
              _id3Track.pesData = null;
            }
            this.aacOverFlow = null;
            this.remainderData = null;
          };
          _proto.demux = function demux(data, timeOffset, isSampleAes, flush) {
            if (isSampleAes === void 0) {
              isSampleAes = false;
            }
            if (flush === void 0) {
              flush = false;
            }
            if (!isSampleAes) {
              this.sampleAes = null;
            }
            var pes;
            var videoTrack = this._videoTrack;
            var audioTrack = this._audioTrack;
            var id3Track = this._id3Track;
            var textTrack = this._txtTrack;
            var videoPid = videoTrack.pid;
            var videoData = videoTrack.pesData;
            var audioPid = audioTrack.pid;
            var id3Pid = id3Track.pid;
            var audioData = audioTrack.pesData;
            var id3Data = id3Track.pesData;
            var unknownPID = null;
            var pmtParsed = this.pmtParsed;
            var pmtId = this._pmtId;
            var len = data.length;
            if (this.remainderData) {
              data = appendUint8Array(this.remainderData, data);
              len = data.length;
              this.remainderData = null;
            }
            if (len < PACKET_LENGTH && !flush) {
              this.remainderData = data;
              return {
                audioTrack,
                videoTrack,
                id3Track,
                textTrack
              };
            }
            var syncOffset = Math.max(0, TSDemuxer2.syncOffset(data));
            len -= (len - syncOffset) % PACKET_LENGTH;
            if (len < data.byteLength && !flush) {
              this.remainderData = new Uint8Array(data.buffer, len, data.buffer.byteLength - len);
            }
            var tsPacketErrors = 0;
            for (var start = syncOffset; start < len; start += PACKET_LENGTH) {
              if (data[start] === 71) {
                var stt = !!(data[start + 1] & 64);
                var pid = parsePID(data, start);
                var atf = (data[start + 3] & 48) >> 4;
                var offset = void 0;
                if (atf > 1) {
                  offset = start + 5 + data[start + 4];
                  if (offset === start + PACKET_LENGTH) {
                    continue;
                  }
                } else {
                  offset = start + 4;
                }
                switch (pid) {
                  case videoPid:
                    if (stt) {
                      if (videoData && (pes = parsePES(videoData))) {
                        this.videoParser.parseAVCPES(videoTrack, textTrack, pes, false, this._duration);
                      }
                      videoData = {
                        data: [],
                        size: 0
                      };
                    }
                    if (videoData) {
                      videoData.data.push(data.subarray(offset, start + PACKET_LENGTH));
                      videoData.size += start + PACKET_LENGTH - offset;
                    }
                    break;
                  case audioPid:
                    if (stt) {
                      if (audioData && (pes = parsePES(audioData))) {
                        switch (audioTrack.segmentCodec) {
                          case "aac":
                            this.parseAACPES(audioTrack, pes);
                            break;
                          case "mp3":
                            this.parseMPEGPES(audioTrack, pes);
                            break;
                        }
                      }
                      audioData = {
                        data: [],
                        size: 0
                      };
                    }
                    if (audioData) {
                      audioData.data.push(data.subarray(offset, start + PACKET_LENGTH));
                      audioData.size += start + PACKET_LENGTH - offset;
                    }
                    break;
                  case id3Pid:
                    if (stt) {
                      if (id3Data && (pes = parsePES(id3Data))) {
                        this.parseID3PES(id3Track, pes);
                      }
                      id3Data = {
                        data: [],
                        size: 0
                      };
                    }
                    if (id3Data) {
                      id3Data.data.push(data.subarray(offset, start + PACKET_LENGTH));
                      id3Data.size += start + PACKET_LENGTH - offset;
                    }
                    break;
                  case 0:
                    if (stt) {
                      offset += data[offset] + 1;
                    }
                    pmtId = this._pmtId = parsePAT(data, offset);
                    break;
                  case pmtId: {
                    if (stt) {
                      offset += data[offset] + 1;
                    }
                    var parsedPIDs = parsePMT(data, offset, this.typeSupported, isSampleAes, this.observer);
                    videoPid = parsedPIDs.videoPid;
                    if (videoPid > 0) {
                      videoTrack.pid = videoPid;
                      videoTrack.segmentCodec = parsedPIDs.segmentVideoCodec;
                    }
                    audioPid = parsedPIDs.audioPid;
                    if (audioPid > 0) {
                      audioTrack.pid = audioPid;
                      audioTrack.segmentCodec = parsedPIDs.segmentAudioCodec;
                    }
                    id3Pid = parsedPIDs.id3Pid;
                    if (id3Pid > 0) {
                      id3Track.pid = id3Pid;
                    }
                    if (unknownPID !== null && !pmtParsed) {
                      logger.warn("MPEG-TS PMT found at " + start + " after unknown PID '" + unknownPID + "'. Backtracking to sync byte @" + syncOffset + " to parse all TS packets.");
                      unknownPID = null;
                      start = syncOffset - 188;
                    }
                    pmtParsed = this.pmtParsed = true;
                    break;
                  }
                  case 17:
                  case 8191:
                    break;
                  default:
                    unknownPID = pid;
                    break;
                }
              } else {
                tsPacketErrors++;
              }
            }
            if (tsPacketErrors > 0) {
              emitParsingError(this.observer, new Error("Found " + tsPacketErrors + " TS packet/s that do not start with 0x47"));
            }
            videoTrack.pesData = videoData;
            audioTrack.pesData = audioData;
            id3Track.pesData = id3Data;
            var demuxResult = {
              audioTrack,
              videoTrack,
              id3Track,
              textTrack
            };
            if (flush) {
              this.extractRemainingSamples(demuxResult);
            }
            return demuxResult;
          };
          _proto.flush = function flush() {
            var remainderData = this.remainderData;
            this.remainderData = null;
            var result;
            if (remainderData) {
              result = this.demux(remainderData, -1, false, true);
            } else {
              result = {
                videoTrack: this._videoTrack,
                audioTrack: this._audioTrack,
                id3Track: this._id3Track,
                textTrack: this._txtTrack
              };
            }
            this.extractRemainingSamples(result);
            if (this.sampleAes) {
              return this.decrypt(result, this.sampleAes);
            }
            return result;
          };
          _proto.extractRemainingSamples = function extractRemainingSamples(demuxResult) {
            var audioTrack = demuxResult.audioTrack, videoTrack = demuxResult.videoTrack, id3Track = demuxResult.id3Track, textTrack = demuxResult.textTrack;
            var videoData = videoTrack.pesData;
            var audioData = audioTrack.pesData;
            var id3Data = id3Track.pesData;
            var pes;
            if (videoData && (pes = parsePES(videoData))) {
              this.videoParser.parseAVCPES(videoTrack, textTrack, pes, true, this._duration);
              videoTrack.pesData = null;
            } else {
              videoTrack.pesData = videoData;
            }
            if (audioData && (pes = parsePES(audioData))) {
              switch (audioTrack.segmentCodec) {
                case "aac":
                  this.parseAACPES(audioTrack, pes);
                  break;
                case "mp3":
                  this.parseMPEGPES(audioTrack, pes);
                  break;
              }
              audioTrack.pesData = null;
            } else {
              if (audioData != null && audioData.size) {
                logger.log("last AAC PES packet truncated,might overlap between fragments");
              }
              audioTrack.pesData = audioData;
            }
            if (id3Data && (pes = parsePES(id3Data))) {
              this.parseID3PES(id3Track, pes);
              id3Track.pesData = null;
            } else {
              id3Track.pesData = id3Data;
            }
          };
          _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
            var demuxResult = this.demux(data, timeOffset, true, !this.config.progressive);
            var sampleAes = this.sampleAes = new SampleAesDecrypter(this.observer, this.config, keyData);
            return this.decrypt(demuxResult, sampleAes);
          };
          _proto.decrypt = function decrypt(demuxResult, sampleAes) {
            return new Promise(function(resolve) {
              var audioTrack = demuxResult.audioTrack, videoTrack = demuxResult.videoTrack;
              if (audioTrack.samples && audioTrack.segmentCodec === "aac") {
                sampleAes.decryptAacSamples(audioTrack.samples, 0, function() {
                  if (videoTrack.samples) {
                    sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function() {
                      resolve(demuxResult);
                    });
                  } else {
                    resolve(demuxResult);
                  }
                });
              } else if (videoTrack.samples) {
                sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function() {
                  resolve(demuxResult);
                });
              }
            });
          };
          _proto.destroy = function destroy() {
            this._duration = 0;
          };
          _proto.parseAACPES = function parseAACPES(track, pes) {
            var startOffset = 0;
            var aacOverFlow = this.aacOverFlow;
            var data = pes.data;
            if (aacOverFlow) {
              this.aacOverFlow = null;
              var frameMissingBytes = aacOverFlow.missing;
              var sampleLength = aacOverFlow.sample.unit.byteLength;
              if (frameMissingBytes === -1) {
                data = appendUint8Array(aacOverFlow.sample.unit, data);
              } else {
                var frameOverflowBytes = sampleLength - frameMissingBytes;
                aacOverFlow.sample.unit.set(data.subarray(0, frameMissingBytes), frameOverflowBytes);
                track.samples.push(aacOverFlow.sample);
                startOffset = aacOverFlow.missing;
              }
            }
            var offset;
            var len;
            for (offset = startOffset, len = data.length; offset < len - 1; offset++) {
              if (isHeader$1(data, offset)) {
                break;
              }
            }
            if (offset !== startOffset) {
              var reason;
              var recoverable = offset < len - 1;
              if (recoverable) {
                reason = "AAC PES did not start with ADTS header,offset:" + offset;
              } else {
                reason = "No ADTS header found in AAC PES";
              }
              emitParsingError(this.observer, new Error(reason), recoverable);
              if (!recoverable) {
                return;
              }
            }
            initTrackConfig(track, this.observer, data, offset, this.audioCodec);
            var pts;
            if (pes.pts !== void 0) {
              pts = pes.pts;
            } else if (aacOverFlow) {
              var frameDuration = getFrameDuration(track.samplerate);
              pts = aacOverFlow.sample.pts + frameDuration;
            } else {
              logger.warn("[tsdemuxer]: AAC PES unknown PTS");
              return;
            }
            var frameIndex = 0;
            var frame;
            while (offset < len) {
              frame = appendFrame$1(track, data, offset, pts, frameIndex);
              offset += frame.length;
              if (!frame.missing) {
                frameIndex++;
                for (; offset < len - 1; offset++) {
                  if (isHeader$1(data, offset)) {
                    break;
                  }
                }
              } else {
                this.aacOverFlow = frame;
                break;
              }
            }
          };
          _proto.parseMPEGPES = function parseMPEGPES(track, pes) {
            var data = pes.data;
            var length = data.length;
            var frameIndex = 0;
            var offset = 0;
            var pts = pes.pts;
            if (pts === void 0) {
              logger.warn("[tsdemuxer]: MPEG PES unknown PTS");
              return;
            }
            while (offset < length) {
              if (isHeader(data, offset)) {
                var frame = appendFrame(track, data, offset, pts, frameIndex);
                if (frame) {
                  offset += frame.length;
                  frameIndex++;
                } else {
                  break;
                }
              } else {
                offset++;
              }
            }
          };
          _proto.parseAC3PES = function parseAC3PES(track, pes) {
          };
          _proto.parseID3PES = function parseID3PES(id3Track, pes) {
            if (pes.pts === void 0) {
              logger.warn("[tsdemuxer]: ID3 PES unknown PTS");
              return;
            }
            var id3Sample = _extends({}, pes, {
              type: this._videoTrack ? MetadataSchema.emsg : MetadataSchema.audioId3,
              duration: Number.POSITIVE_INFINITY
            });
            id3Track.samples.push(id3Sample);
          };
          return TSDemuxer2;
        }();
        function parsePID(data, offset) {
          return ((data[offset + 1] & 31) << 8) + data[offset + 2];
        }
        function parsePAT(data, offset) {
          return (data[offset + 10] & 31) << 8 | data[offset + 11];
        }
        function parsePMT(data, offset, typeSupported, isSampleAes, observer) {
          var result = {
            audioPid: -1,
            videoPid: -1,
            id3Pid: -1,
            segmentVideoCodec: "avc",
            segmentAudioCodec: "aac"
          };
          var sectionLength = (data[offset + 1] & 15) << 8 | data[offset + 2];
          var tableEnd = offset + 3 + sectionLength - 4;
          var programInfoLength = (data[offset + 10] & 15) << 8 | data[offset + 11];
          offset += 12 + programInfoLength;
          while (offset < tableEnd) {
            var pid = parsePID(data, offset);
            var esInfoLength = (data[offset + 3] & 15) << 8 | data[offset + 4];
            switch (data[offset]) {
              case 207:
                if (!isSampleAes) {
                  logEncryptedSamplesFoundInUnencryptedStream("ADTS AAC");
                  break;
                }
              case 15:
                if (result.audioPid === -1) {
                  result.audioPid = pid;
                }
                break;
              case 21:
                if (result.id3Pid === -1) {
                  result.id3Pid = pid;
                }
                break;
              case 219:
                if (!isSampleAes) {
                  logEncryptedSamplesFoundInUnencryptedStream("H.264");
                  break;
                }
              case 27:
                if (result.videoPid === -1) {
                  result.videoPid = pid;
                  result.segmentVideoCodec = "avc";
                }
                break;
              case 3:
              case 4:
                if (!typeSupported.mpeg && !typeSupported.mp3) {
                  logger.log("MPEG audio found, not supported in this browser");
                } else if (result.audioPid === -1) {
                  result.audioPid = pid;
                  result.segmentAudioCodec = "mp3";
                }
                break;
              case 193:
                if (!isSampleAes) {
                  logEncryptedSamplesFoundInUnencryptedStream("AC-3");
                  break;
                }
              case 129:
                {
                  logger.warn("AC-3 in M2TS support not included in build");
                }
                break;
              case 6:
                if (result.audioPid === -1 && esInfoLength > 0) {
                  var parsePos = offset + 5;
                  var remaining = esInfoLength;
                  while (remaining > 2) {
                    var descriptorId = data[parsePos];
                    switch (descriptorId) {
                      case 106:
                        {
                          logger.warn("AC-3 in M2TS support not included in build");
                        }
                        break;
                    }
                    var descriptorLen = data[parsePos + 1] + 2;
                    parsePos += descriptorLen;
                    remaining -= descriptorLen;
                  }
                }
                break;
              case 194:
              case 135:
                emitParsingError(observer, new Error("Unsupported EC-3 in M2TS found"));
                return result;
              case 36:
                emitParsingError(observer, new Error("Unsupported HEVC in M2TS found"));
                return result;
            }
            offset += esInfoLength + 5;
          }
          return result;
        }
        function emitParsingError(observer, error, levelRetry) {
          logger.warn("parsing error: " + error.message);
          observer.emit(Events.ERROR, Events.ERROR, {
            type: ErrorTypes.MEDIA_ERROR,
            details: ErrorDetails.FRAG_PARSING_ERROR,
            fatal: false,
            levelRetry,
            error,
            reason: error.message
          });
        }
        function logEncryptedSamplesFoundInUnencryptedStream(type) {
          logger.log(type + " with AES-128-CBC encryption found in unencrypted stream");
        }
        function parsePES(stream) {
          var i = 0;
          var frag;
          var pesLen;
          var pesHdrLen;
          var pesPts;
          var pesDts;
          var data = stream.data;
          if (!stream || stream.size === 0) {
            return null;
          }
          while (data[0].length < 19 && data.length > 1) {
            data[0] = appendUint8Array(data[0], data[1]);
            data.splice(1, 1);
          }
          frag = data[0];
          var pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];
          if (pesPrefix === 1) {
            pesLen = (frag[4] << 8) + frag[5];
            if (pesLen && pesLen > stream.size - 6) {
              return null;
            }
            var pesFlags = frag[7];
            if (pesFlags & 192) {
              pesPts = (frag[9] & 14) * 536870912 + // 1 << 29
              (frag[10] & 255) * 4194304 + // 1 << 22
              (frag[11] & 254) * 16384 + // 1 << 14
              (frag[12] & 255) * 128 + // 1 << 7
              (frag[13] & 254) / 2;
              if (pesFlags & 64) {
                pesDts = (frag[14] & 14) * 536870912 + // 1 << 29
                (frag[15] & 255) * 4194304 + // 1 << 22
                (frag[16] & 254) * 16384 + // 1 << 14
                (frag[17] & 255) * 128 + // 1 << 7
                (frag[18] & 254) / 2;
                if (pesPts - pesDts > 60 * 9e4) {
                  logger.warn(Math.round((pesPts - pesDts) / 9e4) + "s delta between PTS and DTS, align them");
                  pesPts = pesDts;
                }
              } else {
                pesDts = pesPts;
              }
            }
            pesHdrLen = frag[8];
            var payloadStartOffset = pesHdrLen + 9;
            if (stream.size <= payloadStartOffset) {
              return null;
            }
            stream.size -= payloadStartOffset;
            var pesData = new Uint8Array(stream.size);
            for (var j = 0, dataLen = data.length; j < dataLen; j++) {
              frag = data[j];
              var len = frag.byteLength;
              if (payloadStartOffset) {
                if (payloadStartOffset > len) {
                  payloadStartOffset -= len;
                  continue;
                } else {
                  frag = frag.subarray(payloadStartOffset);
                  len -= payloadStartOffset;
                  payloadStartOffset = 0;
                }
              }
              pesData.set(frag, i);
              i += len;
            }
            if (pesLen) {
              pesLen -= pesHdrLen + 3;
            }
            return {
              data: pesData,
              pts: pesPts,
              dts: pesDts,
              len: pesLen
            };
          }
          return null;
        }
        var MP3Demuxer = function(_BaseAudioDemuxer) {
          _inheritsLoose(MP3Demuxer2, _BaseAudioDemuxer);
          function MP3Demuxer2() {
            return _BaseAudioDemuxer.apply(this, arguments) || this;
          }
          var _proto = MP3Demuxer2.prototype;
          _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
            _BaseAudioDemuxer.prototype.resetInitSegment.call(this, initSegment, audioCodec, videoCodec, trackDuration);
            this._audioTrack = {
              container: "audio/mpeg",
              type: "audio",
              id: 2,
              pid: -1,
              sequenceNumber: 0,
              segmentCodec: "mp3",
              samples: [],
              manifestCodec: audioCodec,
              duration: trackDuration,
              inputTimeScale: 9e4,
              dropped: 0
            };
          };
          MP3Demuxer2.probe = function probe$12(data) {
            if (!data) {
              return false;
            }
            var id3Data = getID3Data(data, 0);
            var offset = (id3Data == null ? void 0 : id3Data.length) || 0;
            if (id3Data && data[offset] === 11 && data[offset + 1] === 119 && getTimeStamp(id3Data) !== void 0 && // check the bsid to confirm ac-3 or ec-3 (not mp3)
            getAudioBSID(data, offset) <= 16) {
              return false;
            }
            for (var length = data.length; offset < length; offset++) {
              if (probe(data, offset)) {
                logger.log("MPEG Audio sync word found !");
                return true;
              }
            }
            return false;
          };
          _proto.canParse = function canParse$12(data, offset) {
            return canParse(data, offset);
          };
          _proto.appendFrame = function appendFrame$12(track, data, offset) {
            if (this.basePTS === null) {
              return;
            }
            return appendFrame(track, data, offset, this.basePTS, this.frameIndex);
          };
          return MP3Demuxer2;
        }(BaseAudioDemuxer);
        var AAC = function() {
          function AAC2() {
          }
          AAC2.getSilentFrame = function getSilentFrame(codec, channelCount) {
            switch (codec) {
              case "mp4a.40.2":
                if (channelCount === 1) {
                  return new Uint8Array([0, 200, 0, 128, 35, 128]);
                } else if (channelCount === 2) {
                  return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                } else if (channelCount === 3) {
                  return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                } else if (channelCount === 4) {
                  return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                } else if (channelCount === 5) {
                  return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                } else if (channelCount === 6) {
                  return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
                }
                break;
              default:
                if (channelCount === 1) {
                  return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                } else if (channelCount === 2) {
                  return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                } else if (channelCount === 3) {
                  return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                }
                break;
            }
            return void 0;
          };
          return AAC2;
        }();
        var UINT32_MAX = Math.pow(2, 32) - 1;
        var MP4 = function() {
          function MP42() {
          }
          MP42.init = function init() {
            MP42.types = {
              avc1: [],
              // codingname
              avcC: [],
              btrt: [],
              dinf: [],
              dref: [],
              esds: [],
              ftyp: [],
              hdlr: [],
              mdat: [],
              mdhd: [],
              mdia: [],
              mfhd: [],
              minf: [],
              moof: [],
              moov: [],
              mp4a: [],
              ".mp3": [],
              dac3: [],
              "ac-3": [],
              mvex: [],
              mvhd: [],
              pasp: [],
              sdtp: [],
              stbl: [],
              stco: [],
              stsc: [],
              stsd: [],
              stsz: [],
              stts: [],
              tfdt: [],
              tfhd: [],
              traf: [],
              trak: [],
              trun: [],
              trex: [],
              tkhd: [],
              vmhd: [],
              smhd: []
            };
            var i;
            for (i in MP42.types) {
              if (MP42.types.hasOwnProperty(i)) {
                MP42.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
              }
            }
            var videoHdlr = new Uint8Array([
              0,
              // version 0
              0,
              0,
              0,
              // flags
              0,
              0,
              0,
              0,
              // pre_defined
              118,
              105,
              100,
              101,
              // handler_type: 'vide'
              0,
              0,
              0,
              0,
              // reserved
              0,
              0,
              0,
              0,
              // reserved
              0,
              0,
              0,
              0,
              // reserved
              86,
              105,
              100,
              101,
              111,
              72,
              97,
              110,
              100,
              108,
              101,
              114,
              0
              // name: 'VideoHandler'
            ]);
            var audioHdlr = new Uint8Array([
              0,
              // version 0
              0,
              0,
              0,
              // flags
              0,
              0,
              0,
              0,
              // pre_defined
              115,
              111,
              117,
              110,
              // handler_type: 'soun'
              0,
              0,
              0,
              0,
              // reserved
              0,
              0,
              0,
              0,
              // reserved
              0,
              0,
              0,
              0,
              // reserved
              83,
              111,
              117,
              110,
              100,
              72,
              97,
              110,
              100,
              108,
              101,
              114,
              0
              // name: 'SoundHandler'
            ]);
            MP42.HDLR_TYPES = {
              video: videoHdlr,
              audio: audioHdlr
            };
            var dref = new Uint8Array([
              0,
              // version 0
              0,
              0,
              0,
              // flags
              0,
              0,
              0,
              1,
              // entry_count
              0,
              0,
              0,
              12,
              // entry_size
              117,
              114,
              108,
              32,
              // 'url' type
              0,
              // version 0
              0,
              0,
              1
              // entry_flags
            ]);
            var stco = new Uint8Array([
              0,
              // version
              0,
              0,
              0,
              // flags
              0,
              0,
              0,
              0
              // entry_count
            ]);
            MP42.STTS = MP42.STSC = MP42.STCO = stco;
            MP42.STSZ = new Uint8Array([
              0,
              // version
              0,
              0,
              0,
              // flags
              0,
              0,
              0,
              0,
              // sample_size
              0,
              0,
              0,
              0
              // sample_count
            ]);
            MP42.VMHD = new Uint8Array([
              0,
              // version
              0,
              0,
              1,
              // flags
              0,
              0,
              // graphicsmode
              0,
              0,
              0,
              0,
              0,
              0
              // opcolor
            ]);
            MP42.SMHD = new Uint8Array([
              0,
              // version
              0,
              0,
              0,
              // flags
              0,
              0,
              // balance
              0,
              0
              // reserved
            ]);
            MP42.STSD = new Uint8Array([
              0,
              // version 0
              0,
              0,
              0,
              // flags
              0,
              0,
              0,
              1
            ]);
            var majorBrand = new Uint8Array([105, 115, 111, 109]);
            var avc1Brand = new Uint8Array([97, 118, 99, 49]);
            var minorVersion = new Uint8Array([0, 0, 0, 1]);
            MP42.FTYP = MP42.box(MP42.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);
            MP42.DINF = MP42.box(MP42.types.dinf, MP42.box(MP42.types.dref, dref));
          };
          MP42.box = function box(type) {
            var size = 8;
            for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              payload[_key - 1] = arguments[_key];
            }
            var i = payload.length;
            var len = i;
            while (i--) {
              size += payload[i].byteLength;
            }
            var result = new Uint8Array(size);
            result[0] = size >> 24 & 255;
            result[1] = size >> 16 & 255;
            result[2] = size >> 8 & 255;
            result[3] = size & 255;
            result.set(type, 4);
            for (i = 0, size = 8; i < len; i++) {
              result.set(payload[i], size);
              size += payload[i].byteLength;
            }
            return result;
          };
          MP42.hdlr = function hdlr(type) {
            return MP42.box(MP42.types.hdlr, MP42.HDLR_TYPES[type]);
          };
          MP42.mdat = function mdat(data) {
            return MP42.box(MP42.types.mdat, data);
          };
          MP42.mdhd = function mdhd(timescale, duration) {
            duration *= timescale;
            var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
            var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
            return MP42.box(MP42.types.mdhd, new Uint8Array([
              1,
              // version 1
              0,
              0,
              0,
              // flags
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              2,
              // creation_time
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              3,
              // modification_time
              timescale >> 24 & 255,
              timescale >> 16 & 255,
              timescale >> 8 & 255,
              timescale & 255,
              // timescale
              upperWordDuration >> 24,
              upperWordDuration >> 16 & 255,
              upperWordDuration >> 8 & 255,
              upperWordDuration & 255,
              lowerWordDuration >> 24,
              lowerWordDuration >> 16 & 255,
              lowerWordDuration >> 8 & 255,
              lowerWordDuration & 255,
              85,
              196,
              // 'und' language (undetermined)
              0,
              0
            ]));
          };
          MP42.mdia = function mdia(track) {
            return MP42.box(MP42.types.mdia, MP42.mdhd(track.timescale, track.duration), MP42.hdlr(track.type), MP42.minf(track));
          };
          MP42.mfhd = function mfhd(sequenceNumber) {
            return MP42.box(MP42.types.mfhd, new Uint8Array([
              0,
              0,
              0,
              0,
              // flags
              sequenceNumber >> 24,
              sequenceNumber >> 16 & 255,
              sequenceNumber >> 8 & 255,
              sequenceNumber & 255
              // sequence_number
            ]));
          };
          MP42.minf = function minf(track) {
            if (track.type === "audio") {
              return MP42.box(MP42.types.minf, MP42.box(MP42.types.smhd, MP42.SMHD), MP42.DINF, MP42.stbl(track));
            } else {
              return MP42.box(MP42.types.minf, MP42.box(MP42.types.vmhd, MP42.VMHD), MP42.DINF, MP42.stbl(track));
            }
          };
          MP42.moof = function moof(sn, baseMediaDecodeTime, track) {
            return MP42.box(MP42.types.moof, MP42.mfhd(sn), MP42.traf(track, baseMediaDecodeTime));
          };
          MP42.moov = function moov(tracks) {
            var i = tracks.length;
            var boxes = [];
            while (i--) {
              boxes[i] = MP42.trak(tracks[i]);
            }
            return MP42.box.apply(null, [MP42.types.moov, MP42.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP42.mvex(tracks)));
          };
          MP42.mvex = function mvex(tracks) {
            var i = tracks.length;
            var boxes = [];
            while (i--) {
              boxes[i] = MP42.trex(tracks[i]);
            }
            return MP42.box.apply(null, [MP42.types.mvex].concat(boxes));
          };
          MP42.mvhd = function mvhd(timescale, duration) {
            duration *= timescale;
            var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
            var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
            var bytes = new Uint8Array([
              1,
              // version 1
              0,
              0,
              0,
              // flags
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              2,
              // creation_time
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              3,
              // modification_time
              timescale >> 24 & 255,
              timescale >> 16 & 255,
              timescale >> 8 & 255,
              timescale & 255,
              // timescale
              upperWordDuration >> 24,
              upperWordDuration >> 16 & 255,
              upperWordDuration >> 8 & 255,
              upperWordDuration & 255,
              lowerWordDuration >> 24,
              lowerWordDuration >> 16 & 255,
              lowerWordDuration >> 8 & 255,
              lowerWordDuration & 255,
              0,
              1,
              0,
              0,
              // 1.0 rate
              1,
              0,
              // 1.0 volume
              0,
              0,
              // reserved
              0,
              0,
              0,
              0,
              // reserved
              0,
              0,
              0,
              0,
              // reserved
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              64,
              0,
              0,
              0,
              // transformation: unity matrix
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              // pre_defined
              255,
              255,
              255,
              255
              // next_track_ID
            ]);
            return MP42.box(MP42.types.mvhd, bytes);
          };
          MP42.sdtp = function sdtp(track) {
            var samples = track.samples || [];
            var bytes = new Uint8Array(4 + samples.length);
            var i;
            var flags;
            for (i = 0; i < samples.length; i++) {
              flags = samples[i].flags;
              bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
            }
            return MP42.box(MP42.types.sdtp, bytes);
          };
          MP42.stbl = function stbl(track) {
            return MP42.box(MP42.types.stbl, MP42.stsd(track), MP42.box(MP42.types.stts, MP42.STTS), MP42.box(MP42.types.stsc, MP42.STSC), MP42.box(MP42.types.stsz, MP42.STSZ), MP42.box(MP42.types.stco, MP42.STCO));
          };
          MP42.avc1 = function avc1(track) {
            var sps = [];
            var pps = [];
            var i;
            var data;
            var len;
            for (i = 0; i < track.sps.length; i++) {
              data = track.sps[i];
              len = data.byteLength;
              sps.push(len >>> 8 & 255);
              sps.push(len & 255);
              sps = sps.concat(Array.prototype.slice.call(data));
            }
            for (i = 0; i < track.pps.length; i++) {
              data = track.pps[i];
              len = data.byteLength;
              pps.push(len >>> 8 & 255);
              pps.push(len & 255);
              pps = pps.concat(Array.prototype.slice.call(data));
            }
            var avcc = MP42.box(MP42.types.avcC, new Uint8Array([
              1,
              // version
              sps[3],
              // profile
              sps[4],
              // profile compat
              sps[5],
              // level
              252 | 3,
              // lengthSizeMinusOne, hard-coded to 4 bytes
              224 | track.sps.length
              // 3bit reserved (111) + numOfSequenceParameterSets
            ].concat(sps).concat([
              track.pps.length
              // numOfPictureParameterSets
            ]).concat(pps)));
            var width = track.width;
            var height = track.height;
            var hSpacing = track.pixelRatio[0];
            var vSpacing = track.pixelRatio[1];
            return MP42.box(
              MP42.types.avc1,
              new Uint8Array([
                0,
                0,
                0,
                // reserved
                0,
                0,
                0,
                // reserved
                0,
                1,
                // data_reference_index
                0,
                0,
                // pre_defined
                0,
                0,
                // reserved
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                // pre_defined
                width >> 8 & 255,
                width & 255,
                // width
                height >> 8 & 255,
                height & 255,
                // height
                0,
                72,
                0,
                0,
                // horizresolution
                0,
                72,
                0,
                0,
                // vertresolution
                0,
                0,
                0,
                0,
                // reserved
                0,
                1,
                // frame_count
                18,
                100,
                97,
                105,
                108,
                // dailymotion/hls.js
                121,
                109,
                111,
                116,
                105,
                111,
                110,
                47,
                104,
                108,
                115,
                46,
                106,
                115,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                // compressorname
                0,
                24,
                // depth = 24
                17,
                17
              ]),
              // pre_defined = -1
              avcc,
              MP42.box(MP42.types.btrt, new Uint8Array([
                0,
                28,
                156,
                128,
                // bufferSizeDB
                0,
                45,
                198,
                192,
                // maxBitrate
                0,
                45,
                198,
                192
              ])),
              // avgBitrate
              MP42.box(MP42.types.pasp, new Uint8Array([
                hSpacing >> 24,
                // hSpacing
                hSpacing >> 16 & 255,
                hSpacing >> 8 & 255,
                hSpacing & 255,
                vSpacing >> 24,
                // vSpacing
                vSpacing >> 16 & 255,
                vSpacing >> 8 & 255,
                vSpacing & 255
              ]))
            );
          };
          MP42.esds = function esds(track) {
            var configlen = track.config.length;
            return new Uint8Array([
              0,
              // version 0
              0,
              0,
              0,
              // flags
              3,
              // descriptor_type
              23 + configlen,
              // length
              0,
              1,
              // es_id
              0,
              // stream_priority
              4,
              // descriptor_type
              15 + configlen,
              // length
              64,
              // codec : mpeg4_audio
              21,
              // stream_type
              0,
              0,
              0,
              // buffer_size
              0,
              0,
              0,
              0,
              // maxBitrate
              0,
              0,
              0,
              0,
              // avgBitrate
              5
              // descriptor_type
            ].concat([configlen]).concat(track.config).concat([6, 1, 2]));
          };
          MP42.audioStsd = function audioStsd(track) {
            var samplerate = track.samplerate;
            return new Uint8Array([
              0,
              0,
              0,
              // reserved
              0,
              0,
              0,
              // reserved
              0,
              1,
              // data_reference_index
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              // reserved
              0,
              track.channelCount,
              // channelcount
              0,
              16,
              // sampleSize:16bits
              0,
              0,
              0,
              0,
              // reserved2
              samplerate >> 8 & 255,
              samplerate & 255,
              //
              0,
              0
            ]);
          };
          MP42.mp4a = function mp4a(track) {
            return MP42.box(MP42.types.mp4a, MP42.audioStsd(track), MP42.box(MP42.types.esds, MP42.esds(track)));
          };
          MP42.mp3 = function mp3(track) {
            return MP42.box(MP42.types[".mp3"], MP42.audioStsd(track));
          };
          MP42.ac3 = function ac3(track) {
            return MP42.box(MP42.types["ac-3"], MP42.audioStsd(track), MP42.box(MP42.types.dac3, track.config));
          };
          MP42.stsd = function stsd(track) {
            if (track.type === "audio") {
              if (track.segmentCodec === "mp3" && track.codec === "mp3") {
                return MP42.box(MP42.types.stsd, MP42.STSD, MP42.mp3(track));
              }
              if (track.segmentCodec === "ac3") {
                return MP42.box(MP42.types.stsd, MP42.STSD, MP42.ac3(track));
              }
              return MP42.box(MP42.types.stsd, MP42.STSD, MP42.mp4a(track));
            } else {
              return MP42.box(MP42.types.stsd, MP42.STSD, MP42.avc1(track));
            }
          };
          MP42.tkhd = function tkhd(track) {
            var id = track.id;
            var duration = track.duration * track.timescale;
            var width = track.width;
            var height = track.height;
            var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
            var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
            return MP42.box(MP42.types.tkhd, new Uint8Array([
              1,
              // version 1
              0,
              0,
              7,
              // flags
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              2,
              // creation_time
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              3,
              // modification_time
              id >> 24 & 255,
              id >> 16 & 255,
              id >> 8 & 255,
              id & 255,
              // track_ID
              0,
              0,
              0,
              0,
              // reserved
              upperWordDuration >> 24,
              upperWordDuration >> 16 & 255,
              upperWordDuration >> 8 & 255,
              upperWordDuration & 255,
              lowerWordDuration >> 24,
              lowerWordDuration >> 16 & 255,
              lowerWordDuration >> 8 & 255,
              lowerWordDuration & 255,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              // reserved
              0,
              0,
              // layer
              0,
              0,
              // alternate_group
              0,
              0,
              // non-audio track volume
              0,
              0,
              // reserved
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              64,
              0,
              0,
              0,
              // transformation: unity matrix
              width >> 8 & 255,
              width & 255,
              0,
              0,
              // width
              height >> 8 & 255,
              height & 255,
              0,
              0
              // height
            ]));
          };
          MP42.traf = function traf(track, baseMediaDecodeTime) {
            var sampleDependencyTable = MP42.sdtp(track);
            var id = track.id;
            var upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
            var lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
            return MP42.box(
              MP42.types.traf,
              MP42.box(MP42.types.tfhd, new Uint8Array([
                0,
                // version 0
                0,
                0,
                0,
                // flags
                id >> 24,
                id >> 16 & 255,
                id >> 8 & 255,
                id & 255
                // track_ID
              ])),
              MP42.box(MP42.types.tfdt, new Uint8Array([
                1,
                // version 1
                0,
                0,
                0,
                // flags
                upperWordBaseMediaDecodeTime >> 24,
                upperWordBaseMediaDecodeTime >> 16 & 255,
                upperWordBaseMediaDecodeTime >> 8 & 255,
                upperWordBaseMediaDecodeTime & 255,
                lowerWordBaseMediaDecodeTime >> 24,
                lowerWordBaseMediaDecodeTime >> 16 & 255,
                lowerWordBaseMediaDecodeTime >> 8 & 255,
                lowerWordBaseMediaDecodeTime & 255
              ])),
              MP42.trun(track, sampleDependencyTable.length + 16 + // tfhd
              20 + // tfdt
              8 + // traf header
              16 + // mfhd
              8 + // moof header
              8),
              // mdat header
              sampleDependencyTable
            );
          };
          MP42.trak = function trak(track) {
            track.duration = track.duration || 4294967295;
            return MP42.box(MP42.types.trak, MP42.tkhd(track), MP42.mdia(track));
          };
          MP42.trex = function trex(track) {
            var id = track.id;
            return MP42.box(MP42.types.trex, new Uint8Array([
              0,
              // version 0
              0,
              0,
              0,
              // flags
              id >> 24,
              id >> 16 & 255,
              id >> 8 & 255,
              id & 255,
              // track_ID
              0,
              0,
              0,
              1,
              // default_sample_description_index
              0,
              0,
              0,
              0,
              // default_sample_duration
              0,
              0,
              0,
              0,
              // default_sample_size
              0,
              1,
              0,
              1
              // default_sample_flags
            ]));
          };
          MP42.trun = function trun(track, offset) {
            var samples = track.samples || [];
            var len = samples.length;
            var arraylen = 12 + 16 * len;
            var array = new Uint8Array(arraylen);
            var i;
            var sample;
            var duration;
            var size;
            var flags;
            var cts;
            offset += 8 + arraylen;
            array.set([
              track.type === "video" ? 1 : 0,
              // version 1 for video with signed-int sample_composition_time_offset
              0,
              15,
              1,
              // flags
              len >>> 24 & 255,
              len >>> 16 & 255,
              len >>> 8 & 255,
              len & 255,
              // sample_count
              offset >>> 24 & 255,
              offset >>> 16 & 255,
              offset >>> 8 & 255,
              offset & 255
              // data_offset
            ], 0);
            for (i = 0; i < len; i++) {
              sample = samples[i];
              duration = sample.duration;
              size = sample.size;
              flags = sample.flags;
              cts = sample.cts;
              array.set([
                duration >>> 24 & 255,
                duration >>> 16 & 255,
                duration >>> 8 & 255,
                duration & 255,
                // sample_duration
                size >>> 24 & 255,
                size >>> 16 & 255,
                size >>> 8 & 255,
                size & 255,
                // sample_size
                flags.isLeading << 2 | flags.dependsOn,
                flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync,
                flags.degradPrio & 240 << 8,
                flags.degradPrio & 15,
                // sample_flags
                cts >>> 24 & 255,
                cts >>> 16 & 255,
                cts >>> 8 & 255,
                cts & 255
                // sample_composition_time_offset
              ], 12 + 16 * i);
            }
            return MP42.box(MP42.types.trun, array);
          };
          MP42.initSegment = function initSegment(tracks) {
            if (!MP42.types) {
              MP42.init();
            }
            var movie = MP42.moov(tracks);
            var result = appendUint8Array(MP42.FTYP, movie);
            return result;
          };
          return MP42;
        }();
        MP4.types = void 0;
        MP4.HDLR_TYPES = void 0;
        MP4.STTS = void 0;
        MP4.STSC = void 0;
        MP4.STCO = void 0;
        MP4.STSZ = void 0;
        MP4.VMHD = void 0;
        MP4.SMHD = void 0;
        MP4.STSD = void 0;
        MP4.FTYP = void 0;
        MP4.DINF = void 0;
        var MPEG_TS_CLOCK_FREQ_HZ = 9e4;
        function toTimescaleFromBase(baseTime, destScale, srcBase, round) {
          if (srcBase === void 0) {
            srcBase = 1;
          }
          if (round === void 0) {
            round = false;
          }
          var result = baseTime * destScale * srcBase;
          return round ? Math.round(result) : result;
        }
        function toMsFromMpegTsClock(baseTime, round) {
          if (round === void 0) {
            round = false;
          }
          return toTimescaleFromBase(baseTime, 1e3, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);
        }
        var MAX_SILENT_FRAME_DURATION = 10 * 1e3;
        var AAC_SAMPLES_PER_FRAME = 1024;
        var MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;
        var AC3_SAMPLES_PER_FRAME = 1536;
        var chromeVersion = null;
        var safariWebkitVersion = null;
        var MP4Remuxer = function() {
          function MP4Remuxer2(observer, config, typeSupported, vendor) {
            this.observer = void 0;
            this.config = void 0;
            this.typeSupported = void 0;
            this.ISGenerated = false;
            this._initPTS = null;
            this._initDTS = null;
            this.nextAvcDts = null;
            this.nextAudioPts = null;
            this.videoSampleDuration = null;
            this.isAudioContiguous = false;
            this.isVideoContiguous = false;
            this.videoTrackConfig = void 0;
            this.observer = observer;
            this.config = config;
            this.typeSupported = typeSupported;
            this.ISGenerated = false;
            if (chromeVersion === null) {
              var userAgent = navigator.userAgent || "";
              var result = userAgent.match(/Chrome\/(\d+)/i);
              chromeVersion = result ? parseInt(result[1]) : 0;
            }
            if (safariWebkitVersion === null) {
              var _result = navigator.userAgent.match(/Safari\/(\d+)/i);
              safariWebkitVersion = _result ? parseInt(_result[1]) : 0;
            }
          }
          var _proto = MP4Remuxer2.prototype;
          _proto.destroy = function destroy() {
            this.config = this.videoTrackConfig = this._initPTS = this._initDTS = null;
          };
          _proto.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {
            logger.log("[mp4-remuxer]: initPTS & initDTS reset");
            this._initPTS = this._initDTS = defaultTimeStamp;
          };
          _proto.resetNextTimestamp = function resetNextTimestamp() {
            logger.log("[mp4-remuxer]: reset next timestamp");
            this.isVideoContiguous = false;
            this.isAudioContiguous = false;
          };
          _proto.resetInitSegment = function resetInitSegment() {
            logger.log("[mp4-remuxer]: ISGenerated flag reset");
            this.ISGenerated = false;
            this.videoTrackConfig = void 0;
          };
          _proto.getVideoStartPts = function getVideoStartPts(videoSamples) {
            var rolloverDetected = false;
            var firstPts = videoSamples[0].pts;
            var startPTS = videoSamples.reduce(function(minPTS, sample) {
              var pts = sample.pts;
              var delta = pts - minPTS;
              if (delta < -4294967296) {
                rolloverDetected = true;
                pts = normalizePts(pts, firstPts);
                delta = pts - minPTS;
              }
              if (delta > 0) {
                return minPTS;
              }
              return pts;
            }, firstPts);
            if (rolloverDetected) {
              logger.debug("PTS rollover detected");
            }
            return startPTS;
          };
          _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, flush, playlistType) {
            var video;
            var audio;
            var initSegment;
            var text;
            var id3;
            var independent;
            var audioTimeOffset = timeOffset;
            var videoTimeOffset = timeOffset;
            var hasAudio = audioTrack.pid > -1;
            var hasVideo = videoTrack.pid > -1;
            var length = videoTrack.samples.length;
            var enoughAudioSamples = audioTrack.samples.length > 0;
            var enoughVideoSamples = flush && length > 0 || length > 1;
            var canRemuxAvc = (!hasAudio || enoughAudioSamples) && (!hasVideo || enoughVideoSamples) || this.ISGenerated || flush;
            if (canRemuxAvc) {
              if (this.ISGenerated) {
                var _videoTrack$pixelRati, _config$pixelRatio, _videoTrack$pixelRati2, _config$pixelRatio2;
                var config = this.videoTrackConfig;
                if (config && (videoTrack.width !== config.width || videoTrack.height !== config.height || ((_videoTrack$pixelRati = videoTrack.pixelRatio) == null ? void 0 : _videoTrack$pixelRati[0]) !== ((_config$pixelRatio = config.pixelRatio) == null ? void 0 : _config$pixelRatio[0]) || ((_videoTrack$pixelRati2 = videoTrack.pixelRatio) == null ? void 0 : _videoTrack$pixelRati2[1]) !== ((_config$pixelRatio2 = config.pixelRatio) == null ? void 0 : _config$pixelRatio2[1]))) {
                  this.resetInitSegment();
                }
              } else {
                initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);
              }
              var isVideoContiguous = this.isVideoContiguous;
              var firstKeyFrameIndex = -1;
              var firstKeyFramePTS;
              if (enoughVideoSamples) {
                firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);
                if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {
                  independent = true;
                  if (firstKeyFrameIndex > 0) {
                    logger.warn("[mp4-remuxer]: Dropped " + firstKeyFrameIndex + " out of " + length + " video samples due to a missing keyframe");
                    var startPTS = this.getVideoStartPts(videoTrack.samples);
                    videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);
                    videoTrack.dropped += firstKeyFrameIndex;
                    videoTimeOffset += (videoTrack.samples[0].pts - startPTS) / videoTrack.inputTimeScale;
                    firstKeyFramePTS = videoTimeOffset;
                  } else if (firstKeyFrameIndex === -1) {
                    logger.warn("[mp4-remuxer]: No keyframe found out of " + length + " video samples");
                    independent = false;
                  }
                }
              }
              if (this.ISGenerated) {
                if (enoughAudioSamples && enoughVideoSamples) {
                  var _startPTS = this.getVideoStartPts(videoTrack.samples);
                  var tsDelta = normalizePts(audioTrack.samples[0].pts, _startPTS) - _startPTS;
                  var audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;
                  audioTimeOffset += Math.max(0, audiovideoTimestampDelta);
                  videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);
                }
                if (enoughAudioSamples) {
                  if (!audioTrack.samplerate) {
                    logger.warn("[mp4-remuxer]: regenerate InitSegment as audio detected");
                    initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);
                  }
                  audio = this.remuxAudio(audioTrack, audioTimeOffset, this.isAudioContiguous, accurateTimeOffset, hasVideo || enoughVideoSamples || playlistType === PlaylistLevelType.AUDIO ? videoTimeOffset : void 0);
                  if (enoughVideoSamples) {
                    var audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0;
                    if (!videoTrack.inputTimeScale) {
                      logger.warn("[mp4-remuxer]: regenerate InitSegment as video detected");
                      initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);
                    }
                    video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, audioTrackLength);
                  }
                } else if (enoughVideoSamples) {
                  video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, 0);
                }
                if (video) {
                  video.firstKeyFrame = firstKeyFrameIndex;
                  video.independent = firstKeyFrameIndex !== -1;
                  video.firstKeyFramePTS = firstKeyFramePTS;
                }
              }
            }
            if (this.ISGenerated && this._initPTS && this._initDTS) {
              if (id3Track.samples.length) {
                id3 = flushTextTrackMetadataCueSamples(id3Track, timeOffset, this._initPTS, this._initDTS);
              }
              if (textTrack.samples.length) {
                text = flushTextTrackUserdataCueSamples(textTrack, timeOffset, this._initPTS);
              }
            }
            return {
              audio,
              video,
              initSegment,
              independent,
              text,
              id3
            };
          };
          _proto.generateIS = function generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset) {
            var audioSamples = audioTrack.samples;
            var videoSamples = videoTrack.samples;
            var typeSupported = this.typeSupported;
            var tracks = {};
            var _initPTS = this._initPTS;
            var computePTSDTS = !_initPTS || accurateTimeOffset;
            var container = "audio/mp4";
            var initPTS;
            var initDTS;
            var timescale;
            if (computePTSDTS) {
              initPTS = initDTS = Infinity;
            }
            if (audioTrack.config && audioSamples.length) {
              audioTrack.timescale = audioTrack.samplerate;
              switch (audioTrack.segmentCodec) {
                case "mp3":
                  if (typeSupported.mpeg) {
                    container = "audio/mpeg";
                    audioTrack.codec = "";
                  } else if (typeSupported.mp3) {
                    audioTrack.codec = "mp3";
                  }
                  break;
                case "ac3":
                  audioTrack.codec = "ac-3";
                  break;
              }
              tracks.audio = {
                id: "audio",
                container,
                codec: audioTrack.codec,
                initSegment: audioTrack.segmentCodec === "mp3" && typeSupported.mpeg ? new Uint8Array(0) : MP4.initSegment([audioTrack]),
                metadata: {
                  channelCount: audioTrack.channelCount
                }
              };
              if (computePTSDTS) {
                timescale = audioTrack.inputTimeScale;
                if (!_initPTS || timescale !== _initPTS.timescale) {
                  initPTS = initDTS = audioSamples[0].pts - Math.round(timescale * timeOffset);
                } else {
                  computePTSDTS = false;
                }
              }
            }
            if (videoTrack.sps && videoTrack.pps && videoSamples.length) {
              videoTrack.timescale = videoTrack.inputTimeScale;
              tracks.video = {
                id: "main",
                container: "video/mp4",
                codec: videoTrack.codec,
                initSegment: MP4.initSegment([videoTrack]),
                metadata: {
                  width: videoTrack.width,
                  height: videoTrack.height
                }
              };
              if (computePTSDTS) {
                timescale = videoTrack.inputTimeScale;
                if (!_initPTS || timescale !== _initPTS.timescale) {
                  var startPTS = this.getVideoStartPts(videoSamples);
                  var startOffset = Math.round(timescale * timeOffset);
                  initDTS = Math.min(initDTS, normalizePts(videoSamples[0].dts, startPTS) - startOffset);
                  initPTS = Math.min(initPTS, startPTS - startOffset);
                } else {
                  computePTSDTS = false;
                }
              }
              this.videoTrackConfig = {
                width: videoTrack.width,
                height: videoTrack.height,
                pixelRatio: videoTrack.pixelRatio
              };
            }
            if (Object.keys(tracks).length) {
              this.ISGenerated = true;
              if (computePTSDTS) {
                this._initPTS = {
                  baseTime: initPTS,
                  timescale
                };
                this._initDTS = {
                  baseTime: initDTS,
                  timescale
                };
              } else {
                initPTS = timescale = void 0;
              }
              return {
                tracks,
                initPTS,
                timescale
              };
            }
          };
          _proto.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength) {
            var timeScale = track.inputTimeScale;
            var inputSamples = track.samples;
            var outputSamples = [];
            var nbSamples = inputSamples.length;
            var initPTS = this._initPTS;
            var nextAvcDts = this.nextAvcDts;
            var offset = 8;
            var mp4SampleDuration = this.videoSampleDuration;
            var firstDTS;
            var lastDTS;
            var minPTS = Number.POSITIVE_INFINITY;
            var maxPTS = Number.NEGATIVE_INFINITY;
            var sortSamples = false;
            if (!contiguous || nextAvcDts === null) {
              var pts = timeOffset * timeScale;
              var cts = inputSamples[0].pts - normalizePts(inputSamples[0].dts, inputSamples[0].pts);
              if (chromeVersion && nextAvcDts !== null && Math.abs(pts - cts - nextAvcDts) < 15e3) {
                contiguous = true;
              } else {
                nextAvcDts = pts - cts;
              }
            }
            var initTime = initPTS.baseTime * timeScale / initPTS.timescale;
            for (var i = 0; i < nbSamples; i++) {
              var sample = inputSamples[i];
              sample.pts = normalizePts(sample.pts - initTime, nextAvcDts);
              sample.dts = normalizePts(sample.dts - initTime, nextAvcDts);
              if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {
                sortSamples = true;
              }
            }
            if (sortSamples) {
              inputSamples.sort(function(a, b) {
                var deltadts = a.dts - b.dts;
                var deltapts = a.pts - b.pts;
                return deltadts || deltapts;
              });
            }
            firstDTS = inputSamples[0].dts;
            lastDTS = inputSamples[inputSamples.length - 1].dts;
            var inputDuration = lastDTS - firstDTS;
            var averageSampleDuration = inputDuration ? Math.round(inputDuration / (nbSamples - 1)) : mp4SampleDuration || track.inputTimeScale / 30;
            if (contiguous) {
              var delta = firstDTS - nextAvcDts;
              var foundHole = delta > averageSampleDuration;
              var foundOverlap = delta < -1;
              if (foundHole || foundOverlap) {
                if (foundHole) {
                  logger.warn("AVC: " + toMsFromMpegTsClock(delta, true) + " ms (" + delta + "dts) hole between fragments detected at " + timeOffset.toFixed(3));
                } else {
                  logger.warn("AVC: " + toMsFromMpegTsClock(-delta, true) + " ms (" + delta + "dts) overlapping between fragments detected at " + timeOffset.toFixed(3));
                }
                if (!foundOverlap || nextAvcDts >= inputSamples[0].pts || chromeVersion) {
                  firstDTS = nextAvcDts;
                  var firstPTS = inputSamples[0].pts - delta;
                  if (foundHole) {
                    inputSamples[0].dts = firstDTS;
                    inputSamples[0].pts = firstPTS;
                  } else {
                    for (var _i = 0; _i < inputSamples.length; _i++) {
                      if (inputSamples[_i].dts > firstPTS) {
                        break;
                      }
                      inputSamples[_i].dts -= delta;
                      inputSamples[_i].pts -= delta;
                    }
                  }
                  logger.log("Video: Initial PTS/DTS adjusted: " + toMsFromMpegTsClock(firstPTS, true) + "/" + toMsFromMpegTsClock(firstDTS, true) + ", delta: " + toMsFromMpegTsClock(delta, true) + " ms");
                }
              }
            }
            firstDTS = Math.max(0, firstDTS);
            var nbNalu = 0;
            var naluLen = 0;
            var dtsStep = firstDTS;
            for (var _i2 = 0; _i2 < nbSamples; _i2++) {
              var _sample = inputSamples[_i2];
              var units = _sample.units;
              var nbUnits = units.length;
              var sampleLen = 0;
              for (var j = 0; j < nbUnits; j++) {
                sampleLen += units[j].data.length;
              }
              naluLen += sampleLen;
              nbNalu += nbUnits;
              _sample.length = sampleLen;
              if (_sample.dts < dtsStep) {
                _sample.dts = dtsStep;
                dtsStep += averageSampleDuration / 4 | 0 || 1;
              } else {
                dtsStep = _sample.dts;
              }
              minPTS = Math.min(_sample.pts, minPTS);
              maxPTS = Math.max(_sample.pts, maxPTS);
            }
            lastDTS = inputSamples[nbSamples - 1].dts;
            var mdatSize = naluLen + 4 * nbNalu + 8;
            var mdat;
            try {
              mdat = new Uint8Array(mdatSize);
            } catch (err) {
              this.observer.emit(Events.ERROR, Events.ERROR, {
                type: ErrorTypes.MUX_ERROR,
                details: ErrorDetails.REMUX_ALLOC_ERROR,
                fatal: false,
                error: err,
                bytes: mdatSize,
                reason: "fail allocating video mdat " + mdatSize
              });
              return;
            }
            var view = new DataView(mdat.buffer);
            view.setUint32(0, mdatSize);
            mdat.set(MP4.types.mdat, 4);
            var stretchedLastFrame = false;
            var minDtsDelta = Number.POSITIVE_INFINITY;
            var minPtsDelta = Number.POSITIVE_INFINITY;
            var maxDtsDelta = Number.NEGATIVE_INFINITY;
            var maxPtsDelta = Number.NEGATIVE_INFINITY;
            for (var _i3 = 0; _i3 < nbSamples; _i3++) {
              var _VideoSample = inputSamples[_i3];
              var VideoSampleUnits = _VideoSample.units;
              var mp4SampleLength = 0;
              for (var _j = 0, _nbUnits = VideoSampleUnits.length; _j < _nbUnits; _j++) {
                var unit = VideoSampleUnits[_j];
                var unitData = unit.data;
                var unitDataLen = unit.data.byteLength;
                view.setUint32(offset, unitDataLen);
                offset += 4;
                mdat.set(unitData, offset);
                offset += unitDataLen;
                mp4SampleLength += 4 + unitDataLen;
              }
              var ptsDelta = void 0;
              if (_i3 < nbSamples - 1) {
                mp4SampleDuration = inputSamples[_i3 + 1].dts - _VideoSample.dts;
                ptsDelta = inputSamples[_i3 + 1].pts - _VideoSample.pts;
              } else {
                var config = this.config;
                var lastFrameDuration = _i3 > 0 ? _VideoSample.dts - inputSamples[_i3 - 1].dts : averageSampleDuration;
                ptsDelta = _i3 > 0 ? _VideoSample.pts - inputSamples[_i3 - 1].pts : averageSampleDuration;
                if (config.stretchShortVideoTrack && this.nextAudioPts !== null) {
                  var gapTolerance = Math.floor(config.maxBufferHole * timeScale);
                  var deltaToFrameEnd = (audioTrackLength ? minPTS + audioTrackLength * timeScale : this.nextAudioPts) - _VideoSample.pts;
                  if (deltaToFrameEnd > gapTolerance) {
                    mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;
                    if (mp4SampleDuration < 0) {
                      mp4SampleDuration = lastFrameDuration;
                    } else {
                      stretchedLastFrame = true;
                    }
                    logger.log("[mp4-remuxer]: It is approximately " + deltaToFrameEnd / 90 + " ms to the next segment; using duration " + mp4SampleDuration / 90 + " ms for the last video frame.");
                  } else {
                    mp4SampleDuration = lastFrameDuration;
                  }
                } else {
                  mp4SampleDuration = lastFrameDuration;
                }
              }
              var compositionTimeOffset = Math.round(_VideoSample.pts - _VideoSample.dts);
              minDtsDelta = Math.min(minDtsDelta, mp4SampleDuration);
              maxDtsDelta = Math.max(maxDtsDelta, mp4SampleDuration);
              minPtsDelta = Math.min(minPtsDelta, ptsDelta);
              maxPtsDelta = Math.max(maxPtsDelta, ptsDelta);
              outputSamples.push(new Mp4Sample(_VideoSample.key, mp4SampleDuration, mp4SampleLength, compositionTimeOffset));
            }
            if (outputSamples.length) {
              if (chromeVersion) {
                if (chromeVersion < 70) {
                  var flags = outputSamples[0].flags;
                  flags.dependsOn = 2;
                  flags.isNonSync = 0;
                }
              } else if (safariWebkitVersion) {
                if (maxPtsDelta - minPtsDelta < maxDtsDelta - minDtsDelta && averageSampleDuration / maxDtsDelta < 0.025 && outputSamples[0].cts === 0) {
                  logger.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");
                  var dts = firstDTS;
                  for (var _i4 = 0, len = outputSamples.length; _i4 < len; _i4++) {
                    var nextDts = dts + outputSamples[_i4].duration;
                    var _pts = dts + outputSamples[_i4].cts;
                    if (_i4 < len - 1) {
                      var nextPts = nextDts + outputSamples[_i4 + 1].cts;
                      outputSamples[_i4].duration = nextPts - _pts;
                    } else {
                      outputSamples[_i4].duration = _i4 ? outputSamples[_i4 - 1].duration : averageSampleDuration;
                    }
                    outputSamples[_i4].cts = 0;
                    dts = nextDts;
                  }
                }
              }
            }
            mp4SampleDuration = stretchedLastFrame || !mp4SampleDuration ? averageSampleDuration : mp4SampleDuration;
            this.nextAvcDts = nextAvcDts = lastDTS + mp4SampleDuration;
            this.videoSampleDuration = mp4SampleDuration;
            this.isVideoContiguous = true;
            var moof = MP4.moof(track.sequenceNumber++, firstDTS, _extends({}, track, {
              samples: outputSamples
            }));
            var type = "video";
            var data = {
              data1: moof,
              data2: mdat,
              startPTS: minPTS / timeScale,
              endPTS: (maxPTS + mp4SampleDuration) / timeScale,
              startDTS: firstDTS / timeScale,
              endDTS: nextAvcDts / timeScale,
              type,
              hasAudio: false,
              hasVideo: true,
              nb: outputSamples.length,
              dropped: track.dropped
            };
            track.samples = [];
            track.dropped = 0;
            return data;
          };
          _proto.getSamplesPerFrame = function getSamplesPerFrame(track) {
            switch (track.segmentCodec) {
              case "mp3":
                return MPEG_AUDIO_SAMPLE_PER_FRAME;
              case "ac3":
                return AC3_SAMPLES_PER_FRAME;
              default:
                return AAC_SAMPLES_PER_FRAME;
            }
          };
          _proto.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset, videoTimeOffset) {
            var inputTimeScale = track.inputTimeScale;
            var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
            var scaleFactor = inputTimeScale / mp4timeScale;
            var mp4SampleDuration = this.getSamplesPerFrame(track);
            var inputSampleDuration = mp4SampleDuration * scaleFactor;
            var initPTS = this._initPTS;
            var rawMPEG = track.segmentCodec === "mp3" && this.typeSupported.mpeg;
            var outputSamples = [];
            var alignedWithVideo = videoTimeOffset !== void 0;
            var inputSamples = track.samples;
            var offset = rawMPEG ? 0 : 8;
            var nextAudioPts = this.nextAudioPts || -1;
            var timeOffsetMpegTS = timeOffset * inputTimeScale;
            var initTime = initPTS.baseTime * inputTimeScale / initPTS.timescale;
            this.isAudioContiguous = contiguous = contiguous || inputSamples.length && nextAudioPts > 0 && (accurateTimeOffset && Math.abs(timeOffsetMpegTS - nextAudioPts) < 9e3 || Math.abs(normalizePts(inputSamples[0].pts - initTime, timeOffsetMpegTS) - nextAudioPts) < 20 * inputSampleDuration);
            inputSamples.forEach(function(sample2) {
              sample2.pts = normalizePts(sample2.pts - initTime, timeOffsetMpegTS);
            });
            if (!contiguous || nextAudioPts < 0) {
              inputSamples = inputSamples.filter(function(sample2) {
                return sample2.pts >= 0;
              });
              if (!inputSamples.length) {
                return;
              }
              if (videoTimeOffset === 0) {
                nextAudioPts = 0;
              } else if (accurateTimeOffset && !alignedWithVideo) {
                nextAudioPts = Math.max(0, timeOffsetMpegTS);
              } else {
                nextAudioPts = inputSamples[0].pts;
              }
            }
            if (track.segmentCodec === "aac") {
              var maxAudioFramesDrift = this.config.maxAudioFramesDrift;
              for (var i = 0, nextPts = nextAudioPts; i < inputSamples.length; i++) {
                var sample = inputSamples[i];
                var pts = sample.pts;
                var delta = pts - nextPts;
                var duration = Math.abs(1e3 * delta / inputTimeScale);
                if (delta <= -maxAudioFramesDrift * inputSampleDuration && alignedWithVideo) {
                  if (i === 0) {
                    logger.warn("Audio frame @ " + (pts / inputTimeScale).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1e3 * delta / inputTimeScale) + " ms.");
                    this.nextAudioPts = nextAudioPts = nextPts = pts;
                  }
                } else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && alignedWithVideo) {
                  var missing = Math.round(delta / inputSampleDuration);
                  nextPts = pts - missing * inputSampleDuration;
                  if (nextPts < 0) {
                    missing--;
                    nextPts += inputSampleDuration;
                  }
                  if (i === 0) {
                    this.nextAudioPts = nextAudioPts = nextPts;
                  }
                  logger.warn("[mp4-remuxer]: Injecting " + missing + " audio frame @ " + (nextPts / inputTimeScale).toFixed(3) + "s due to " + Math.round(1e3 * delta / inputTimeScale) + " ms gap.");
                  for (var j = 0; j < missing; j++) {
                    var newStamp = Math.max(nextPts, 0);
                    var fillFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                    if (!fillFrame) {
                      logger.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.");
                      fillFrame = sample.unit.subarray();
                    }
                    inputSamples.splice(i, 0, {
                      unit: fillFrame,
                      pts: newStamp
                    });
                    nextPts += inputSampleDuration;
                    i++;
                  }
                }
                sample.pts = nextPts;
                nextPts += inputSampleDuration;
              }
            }
            var firstPTS = null;
            var lastPTS = null;
            var mdat;
            var mdatSize = 0;
            var sampleLength = inputSamples.length;
            while (sampleLength--) {
              mdatSize += inputSamples[sampleLength].unit.byteLength;
            }
            for (var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++) {
              var audioSample = inputSamples[_j2];
              var unit = audioSample.unit;
              var _pts2 = audioSample.pts;
              if (lastPTS !== null) {
                var prevSample = outputSamples[_j2 - 1];
                prevSample.duration = Math.round((_pts2 - lastPTS) / scaleFactor);
              } else {
                if (contiguous && track.segmentCodec === "aac") {
                  _pts2 = nextAudioPts;
                }
                firstPTS = _pts2;
                if (mdatSize > 0) {
                  mdatSize += offset;
                  try {
                    mdat = new Uint8Array(mdatSize);
                  } catch (err) {
                    this.observer.emit(Events.ERROR, Events.ERROR, {
                      type: ErrorTypes.MUX_ERROR,
                      details: ErrorDetails.REMUX_ALLOC_ERROR,
                      fatal: false,
                      error: err,
                      bytes: mdatSize,
                      reason: "fail allocating audio mdat " + mdatSize
                    });
                    return;
                  }
                  if (!rawMPEG) {
                    var view = new DataView(mdat.buffer);
                    view.setUint32(0, mdatSize);
                    mdat.set(MP4.types.mdat, 4);
                  }
                } else {
                  return;
                }
              }
              mdat.set(unit, offset);
              var unitLen = unit.byteLength;
              offset += unitLen;
              outputSamples.push(new Mp4Sample(true, mp4SampleDuration, unitLen, 0));
              lastPTS = _pts2;
            }
            var nbSamples = outputSamples.length;
            if (!nbSamples) {
              return;
            }
            var lastSample = outputSamples[outputSamples.length - 1];
            this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSample.duration;
            var moof = rawMPEG ? new Uint8Array(0) : MP4.moof(track.sequenceNumber++, firstPTS / scaleFactor, _extends({}, track, {
              samples: outputSamples
            }));
            track.samples = [];
            var start = firstPTS / inputTimeScale;
            var end = nextAudioPts / inputTimeScale;
            var type = "audio";
            var audioData = {
              data1: moof,
              data2: mdat,
              startPTS: start,
              endPTS: end,
              startDTS: start,
              endDTS: end,
              type,
              hasAudio: true,
              hasVideo: false,
              nb: nbSamples
            };
            this.isAudioContiguous = true;
            return audioData;
          };
          _proto.remuxEmptyAudio = function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {
            var inputTimeScale = track.inputTimeScale;
            var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
            var scaleFactor = inputTimeScale / mp4timeScale;
            var nextAudioPts = this.nextAudioPts;
            var initDTS = this._initDTS;
            var init90kHz = initDTS.baseTime * 9e4 / initDTS.timescale;
            var startDTS = (nextAudioPts !== null ? nextAudioPts : videoData.startDTS * inputTimeScale) + init90kHz;
            var endDTS = videoData.endDTS * inputTimeScale + init90kHz;
            var frameDuration = scaleFactor * AAC_SAMPLES_PER_FRAME;
            var nbSamples = Math.ceil((endDTS - startDTS) / frameDuration);
            var silentFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
            logger.warn("[mp4-remuxer]: remux empty Audio");
            if (!silentFrame) {
              logger.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");
              return;
            }
            var samples = [];
            for (var i = 0; i < nbSamples; i++) {
              var stamp = startDTS + i * frameDuration;
              samples.push({
                unit: silentFrame,
                pts: stamp,
                dts: stamp
              });
            }
            track.samples = samples;
            return this.remuxAudio(track, timeOffset, contiguous, false);
          };
          return MP4Remuxer2;
        }();
        function normalizePts(value, reference) {
          var offset;
          if (reference === null) {
            return value;
          }
          if (reference < value) {
            offset = -8589934592;
          } else {
            offset = 8589934592;
          }
          while (Math.abs(value - reference) > 4294967296) {
            value += offset;
          }
          return value;
        }
        function findKeyframeIndex(samples) {
          for (var i = 0; i < samples.length; i++) {
            if (samples[i].key) {
              return i;
            }
          }
          return -1;
        }
        function flushTextTrackMetadataCueSamples(track, timeOffset, initPTS, initDTS) {
          var length = track.samples.length;
          if (!length) {
            return;
          }
          var inputTimeScale = track.inputTimeScale;
          for (var index = 0; index < length; index++) {
            var sample = track.samples[index];
            sample.pts = normalizePts(sample.pts - initPTS.baseTime * inputTimeScale / initPTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;
            sample.dts = normalizePts(sample.dts - initDTS.baseTime * inputTimeScale / initDTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;
          }
          var samples = track.samples;
          track.samples = [];
          return {
            samples
          };
        }
        function flushTextTrackUserdataCueSamples(track, timeOffset, initPTS) {
          var length = track.samples.length;
          if (!length) {
            return;
          }
          var inputTimeScale = track.inputTimeScale;
          for (var index = 0; index < length; index++) {
            var sample = track.samples[index];
            sample.pts = normalizePts(sample.pts - initPTS.baseTime * inputTimeScale / initPTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;
          }
          track.samples.sort(function(a, b) {
            return a.pts - b.pts;
          });
          var samples = track.samples;
          track.samples = [];
          return {
            samples
          };
        }
        var Mp4Sample = function Mp4Sample2(isKeyframe, duration, size, cts) {
          this.size = void 0;
          this.duration = void 0;
          this.cts = void 0;
          this.flags = void 0;
          this.duration = duration;
          this.size = size;
          this.cts = cts;
          this.flags = {
            isLeading: 0,
            isDependedOn: 0,
            hasRedundancy: 0,
            degradPrio: 0,
            dependsOn: isKeyframe ? 2 : 1,
            isNonSync: isKeyframe ? 0 : 1
          };
        };
        var PassThroughRemuxer = function() {
          function PassThroughRemuxer2() {
            this.emitInitSegment = false;
            this.audioCodec = void 0;
            this.videoCodec = void 0;
            this.initData = void 0;
            this.initPTS = null;
            this.initTracks = void 0;
            this.lastEndTime = null;
          }
          var _proto = PassThroughRemuxer2.prototype;
          _proto.destroy = function destroy() {
          };
          _proto.resetTimeStamp = function resetTimeStamp(defaultInitPTS) {
            this.initPTS = defaultInitPTS;
            this.lastEndTime = null;
          };
          _proto.resetNextTimestamp = function resetNextTimestamp() {
            this.lastEndTime = null;
          };
          _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, decryptdata) {
            this.audioCodec = audioCodec;
            this.videoCodec = videoCodec;
            this.generateInitSegment(patchEncyptionData(initSegment, decryptdata));
            this.emitInitSegment = true;
          };
          _proto.generateInitSegment = function generateInitSegment(initSegment) {
            var audioCodec = this.audioCodec, videoCodec = this.videoCodec;
            if (!(initSegment != null && initSegment.byteLength)) {
              this.initTracks = void 0;
              this.initData = void 0;
              return;
            }
            var initData = this.initData = parseInitSegment(initSegment);
            if (initData.audio) {
              audioCodec = getParsedTrackCodec(initData.audio, ElementaryStreamTypes.AUDIO);
            }
            if (initData.video) {
              videoCodec = getParsedTrackCodec(initData.video, ElementaryStreamTypes.VIDEO);
            }
            var tracks = {};
            if (initData.audio && initData.video) {
              tracks.audiovideo = {
                container: "video/mp4",
                codec: audioCodec + "," + videoCodec,
                initSegment,
                id: "main"
              };
            } else if (initData.audio) {
              tracks.audio = {
                container: "audio/mp4",
                codec: audioCodec,
                initSegment,
                id: "audio"
              };
            } else if (initData.video) {
              tracks.video = {
                container: "video/mp4",
                codec: videoCodec,
                initSegment,
                id: "main"
              };
            } else {
              logger.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.");
            }
            this.initTracks = tracks;
          };
          _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset) {
            var _initData, _initData2;
            var initPTS = this.initPTS, lastEndTime = this.lastEndTime;
            var result = {
              audio: void 0,
              video: void 0,
              text: textTrack,
              id3: id3Track,
              initSegment: void 0
            };
            if (!isFiniteNumber(lastEndTime)) {
              lastEndTime = this.lastEndTime = timeOffset || 0;
            }
            var data = videoTrack.samples;
            if (!(data != null && data.length)) {
              return result;
            }
            var initSegment = {
              initPTS: void 0,
              timescale: 1
            };
            var initData = this.initData;
            if (!((_initData = initData) != null && _initData.length)) {
              this.generateInitSegment(data);
              initData = this.initData;
            }
            if (!((_initData2 = initData) != null && _initData2.length)) {
              logger.warn("[passthrough-remuxer.ts]: Failed to generate initSegment.");
              return result;
            }
            if (this.emitInitSegment) {
              initSegment.tracks = this.initTracks;
              this.emitInitSegment = false;
            }
            var duration = getDuration(data, initData);
            var startDTS = getStartDTS(initData, data);
            var decodeTime = startDTS === null ? timeOffset : startDTS;
            if (isInvalidInitPts(initPTS, decodeTime, timeOffset, duration) || initSegment.timescale !== initPTS.timescale && accurateTimeOffset) {
              initSegment.initPTS = decodeTime - timeOffset;
              if (initPTS && initPTS.timescale === 1) {
                logger.warn("Adjusting initPTS by " + (initSegment.initPTS - initPTS.baseTime));
              }
              this.initPTS = initPTS = {
                baseTime: initSegment.initPTS,
                timescale: 1
              };
            }
            var startTime = audioTrack ? decodeTime - initPTS.baseTime / initPTS.timescale : lastEndTime;
            var endTime = startTime + duration;
            offsetStartDTS(initData, data, initPTS.baseTime / initPTS.timescale);
            if (duration > 0) {
              this.lastEndTime = endTime;
            } else {
              logger.warn("Duration parsed from mp4 should be greater than zero");
              this.resetNextTimestamp();
            }
            var hasAudio = !!initData.audio;
            var hasVideo = !!initData.video;
            var type = "";
            if (hasAudio) {
              type += "audio";
            }
            if (hasVideo) {
              type += "video";
            }
            var track = {
              data1: data,
              startPTS: startTime,
              startDTS: startTime,
              endPTS: endTime,
              endDTS: endTime,
              type,
              hasAudio,
              hasVideo,
              nb: 1,
              dropped: 0
            };
            result.audio = track.type === "audio" ? track : void 0;
            result.video = track.type !== "audio" ? track : void 0;
            result.initSegment = initSegment;
            result.id3 = flushTextTrackMetadataCueSamples(id3Track, timeOffset, initPTS, initPTS);
            if (textTrack.samples.length) {
              result.text = flushTextTrackUserdataCueSamples(textTrack, timeOffset, initPTS);
            }
            return result;
          };
          return PassThroughRemuxer2;
        }();
        function isInvalidInitPts(initPTS, startDTS, timeOffset, duration) {
          if (initPTS === null) {
            return true;
          }
          var minDuration = Math.max(duration, 1);
          var startTime = startDTS - initPTS.baseTime / initPTS.timescale;
          return Math.abs(startTime - timeOffset) > minDuration;
        }
        function getParsedTrackCodec(track, type) {
          var parsedCodec = track == null ? void 0 : track.codec;
          if (parsedCodec && parsedCodec.length > 4) {
            return parsedCodec;
          }
          if (type === ElementaryStreamTypes.AUDIO) {
            if (parsedCodec === "ec-3" || parsedCodec === "ac-3" || parsedCodec === "alac") {
              return parsedCodec;
            }
            if (parsedCodec === "fLaC" || parsedCodec === "Opus") {
              var preferManagedMediaSource = false;
              return getCodecCompatibleName(parsedCodec, preferManagedMediaSource);
            }
            var result = "mp4a.40.5";
            logger.info('Parsed audio codec "' + parsedCodec + '" or audio object type not handled. Using "' + result + '"');
            return result;
          }
          logger.warn('Unhandled video codec "' + parsedCodec + '"');
          if (parsedCodec === "hvc1" || parsedCodec === "hev1") {
            return "hvc1.1.6.L120.90";
          }
          if (parsedCodec === "av01") {
            return "av01.0.04M.08";
          }
          return "avc1.42e01e";
        }
        var optionalSelf = typeof self !== "undefined" ? self : void 0;
        var now;
        try {
          now = self.performance.now.bind(self.performance);
        } catch (err) {
          logger.debug("Unable to use Performance API on this environment");
          now = optionalSelf == null ? void 0 : optionalSelf.Date.now;
        }
        var muxConfig = [{
          demux: MP4Demuxer,
          remux: PassThroughRemuxer
        }, {
          demux: TSDemuxer,
          remux: MP4Remuxer
        }, {
          demux: AACDemuxer,
          remux: MP4Remuxer
        }, {
          demux: MP3Demuxer,
          remux: MP4Remuxer
        }];
        var Transmuxer = function() {
          function Transmuxer2(observer, typeSupported, config, vendor, id) {
            this.async = false;
            this.observer = void 0;
            this.typeSupported = void 0;
            this.config = void 0;
            this.vendor = void 0;
            this.id = void 0;
            this.demuxer = void 0;
            this.remuxer = void 0;
            this.decrypter = void 0;
            this.probe = void 0;
            this.decryptionPromise = null;
            this.transmuxConfig = void 0;
            this.currentTransmuxState = void 0;
            this.observer = observer;
            this.typeSupported = typeSupported;
            this.config = config;
            this.vendor = vendor;
            this.id = id;
          }
          var _proto = Transmuxer2.prototype;
          _proto.configure = function configure(transmuxConfig) {
            this.transmuxConfig = transmuxConfig;
            if (this.decrypter) {
              this.decrypter.reset();
            }
          };
          _proto.push = function push2(data, decryptdata, chunkMeta, state) {
            var _this = this;
            var stats = chunkMeta.transmuxing;
            stats.executeStart = now();
            var uintData = new Uint8Array(data);
            var currentTransmuxState = this.currentTransmuxState, transmuxConfig = this.transmuxConfig;
            if (state) {
              this.currentTransmuxState = state;
            }
            var _ref = state || currentTransmuxState, contiguous = _ref.contiguous, discontinuity = _ref.discontinuity, trackSwitch = _ref.trackSwitch, accurateTimeOffset = _ref.accurateTimeOffset, timeOffset = _ref.timeOffset, initSegmentChange = _ref.initSegmentChange;
            var audioCodec = transmuxConfig.audioCodec, videoCodec = transmuxConfig.videoCodec, defaultInitPts = transmuxConfig.defaultInitPts, duration = transmuxConfig.duration, initSegmentData = transmuxConfig.initSegmentData;
            var keyData = getEncryptionType(uintData, decryptdata);
            if (keyData && keyData.method === "AES-128") {
              var decrypter = this.getDecrypter();
              if (decrypter.isSync()) {
                var decryptedData = decrypter.softwareDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer);
                var loadingParts = chunkMeta.part > -1;
                if (loadingParts) {
                  decryptedData = decrypter.flush();
                }
                if (!decryptedData) {
                  stats.executeEnd = now();
                  return emptyResult(chunkMeta);
                }
                uintData = new Uint8Array(decryptedData);
              } else {
                this.decryptionPromise = decrypter.webCryptoDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer).then(function(decryptedData2) {
                  var result2 = _this.push(decryptedData2, null, chunkMeta);
                  _this.decryptionPromise = null;
                  return result2;
                });
                return this.decryptionPromise;
              }
            }
            var resetMuxers = this.needsProbing(discontinuity, trackSwitch);
            if (resetMuxers) {
              var error = this.configureTransmuxer(uintData);
              if (error) {
                logger.warn("[transmuxer] " + error.message);
                this.observer.emit(Events.ERROR, Events.ERROR, {
                  type: ErrorTypes.MEDIA_ERROR,
                  details: ErrorDetails.FRAG_PARSING_ERROR,
                  fatal: false,
                  error,
                  reason: error.message
                });
                stats.executeEnd = now();
                return emptyResult(chunkMeta);
              }
            }
            if (discontinuity || trackSwitch || initSegmentChange || resetMuxers) {
              this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration, decryptdata);
            }
            if (discontinuity || initSegmentChange || resetMuxers) {
              this.resetInitialTimestamp(defaultInitPts);
            }
            if (!contiguous) {
              this.resetContiguity();
            }
            var result = this.transmux(uintData, keyData, timeOffset, accurateTimeOffset, chunkMeta);
            var currentState = this.currentTransmuxState;
            currentState.contiguous = true;
            currentState.discontinuity = false;
            currentState.trackSwitch = false;
            stats.executeEnd = now();
            return result;
          };
          _proto.flush = function flush(chunkMeta) {
            var _this2 = this;
            var stats = chunkMeta.transmuxing;
            stats.executeStart = now();
            var decrypter = this.decrypter, currentTransmuxState = this.currentTransmuxState, decryptionPromise = this.decryptionPromise;
            if (decryptionPromise) {
              return decryptionPromise.then(function() {
                return _this2.flush(chunkMeta);
              });
            }
            var transmuxResults = [];
            var timeOffset = currentTransmuxState.timeOffset;
            if (decrypter) {
              var decryptedData = decrypter.flush();
              if (decryptedData) {
                transmuxResults.push(this.push(decryptedData, null, chunkMeta));
              }
            }
            var demuxer = this.demuxer, remuxer = this.remuxer;
            if (!demuxer || !remuxer) {
              stats.executeEnd = now();
              return [emptyResult(chunkMeta)];
            }
            var demuxResultOrPromise = demuxer.flush(timeOffset);
            if (isPromise(demuxResultOrPromise)) {
              return demuxResultOrPromise.then(function(demuxResult) {
                _this2.flushRemux(transmuxResults, demuxResult, chunkMeta);
                return transmuxResults;
              });
            }
            this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);
            return transmuxResults;
          };
          _proto.flushRemux = function flushRemux(transmuxResults, demuxResult, chunkMeta) {
            var audioTrack = demuxResult.audioTrack, videoTrack = demuxResult.videoTrack, id3Track = demuxResult.id3Track, textTrack = demuxResult.textTrack;
            var _this$currentTransmux = this.currentTransmuxState, accurateTimeOffset = _this$currentTransmux.accurateTimeOffset, timeOffset = _this$currentTransmux.timeOffset;
            logger.log("[transmuxer.ts]: Flushed fragment " + chunkMeta.sn + (chunkMeta.part > -1 ? " p: " + chunkMeta.part : "") + " of level " + chunkMeta.level);
            var remuxResult = this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, true, this.id);
            transmuxResults.push({
              remuxResult,
              chunkMeta
            });
            chunkMeta.transmuxing.executeEnd = now();
          };
          _proto.resetInitialTimestamp = function resetInitialTimestamp(defaultInitPts) {
            var demuxer = this.demuxer, remuxer = this.remuxer;
            if (!demuxer || !remuxer) {
              return;
            }
            demuxer.resetTimeStamp(defaultInitPts);
            remuxer.resetTimeStamp(defaultInitPts);
          };
          _proto.resetContiguity = function resetContiguity() {
            var demuxer = this.demuxer, remuxer = this.remuxer;
            if (!demuxer || !remuxer) {
              return;
            }
            demuxer.resetContiguity();
            remuxer.resetNextTimestamp();
          };
          _proto.resetInitSegment = function resetInitSegment(initSegmentData, audioCodec, videoCodec, trackDuration, decryptdata) {
            var demuxer = this.demuxer, remuxer = this.remuxer;
            if (!demuxer || !remuxer) {
              return;
            }
            demuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec, trackDuration);
            remuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec, decryptdata);
          };
          _proto.destroy = function destroy() {
            if (this.demuxer) {
              this.demuxer.destroy();
              this.demuxer = void 0;
            }
            if (this.remuxer) {
              this.remuxer.destroy();
              this.remuxer = void 0;
            }
          };
          _proto.transmux = function transmux(data, keyData, timeOffset, accurateTimeOffset, chunkMeta) {
            var result;
            if (keyData && keyData.method === "SAMPLE-AES") {
              result = this.transmuxSampleAes(data, keyData, timeOffset, accurateTimeOffset, chunkMeta);
            } else {
              result = this.transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta);
            }
            return result;
          };
          _proto.transmuxUnencrypted = function transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta) {
            var _demux = this.demuxer.demux(data, timeOffset, false, !this.config.progressive), audioTrack = _demux.audioTrack, videoTrack = _demux.videoTrack, id3Track = _demux.id3Track, textTrack = _demux.textTrack;
            var remuxResult = this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, false, this.id);
            return {
              remuxResult,
              chunkMeta
            };
          };
          _proto.transmuxSampleAes = function transmuxSampleAes(data, decryptData, timeOffset, accurateTimeOffset, chunkMeta) {
            var _this3 = this;
            return this.demuxer.demuxSampleAes(data, decryptData, timeOffset).then(function(demuxResult) {
              var remuxResult = _this3.remuxer.remux(demuxResult.audioTrack, demuxResult.videoTrack, demuxResult.id3Track, demuxResult.textTrack, timeOffset, accurateTimeOffset, false, _this3.id);
              return {
                remuxResult,
                chunkMeta
              };
            });
          };
          _proto.configureTransmuxer = function configureTransmuxer(data) {
            var config = this.config, observer = this.observer, typeSupported = this.typeSupported, vendor = this.vendor;
            var mux;
            for (var i = 0, len = muxConfig.length; i < len; i++) {
              var _muxConfig$i$demux;
              if ((_muxConfig$i$demux = muxConfig[i].demux) != null && _muxConfig$i$demux.probe(data)) {
                mux = muxConfig[i];
                break;
              }
            }
            if (!mux) {
              return new Error("Failed to find demuxer by probing fragment data");
            }
            var demuxer = this.demuxer;
            var remuxer = this.remuxer;
            var Remuxer = mux.remux;
            var Demuxer = mux.demux;
            if (!remuxer || !(remuxer instanceof Remuxer)) {
              this.remuxer = new Remuxer(observer, config, typeSupported, vendor);
            }
            if (!demuxer || !(demuxer instanceof Demuxer)) {
              this.demuxer = new Demuxer(observer, config, typeSupported);
              this.probe = Demuxer.probe;
            }
          };
          _proto.needsProbing = function needsProbing(discontinuity, trackSwitch) {
            return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;
          };
          _proto.getDecrypter = function getDecrypter() {
            var decrypter = this.decrypter;
            if (!decrypter) {
              decrypter = this.decrypter = new Decrypter(this.config);
            }
            return decrypter;
          };
          return Transmuxer2;
        }();
        function getEncryptionType(data, decryptData) {
          var encryptionType = null;
          if (data.byteLength > 0 && (decryptData == null ? void 0 : decryptData.key) != null && decryptData.iv !== null && decryptData.method != null) {
            encryptionType = decryptData;
          }
          return encryptionType;
        }
        var emptyResult = function emptyResult2(chunkMeta) {
          return {
            remuxResult: {},
            chunkMeta
          };
        };
        function isPromise(p) {
          return "then" in p && p.then instanceof Function;
        }
        var TransmuxConfig = function TransmuxConfig2(audioCodec, videoCodec, initSegmentData, duration, defaultInitPts) {
          this.audioCodec = void 0;
          this.videoCodec = void 0;
          this.initSegmentData = void 0;
          this.duration = void 0;
          this.defaultInitPts = void 0;
          this.audioCodec = audioCodec;
          this.videoCodec = videoCodec;
          this.initSegmentData = initSegmentData;
          this.duration = duration;
          this.defaultInitPts = defaultInitPts || null;
        };
        var TransmuxState = function TransmuxState2(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange) {
          this.discontinuity = void 0;
          this.contiguous = void 0;
          this.accurateTimeOffset = void 0;
          this.trackSwitch = void 0;
          this.timeOffset = void 0;
          this.initSegmentChange = void 0;
          this.discontinuity = discontinuity;
          this.contiguous = contiguous;
          this.accurateTimeOffset = accurateTimeOffset;
          this.trackSwitch = trackSwitch;
          this.timeOffset = timeOffset;
          this.initSegmentChange = initSegmentChange;
        };
        var eventemitter3 = { exports: {} };
        (function(module2) {
          var has = Object.prototype.hasOwnProperty, prefix = "~";
          function Events2() {
          }
          if (Object.create) {
            Events2.prototype = /* @__PURE__ */ Object.create(null);
            if (!new Events2().__proto__) prefix = false;
          }
          function EE(fn, context, once) {
            this.fn = fn;
            this.context = context;
            this.once = once || false;
          }
          function addListener(emitter, event, fn, context, once) {
            if (typeof fn !== "function") {
              throw new TypeError("The listener must be a function");
            }
            var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
            if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
            else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
            else emitter._events[evt] = [emitter._events[evt], listener];
            return emitter;
          }
          function clearEvent(emitter, evt) {
            if (--emitter._eventsCount === 0) emitter._events = new Events2();
            else delete emitter._events[evt];
          }
          function EventEmitter2() {
            this._events = new Events2();
            this._eventsCount = 0;
          }
          EventEmitter2.prototype.eventNames = function eventNames() {
            var names = [], events, name;
            if (this._eventsCount === 0) return names;
            for (name in events = this._events) {
              if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
            }
            if (Object.getOwnPropertySymbols) {
              return names.concat(Object.getOwnPropertySymbols(events));
            }
            return names;
          };
          EventEmitter2.prototype.listeners = function listeners(event) {
            var evt = prefix ? prefix + event : event, handlers = this._events[evt];
            if (!handlers) return [];
            if (handlers.fn) return [handlers.fn];
            for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
              ee[i] = handlers[i].fn;
            }
            return ee;
          };
          EventEmitter2.prototype.listenerCount = function listenerCount(event) {
            var evt = prefix ? prefix + event : event, listeners = this._events[evt];
            if (!listeners) return 0;
            if (listeners.fn) return 1;
            return listeners.length;
          };
          EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
            var evt = prefix ? prefix + event : event;
            if (!this._events[evt]) return false;
            var listeners = this._events[evt], len = arguments.length, args, i;
            if (listeners.fn) {
              if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
              switch (len) {
                case 1:
                  return listeners.fn.call(listeners.context), true;
                case 2:
                  return listeners.fn.call(listeners.context, a1), true;
                case 3:
                  return listeners.fn.call(listeners.context, a1, a2), true;
                case 4:
                  return listeners.fn.call(listeners.context, a1, a2, a3), true;
                case 5:
                  return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
                case 6:
                  return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
              }
              for (i = 1, args = new Array(len - 1); i < len; i++) {
                args[i - 1] = arguments[i];
              }
              listeners.fn.apply(listeners.context, args);
            } else {
              var length = listeners.length, j;
              for (i = 0; i < length; i++) {
                if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
                switch (len) {
                  case 1:
                    listeners[i].fn.call(listeners[i].context);
                    break;
                  case 2:
                    listeners[i].fn.call(listeners[i].context, a1);
                    break;
                  case 3:
                    listeners[i].fn.call(listeners[i].context, a1, a2);
                    break;
                  case 4:
                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                    break;
                  default:
                    if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                      args[j - 1] = arguments[j];
                    }
                    listeners[i].fn.apply(listeners[i].context, args);
                }
              }
            }
            return true;
          };
          EventEmitter2.prototype.on = function on(event, fn, context) {
            return addListener(this, event, fn, context, false);
          };
          EventEmitter2.prototype.once = function once(event, fn, context) {
            return addListener(this, event, fn, context, true);
          };
          EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
            var evt = prefix ? prefix + event : event;
            if (!this._events[evt]) return this;
            if (!fn) {
              clearEvent(this, evt);
              return this;
            }
            var listeners = this._events[evt];
            if (listeners.fn) {
              if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
                clearEvent(this, evt);
              }
            } else {
              for (var i = 0, events = [], length = listeners.length; i < length; i++) {
                if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                  events.push(listeners[i]);
                }
              }
              if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
              else clearEvent(this, evt);
            }
            return this;
          };
          EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
            var evt;
            if (event) {
              evt = prefix ? prefix + event : event;
              if (this._events[evt]) clearEvent(this, evt);
            } else {
              this._events = new Events2();
              this._eventsCount = 0;
            }
            return this;
          };
          EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
          EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
          EventEmitter2.prefixed = prefix;
          EventEmitter2.EventEmitter = EventEmitter2;
          {
            module2.exports = EventEmitter2;
          }
        })(eventemitter3);
        var eventemitter3Exports = eventemitter3.exports;
        var EventEmitter = getDefaultExportFromCjs(eventemitter3Exports);
        if (typeof __IN_WORKER__ !== "undefined" && __IN_WORKER__) {
          startWorker(self);
        }
        function startWorker(self2) {
          var observer = new EventEmitter();
          var forwardMessage = function forwardMessage2(ev, data) {
            self2.postMessage({
              event: ev,
              data
            });
          };
          observer.on(Events.FRAG_DECRYPTED, forwardMessage);
          observer.on(Events.ERROR, forwardMessage);
          var forwardWorkerLogs = function forwardWorkerLogs2() {
            var _loop = function _loop2(logFn2) {
              var func = function func2(message) {
                forwardMessage("workerLog", {
                  logType: logFn2,
                  message
                });
              };
              logger[logFn2] = func;
            };
            for (var logFn in logger) {
              _loop(logFn);
            }
          };
          self2.addEventListener("message", function(ev) {
            var data = ev.data;
            switch (data.cmd) {
              case "init": {
                var config = JSON.parse(data.config);
                self2.transmuxer = new Transmuxer(observer, data.typeSupported, config, "", data.id);
                enableLogs(config.debug, data.id);
                forwardWorkerLogs();
                forwardMessage("init", null);
                break;
              }
              case "configure": {
                self2.transmuxer.configure(data.config);
                break;
              }
              case "demux": {
                var transmuxResult = self2.transmuxer.push(data.data, data.decryptdata, data.chunkMeta, data.state);
                if (isPromise(transmuxResult)) {
                  self2.transmuxer.async = true;
                  transmuxResult.then(function(data2) {
                    emitTransmuxComplete(self2, data2);
                  }).catch(function(error) {
                    forwardMessage(Events.ERROR, {
                      type: ErrorTypes.MEDIA_ERROR,
                      details: ErrorDetails.FRAG_PARSING_ERROR,
                      chunkMeta: data.chunkMeta,
                      fatal: false,
                      error,
                      err: error,
                      reason: "transmuxer-worker push error"
                    });
                  });
                } else {
                  self2.transmuxer.async = false;
                  emitTransmuxComplete(self2, transmuxResult);
                }
                break;
              }
              case "flush": {
                var id = data.chunkMeta;
                var _transmuxResult = self2.transmuxer.flush(id);
                var asyncFlush = isPromise(_transmuxResult);
                if (asyncFlush || self2.transmuxer.async) {
                  if (!isPromise(_transmuxResult)) {
                    _transmuxResult = Promise.resolve(_transmuxResult);
                  }
                  _transmuxResult.then(function(results) {
                    handleFlushResult(self2, results, id);
                  }).catch(function(error) {
                    forwardMessage(Events.ERROR, {
                      type: ErrorTypes.MEDIA_ERROR,
                      details: ErrorDetails.FRAG_PARSING_ERROR,
                      chunkMeta: data.chunkMeta,
                      fatal: false,
                      error,
                      err: error,
                      reason: "transmuxer-worker flush error"
                    });
                  });
                } else {
                  handleFlushResult(self2, _transmuxResult, id);
                }
                break;
              }
            }
          });
        }
        function emitTransmuxComplete(self2, transmuxResult) {
          if (isEmptyResult(transmuxResult.remuxResult)) {
            return false;
          }
          var transferable = [];
          var _transmuxResult$remux = transmuxResult.remuxResult, audio = _transmuxResult$remux.audio, video = _transmuxResult$remux.video;
          if (audio) {
            addToTransferable(transferable, audio);
          }
          if (video) {
            addToTransferable(transferable, video);
          }
          self2.postMessage({
            event: "transmuxComplete",
            data: transmuxResult
          }, transferable);
          return true;
        }
        function addToTransferable(transferable, track) {
          if (track.data1) {
            transferable.push(track.data1.buffer);
          }
          if (track.data2) {
            transferable.push(track.data2.buffer);
          }
        }
        function handleFlushResult(self2, results, chunkMeta) {
          var parsed = results.reduce(function(parsed2, result) {
            return emitTransmuxComplete(self2, result) || parsed2;
          }, false);
          if (!parsed) {
            self2.postMessage({
              event: "transmuxComplete",
              data: results[0]
            });
          }
          self2.postMessage({
            event: "flush",
            data: chunkMeta
          });
        }
        function isEmptyResult(remuxResult) {
          return !remuxResult.audio && !remuxResult.video && !remuxResult.text && !remuxResult.id3 && !remuxResult.initSegment;
        }
        function hasUMDWorker() {
          return typeof __HLS_WORKER_BUNDLE__ === "function";
        }
        function injectWorker() {
          var blob = new self.Blob(["var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(" + __HLS_WORKER_BUNDLE__.toString() + ")(true);"], {
            type: "text/javascript"
          });
          var objectURL = self.URL.createObjectURL(blob);
          var worker = new self.Worker(objectURL);
          return {
            worker,
            objectURL
          };
        }
        function loadWorker(path) {
          var scriptURL = new self.URL(path, self.location.href).href;
          var worker = new self.Worker(scriptURL);
          return {
            worker,
            scriptURL
          };
        }
        var TransmuxerInterface = function() {
          function TransmuxerInterface2(hls, id, onTransmuxComplete, onFlush) {
            var _this = this;
            this.error = null;
            this.hls = void 0;
            this.id = void 0;
            this.observer = void 0;
            this.frag = null;
            this.part = null;
            this.useWorker = void 0;
            this.workerContext = null;
            this.onwmsg = void 0;
            this.transmuxer = null;
            this.onTransmuxComplete = void 0;
            this.onFlush = void 0;
            var config = hls.config;
            this.hls = hls;
            this.id = id;
            this.useWorker = !!config.enableWorker;
            this.onTransmuxComplete = onTransmuxComplete;
            this.onFlush = onFlush;
            var forwardMessage = function forwardMessage2(ev, data) {
              data = data || {};
              data.frag = _this.frag;
              data.id = _this.id;
              if (ev === Events.ERROR) {
                _this.error = data.error;
              }
              _this.hls.trigger(ev, data);
            };
            this.observer = new EventEmitter();
            this.observer.on(Events.FRAG_DECRYPTED, forwardMessage);
            this.observer.on(Events.ERROR, forwardMessage);
            var MediaSource = getMediaSource(config.preferManagedMediaSource) || {
              isTypeSupported: function isTypeSupported() {
                return false;
              }
            };
            var m2tsTypeSupported = {
              mpeg: MediaSource.isTypeSupported("audio/mpeg"),
              mp3: MediaSource.isTypeSupported('audio/mp4; codecs="mp3"'),
              ac3: false
            };
            if (this.useWorker && typeof Worker !== "undefined") {
              var canCreateWorker = config.workerPath || hasUMDWorker();
              if (canCreateWorker) {
                try {
                  if (config.workerPath) {
                    logger.log("loading Web Worker " + config.workerPath + ' for "' + id + '"');
                    this.workerContext = loadWorker(config.workerPath);
                  } else {
                    logger.log('injecting Web Worker for "' + id + '"');
                    this.workerContext = injectWorker();
                  }
                  this.onwmsg = function(event) {
                    return _this.onWorkerMessage(event);
                  };
                  var worker = this.workerContext.worker;
                  worker.addEventListener("message", this.onwmsg);
                  worker.onerror = function(event) {
                    var error = new Error(event.message + "  (" + event.filename + ":" + event.lineno + ")");
                    config.enableWorker = false;
                    logger.warn('Error in "' + id + '" Web Worker, fallback to inline');
                    _this.hls.trigger(Events.ERROR, {
                      type: ErrorTypes.OTHER_ERROR,
                      details: ErrorDetails.INTERNAL_EXCEPTION,
                      fatal: false,
                      event: "demuxerWorker",
                      error
                    });
                  };
                  worker.postMessage({
                    cmd: "init",
                    typeSupported: m2tsTypeSupported,
                    vendor: "",
                    id,
                    config: JSON.stringify(config)
                  });
                } catch (err) {
                  logger.warn('Error setting up "' + id + '" Web Worker, fallback to inline', err);
                  this.resetWorker();
                  this.error = null;
                  this.transmuxer = new Transmuxer(this.observer, m2tsTypeSupported, config, "", id);
                }
                return;
              }
            }
            this.transmuxer = new Transmuxer(this.observer, m2tsTypeSupported, config, "", id);
          }
          var _proto = TransmuxerInterface2.prototype;
          _proto.resetWorker = function resetWorker() {
            if (this.workerContext) {
              var _this$workerContext = this.workerContext, worker = _this$workerContext.worker, objectURL = _this$workerContext.objectURL;
              if (objectURL) {
                self.URL.revokeObjectURL(objectURL);
              }
              worker.removeEventListener("message", this.onwmsg);
              worker.onerror = null;
              worker.terminate();
              this.workerContext = null;
            }
          };
          _proto.destroy = function destroy() {
            if (this.workerContext) {
              this.resetWorker();
              this.onwmsg = void 0;
            } else {
              var transmuxer = this.transmuxer;
              if (transmuxer) {
                transmuxer.destroy();
                this.transmuxer = null;
              }
            }
            var observer = this.observer;
            if (observer) {
              observer.removeAllListeners();
            }
            this.frag = null;
            this.observer = null;
            this.hls = null;
          };
          _proto.push = function push2(data, initSegmentData, audioCodec, videoCodec, frag, part, duration, accurateTimeOffset, chunkMeta, defaultInitPTS) {
            var _frag$initSegment, _lastFrag$initSegment, _this2 = this;
            chunkMeta.transmuxing.start = self.performance.now();
            var transmuxer = this.transmuxer;
            var timeOffset = part ? part.start : frag.start;
            var decryptdata = frag.decryptdata;
            var lastFrag = this.frag;
            var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);
            var trackSwitch = !(lastFrag && chunkMeta.level === lastFrag.level);
            var snDiff = lastFrag ? chunkMeta.sn - lastFrag.sn : -1;
            var partDiff = this.part ? chunkMeta.part - this.part.index : -1;
            var progressive = snDiff === 0 && chunkMeta.id > 1 && chunkMeta.id === (lastFrag == null ? void 0 : lastFrag.stats.chunkCount);
            var contiguous = !trackSwitch && (snDiff === 1 || snDiff === 0 && (partDiff === 1 || progressive && partDiff <= 0));
            var now2 = self.performance.now();
            if (trackSwitch || snDiff || frag.stats.parsing.start === 0) {
              frag.stats.parsing.start = now2;
            }
            if (part && (partDiff || !contiguous)) {
              part.stats.parsing.start = now2;
            }
            var initSegmentChange = !(lastFrag && ((_frag$initSegment = frag.initSegment) == null ? void 0 : _frag$initSegment.url) === ((_lastFrag$initSegment = lastFrag.initSegment) == null ? void 0 : _lastFrag$initSegment.url));
            var state = new TransmuxState(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange);
            if (!contiguous || discontinuity || initSegmentChange) {
              logger.log("[transmuxer-interface, " + frag.type + "]: Starting new transmux session for sn: " + chunkMeta.sn + " p: " + chunkMeta.part + " level: " + chunkMeta.level + " id: " + chunkMeta.id + "\n        discontinuity: " + discontinuity + "\n        trackSwitch: " + trackSwitch + "\n        contiguous: " + contiguous + "\n        accurateTimeOffset: " + accurateTimeOffset + "\n        timeOffset: " + timeOffset + "\n        initSegmentChange: " + initSegmentChange);
              var config = new TransmuxConfig(audioCodec, videoCodec, initSegmentData, duration, defaultInitPTS);
              this.configureTransmuxer(config);
            }
            this.frag = frag;
            this.part = part;
            if (this.workerContext) {
              this.workerContext.worker.postMessage({
                cmd: "demux",
                data,
                decryptdata,
                chunkMeta,
                state
              }, data instanceof ArrayBuffer ? [data] : []);
            } else if (transmuxer) {
              var _transmuxResult = transmuxer.push(data, decryptdata, chunkMeta, state);
              if (isPromise(_transmuxResult)) {
                transmuxer.async = true;
                _transmuxResult.then(function(data2) {
                  _this2.handleTransmuxComplete(data2);
                }).catch(function(error) {
                  _this2.transmuxerError(error, chunkMeta, "transmuxer-interface push error");
                });
              } else {
                transmuxer.async = false;
                this.handleTransmuxComplete(_transmuxResult);
              }
            }
          };
          _proto.flush = function flush(chunkMeta) {
            var _this3 = this;
            chunkMeta.transmuxing.start = self.performance.now();
            var transmuxer = this.transmuxer;
            if (this.workerContext) {
              this.workerContext.worker.postMessage({
                cmd: "flush",
                chunkMeta
              });
            } else if (transmuxer) {
              var _transmuxResult2 = transmuxer.flush(chunkMeta);
              var asyncFlush = isPromise(_transmuxResult2);
              if (asyncFlush || transmuxer.async) {
                if (!isPromise(_transmuxResult2)) {
                  _transmuxResult2 = Promise.resolve(_transmuxResult2);
                }
                _transmuxResult2.then(function(data) {
                  _this3.handleFlushResult(data, chunkMeta);
                }).catch(function(error) {
                  _this3.transmuxerError(error, chunkMeta, "transmuxer-interface flush error");
                });
              } else {
                this.handleFlushResult(_transmuxResult2, chunkMeta);
              }
            }
          };
          _proto.transmuxerError = function transmuxerError(error, chunkMeta, reason) {
            if (!this.hls) {
              return;
            }
            this.error = error;
            this.hls.trigger(Events.ERROR, {
              type: ErrorTypes.MEDIA_ERROR,
              details: ErrorDetails.FRAG_PARSING_ERROR,
              chunkMeta,
              frag: this.frag || void 0,
              fatal: false,
              error,
              err: error,
              reason
            });
          };
          _proto.handleFlushResult = function handleFlushResult2(results, chunkMeta) {
            var _this4 = this;
            results.forEach(function(result) {
              _this4.handleTransmuxComplete(result);
            });
            this.onFlush(chunkMeta);
          };
          _proto.onWorkerMessage = function onWorkerMessage(event) {
            var data = event.data;
            if (!(data != null && data.event)) {
              logger.warn("worker message received with no " + (data ? "event name" : "data"));
              return;
            }
            var hls = this.hls;
            if (!this.hls) {
              return;
            }
            switch (data.event) {
              case "init": {
                var _this$workerContext2;
                var objectURL = (_this$workerContext2 = this.workerContext) == null ? void 0 : _this$workerContext2.objectURL;
                if (objectURL) {
                  self.URL.revokeObjectURL(objectURL);
                }
                break;
              }
              case "transmuxComplete": {
                this.handleTransmuxComplete(data.data);
                break;
              }
              case "flush": {
                this.onFlush(data.data);
                break;
              }
              case "workerLog":
                if (logger[data.data.logType]) {
                  logger[data.data.logType](data.data.message);
                }
                break;
              default: {
                data.data = data.data || {};
                data.data.frag = this.frag;
                data.data.id = this.id;
                hls.trigger(data.event, data.data);
                break;
              }
            }
          };
          _proto.configureTransmuxer = function configureTransmuxer(config) {
            var transmuxer = this.transmuxer;
            if (this.workerContext) {
              this.workerContext.worker.postMessage({
                cmd: "configure",
                config
              });
            } else if (transmuxer) {
              transmuxer.configure(config);
            }
          };
          _proto.handleTransmuxComplete = function handleTransmuxComplete(result) {
            result.chunkMeta.transmuxing.end = self.performance.now();
            this.onTransmuxComplete(result);
          };
          return TransmuxerInterface2;
        }();
        var STALL_MINIMUM_DURATION_MS = 250;
        var MAX_START_GAP_JUMP = 2;
        var SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;
        var SKIP_BUFFER_RANGE_START = 0.05;
        var GapController = function() {
          function GapController2(config, media, fragmentTracker, hls) {
            this.config = void 0;
            this.media = null;
            this.fragmentTracker = void 0;
            this.hls = void 0;
            this.nudgeRetry = 0;
            this.stallReported = false;
            this.stalled = null;
            this.moved = false;
            this.seeking = false;
            this.config = config;
            this.media = media;
            this.fragmentTracker = fragmentTracker;
            this.hls = hls;
          }
          var _proto = GapController2.prototype;
          _proto.destroy = function destroy() {
            this.media = null;
            this.hls = this.fragmentTracker = null;
          };
          _proto.poll = function poll(lastCurrentTime, activeFrag) {
            var config = this.config, media = this.media, stalled = this.stalled;
            if (media === null) {
              return;
            }
            var currentTime = media.currentTime, seeking = media.seeking;
            var seeked = this.seeking && !seeking;
            var beginSeek = !this.seeking && seeking;
            this.seeking = seeking;
            if (currentTime !== lastCurrentTime) {
              this.moved = true;
              if (!seeking) {
                this.nudgeRetry = 0;
              }
              if (stalled !== null) {
                if (this.stallReported) {
                  var _stalledDuration = self.performance.now() - stalled;
                  logger.warn("playback not stuck anymore @" + currentTime + ", after " + Math.round(_stalledDuration) + "ms");
                  this.stallReported = false;
                }
                this.stalled = null;
              }
              return;
            }
            if (beginSeek || seeked) {
              this.stalled = null;
              return;
            }
            if (media.paused && !seeking || media.ended || media.playbackRate === 0 || !BufferHelper.getBuffered(media).length) {
              this.nudgeRetry = 0;
              return;
            }
            var bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);
            var nextStart = bufferInfo.nextStart || 0;
            if (seeking) {
              var hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP;
              var noBufferGap = !nextStart || activeFrag && activeFrag.start <= currentTime || nextStart - currentTime > MAX_START_GAP_JUMP && !this.fragmentTracker.getPartialFragment(currentTime);
              if (hasEnoughBuffer || noBufferGap) {
                return;
              }
              this.moved = false;
            }
            if (!this.moved && this.stalled !== null) {
              var _level$details;
              var isBuffered = bufferInfo.len > 0;
              if (!isBuffered && !nextStart) {
                return;
              }
              var startJump = Math.max(nextStart, bufferInfo.start || 0) - currentTime;
              var level = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null;
              var isLive = level == null ? void 0 : (_level$details = level.details) == null ? void 0 : _level$details.live;
              var maxStartGapJump = isLive ? level.details.targetduration * 2 : MAX_START_GAP_JUMP;
              var partialOrGap = this.fragmentTracker.getPartialFragment(currentTime);
              if (startJump > 0 && (startJump <= maxStartGapJump || partialOrGap)) {
                if (!media.paused) {
                  this._trySkipBufferHole(partialOrGap);
                }
                return;
              }
            }
            var tnow = self.performance.now();
            if (stalled === null) {
              this.stalled = tnow;
              return;
            }
            var stalledDuration = tnow - stalled;
            if (!seeking && stalledDuration >= STALL_MINIMUM_DURATION_MS) {
              this._reportStall(bufferInfo);
              if (!this.media) {
                return;
              }
            }
            var bufferedWithHoles = BufferHelper.bufferInfo(media, currentTime, config.maxBufferHole);
            this._tryFixBufferStall(bufferedWithHoles, stalledDuration);
          };
          _proto._tryFixBufferStall = function _tryFixBufferStall(bufferInfo, stalledDurationMs) {
            var config = this.config, fragmentTracker = this.fragmentTracker, media = this.media;
            if (media === null) {
              return;
            }
            var currentTime = media.currentTime;
            var partial = fragmentTracker.getPartialFragment(currentTime);
            if (partial) {
              var targetTime = this._trySkipBufferHole(partial);
              if (targetTime || !this.media) {
                return;
              }
            }
            if ((bufferInfo.len > config.maxBufferHole || bufferInfo.nextStart && bufferInfo.nextStart - currentTime < config.maxBufferHole) && stalledDurationMs > config.highBufferWatchdogPeriod * 1e3) {
              logger.warn("Trying to nudge playhead over buffer-hole");
              this.stalled = null;
              this._tryNudgeBuffer();
            }
          };
          _proto._reportStall = function _reportStall(bufferInfo) {
            var hls = this.hls, media = this.media, stallReported = this.stallReported;
            if (!stallReported && media) {
              this.stallReported = true;
              var error = new Error("Playback stalling at @" + media.currentTime + " due to low buffer (" + JSON.stringify(bufferInfo) + ")");
              logger.warn(error.message);
              hls.trigger(Events.ERROR, {
                type: ErrorTypes.MEDIA_ERROR,
                details: ErrorDetails.BUFFER_STALLED_ERROR,
                fatal: false,
                error,
                buffer: bufferInfo.len
              });
            }
          };
          _proto._trySkipBufferHole = function _trySkipBufferHole(partial) {
            var config = this.config, hls = this.hls, media = this.media;
            if (media === null) {
              return 0;
            }
            var currentTime = media.currentTime;
            var bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);
            var startTime = currentTime < bufferInfo.start ? bufferInfo.start : bufferInfo.nextStart;
            if (startTime) {
              var bufferStarved = bufferInfo.len <= config.maxBufferHole;
              var waiting = bufferInfo.len > 0 && bufferInfo.len < 1 && media.readyState < 3;
              var gapLength = startTime - currentTime;
              if (gapLength > 0 && (bufferStarved || waiting)) {
                if (gapLength > config.maxBufferHole) {
                  var fragmentTracker = this.fragmentTracker;
                  var startGap = false;
                  if (currentTime === 0) {
                    var startFrag = fragmentTracker.getAppendedFrag(0, PlaylistLevelType.MAIN);
                    if (startFrag && startTime < startFrag.end) {
                      startGap = true;
                    }
                  }
                  if (!startGap) {
                    var startProvisioned = partial || fragmentTracker.getAppendedFrag(currentTime, PlaylistLevelType.MAIN);
                    if (startProvisioned) {
                      var moreToLoad = false;
                      var pos = startProvisioned.end;
                      while (pos < startTime) {
                        var provisioned = fragmentTracker.getPartialFragment(pos);
                        if (provisioned) {
                          pos += provisioned.duration;
                        } else {
                          moreToLoad = true;
                          break;
                        }
                      }
                      if (moreToLoad) {
                        return 0;
                      }
                    }
                  }
                }
                var targetTime = Math.max(startTime + SKIP_BUFFER_RANGE_START, currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS);
                logger.warn("skipping hole, adjusting currentTime from " + currentTime + " to " + targetTime);
                this.moved = true;
                this.stalled = null;
                media.currentTime = targetTime;
                if (partial && !partial.gap) {
                  var error = new Error("fragment loaded with buffer holes, seeking from " + currentTime + " to " + targetTime);
                  hls.trigger(Events.ERROR, {
                    type: ErrorTypes.MEDIA_ERROR,
                    details: ErrorDetails.BUFFER_SEEK_OVER_HOLE,
                    fatal: false,
                    error,
                    reason: error.message,
                    frag: partial
                  });
                }
                return targetTime;
              }
            }
            return 0;
          };
          _proto._tryNudgeBuffer = function _tryNudgeBuffer() {
            var config = this.config, hls = this.hls, media = this.media, nudgeRetry = this.nudgeRetry;
            if (media === null) {
              return;
            }
            var currentTime = media.currentTime;
            this.nudgeRetry++;
            if (nudgeRetry < config.nudgeMaxRetry) {
              var targetTime = currentTime + (nudgeRetry + 1) * config.nudgeOffset;
              var error = new Error("Nudging 'currentTime' from " + currentTime + " to " + targetTime);
              logger.warn(error.message);
              media.currentTime = targetTime;
              hls.trigger(Events.ERROR, {
                type: ErrorTypes.MEDIA_ERROR,
                details: ErrorDetails.BUFFER_NUDGE_ON_STALL,
                error,
                fatal: false
              });
            } else {
              var _error = new Error("Playhead still not moving while enough data buffered @" + currentTime + " after " + config.nudgeMaxRetry + " nudges");
              logger.error(_error.message);
              hls.trigger(Events.ERROR, {
                type: ErrorTypes.MEDIA_ERROR,
                details: ErrorDetails.BUFFER_STALLED_ERROR,
                error: _error,
                fatal: true
              });
            }
          };
          return GapController2;
        }();
        var TICK_INTERVAL = 100;
        var StreamController = function(_BaseStreamController) {
          _inheritsLoose(StreamController2, _BaseStreamController);
          function StreamController2(hls, fragmentTracker, keyLoader) {
            var _this;
            _this = _BaseStreamController.call(this, hls, fragmentTracker, keyLoader, "[stream-controller]", PlaylistLevelType.MAIN) || this;
            _this.audioCodecSwap = false;
            _this.gapController = null;
            _this.level = -1;
            _this._forceStartLoad = false;
            _this.altAudio = false;
            _this.audioOnly = false;
            _this.fragPlaying = null;
            _this.onvplaying = null;
            _this.onvseeked = null;
            _this.fragLastKbps = 0;
            _this.couldBacktrack = false;
            _this.backtrackFragment = null;
            _this.audioCodecSwitch = false;
            _this.videoBuffer = null;
            _this._registerListeners();
            return _this;
          }
          var _proto = StreamController2.prototype;
          _proto._registerListeners = function _registerListeners() {
            var hls = this.hls;
            hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);
            hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
            hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);
            hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);
            hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);
            hls.on(Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);
            hls.on(Events.ERROR, this.onError, this);
            hls.on(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
            hls.on(Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
            hls.on(Events.BUFFER_CREATED, this.onBufferCreated, this);
            hls.on(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);
            hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);
            hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);
          };
          _proto._unregisterListeners = function _unregisterListeners() {
            var hls = this.hls;
            hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);
            hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);
            hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);
            hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);
            hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);
            hls.off(Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);
            hls.off(Events.ERROR, this.onError, this);
            hls.off(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
            hls.off(Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
            hls.off(Events.BUFFER_CREATED, this.onBufferCreated, this);
            hls.off(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);
            hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);
            hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);
          };
          _proto.onHandlerDestroying = function onHandlerDestroying() {
            this._unregisterListeners();
            _BaseStreamController.prototype.onHandlerDestroying.call(this);
          };
          _proto.startLoad = function startLoad(startPosition) {
            if (this.levels) {
              var lastCurrentTime = this.lastCurrentTime, hls = this.hls;
              this.stopLoad();
              this.setInterval(TICK_INTERVAL);
              this.level = -1;
              if (!this.startFragRequested) {
                var startLevel = hls.startLevel;
                if (startLevel === -1) {
                  if (hls.config.testBandwidth && this.levels.length > 1) {
                    startLevel = 0;
                    this.bitrateTest = true;
                  } else {
                    startLevel = hls.firstAutoLevel;
                  }
                }
                hls.nextLoadLevel = startLevel;
                this.level = hls.loadLevel;
                this.loadedmetadata = false;
              }
              if (lastCurrentTime > 0 && startPosition === -1) {
                this.log("Override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
                startPosition = lastCurrentTime;
              }
              this.state = State.IDLE;
              this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
              this.tick();
            } else {
              this._forceStartLoad = true;
              this.state = State.STOPPED;
            }
          };
          _proto.stopLoad = function stopLoad() {
            this._forceStartLoad = false;
            _BaseStreamController.prototype.stopLoad.call(this);
          };
          _proto.doTick = function doTick() {
            switch (this.state) {
              case State.WAITING_LEVEL: {
                var levels = this.levels, level = this.level;
                var currentLevel = levels == null ? void 0 : levels[level];
                var details = currentLevel == null ? void 0 : currentLevel.details;
                if (details && (!details.live || this.levelLastLoaded === currentLevel)) {
                  if (this.waitForCdnTuneIn(details)) {
                    break;
                  }
                  this.state = State.IDLE;
                  break;
                } else if (this.hls.nextLoadLevel !== this.level) {
                  this.state = State.IDLE;
                  break;
                }
                break;
              }
              case State.FRAG_LOADING_WAITING_RETRY:
                {
                  var _this$media;
                  var now2 = self.performance.now();
                  var retryDate = this.retryDate;
                  if (!retryDate || now2 >= retryDate || (_this$media = this.media) != null && _this$media.seeking) {
                    var _levels = this.levels, _level = this.level;
                    var _currentLevel = _levels == null ? void 0 : _levels[_level];
                    this.resetStartWhenNotLoaded(_currentLevel || null);
                    this.state = State.IDLE;
                  }
                }
                break;
            }
            if (this.state === State.IDLE) {
              this.doTickIdle();
            }
            this.onTickEnd();
          };
          _proto.onTickEnd = function onTickEnd() {
            _BaseStreamController.prototype.onTickEnd.call(this);
            this.checkBuffer();
            this.checkFragmentChanged();
          };
          _proto.doTickIdle = function doTickIdle() {
            var hls = this.hls, levelLastLoaded = this.levelLastLoaded, levels = this.levels, media = this.media;
            if (levelLastLoaded === null || !media && (this.startFragRequested || !hls.config.startFragPrefetch)) {
              return;
            }
            if (this.altAudio && this.audioOnly) {
              return;
            }
            var level = this.buffering ? hls.nextLoadLevel : hls.loadLevel;
            if (!(levels != null && levels[level])) {
              return;
            }
            var levelInfo = levels[level];
            var bufferInfo = this.getMainFwdBufferInfo();
            if (bufferInfo === null) {
              return;
            }
            var lastDetails = this.getLevelDetails();
            if (lastDetails && this._streamEnded(bufferInfo, lastDetails)) {
              var data = {};
              if (this.altAudio) {
                data.type = "video";
              }
              this.hls.trigger(Events.BUFFER_EOS, data);
              this.state = State.ENDED;
              return;
            }
            if (!this.buffering) {
              return;
            }
            if (hls.loadLevel !== level && hls.manualLevel === -1) {
              this.log("Adapting to level " + level + " from level " + this.level);
            }
            this.level = hls.nextLoadLevel = level;
            var levelDetails = levelInfo.details;
            if (!levelDetails || this.state === State.WAITING_LEVEL || levelDetails.live && this.levelLastLoaded !== levelInfo) {
              this.level = level;
              this.state = State.WAITING_LEVEL;
              return;
            }
            var bufferLen = bufferInfo.len;
            var maxBufLen = this.getMaxBufferLength(levelInfo.maxBitrate);
            if (bufferLen >= maxBufLen) {
              return;
            }
            if (this.backtrackFragment && this.backtrackFragment.start > bufferInfo.end) {
              this.backtrackFragment = null;
            }
            var targetBufferTime = this.backtrackFragment ? this.backtrackFragment.start : bufferInfo.end;
            var frag = this.getNextFragment(targetBufferTime, levelDetails);
            if (this.couldBacktrack && !this.fragPrevious && frag && frag.sn !== "initSegment" && this.fragmentTracker.getState(frag) !== FragmentState.OK) {
              var _this$backtrackFragme;
              var backtrackSn = ((_this$backtrackFragme = this.backtrackFragment) != null ? _this$backtrackFragme : frag).sn;
              var fragIdx = backtrackSn - levelDetails.startSN;
              var backtrackFrag = levelDetails.fragments[fragIdx - 1];
              if (backtrackFrag && frag.cc === backtrackFrag.cc) {
                frag = backtrackFrag;
                this.fragmentTracker.removeFragment(backtrackFrag);
              }
            } else if (this.backtrackFragment && bufferInfo.len) {
              this.backtrackFragment = null;
            }
            if (frag && this.isLoopLoading(frag, targetBufferTime)) {
              var gapStart = frag.gap;
              if (!gapStart) {
                var type = this.audioOnly && !this.altAudio ? ElementaryStreamTypes.AUDIO : ElementaryStreamTypes.VIDEO;
                var mediaBuffer = (type === ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
                if (mediaBuffer) {
                  this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.MAIN);
                }
              }
              frag = this.getNextFragmentLoopLoading(frag, levelDetails, bufferInfo, PlaylistLevelType.MAIN, maxBufLen);
            }
            if (!frag) {
              return;
            }
            if (frag.initSegment && !frag.initSegment.data && !this.bitrateTest) {
              frag = frag.initSegment;
            }
            this.loadFragment(frag, levelInfo, targetBufferTime);
          };
          _proto.loadFragment = function loadFragment(frag, level, targetBufferTime) {
            var fragState = this.fragmentTracker.getState(frag);
            this.fragCurrent = frag;
            if (fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {
              if (frag.sn === "initSegment") {
                this._loadInitSegment(frag, level);
              } else if (this.bitrateTest) {
                this.log("Fragment " + frag.sn + " of level " + frag.level + " is being downloaded to test bitrate and will not be buffered");
                this._loadBitrateTestFrag(frag, level);
              } else {
                this.startFragRequested = true;
                _BaseStreamController.prototype.loadFragment.call(this, frag, level, targetBufferTime);
              }
            } else {
              this.clearTrackerIfNeeded(frag);
            }
          };
          _proto.getBufferedFrag = function getBufferedFrag(position) {
            return this.fragmentTracker.getBufferedFrag(position, PlaylistLevelType.MAIN);
          };
          _proto.followingBufferedFrag = function followingBufferedFrag(frag) {
            if (frag) {
              return this.getBufferedFrag(frag.end + 0.5);
            }
            return null;
          };
          _proto.immediateLevelSwitch = function immediateLevelSwitch() {
            this.abortCurrentFrag();
            this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
          };
          _proto.nextLevelSwitch = function nextLevelSwitch() {
            var levels = this.levels, media = this.media;
            if (media != null && media.readyState) {
              var fetchdelay;
              var fragPlayingCurrent = this.getAppendedFrag(media.currentTime);
              if (fragPlayingCurrent && fragPlayingCurrent.start > 1) {
                this.flushMainBuffer(0, fragPlayingCurrent.start - 1);
              }
              var levelDetails = this.getLevelDetails();
              if (levelDetails != null && levelDetails.live) {
                var bufferInfo = this.getMainFwdBufferInfo();
                if (!bufferInfo || bufferInfo.len < levelDetails.targetduration * 2) {
                  return;
                }
              }
              if (!media.paused && levels) {
                var nextLevelId = this.hls.nextLoadLevel;
                var nextLevel = levels[nextLevelId];
                var fragLastKbps = this.fragLastKbps;
                if (fragLastKbps && this.fragCurrent) {
                  fetchdelay = this.fragCurrent.duration * nextLevel.maxBitrate / (1e3 * fragLastKbps) + 1;
                } else {
                  fetchdelay = 0;
                }
              } else {
                fetchdelay = 0;
              }
              var bufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);
              if (bufferedFrag) {
                var nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);
                if (nextBufferedFrag) {
                  this.abortCurrentFrag();
                  var maxStart = nextBufferedFrag.maxStartPTS ? nextBufferedFrag.maxStartPTS : nextBufferedFrag.start;
                  var fragDuration = nextBufferedFrag.duration;
                  var startPts = Math.max(bufferedFrag.end, maxStart + Math.min(Math.max(fragDuration - this.config.maxFragLookUpTolerance, fragDuration * (this.couldBacktrack ? 0.5 : 0.125)), fragDuration * (this.couldBacktrack ? 0.75 : 0.25)));
                  this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);
                }
              }
            }
          };
          _proto.abortCurrentFrag = function abortCurrentFrag() {
            var fragCurrent = this.fragCurrent;
            this.fragCurrent = null;
            this.backtrackFragment = null;
            if (fragCurrent) {
              fragCurrent.abortRequests();
              this.fragmentTracker.removeFragment(fragCurrent);
            }
            switch (this.state) {
              case State.KEY_LOADING:
              case State.FRAG_LOADING:
              case State.FRAG_LOADING_WAITING_RETRY:
              case State.PARSING:
              case State.PARSED:
                this.state = State.IDLE;
                break;
            }
            this.nextLoadPosition = this.getLoadPosition();
          };
          _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {
            _BaseStreamController.prototype.flushMainBuffer.call(this, startOffset, endOffset, this.altAudio ? "video" : null);
          };
          _proto.onMediaAttached = function onMediaAttached(event, data) {
            _BaseStreamController.prototype.onMediaAttached.call(this, event, data);
            var media = data.media;
            this.onvplaying = this.onMediaPlaying.bind(this);
            this.onvseeked = this.onMediaSeeked.bind(this);
            media.addEventListener("playing", this.onvplaying);
            media.addEventListener("seeked", this.onvseeked);
            this.gapController = new GapController(this.config, media, this.fragmentTracker, this.hls);
          };
          _proto.onMediaDetaching = function onMediaDetaching() {
            var media = this.media;
            if (media && this.onvplaying && this.onvseeked) {
              media.removeEventListener("playing", this.onvplaying);
              media.removeEventListener("seeked", this.onvseeked);
              this.onvplaying = this.onvseeked = null;
              this.videoBuffer = null;
            }
            this.fragPlaying = null;
            if (this.gapController) {
              this.gapController.destroy();
              this.gapController = null;
            }
            _BaseStreamController.prototype.onMediaDetaching.call(this);
          };
          _proto.onMediaPlaying = function onMediaPlaying() {
            this.tick();
          };
          _proto.onMediaSeeked = function onMediaSeeked() {
            var media = this.media;
            var currentTime = media ? media.currentTime : null;
            if (isFiniteNumber(currentTime)) {
              this.log("Media seeked to " + currentTime.toFixed(3));
            }
            var bufferInfo = this.getMainFwdBufferInfo();
            if (bufferInfo === null || bufferInfo.len === 0) {
              this.warn('Main forward buffer length on "seeked" event ' + (bufferInfo ? bufferInfo.len : "empty") + ")");
              return;
            }
            this.tick();
          };
          _proto.onManifestLoading = function onManifestLoading() {
            this.log("Trigger BUFFER_RESET");
            this.hls.trigger(Events.BUFFER_RESET, void 0);
            this.fragmentTracker.removeAllFragments();
            this.couldBacktrack = false;
            this.startPosition = this.lastCurrentTime = this.fragLastKbps = 0;
            this.levels = this.fragPlaying = this.backtrackFragment = this.levelLastLoaded = null;
            this.altAudio = this.audioOnly = this.startFragRequested = false;
          };
          _proto.onManifestParsed = function onManifestParsed(event, data) {
            var aac = false;
            var heaac = false;
            data.levels.forEach(function(level) {
              var codec = level.audioCodec;
              if (codec) {
                aac = aac || codec.indexOf("mp4a.40.2") !== -1;
                heaac = heaac || codec.indexOf("mp4a.40.5") !== -1;
              }
            });
            this.audioCodecSwitch = aac && heaac && !changeTypeSupported();
            if (this.audioCodecSwitch) {
              this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC");
            }
            this.levels = data.levels;
            this.startFragRequested = false;
          };
          _proto.onLevelLoading = function onLevelLoading(event, data) {
            var levels = this.levels;
            if (!levels || this.state !== State.IDLE) {
              return;
            }
            var level = levels[data.level];
            if (!level.details || level.details.live && this.levelLastLoaded !== level || this.waitForCdnTuneIn(level.details)) {
              this.state = State.WAITING_LEVEL;
            }
          };
          _proto.onLevelLoaded = function onLevelLoaded(event, data) {
            var _curLevel$details;
            var levels = this.levels;
            var newLevelId = data.level;
            var newDetails = data.details;
            var duration = newDetails.totalduration;
            if (!levels) {
              this.warn("Levels were reset while loading level " + newLevelId);
              return;
            }
            this.log("Level " + newLevelId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "]" + (newDetails.lastPartSn ? "[part-" + newDetails.lastPartSn + "-" + newDetails.lastPartIndex + "]" : "") + ", cc [" + newDetails.startCC + ", " + newDetails.endCC + "] duration:" + duration);
            var curLevel = levels[newLevelId];
            var fragCurrent = this.fragCurrent;
            if (fragCurrent && (this.state === State.FRAG_LOADING || this.state === State.FRAG_LOADING_WAITING_RETRY)) {
              if (fragCurrent.level !== data.level && fragCurrent.loader) {
                this.abortCurrentFrag();
              }
            }
            var sliding = 0;
            if (newDetails.live || (_curLevel$details = curLevel.details) != null && _curLevel$details.live) {
              var _this$levelLastLoaded;
              this.checkLiveUpdate(newDetails);
              if (newDetails.deltaUpdateFailed) {
                return;
              }
              sliding = this.alignPlaylists(newDetails, curLevel.details, (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details);
            }
            curLevel.details = newDetails;
            this.levelLastLoaded = curLevel;
            this.hls.trigger(Events.LEVEL_UPDATED, {
              details: newDetails,
              level: newLevelId
            });
            if (this.state === State.WAITING_LEVEL) {
              if (this.waitForCdnTuneIn(newDetails)) {
                return;
              }
              this.state = State.IDLE;
            }
            if (!this.startFragRequested) {
              this.setStartPosition(newDetails, sliding);
            } else if (newDetails.live) {
              this.synchronizeToLiveEdge(newDetails);
            }
            this.tick();
          };
          _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {
            var _frag$initSegment;
            var frag = data.frag, part = data.part, payload = data.payload;
            var levels = this.levels;
            if (!levels) {
              this.warn("Levels were reset while fragment load was in progress. Fragment " + frag.sn + " of level " + frag.level + " will not be buffered");
              return;
            }
            var currentLevel = levels[frag.level];
            var details = currentLevel.details;
            if (!details) {
              this.warn("Dropping fragment " + frag.sn + " of level " + frag.level + " after level details were reset");
              this.fragmentTracker.removeFragment(frag);
              return;
            }
            var videoCodec = currentLevel.videoCodec;
            var accurateTimeOffset = details.PTSKnown || !details.live;
            var initSegmentData = (_frag$initSegment = frag.initSegment) == null ? void 0 : _frag$initSegment.data;
            var audioCodec = this._getAudioCodec(currentLevel);
            var transmuxer = this.transmuxer = this.transmuxer || new TransmuxerInterface(this.hls, PlaylistLevelType.MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));
            var partIndex = part ? part.index : -1;
            var partial = partIndex !== -1;
            var chunkMeta = new ChunkMetadata(frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);
            var initPTS = this.initPTS[frag.cc];
            transmuxer.push(payload, initSegmentData, audioCodec, videoCodec, frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);
          };
          _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {
            var fromAltAudio = this.altAudio;
            var altAudio = !!data.url;
            if (!altAudio) {
              if (this.mediaBuffer !== this.media) {
                this.log("Switching on main audio, use media.buffered to schedule main fragment loading");
                this.mediaBuffer = this.media;
                var fragCurrent = this.fragCurrent;
                if (fragCurrent) {
                  this.log("Switching to main audio track, cancel main fragment load");
                  fragCurrent.abortRequests();
                  this.fragmentTracker.removeFragment(fragCurrent);
                }
                this.resetTransmuxer();
                this.resetLoadingState();
              } else if (this.audioOnly) {
                this.resetTransmuxer();
              }
              var hls = this.hls;
              if (fromAltAudio) {
                hls.trigger(Events.BUFFER_FLUSHING, {
                  startOffset: 0,
                  endOffset: Number.POSITIVE_INFINITY,
                  type: null
                });
                this.fragmentTracker.removeAllFragments();
              }
              hls.trigger(Events.AUDIO_TRACK_SWITCHED, data);
            }
          };
          _proto.onAudioTrackSwitched = function onAudioTrackSwitched(event, data) {
            var trackId = data.id;
            var altAudio = !!this.hls.audioTracks[trackId].url;
            if (altAudio) {
              var videoBuffer = this.videoBuffer;
              if (videoBuffer && this.mediaBuffer !== videoBuffer) {
                this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading");
                this.mediaBuffer = videoBuffer;
              }
            }
            this.altAudio = altAudio;
            this.tick();
          };
          _proto.onBufferCreated = function onBufferCreated(event, data) {
            var tracks = data.tracks;
            var mediaTrack;
            var name;
            var alternate = false;
            for (var type in tracks) {
              var track = tracks[type];
              if (track.id === "main") {
                name = type;
                mediaTrack = track;
                if (type === "video") {
                  var videoTrack = tracks[type];
                  if (videoTrack) {
                    this.videoBuffer = videoTrack.buffer;
                  }
                }
              } else {
                alternate = true;
              }
            }
            if (alternate && mediaTrack) {
              this.log("Alternate track found, use " + name + ".buffered to schedule main fragment loading");
              this.mediaBuffer = mediaTrack.buffer;
            } else {
              this.mediaBuffer = this.media;
            }
          };
          _proto.onFragBuffered = function onFragBuffered(event, data) {
            var frag = data.frag, part = data.part;
            if (frag && frag.type !== PlaylistLevelType.MAIN) {
              return;
            }
            if (this.fragContextChanged(frag)) {
              this.warn("Fragment " + frag.sn + (part ? " p: " + part.index : "") + " of level " + frag.level + " finished buffering, but was aborted. state: " + this.state);
              if (this.state === State.PARSED) {
                this.state = State.IDLE;
              }
              return;
            }
            var stats = part ? part.stats : frag.stats;
            this.fragLastKbps = Math.round(8 * stats.total / (stats.buffering.end - stats.loading.first));
            if (frag.sn !== "initSegment") {
              this.fragPrevious = frag;
            }
            this.fragBufferedComplete(frag, part);
          };
          _proto.onError = function onError(event, data) {
            var _data$context;
            if (data.fatal) {
              this.state = State.ERROR;
              return;
            }
            switch (data.details) {
              case ErrorDetails.FRAG_GAP:
              case ErrorDetails.FRAG_PARSING_ERROR:
              case ErrorDetails.FRAG_DECRYPT_ERROR:
              case ErrorDetails.FRAG_LOAD_ERROR:
              case ErrorDetails.FRAG_LOAD_TIMEOUT:
              case ErrorDetails.KEY_LOAD_ERROR:
              case ErrorDetails.KEY_LOAD_TIMEOUT:
                this.onFragmentOrKeyLoadError(PlaylistLevelType.MAIN, data);
                break;
              case ErrorDetails.LEVEL_LOAD_ERROR:
              case ErrorDetails.LEVEL_LOAD_TIMEOUT:
              case ErrorDetails.LEVEL_PARSING_ERROR:
                if (!data.levelRetry && this.state === State.WAITING_LEVEL && ((_data$context = data.context) == null ? void 0 : _data$context.type) === PlaylistContextType.LEVEL) {
                  this.state = State.IDLE;
                }
                break;
              case ErrorDetails.BUFFER_APPEND_ERROR:
              case ErrorDetails.BUFFER_FULL_ERROR:
                if (!data.parent || data.parent !== "main") {
                  return;
                }
                if (data.details === ErrorDetails.BUFFER_APPEND_ERROR) {
                  this.resetLoadingState();
                  return;
                }
                if (this.reduceLengthAndFlushBuffer(data)) {
                  this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                }
                break;
              case ErrorDetails.INTERNAL_EXCEPTION:
                this.recoverWorkerError(data);
                break;
            }
          };
          _proto.checkBuffer = function checkBuffer() {
            var media = this.media, gapController = this.gapController;
            if (!media || !gapController || !media.readyState) {
              return;
            }
            if (this.loadedmetadata || !BufferHelper.getBuffered(media).length) {
              var activeFrag = this.state !== State.IDLE ? this.fragCurrent : null;
              gapController.poll(this.lastCurrentTime, activeFrag);
            }
            this.lastCurrentTime = media.currentTime;
          };
          _proto.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {
            this.state = State.IDLE;
            if (!this.loadedmetadata) {
              this.startFragRequested = false;
              this.nextLoadPosition = this.startPosition;
            }
            this.tickImmediate();
          };
          _proto.onBufferFlushed = function onBufferFlushed(event, _ref) {
            var type = _ref.type;
            if (type !== ElementaryStreamTypes.AUDIO || this.audioOnly && !this.altAudio) {
              var mediaBuffer = (type === ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
              this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.MAIN);
              this.tick();
            }
          };
          _proto.onLevelsUpdated = function onLevelsUpdated(event, data) {
            if (this.level > -1 && this.fragCurrent) {
              this.level = this.fragCurrent.level;
            }
            this.levels = data.levels;
          };
          _proto.swapAudioCodec = function swapAudioCodec() {
            this.audioCodecSwap = !this.audioCodecSwap;
          };
          _proto.seekToStartPos = function seekToStartPos() {
            var media = this.media;
            if (!media) {
              return;
            }
            var currentTime = media.currentTime;
            var startPosition = this.startPosition;
            if (startPosition >= 0 && currentTime < startPosition) {
              if (media.seeking) {
                this.log("could not seek to " + startPosition + ", already seeking at " + currentTime);
                return;
              }
              var buffered = BufferHelper.getBuffered(media);
              var bufferStart = buffered.length ? buffered.start(0) : 0;
              var delta = bufferStart - startPosition;
              if (delta > 0 && (delta < this.config.maxBufferHole || delta < this.config.maxFragLookUpTolerance)) {
                this.log("adjusting start position by " + delta + " to match buffer start");
                startPosition += delta;
                this.startPosition = startPosition;
              }
              this.log("seek to target start position " + startPosition + " from current time " + currentTime);
              media.currentTime = startPosition;
            }
          };
          _proto._getAudioCodec = function _getAudioCodec(currentLevel) {
            var audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;
            if (this.audioCodecSwap && audioCodec) {
              this.log("Swapping audio codec");
              if (audioCodec.indexOf("mp4a.40.5") !== -1) {
                audioCodec = "mp4a.40.2";
              } else {
                audioCodec = "mp4a.40.5";
              }
            }
            return audioCodec;
          };
          _proto._loadBitrateTestFrag = function _loadBitrateTestFrag(frag, level) {
            var _this2 = this;
            frag.bitrateTest = true;
            this._doFragLoad(frag, level).then(function(data) {
              var hls = _this2.hls;
              if (!data || _this2.fragContextChanged(frag)) {
                return;
              }
              level.fragmentError = 0;
              _this2.state = State.IDLE;
              _this2.startFragRequested = false;
              _this2.bitrateTest = false;
              var stats = frag.stats;
              stats.parsing.start = stats.parsing.end = stats.buffering.start = stats.buffering.end = self.performance.now();
              hls.trigger(Events.FRAG_LOADED, data);
              frag.bitrateTest = false;
            });
          };
          _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {
            var _id3$samples;
            var id = "main";
            var hls = this.hls;
            var remuxResult = transmuxResult.remuxResult, chunkMeta = transmuxResult.chunkMeta;
            var context = this.getCurrentContext(chunkMeta);
            if (!context) {
              this.resetWhenMissingContext(chunkMeta);
              return;
            }
            var frag = context.frag, part = context.part, level = context.level;
            var video = remuxResult.video, text = remuxResult.text, id3 = remuxResult.id3, initSegment = remuxResult.initSegment;
            var details = level.details;
            var audio = this.altAudio ? void 0 : remuxResult.audio;
            if (this.fragContextChanged(frag)) {
              this.fragmentTracker.removeFragment(frag);
              return;
            }
            this.state = State.PARSING;
            if (initSegment) {
              if (initSegment != null && initSegment.tracks) {
                var mapFragment = frag.initSegment || frag;
                this._bufferInitSegment(level, initSegment.tracks, mapFragment, chunkMeta);
                hls.trigger(Events.FRAG_PARSING_INIT_SEGMENT, {
                  frag: mapFragment,
                  id,
                  tracks: initSegment.tracks
                });
              }
              var initPTS = initSegment.initPTS;
              var timescale = initSegment.timescale;
              if (isFiniteNumber(initPTS)) {
                this.initPTS[frag.cc] = {
                  baseTime: initPTS,
                  timescale
                };
                hls.trigger(Events.INIT_PTS_FOUND, {
                  frag,
                  id,
                  initPTS,
                  timescale
                });
              }
            }
            if (video && details && frag.sn !== "initSegment") {
              var prevFrag = details.fragments[frag.sn - 1 - details.startSN];
              var isFirstFragment = frag.sn === details.startSN;
              var isFirstInDiscontinuity = !prevFrag || frag.cc > prevFrag.cc;
              if (remuxResult.independent !== false) {
                var startPTS = video.startPTS, endPTS = video.endPTS, startDTS = video.startDTS, endDTS = video.endDTS;
                if (part) {
                  part.elementaryStreams[video.type] = {
                    startPTS,
                    endPTS,
                    startDTS,
                    endDTS
                  };
                } else {
                  if (video.firstKeyFrame && video.independent && chunkMeta.id === 1 && !isFirstInDiscontinuity) {
                    this.couldBacktrack = true;
                  }
                  if (video.dropped && video.independent) {
                    var bufferInfo = this.getMainFwdBufferInfo();
                    var targetBufferTime = (bufferInfo ? bufferInfo.end : this.getLoadPosition()) + this.config.maxBufferHole;
                    var startTime = video.firstKeyFramePTS ? video.firstKeyFramePTS : startPTS;
                    if (!isFirstFragment && targetBufferTime < startTime - this.config.maxBufferHole && !isFirstInDiscontinuity) {
                      this.backtrack(frag);
                      return;
                    } else if (isFirstInDiscontinuity) {
                      frag.gap = true;
                    }
                    frag.setElementaryStreamInfo(video.type, frag.start, endPTS, frag.start, endDTS, true);
                  } else if (isFirstFragment && startPTS > MAX_START_GAP_JUMP) {
                    frag.gap = true;
                  }
                }
                frag.setElementaryStreamInfo(video.type, startPTS, endPTS, startDTS, endDTS);
                if (this.backtrackFragment) {
                  this.backtrackFragment = frag;
                }
                this.bufferFragmentData(video, frag, part, chunkMeta, isFirstFragment || isFirstInDiscontinuity);
              } else if (isFirstFragment || isFirstInDiscontinuity) {
                frag.gap = true;
              } else {
                this.backtrack(frag);
                return;
              }
            }
            if (audio) {
              var _startPTS = audio.startPTS, _endPTS = audio.endPTS, _startDTS = audio.startDTS, _endDTS = audio.endDTS;
              if (part) {
                part.elementaryStreams[ElementaryStreamTypes.AUDIO] = {
                  startPTS: _startPTS,
                  endPTS: _endPTS,
                  startDTS: _startDTS,
                  endDTS: _endDTS
                };
              }
              frag.setElementaryStreamInfo(ElementaryStreamTypes.AUDIO, _startPTS, _endPTS, _startDTS, _endDTS);
              this.bufferFragmentData(audio, frag, part, chunkMeta);
            }
            if (details && id3 != null && (_id3$samples = id3.samples) != null && _id3$samples.length) {
              var emittedID3 = {
                id,
                frag,
                details,
                samples: id3.samples
              };
              hls.trigger(Events.FRAG_PARSING_METADATA, emittedID3);
            }
            if (details && text) {
              var emittedText = {
                id,
                frag,
                details,
                samples: text.samples
              };
              hls.trigger(Events.FRAG_PARSING_USERDATA, emittedText);
            }
          };
          _proto._bufferInitSegment = function _bufferInitSegment(currentLevel, tracks, frag, chunkMeta) {
            var _this3 = this;
            if (this.state !== State.PARSING) {
              return;
            }
            this.audioOnly = !!tracks.audio && !tracks.video;
            if (this.altAudio && !this.audioOnly) {
              delete tracks.audio;
            }
            var audio = tracks.audio, video = tracks.video, audiovideo = tracks.audiovideo;
            if (audio) {
              var audioCodec = currentLevel.audioCodec;
              var ua = navigator.userAgent.toLowerCase();
              if (this.audioCodecSwitch) {
                if (audioCodec) {
                  if (audioCodec.indexOf("mp4a.40.5") !== -1) {
                    audioCodec = "mp4a.40.2";
                  } else {
                    audioCodec = "mp4a.40.5";
                  }
                }
                var audioMetadata = audio.metadata;
                if (audioMetadata && "channelCount" in audioMetadata && (audioMetadata.channelCount || 1) !== 1 && ua.indexOf("firefox") === -1) {
                  audioCodec = "mp4a.40.5";
                }
              }
              if (audioCodec && audioCodec.indexOf("mp4a.40.5") !== -1 && ua.indexOf("android") !== -1 && audio.container !== "audio/mpeg") {
                audioCodec = "mp4a.40.2";
                this.log("Android: force audio codec to " + audioCodec);
              }
              if (currentLevel.audioCodec && currentLevel.audioCodec !== audioCodec) {
                this.log('Swapping manifest audio codec "' + currentLevel.audioCodec + '" for "' + audioCodec + '"');
              }
              audio.levelCodec = audioCodec;
              audio.id = "main";
              this.log("Init audio buffer, container:" + audio.container + ", codecs[selected/level/parsed]=[" + (audioCodec || "") + "/" + (currentLevel.audioCodec || "") + "/" + audio.codec + "]");
            }
            if (video) {
              video.levelCodec = currentLevel.videoCodec;
              video.id = "main";
              this.log("Init video buffer, container:" + video.container + ", codecs[level/parsed]=[" + (currentLevel.videoCodec || "") + "/" + video.codec + "]");
            }
            if (audiovideo) {
              this.log("Init audiovideo buffer, container:" + audiovideo.container + ", codecs[level/parsed]=[" + currentLevel.codecs + "/" + audiovideo.codec + "]");
            }
            this.hls.trigger(Events.BUFFER_CODECS, tracks);
            Object.keys(tracks).forEach(function(trackName) {
              var track = tracks[trackName];
              var initSegment = track.initSegment;
              if (initSegment != null && initSegment.byteLength) {
                _this3.hls.trigger(Events.BUFFER_APPENDING, {
                  type: trackName,
                  data: initSegment,
                  frag,
                  part: null,
                  chunkMeta,
                  parent: frag.type
                });
              }
            });
            this.tickImmediate();
          };
          _proto.getMainFwdBufferInfo = function getMainFwdBufferInfo() {
            return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, PlaylistLevelType.MAIN);
          };
          _proto.backtrack = function backtrack(frag) {
            this.couldBacktrack = true;
            this.backtrackFragment = frag;
            this.resetTransmuxer();
            this.flushBufferGap(frag);
            this.fragmentTracker.removeFragment(frag);
            this.fragPrevious = null;
            this.nextLoadPosition = frag.start;
            this.state = State.IDLE;
          };
          _proto.checkFragmentChanged = function checkFragmentChanged() {
            var video = this.media;
            var fragPlayingCurrent = null;
            if (video && video.readyState > 1 && video.seeking === false) {
              var currentTime = video.currentTime;
              if (BufferHelper.isBuffered(video, currentTime)) {
                fragPlayingCurrent = this.getAppendedFrag(currentTime);
              } else if (BufferHelper.isBuffered(video, currentTime + 0.1)) {
                fragPlayingCurrent = this.getAppendedFrag(currentTime + 0.1);
              }
              if (fragPlayingCurrent) {
                this.backtrackFragment = null;
                var fragPlaying = this.fragPlaying;
                var fragCurrentLevel = fragPlayingCurrent.level;
                if (!fragPlaying || fragPlayingCurrent.sn !== fragPlaying.sn || fragPlaying.level !== fragCurrentLevel) {
                  this.fragPlaying = fragPlayingCurrent;
                  this.hls.trigger(Events.FRAG_CHANGED, {
                    frag: fragPlayingCurrent
                  });
                  if (!fragPlaying || fragPlaying.level !== fragCurrentLevel) {
                    this.hls.trigger(Events.LEVEL_SWITCHED, {
                      level: fragCurrentLevel
                    });
                  }
                }
              }
            }
          };
          _createClass2(StreamController2, [{
            key: "nextLevel",
            get: function get() {
              var frag = this.nextBufferedFrag;
              if (frag) {
                return frag.level;
              }
              return -1;
            }
          }, {
            key: "currentFrag",
            get: function get() {
              var media = this.media;
              if (media) {
                return this.fragPlaying || this.getAppendedFrag(media.currentTime);
              }
              return null;
            }
          }, {
            key: "currentProgramDateTime",
            get: function get() {
              var media = this.media;
              if (media) {
                var currentTime = media.currentTime;
                var frag = this.currentFrag;
                if (frag && isFiniteNumber(currentTime) && isFiniteNumber(frag.programDateTime)) {
                  var epocMs = frag.programDateTime + (currentTime - frag.start) * 1e3;
                  return new Date(epocMs);
                }
              }
              return null;
            }
          }, {
            key: "currentLevel",
            get: function get() {
              var frag = this.currentFrag;
              if (frag) {
                return frag.level;
              }
              return -1;
            }
          }, {
            key: "nextBufferedFrag",
            get: function get() {
              var frag = this.currentFrag;
              if (frag) {
                return this.followingBufferedFrag(frag);
              }
              return null;
            }
          }, {
            key: "forceStartLoad",
            get: function get() {
              return this._forceStartLoad;
            }
          }]);
          return StreamController2;
        }(BaseStreamController);
        var Hls2 = function() {
          Hls3.isMSESupported = function isMSESupported$1() {
            return isMSESupported();
          };
          Hls3.isSupported = function isSupported$1() {
            return isSupported();
          };
          Hls3.getMediaSource = function getMediaSource$1() {
            return getMediaSource();
          };
          function Hls3(userConfig) {
            if (userConfig === void 0) {
              userConfig = {};
            }
            this.config = void 0;
            this.userConfig = void 0;
            this.coreComponents = void 0;
            this.networkControllers = void 0;
            this.started = false;
            this._emitter = new EventEmitter();
            this._autoLevelCapping = -1;
            this._maxHdcpLevel = null;
            this.abrController = void 0;
            this.bufferController = void 0;
            this.capLevelController = void 0;
            this.latencyController = void 0;
            this.levelController = void 0;
            this.streamController = void 0;
            this.audioTrackController = void 0;
            this.subtitleTrackController = void 0;
            this.emeController = void 0;
            this.cmcdController = void 0;
            this._media = null;
            this.url = null;
            this.triggeringException = void 0;
            enableLogs(userConfig.debug || false, "Hls instance");
            var config = this.config = mergeConfig(Hls3.DefaultConfig, userConfig);
            this.userConfig = userConfig;
            if (config.progressive) {
              enableStreamingMode(config);
            }
            var ConfigAbrController = config.abrController, ConfigBufferController = config.bufferController, ConfigCapLevelController = config.capLevelController, ConfigErrorController = config.errorController, ConfigFpsController = config.fpsController;
            var errorController = new ConfigErrorController(this);
            var abrController = this.abrController = new ConfigAbrController(this);
            var bufferController = this.bufferController = new ConfigBufferController(this);
            var capLevelController = this.capLevelController = new ConfigCapLevelController(this);
            var fpsController = new ConfigFpsController(this);
            var playListLoader = new PlaylistLoader(this);
            var id3TrackController = new ID3TrackController(this);
            var ConfigContentSteeringController = config.contentSteeringController;
            var contentSteering = ConfigContentSteeringController ? new ConfigContentSteeringController(this) : null;
            var levelController = this.levelController = new LevelController(this, contentSteering);
            var fragmentTracker = new FragmentTracker(this);
            var keyLoader = new KeyLoader(this.config);
            var streamController = this.streamController = new StreamController(this, fragmentTracker, keyLoader);
            capLevelController.setStreamController(streamController);
            fpsController.setStreamController(streamController);
            var networkControllers = [playListLoader, levelController, streamController];
            if (contentSteering) {
              networkControllers.splice(1, 0, contentSteering);
            }
            this.networkControllers = networkControllers;
            var coreComponents = [abrController, bufferController, capLevelController, fpsController, id3TrackController, fragmentTracker];
            this.audioTrackController = this.createController(config.audioTrackController, networkControllers);
            var AudioStreamControllerClass = config.audioStreamController;
            if (AudioStreamControllerClass) {
              networkControllers.push(new AudioStreamControllerClass(this, fragmentTracker, keyLoader));
            }
            this.subtitleTrackController = this.createController(config.subtitleTrackController, networkControllers);
            var SubtitleStreamControllerClass = config.subtitleStreamController;
            if (SubtitleStreamControllerClass) {
              networkControllers.push(new SubtitleStreamControllerClass(this, fragmentTracker, keyLoader));
            }
            this.createController(config.timelineController, coreComponents);
            keyLoader.emeController = this.emeController = this.createController(config.emeController, coreComponents);
            this.cmcdController = this.createController(config.cmcdController, coreComponents);
            this.latencyController = this.createController(LatencyController, coreComponents);
            this.coreComponents = coreComponents;
            networkControllers.push(errorController);
            var onErrorOut = errorController.onErrorOut;
            if (typeof onErrorOut === "function") {
              this.on(Events.ERROR, onErrorOut, errorController);
            }
          }
          var _proto = Hls3.prototype;
          _proto.createController = function createController(ControllerClass, components) {
            if (ControllerClass) {
              var controllerInstance = new ControllerClass(this);
              if (components) {
                components.push(controllerInstance);
              }
              return controllerInstance;
            }
            return null;
          };
          _proto.on = function on(event, listener, context) {
            if (context === void 0) {
              context = this;
            }
            this._emitter.on(event, listener, context);
          };
          _proto.once = function once(event, listener, context) {
            if (context === void 0) {
              context = this;
            }
            this._emitter.once(event, listener, context);
          };
          _proto.removeAllListeners = function removeAllListeners(event) {
            this._emitter.removeAllListeners(event);
          };
          _proto.off = function off(event, listener, context, once) {
            if (context === void 0) {
              context = this;
            }
            this._emitter.off(event, listener, context, once);
          };
          _proto.listeners = function listeners(event) {
            return this._emitter.listeners(event);
          };
          _proto.emit = function emit(event, name, eventObject) {
            return this._emitter.emit(event, name, eventObject);
          };
          _proto.trigger = function trigger(event, eventObject) {
            if (this.config.debug) {
              return this.emit(event, event, eventObject);
            } else {
              try {
                return this.emit(event, event, eventObject);
              } catch (error) {
                logger.error("An internal error happened while handling event " + event + '. Error message: "' + error.message + '". Here is a stacktrace:', error);
                if (!this.triggeringException) {
                  this.triggeringException = true;
                  var fatal = event === Events.ERROR;
                  this.trigger(Events.ERROR, {
                    type: ErrorTypes.OTHER_ERROR,
                    details: ErrorDetails.INTERNAL_EXCEPTION,
                    fatal,
                    event,
                    error
                  });
                  this.triggeringException = false;
                }
              }
            }
            return false;
          };
          _proto.listenerCount = function listenerCount(event) {
            return this._emitter.listenerCount(event);
          };
          _proto.destroy = function destroy() {
            logger.log("destroy");
            this.trigger(Events.DESTROYING, void 0);
            this.detachMedia();
            this.removeAllListeners();
            this._autoLevelCapping = -1;
            this.url = null;
            this.networkControllers.forEach(function(component) {
              return component.destroy();
            });
            this.networkControllers.length = 0;
            this.coreComponents.forEach(function(component) {
              return component.destroy();
            });
            this.coreComponents.length = 0;
            var config = this.config;
            config.xhrSetup = config.fetchSetup = void 0;
            this.userConfig = null;
          };
          _proto.attachMedia = function attachMedia(media) {
            logger.log("attachMedia");
            this._media = media;
            this.trigger(Events.MEDIA_ATTACHING, {
              media
            });
          };
          _proto.detachMedia = function detachMedia() {
            logger.log("detachMedia");
            this.trigger(Events.MEDIA_DETACHING, void 0);
            this._media = null;
          };
          _proto.loadSource = function loadSource(url) {
            this.stopLoad();
            var media = this.media;
            var loadedSource = this.url;
            var loadingSource = this.url = urlToolkitExports.buildAbsoluteURL(self.location.href, url, {
              alwaysNormalize: true
            });
            this._autoLevelCapping = -1;
            this._maxHdcpLevel = null;
            logger.log("loadSource:" + loadingSource);
            if (media && loadedSource && (loadedSource !== loadingSource || this.bufferController.hasSourceTypes())) {
              this.detachMedia();
              this.attachMedia(media);
            }
            this.trigger(Events.MANIFEST_LOADING, {
              url
            });
          };
          _proto.startLoad = function startLoad(startPosition) {
            if (startPosition === void 0) {
              startPosition = -1;
            }
            logger.log("startLoad(" + startPosition + ")");
            this.started = true;
            this.resumeBuffering();
            for (var i = 0; i < this.networkControllers.length; i++) {
              this.networkControllers[i].startLoad(startPosition);
              if (!this.started || !this.networkControllers) {
                break;
              }
            }
          };
          _proto.stopLoad = function stopLoad() {
            logger.log("stopLoad");
            this.started = false;
            for (var i = 0; i < this.networkControllers.length; i++) {
              this.networkControllers[i].stopLoad();
              if (this.started || !this.networkControllers) {
                break;
              }
            }
          };
          _proto.resumeBuffering = function resumeBuffering() {
            logger.log("resume buffering");
            this.networkControllers.forEach(function(controller) {
              if (controller.resumeBuffering) {
                controller.resumeBuffering();
              }
            });
          };
          _proto.pauseBuffering = function pauseBuffering() {
            logger.log("pause buffering");
            this.networkControllers.forEach(function(controller) {
              if (controller.pauseBuffering) {
                controller.pauseBuffering();
              }
            });
          };
          _proto.swapAudioCodec = function swapAudioCodec() {
            logger.log("swapAudioCodec");
            this.streamController.swapAudioCodec();
          };
          _proto.recoverMediaError = function recoverMediaError() {
            logger.log("recoverMediaError");
            var media = this._media;
            this.detachMedia();
            if (media) {
              this.attachMedia(media);
            }
          };
          _proto.removeLevel = function removeLevel(levelIndex) {
            this.levelController.removeLevel(levelIndex);
          };
          _proto.setAudioOption = function setAudioOption(audioOption) {
            var _this$audioTrackContr;
            return (_this$audioTrackContr = this.audioTrackController) == null ? void 0 : _this$audioTrackContr.setAudioOption(audioOption);
          };
          _proto.setSubtitleOption = function setSubtitleOption(subtitleOption) {
            var _this$subtitleTrackCo;
            (_this$subtitleTrackCo = this.subtitleTrackController) == null ? void 0 : _this$subtitleTrackCo.setSubtitleOption(subtitleOption);
            return null;
          };
          _createClass2(Hls3, [{
            key: "levels",
            get: function get() {
              var levels = this.levelController.levels;
              return levels ? levels : [];
            }
            /**
             * Index of quality level (variant) currently played
             */
          }, {
            key: "currentLevel",
            get: function get() {
              return this.streamController.currentLevel;
            },
            set: function set(newLevel) {
              logger.log("set currentLevel:" + newLevel);
              this.levelController.manualLevel = newLevel;
              this.streamController.immediateLevelSwitch();
            }
            /**
             * Index of next quality level loaded as scheduled by stream controller.
             */
          }, {
            key: "nextLevel",
            get: function get() {
              return this.streamController.nextLevel;
            },
            set: function set(newLevel) {
              logger.log("set nextLevel:" + newLevel);
              this.levelController.manualLevel = newLevel;
              this.streamController.nextLevelSwitch();
            }
            /**
             * Return the quality level of the currently or last (of none is loaded currently) segment
             */
          }, {
            key: "loadLevel",
            get: function get() {
              return this.levelController.level;
            },
            set: function set(newLevel) {
              logger.log("set loadLevel:" + newLevel);
              this.levelController.manualLevel = newLevel;
            }
            /**
             * get next quality level loaded
             */
          }, {
            key: "nextLoadLevel",
            get: function get() {
              return this.levelController.nextLoadLevel;
            },
            set: function set(level) {
              this.levelController.nextLoadLevel = level;
            }
            /**
             * Return "first level": like a default level, if not set,
             * falls back to index of first level referenced in manifest
             */
          }, {
            key: "firstLevel",
            get: function get() {
              return Math.max(this.levelController.firstLevel, this.minAutoLevel);
            },
            set: function set(newLevel) {
              logger.log("set firstLevel:" + newLevel);
              this.levelController.firstLevel = newLevel;
            }
            /**
             * Return the desired start level for the first fragment that will be loaded.
             * The default value of -1 indicates automatic start level selection.
             * Setting hls.nextAutoLevel without setting a startLevel will result in
             * the nextAutoLevel value being used for one fragment load.
             */
          }, {
            key: "startLevel",
            get: function get() {
              var startLevel = this.levelController.startLevel;
              if (startLevel === -1 && this.abrController.forcedAutoLevel > -1) {
                return this.abrController.forcedAutoLevel;
              }
              return startLevel;
            },
            set: function set(newLevel) {
              logger.log("set startLevel:" + newLevel);
              if (newLevel !== -1) {
                newLevel = Math.max(newLevel, this.minAutoLevel);
              }
              this.levelController.startLevel = newLevel;
            }
            /**
             * Whether level capping is enabled.
             * Default value is set via `config.capLevelToPlayerSize`.
             */
          }, {
            key: "capLevelToPlayerSize",
            get: function get() {
              return this.config.capLevelToPlayerSize;
            },
            set: function set(shouldStartCapping) {
              var newCapLevelToPlayerSize = !!shouldStartCapping;
              if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {
                if (newCapLevelToPlayerSize) {
                  this.capLevelController.startCapping();
                } else {
                  this.capLevelController.stopCapping();
                  this.autoLevelCapping = -1;
                  this.streamController.nextLevelSwitch();
                }
                this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;
              }
            }
            /**
             * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
             */
          }, {
            key: "autoLevelCapping",
            get: function get() {
              return this._autoLevelCapping;
            },
            set: (
              /**
               * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
               */
              function set(newLevel) {
                if (this._autoLevelCapping !== newLevel) {
                  logger.log("set autoLevelCapping:" + newLevel);
                  this._autoLevelCapping = newLevel;
                  this.levelController.checkMaxAutoUpdated();
                }
              }
            )
          }, {
            key: "bandwidthEstimate",
            get: function get() {
              var bwEstimator = this.abrController.bwEstimator;
              if (!bwEstimator) {
                return NaN;
              }
              return bwEstimator.getEstimate();
            },
            set: function set(abrEwmaDefaultEstimate) {
              this.abrController.resetEstimator(abrEwmaDefaultEstimate);
            }
            /**
             * get time to first byte estimate
             * @type {number}
             */
          }, {
            key: "ttfbEstimate",
            get: function get() {
              var bwEstimator = this.abrController.bwEstimator;
              if (!bwEstimator) {
                return NaN;
              }
              return bwEstimator.getEstimateTTFB();
            }
          }, {
            key: "maxHdcpLevel",
            get: function get() {
              return this._maxHdcpLevel;
            },
            set: function set(value) {
              if (isHdcpLevel(value) && this._maxHdcpLevel !== value) {
                this._maxHdcpLevel = value;
                this.levelController.checkMaxAutoUpdated();
              }
            }
            /**
             * True when automatic level selection enabled
             */
          }, {
            key: "autoLevelEnabled",
            get: function get() {
              return this.levelController.manualLevel === -1;
            }
            /**
             * Level set manually (if any)
             */
          }, {
            key: "manualLevel",
            get: function get() {
              return this.levelController.manualLevel;
            }
            /**
             * min level selectable in auto mode according to config.minAutoBitrate
             */
          }, {
            key: "minAutoLevel",
            get: function get() {
              var levels = this.levels, minAutoBitrate = this.config.minAutoBitrate;
              if (!levels) return 0;
              var len = levels.length;
              for (var i = 0; i < len; i++) {
                if (levels[i].maxBitrate >= minAutoBitrate) {
                  return i;
                }
              }
              return 0;
            }
            /**
             * max level selectable in auto mode according to autoLevelCapping
             */
          }, {
            key: "maxAutoLevel",
            get: function get() {
              var levels = this.levels, autoLevelCapping = this.autoLevelCapping, maxHdcpLevel = this.maxHdcpLevel;
              var maxAutoLevel;
              if (autoLevelCapping === -1 && levels != null && levels.length) {
                maxAutoLevel = levels.length - 1;
              } else {
                maxAutoLevel = autoLevelCapping;
              }
              if (maxHdcpLevel) {
                for (var i = maxAutoLevel; i--; ) {
                  var hdcpLevel = levels[i].attrs["HDCP-LEVEL"];
                  if (hdcpLevel && hdcpLevel <= maxHdcpLevel) {
                    return i;
                  }
                }
              }
              return maxAutoLevel;
            }
          }, {
            key: "firstAutoLevel",
            get: function get() {
              return this.abrController.firstAutoLevel;
            }
            /**
             * next automatically selected quality level
             */
          }, {
            key: "nextAutoLevel",
            get: function get() {
              return this.abrController.nextAutoLevel;
            },
            set: function set(nextLevel) {
              this.abrController.nextAutoLevel = nextLevel;
            }
            /**
             * get the datetime value relative to media.currentTime for the active level Program Date Time if present
             */
          }, {
            key: "playingDate",
            get: function get() {
              return this.streamController.currentProgramDateTime;
            }
          }, {
            key: "mainForwardBufferInfo",
            get: function get() {
              return this.streamController.getMainFwdBufferInfo();
            }
          }, {
            key: "allAudioTracks",
            get: function get() {
              var audioTrackController = this.audioTrackController;
              return audioTrackController ? audioTrackController.allAudioTracks : [];
            }
            /**
             * Get the list of selectable audio tracks
             */
          }, {
            key: "audioTracks",
            get: function get() {
              var audioTrackController = this.audioTrackController;
              return audioTrackController ? audioTrackController.audioTracks : [];
            }
            /**
             * index of the selected audio track (index in audio track lists)
             */
          }, {
            key: "audioTrack",
            get: function get() {
              var audioTrackController = this.audioTrackController;
              return audioTrackController ? audioTrackController.audioTrack : -1;
            },
            set: function set(audioTrackId) {
              var audioTrackController = this.audioTrackController;
              if (audioTrackController) {
                audioTrackController.audioTrack = audioTrackId;
              }
            }
            /**
             * get the complete list of subtitle tracks across all media groups
             */
          }, {
            key: "allSubtitleTracks",
            get: function get() {
              var subtitleTrackController = this.subtitleTrackController;
              return subtitleTrackController ? subtitleTrackController.allSubtitleTracks : [];
            }
            /**
             * get alternate subtitle tracks list from playlist
             */
          }, {
            key: "subtitleTracks",
            get: function get() {
              var subtitleTrackController = this.subtitleTrackController;
              return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];
            }
            /**
             * index of the selected subtitle track (index in subtitle track lists)
             */
          }, {
            key: "subtitleTrack",
            get: function get() {
              var subtitleTrackController = this.subtitleTrackController;
              return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;
            },
            set: (
              /**
               * select an subtitle track, based on its index in subtitle track lists
               */
              function set(subtitleTrackId) {
                var subtitleTrackController = this.subtitleTrackController;
                if (subtitleTrackController) {
                  subtitleTrackController.subtitleTrack = subtitleTrackId;
                }
              }
            )
            /**
             * Whether subtitle display is enabled or not
             */
          }, {
            key: "media",
            get: function get() {
              return this._media;
            }
          }, {
            key: "subtitleDisplay",
            get: function get() {
              var subtitleTrackController = this.subtitleTrackController;
              return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;
            },
            set: function set(value) {
              var subtitleTrackController = this.subtitleTrackController;
              if (subtitleTrackController) {
                subtitleTrackController.subtitleDisplay = value;
              }
            }
            /**
             * get mode for Low-Latency HLS loading
             */
          }, {
            key: "lowLatencyMode",
            get: function get() {
              return this.config.lowLatencyMode;
            },
            set: function set(mode) {
              this.config.lowLatencyMode = mode;
            }
            /**
             * Position (in seconds) of live sync point (ie edge of live position minus safety delay defined by ```hls.config.liveSyncDuration```)
             * @returns null prior to loading live Playlist
             */
          }, {
            key: "liveSyncPosition",
            get: function get() {
              return this.latencyController.liveSyncPosition;
            }
            /**
             * Estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced)
             * @returns 0 before first playlist is loaded
             */
          }, {
            key: "latency",
            get: function get() {
              return this.latencyController.latency;
            }
            /**
             * maximum distance from the edge before the player seeks forward to ```hls.liveSyncPosition```
             * configured using ```liveMaxLatencyDurationCount``` (multiple of target duration) or ```liveMaxLatencyDuration```
             * @returns 0 before first playlist is loaded
             */
          }, {
            key: "maxLatency",
            get: function get() {
              return this.latencyController.maxLatency;
            }
            /**
             * target distance from the edge as calculated by the latency controller
             */
          }, {
            key: "targetLatency",
            get: function get() {
              return this.latencyController.targetLatency;
            }
            /**
             * the rate at which the edge of the current live playlist is advancing or 1 if there is none
             */
          }, {
            key: "drift",
            get: function get() {
              return this.latencyController.drift;
            }
            /**
             * set to true when startLoad is called before MANIFEST_PARSED event
             */
          }, {
            key: "forceStartLoad",
            get: function get() {
              return this.streamController.forceStartLoad;
            }
          }], [{
            key: "version",
            get: (
              /**
               * Get the video-dev/hls.js package version.
               */
              function get() {
                return "1.5.18";
              }
            )
          }, {
            key: "Events",
            get: function get() {
              return Events;
            }
          }, {
            key: "ErrorTypes",
            get: function get() {
              return ErrorTypes;
            }
          }, {
            key: "ErrorDetails",
            get: function get() {
              return ErrorDetails;
            }
            /**
             * Get the default configuration applied to new instances.
             */
          }, {
            key: "DefaultConfig",
            get: function get() {
              if (!Hls3.defaultConfig) {
                return hlsDefaultConfig;
              }
              return Hls3.defaultConfig;
            },
            set: function set(defaultConfig) {
              Hls3.defaultConfig = defaultConfig;
            }
          }]);
          return Hls3;
        }();
        Hls2.defaultConfig = void 0;
        return Hls2;
      });
    })(false);
  }
});

// node_modules/.pnpm/xgplayer-hls.js@3.0.20_core-js@3.39.0_xgplayer@3.0.20_core-js@3.39.0_/node_modules/xgplayer-hls.js/es/_virtual/_rollupPluginBabelHelpers.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

// node_modules/.pnpm/xgplayer-hls.js@3.0.20_core-js@3.39.0_xgplayer@3.0.20_core-js@3.39.0_/node_modules/xgplayer-hls.js/es/index.js
var import_hls_light = __toESM(require_hls_light());

// node_modules/.pnpm/xgplayer-hls.js@3.0.20_core-js@3.39.0_xgplayer@3.0.20_core-js@3.39.0_/node_modules/xgplayer-hls.js/es/utils/index.js
var util = {};
util.getBrowserVersion = function() {
  var userAgent = navigator.userAgent;
  if (userAgent.toLowerCase().indexOf("mobile") > -1) {
    return "Unknown";
  }
  if (userAgent.indexOf("Firefox") > -1) {
    var version = userAgent.match(/firefox\/[\d.]+/gi)[0].match(/[\d]+/)[0];
    return "Firefox " + version;
  } else if (userAgent.indexOf("Edge") > -1) {
    var _version = userAgent.match(/edge\/[\d.]+/gi)[0].match(/[\d]+/)[0];
    return "Edge " + _version;
  } else if (userAgent.indexOf("rv:11") > -1) {
    return "IE 11";
  } else if (userAgent.indexOf("Opera") > -1 || userAgent.indexOf("OPR") > -1) {
    if (userAgent.indexOf("Opera") > -1) {
      var _version2 = userAgent.match(/opera\/[\d.]+/gi)[0].match(/[\d]+/)[0];
      return "Opera " + _version2;
    }
    if (userAgent.indexOf("OPR") > -1) {
      var _version3 = userAgent.match(/opr\/[\d.]+/gi)[0].match(/[\d]+/)[0];
      return "Opera " + _version3;
    }
  } else if (userAgent.indexOf("Chrome") > -1) {
    var _version4 = userAgent.match(/chrome\/[\d.]+/gi)[0].match(/[\d]+/)[0];
    return "Chrome " + _version4;
  } else if (userAgent.indexOf("Safari") > -1) {
    var _version5 = userAgent.match(/safari\/[\d.]+/gi)[0].match(/[\d]+/)[0];
    return "Safari " + _version5;
  } else if (userAgent.indexOf("MSIE") > -1 || userAgent.indexOf("Trident") > -1) {
    if (userAgent.indexOf("MSIE") > -1) {
      var _version6 = userAgent.match(/msie [\d.]+/gi)[0].match(/[\d]+/)[0];
      return "IE " + _version6;
    }
    if (userAgent.indexOf("Trident") > -1) {
      var versionTrident = userAgent.match(/trident\/[\d.]+/gi)[0].match(/[\d]+/)[0];
      var _version7 = parseInt(versionTrident) + 4;
      return "IE " + _version7;
    }
  } else {
    return "Unknown";
  }
};

// node_modules/.pnpm/xgplayer-hls.js@3.0.20_core-js@3.39.0_xgplayer@3.0.20_core-js@3.39.0_/node_modules/xgplayer-hls.js/es/index.js
var HlsJsPlugin = function(_BasePlugin) {
  _inherits(HlsJsPlugin2, _BasePlugin);
  var _super = _createSuper(HlsJsPlugin2);
  function HlsJsPlugin2(args) {
    var _this;
    _classCallCheck(this, HlsJsPlugin2);
    _this = _super.call(this, args);
    _this.browser = util.getBrowserVersion();
    _this.hls = null;
    _this.hlsOpts = {};
    _this.player.handleSource = false;
    return _this;
  }
  _createClass(HlsJsPlugin2, [{
    key: "afterCreate",
    value: function afterCreate() {
      var _this2 = this;
      var hlsOpts = this.config.hlsOpts;
      this.hlsOpts = hlsOpts;
      this.on(events_exports.URL_CHANGE, function(url) {
        if (/^blob/.test(url)) {
          return;
        }
        _this2.playerConfig.url = url;
        _this2.register(url);
      });
      try {
        BasePlugin.defineGetterOrSetter(this.player, {
          url: {
            get: function get() {
              try {
                return _this2.player.video.src;
              } catch (error) {
                return null;
              }
            },
            configurable: true
          }
        });
      } catch (e) {
      }
    }
  }, {
    key: "beforePlayerInit",
    value: function beforePlayerInit() {
      this.register(this.player.config.url);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.hls && this.hls.destroy();
      var player = this.player;
      BasePlugin.defineGetterOrSetter(player, {
        url: {
          get: function get() {
            try {
              return player.__url;
            } catch (error) {
              return null;
            }
          },
          configurable: true
        }
      });
    }
  }, {
    key: "register",
    value: function register(url) {
      var _this3 = this;
      var player = this.player;
      if (this.hls) {
        this.hls.destroy();
      }
      this.hls = new import_hls_light.default(this.hlsOpts);
      this.hls.once(import_hls_light.default.Events.MEDIA_ATTACHED, function() {
        _this3.hls.loadSource(url);
      });
      this.hls.on(import_hls_light.default.Events.ERROR, function(event, data) {
        var _data$networkDetails;
        player.emit("HLS_ERROR", {
          errorType: data.type,
          errorDetails: data.details,
          errorFatal: data.fatal
        });
        if (data.fatal) {
          switch (data.type) {
            case import_hls_light.default.ErrorTypes.NETWORK_ERROR:
              if (!((data === null || data === void 0 ? void 0 : (_data$networkDetails = data.networkDetails) === null || _data$networkDetails === void 0 ? void 0 : _data$networkDetails.status) === 404)) {
                _this3.hls.startLoad();
              }
              break;
            case import_hls_light.default.ErrorTypes.MEDIA_ERROR:
              _this3.hls.recoverMediaError();
              break;
            default:
              player.emit("error", data);
          }
        }
      });
      this.hls.attachMedia(this.player.media || this.player.video);
      this._statistics();
    }
  }, {
    key: "_statistics",
    value: function _statistics() {
      var statsInfo = {
        speed: 0,
        playerType: "HlsPlayer"
      };
      var mediainfo = {
        videoDataRate: 0,
        audioDataRate: 0
      };
      var player = this.player, hls = this.hls;
      hls.on(import_hls_light.default.Events.FRAG_LOAD_PROGRESS, function(flag, payload) {
        statsInfo.speed = payload.stats.loaded / 1e3;
      });
      hls.on(import_hls_light.default.Events.FRAG_PARSING_DATA, function(flag, payload) {
        if (payload.type === "video") {
          mediainfo.fps = parseInt(payload.nb / (payload.endPTS - payload.startPTS));
        }
      });
      hls.on(import_hls_light.default.Events.FRAG_PARSING_INIT_SEGMENT, function(flag, payload) {
        mediainfo.hasAudio = !!(payload.tracks && payload.tracks.audio);
        mediainfo.hasVideo = !!(payload.tracks && payload.tracks.audio);
        if (mediainfo.hasAudio) {
          var track = payload.tracks.audio;
          mediainfo.audioChannelCount = track.metadata && track.metadata.channelCount ? track.metadata.channelCount : 0;
          mediainfo.audioCodec = track.codec;
        }
        if (mediainfo.hasVideo) {
          var _track = payload.tracks.video;
          mediainfo.videoCodec = _track.codec;
          mediainfo.width = _track.metadata && _track.metadata.width ? _track.metadata.width : 0;
          mediainfo.height = _track.metadata && _track.metadata.height ? _track.metadata.height : 0;
        }
        mediainfo.duration = payload.frag && payload.frag.duration ? payload.frag.duration : 0;
        mediainfo.level = payload.frag && payload.frag.levels ? payload.frag.levels : 0;
        if (mediainfo.videoCodec || mediainfo.audioCodec) {
          mediainfo.mimeType = 'video/hls; codecs="'.concat(mediainfo.videoCodec, ";").concat(mediainfo.audioCodec, '"');
        }
        player.mediainfo = mediainfo;
        player.emit("media_info", mediainfo);
      });
      this._statisticsTimmer = setInterval(function() {
        player.emit("statistics_info", statsInfo);
        statsInfo.speed = 0;
      }, 1e3);
    }
  }], [{
    key: "pluginName",
    get: function get() {
      return "HlsJsPlugin";
    }
  }, {
    key: "defaultConfig",
    get: function get() {
      return {
        hlsOpts: {}
      };
    }
  }, {
    key: "isSupported",
    get: function get() {
      return import_hls_light.default.isSupported;
    }
  }]);
  return HlsJsPlugin2;
}(BasePlugin);
export {
  HlsJsPlugin as default
};
//# sourceMappingURL=xgplayer-hls__js.js.map
