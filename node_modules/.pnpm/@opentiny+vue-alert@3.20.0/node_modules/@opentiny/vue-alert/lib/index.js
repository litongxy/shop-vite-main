function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  ICON_MAP: {
    success: "icon-success",
    error: "icon-error",
    info: "icon-help",
    warning: "icon-warning-triangle",
    simple: "icon-help"
  },
  TITLE_MAP: {
    success: "ui.alert.success",
    error: "ui.alert.error",
    info: "ui.alert.info",
    warning: "ui.alert.warning"
  },
  CONTENT_MAXHEUGHT: 252
};
var alertProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  icon: [String, Object],
  type: {
    type: String,
    default: "info"
  },
  size: {
    type: String,
    default: "normal"
  },
  description: {
    type: String,
    default: ""
  },
  title: {
    type: String
  },
  center: Boolean,
  showIcon: {
    type: Boolean,
    default: true
  },
  closable: {
    type: Boolean,
    default: true
  },
  closeText: {
    type: String,
    default: ""
  },
  singleLine: {
    type: Boolean,
    default: false
  },
  scrolling: {
    type: Boolean,
    default: false
  },
  showFoldable: {
    type: Boolean,
    default: false
  },
  customClass: [String, Object, Array],
  offset: {
    type: [Number, String],
    default: 0
  },
  autoHide: {
    type: Boolean,
    default: false
  },
  target: {
    type: String,
    default: ""
  }
});
var Alert = defineComponent({
  name: $prefix + "Alert",
  props: alertProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Alert.install = function(Vue) {
  Vue.component(Alert.name, Alert);
};
Alert.version = version;
export {
  Alert as default
};
