declare const _default: import("@vue/runtime-core").DefineComponent<{
    width: (StringConstructor | NumberConstructor)[];
    height: (StringConstructor | NumberConstructor)[];
    rowBuffer: {
        type: (StringConstructor | NumberConstructor)[];
        default: any;
    };
    columnBuffer: {
        type: (StringConstructor | NumberConstructor)[];
        default: any;
    };
    scrollbarSize: (StringConstructor | NumberConstructor)[];
    columns: {
        type: ArrayConstructor;
        default: () => never[];
    };
    columnSizes: {
        type: ArrayConstructor;
        default: () => never[];
    };
    rows: {
        type: ArrayConstructor;
        default: () => never[];
    };
    rowSizes: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fixedRows: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fixedColumns: {
        type: ArrayConstructor;
        default: () => never[];
    };
    spanConfig: {
        type: ArrayConstructor;
        default: () => never[];
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    width: (StringConstructor | NumberConstructor)[];
    height: (StringConstructor | NumberConstructor)[];
    rowBuffer: {
        type: (StringConstructor | NumberConstructor)[];
        default: any;
    };
    columnBuffer: {
        type: (StringConstructor | NumberConstructor)[];
        default: any;
    };
    scrollbarSize: (StringConstructor | NumberConstructor)[];
    columns: {
        type: ArrayConstructor;
        default: () => never[];
    };
    columnSizes: {
        type: ArrayConstructor;
        default: () => never[];
    };
    rows: {
        type: ArrayConstructor;
        default: () => never[];
    };
    rowSizes: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fixedRows: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fixedColumns: {
        type: ArrayConstructor;
        default: () => never[];
    };
    spanConfig: {
        type: ArrayConstructor;
        default: () => never[];
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    tiny_mode_root: boolean;
    columns: unknown[];
    rows: unknown[];
    columnSizes: unknown[];
    rowSizes: unknown[];
    columnBuffer: string | number;
    rowBuffer: string | number;
    fixedColumns: unknown[];
    fixedRows: unknown[];
    spanConfig: unknown[];
}, {}>;
export default _default;
