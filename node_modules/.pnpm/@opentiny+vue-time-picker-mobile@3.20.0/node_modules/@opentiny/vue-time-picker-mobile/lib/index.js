import { renderless, api } from '@opentiny/vue-renderless/time-picker-mobile/vue';
import { defineComponent, $prefix, $props, setup } from '@opentiny/vue-common';
import CascaderSelect from '@opentiny/vue-cascader-select';
import { resolveComponent, withDirectives, openBlock, createElementBlock, createVNode, withCtx, toDisplayString, createCommentVNode, vShow, createElementVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var _sfc_main = defineComponent({
  name: $prefix + "TimePickerMobile",
  components: {
    TinyCascaderSelect: CascaderSelect
  },
  emits: ["update:modelValue", "confirm", "update:visible", "clear"],
  props: _extends({}, $props, {
    modelValue: Array,
    defaultValue: Array,
    visible: {
      type: Boolean,
      default: false
    },
    cycleRoll: {
      type: Boolean,
      default: true
    },
    disabled: Function,
    lockScroll: {
      type: Boolean,
      default: true
    },
    step: {
      type: Object,
      default: function _default() {
        return {
          hour: 1,
          minute: 1,
          second: 1
        };
      }
    },
    showSeconds: {
      type: Boolean,
      default: true
    },
    clearable: {
      type: Boolean,
      default: true
    }
  }),
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  "data-tag": "tiny-time-picker-mobile"
};
var _hoisted_2 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    "data-tag": "tiny-time-picker-split",
    class: "h-full w-1 flex items-center justify-center absolute left-0 -ml-0.5 text-color-text-primary select-none"
  },
  " : ",
  -1
  /* HOISTED */
);
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  var _component_tiny_cascader_select = resolveComponent("tiny-cascader-select");
  return withDirectives((openBlock(), createElementBlock(
    "div",
    _hoisted_1,
    [createVNode(_component_tiny_cascader_select, {
      ref: "cascaderSelect",
      modelValue: _ctx.state.dateArr,
      "onUpdate:modelValue": [_cache[1] || (_cache[1] = function($event) {
        return _ctx.state.dateArr = $event;
      }), _ctx.confirm],
      "default-value": _ctx.defaultValue,
      "cycle-roll": _ctx.cycleRoll,
      options: _ctx.state.options,
      disabled: _ctx.disabled,
      "lock-scroll": _ctx.lockScroll,
      "custom-panel-class": "px-4 pb-4",
      visible: _ctx.state.visible,
      "onUpdate:visible": _ctx.updateVisible
    }, {
      split: withCtx(function() {
        return [_hoisted_2];
      }),
      "header-left": withCtx(function() {
        return [_ctx.clearable ? (openBlock(), createElementBlock(
          "span",
          {
            key: 0,
            class: "cursor-pointer text-color-brand",
            onClick: _cache[0] || (_cache[0] = function() {
              return _ctx.clear && _ctx.clear.apply(_ctx, arguments);
            })
          },
          toDisplayString(_ctx.t("ui.datepicker.clear")),
          1
          /* TEXT */
        )) : createCommentVNode("v-if", true)];
      }),
      _: 1
      /* STABLE */
    }, 8, ["modelValue", "default-value", "cycle-roll", "options", "disabled", "lock-scroll", "visible", "onUpdate:visible", "onUpdate:modelValue"])],
    512
    /* NEED_PATCH */
  )), [[vShow, _ctx.visible]]);
}
var TimePickerMobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
TimePickerMobile.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
TimePickerMobile.install = function(Vue) {
  Vue.component(TimePickerMobile.name, TimePickerMobile);
};
TimePickerMobile.version = version;

export { TimePickerMobile as default };
