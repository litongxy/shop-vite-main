function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/row/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var Row = defineComponent({
  name: $prefix + "Row",
  componentName: "Row",
  props: _extends({}, $props, {
    flex: Boolean,
    gutter: {
      type: Number,
      default: 0,
      validator: function validator(value) {
        return value >= 0;
      }
    },
    justify: {
      type: String,
      default: "start",
      validator: function validator2(value) {
        return Boolean(~["start", "center", "end", "space-between", "space-around"].indexOf(value));
      }
    },
    align: {
      type: String,
      default: "top",
      validator: function validator3(value) {
        return Boolean(~["top", "middle", "bottom"].indexOf(value));
      }
    },
    order: {
      type: String,
      validator: function validator4(value) {
        return Boolean(~["asc", "des"].indexOf(value));
      }
    },
    tag: {
      type: String,
      default: "div"
    },
    noSpace: {
      type: Boolean,
      default: false
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Row.install = function(Vue) {
  Vue.component(Row.name, Row);
};
Row.version = version;
export {
  Row as default
};
