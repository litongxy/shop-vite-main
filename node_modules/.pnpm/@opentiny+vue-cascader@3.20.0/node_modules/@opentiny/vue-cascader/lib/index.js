function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import { t } from "@opentiny/vue-locale";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  placeholder: "ui.cascader.placeholder",
  COMPONENT_NAME: {
    FormItem: "FormItem"
  },
  EVENT_NAME: {
    FormBlur: "form.blur",
    FormChange: "form.change"
  },
  defaultNodeConfig: {
    lazy: false,
    load: null,
    isLeaf: "leaf",
    afterLoad: null,
    currentNodeKey: null,
    checkStrictly: false,
    checkDescendants: null,
    defaultCheckedKeys: null,
    defaultExpandedKeys: null,
    autoExpandParent: null,
    defaultExpandAll: null,
    filterNodeMethod: null
  }
};
var cascaderProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  autoSize: Boolean,
  beforeFilter: {
    type: Function,
    default: function _default2() {
      return function() {
      };
    }
  },
  clearable: Boolean,
  collapseTags: Boolean,
  debounce: {
    type: Number,
    default: 300
  },
  disabled: Boolean,
  filterMethod: Function,
  filterable: Boolean,
  modelValue: {},
  options: Array,
  placeholder: {
    type: String,
    default: t("ui.select.placeholder")
  },
  popperAppendToBody: {
    type: Boolean,
    default: true
  },
  popperClass: String,
  props: {
    type: Object,
    default: function _default3() {
      return {};
    }
  },
  separator: {
    type: String,
    default: " /"
  },
  showAllLevels: {
    type: Boolean,
    default: true
  },
  size: String,
  shape: String,
  label: String,
  tip: String,
  displayOnly: {
    type: Boolean,
    default: false
  },
  hoverExpand: {
    type: Boolean,
    default: false
  },
  // mf时，传入action-sheet的title
  title: String,
  showHeader: {
    type: Boolean,
    default: true
  },
  levelTitle: Array,
  // 用来接受小屏下，传入的数组标题，赋值给 cascader-mobile的placeholder属性
  blank: {
    type: Boolean,
    default: false
  }
});
var Cascader = defineComponent({
  name: $prefix + "Cascader",
  componentName: "Cascader",
  props: cascaderProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Cascader.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Cascader.install = function(Vue) {
  Vue.component(Cascader.name, Cascader);
};
Cascader.version = version;
export {
  Cascader as default
};
