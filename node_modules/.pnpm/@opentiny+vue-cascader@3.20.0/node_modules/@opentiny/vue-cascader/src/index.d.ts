export declare const cascaderProps: {
    _constants: {
        type: ObjectConstructor;
        default: () => {
            placeholder: string;
            COMPONENT_NAME: {
                FormItem: string;
            };
            EVENT_NAME: {
                FormBlur: string;
                FormChange: string;
            };
            defaultNodeConfig: {
                lazy: boolean;
                load: null;
                isLeaf: string;
                afterLoad: null;
                currentNodeKey: null;
                checkStrictly: boolean;
                checkDescendants: null;
                defaultCheckedKeys: null;
                defaultExpandedKeys: null;
                autoExpandParent: null;
                defaultExpandAll: null;
                filterNodeMethod: null;
            };
        };
    };
    autoSize: BooleanConstructor;
    beforeFilter: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    clearable: BooleanConstructor;
    collapseTags: BooleanConstructor;
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    filterMethod: FunctionConstructor;
    filterable: BooleanConstructor;
    modelValue: {};
    options: ArrayConstructor;
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    popperClass: StringConstructor;
    props: {
        type: ObjectConstructor;
        default: () => {};
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    shape: StringConstructor;
    label: StringConstructor;
    tip: StringConstructor;
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: StringConstructor;
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    levelTitle: ArrayConstructor;
    blank: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            placeholder: string;
            COMPONENT_NAME: {
                FormItem: string;
            };
            EVENT_NAME: {
                FormBlur: string;
                FormChange: string;
            };
            defaultNodeConfig: {
                lazy: boolean;
                load: null;
                isLeaf: string;
                afterLoad: null;
                currentNodeKey: null;
                checkStrictly: boolean;
                checkDescendants: null;
                defaultCheckedKeys: null;
                defaultExpandedKeys: null;
                autoExpandParent: null;
                defaultExpandAll: null;
                filterNodeMethod: null;
            };
        };
    };
    autoSize: BooleanConstructor;
    beforeFilter: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    clearable: BooleanConstructor;
    collapseTags: BooleanConstructor;
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    filterMethod: FunctionConstructor;
    filterable: BooleanConstructor;
    modelValue: {};
    options: ArrayConstructor;
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    popperClass: StringConstructor;
    props: {
        type: ObjectConstructor;
        default: () => {};
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    shape: StringConstructor;
    label: StringConstructor;
    tip: StringConstructor;
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: StringConstructor;
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    levelTitle: ArrayConstructor;
    blank: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            placeholder: string;
            COMPONENT_NAME: {
                FormItem: string;
            };
            EVENT_NAME: {
                FormBlur: string;
                FormChange: string;
            };
            defaultNodeConfig: {
                lazy: boolean;
                load: null;
                isLeaf: string;
                afterLoad: null;
                currentNodeKey: null;
                checkStrictly: boolean;
                checkDescendants: null;
                defaultCheckedKeys: null;
                defaultExpandedKeys: null;
                autoExpandParent: null;
                defaultExpandAll: null;
                filterNodeMethod: null;
            };
        };
    };
    autoSize: BooleanConstructor;
    beforeFilter: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    clearable: BooleanConstructor;
    collapseTags: BooleanConstructor;
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    filterMethod: FunctionConstructor;
    filterable: BooleanConstructor;
    modelValue: {};
    options: ArrayConstructor;
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    popperClass: StringConstructor;
    props: {
        type: ObjectConstructor;
        default: () => {};
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    shape: StringConstructor;
    label: StringConstructor;
    tip: StringConstructor;
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: StringConstructor;
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    levelTitle: ArrayConstructor;
    blank: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    props: Record<string, any>;
    disabled: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    popperAppendToBody: boolean;
    showHeader: boolean;
    hoverExpand: boolean;
    clearable: boolean;
    displayOnly: boolean;
    placeholder: string;
    blank: boolean;
    filterable: boolean;
    collapseTags: boolean;
    debounce: number;
    separator: string;
    showAllLevels: boolean;
    beforeFilter: Function;
    autoSize: boolean;
}, {}>;
export default _default;
