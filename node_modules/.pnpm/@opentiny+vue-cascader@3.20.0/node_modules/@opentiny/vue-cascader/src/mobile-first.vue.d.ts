import { hooks } from '@opentiny/vue-common';
declare const _default: hooks.DefineComponent<Readonly<{
    props?: any;
    label?: any;
    disabled?: any;
    title?: any;
    size?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    modelValue?: any;
    visibleArrow?: any;
    arrowOffset?: any;
    placement?: any;
    popperClass?: any;
    popperAppendToBody?: any;
    options?: any;
    tip?: any;
    showHeader?: any;
    offset?: any;
    boundariesPadding?: any;
    popperOptions?: any;
    hoverExpand?: any;
    clearable?: any;
    displayOnly?: any;
    placeholder?: any;
    shape?: any;
    filterable?: any;
    collapseTags?: any;
    filterMethod?: any;
    debounce?: any;
    separator?: any;
    showAllLevels?: any;
    beforeFilter?: any;
    autoSize?: any;
    levelTitle?: any;
}>, {
    bp: hooks.Ref<string>;
    visible: hooks.Ref<boolean>;
    showText: hooks.Ref<string>;
    computedMobileProp: hooks.ComputedRef<{
        _constants: any;
        data: any;
        ellipsis: any;
        placeholder: any;
        title: any;
        valueField: any;
        textField: any;
        textField2: any;
        textField3: any;
        childrenField: any;
        textSplit: any;
        showHeader: any;
        multiple: boolean;
        searchConfig: {
            filterable: any;
            filterMethod: any;
        };
        nodeConfig: {
            lazy: any;
            load: any;
            isLeaf: any;
            checkStrictly: any;
            afterLoad: any;
            currentNodeKey: any;
            checkDescendants: any;
            defaultCheckedKeys: any;
            defaultExpandedKeys: any;
            autoExpandParent: any;
            defaultExpandAll: any;
            filterNodeMethod: any;
        };
    }>;
    updateValue: (value: any) => void;
    updateText: (value: any) => void;
}, unknown, {}, {}, hooks.ComponentOptionsMixin, hooks.ComponentOptionsMixin, ("visible-change" | "blur" | "change" | "focus" | "update:modelValue" | "created" | "remove-tag" | "expand-change" | "active-item-change")[], "visible-change" | "blur" | "change" | "focus" | "update:modelValue" | "created" | "remove-tag" | "expand-change" | "active-item-change", hooks.PublicProps, Readonly<hooks.ExtractPropTypes<Readonly<{
    props?: any;
    label?: any;
    disabled?: any;
    title?: any;
    size?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    modelValue?: any;
    visibleArrow?: any;
    arrowOffset?: any;
    placement?: any;
    popperClass?: any;
    popperAppendToBody?: any;
    options?: any;
    tip?: any;
    showHeader?: any;
    offset?: any;
    boundariesPadding?: any;
    popperOptions?: any;
    hoverExpand?: any;
    clearable?: any;
    displayOnly?: any;
    placeholder?: any;
    shape?: any;
    filterable?: any;
    collapseTags?: any;
    filterMethod?: any;
    debounce?: any;
    separator?: any;
    showAllLevels?: any;
    beforeFilter?: any;
    autoSize?: any;
    levelTitle?: any;
}>>> & {
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    "onVisible-change"?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onCreated?: ((...args: any[]) => any) | undefined;
    "onRemove-tag"?: ((...args: any[]) => any) | undefined;
    "onExpand-change"?: ((...args: any[]) => any) | undefined;
    "onActive-item-change"?: ((...args: any[]) => any) | undefined;
}, {
    readonly props?: any;
    readonly label?: any;
    readonly disabled?: any;
    readonly title?: any;
    readonly size?: any;
    readonly tiny_mode?: any;
    readonly tiny_mode_root?: any;
    readonly tiny_template?: any;
    readonly tiny_renderless?: any;
    readonly _constants?: any;
    readonly tiny_theme?: any;
    readonly tiny_chart_theme?: any;
    readonly modelValue?: any;
    readonly visibleArrow?: any;
    readonly arrowOffset?: any;
    readonly placement?: any;
    readonly popperClass?: any;
    readonly popperAppendToBody?: any;
    readonly options?: any;
    readonly tip?: any;
    readonly showHeader?: any;
    readonly offset?: any;
    readonly boundariesPadding?: any;
    readonly popperOptions?: any;
    readonly hoverExpand?: any;
    readonly clearable?: any;
    readonly displayOnly?: any;
    readonly placeholder?: any;
    readonly shape?: any;
    readonly filterable?: any;
    readonly collapseTags?: any;
    readonly filterMethod?: any;
    readonly debounce?: any;
    readonly separator?: any;
    readonly showAllLevels?: any;
    readonly beforeFilter?: any;
    readonly autoSize?: any;
    readonly levelTitle?: any;
}, {}>;
export default _default;
