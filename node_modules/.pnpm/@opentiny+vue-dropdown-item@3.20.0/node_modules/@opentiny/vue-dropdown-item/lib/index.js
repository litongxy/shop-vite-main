function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  ICON_MAP: {
    leftWardArrow: "icon-left-ward-arrow"
  }
};
var dropdownItemProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  icon: [String, Object],
  disabled: Boolean,
  divided: Boolean,
  itemData: {
    type: [String, Object],
    default: ""
  },
  title: String,
  label: String,
  level: String,
  titleClass: String,
  options: {
    type: Array,
    default: function _default2() {
      return [];
    }
  },
  // mobile 属性，可选值 selection | filter | sort
  type: {
    type: String,
    default: "selection"
  },
  // 是否选中，勾选状态功能
  selected: {
    type: Boolean,
    default: false
  },
  // 暂没找到使用的地方
  selectedField: {
    type: String,
    default: "selected"
  },
  // 暂没找到使用的地方
  multiStage: {
    type: Boolean,
    default: false
  },
  currentIndex: {
    type: Number,
    default: function _default3() {
      return -1;
    }
  },
  tooltipContent: {
    type: String,
    default: ""
  },
  // 以下为 tiny 新增
  appendToBody: {
    type: Boolean,
    default: true
  },
  textField: {
    type: String,
    default: "label"
  },
  tip: {
    type: [String, Function],
    default: ""
  },
  tipPosition: {
    type: String,
    default: "right"
  },
  effect: {
    type: String,
    default: "light"
  }
});
var DropdownItem = defineComponent({
  name: $prefix + "DropdownItem",
  componentName: "TinyDropdownItem",
  props: dropdownItemProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
DropdownItem.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
DropdownItem.install = function(Vue) {
  Vue.component(DropdownItem.name, DropdownItem);
};
DropdownItem.version = version;
export {
  DropdownItem as default
};
