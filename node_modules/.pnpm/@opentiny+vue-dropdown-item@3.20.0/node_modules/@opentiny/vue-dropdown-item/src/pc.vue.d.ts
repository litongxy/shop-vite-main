import type { IDropdownItemApi } from '@opentiny/vue-renderless/types/dropdown-item.type';
declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    label?: any;
    disabled?: any;
    divided?: any;
    icon?: any;
    type?: any;
    title?: any;
    selected?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    effect?: any;
    multiStage?: any;
    options?: any;
    textField?: any;
    itemData?: any;
    titleClass?: any;
    selectedField?: any;
    currentIndex?: any;
    appendToBody?: any;
    tip?: any;
    tipPosition?: any;
    isMono?: any;
}>, IDropdownItemApi, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("item-click" | "change" | "close" | "reset" | "update:modelValue" | "confirm" | "open" | "closed" | "opened")[], "item-click" | "change" | "close" | "reset" | "update:modelValue" | "confirm" | "open" | "closed" | "opened", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    label?: any;
    disabled?: any;
    divided?: any;
    icon?: any;
    type?: any;
    title?: any;
    selected?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    effect?: any;
    multiStage?: any;
    options?: any;
    textField?: any;
    itemData?: any;
    titleClass?: any;
    selectedField?: any;
    currentIndex?: any;
    appendToBody?: any;
    tip?: any;
    tipPosition?: any;
    isMono?: any;
}>>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onReset?: ((...args: any[]) => any) | undefined;
    "onItem-click"?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onClosed?: ((...args: any[]) => any) | undefined;
    onOpened?: ((...args: any[]) => any) | undefined;
}, {
    readonly label?: any;
    readonly disabled?: any;
    readonly divided?: any;
    readonly icon?: any;
    readonly type?: any;
    readonly title?: any;
    readonly selected?: any;
    readonly tiny_mode?: any;
    readonly tiny_mode_root?: any;
    readonly tiny_template?: any;
    readonly tiny_renderless?: any;
    readonly _constants?: any;
    readonly tiny_theme?: any;
    readonly tiny_chart_theme?: any;
    readonly effect?: any;
    readonly multiStage?: any;
    readonly options?: any;
    readonly textField?: any;
    readonly itemData?: any;
    readonly titleClass?: any;
    readonly selectedField?: any;
    readonly currentIndex?: any;
    readonly appendToBody?: any;
    readonly tip?: any;
    readonly tipPosition?: any;
    readonly isMono?: any;
}, {}>;
export default _default;
