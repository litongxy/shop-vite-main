import { defineComponent, $prefix, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/list/vue';
import { openBlock, createElementBlock, normalizeClass, renderSlot, createCommentVNode, createElementVNode, toDisplayString } from 'vue';
import '@opentiny/vue-theme-mobile/list/index.css';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "List",
  props: {
    content: {
      type: String,
      default: ""
    },
    subText: {
      type: String,
      default: ""
    },
    contentDes: {
      type: String,
      default: ""
    },
    list: {
      type: Boolean,
      default: false
    },
    id: {
      type: [Number, String],
      default: ""
    }
  },
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "tiny-mobile-list__prefix"
};
var _hoisted_2 = {
  class: "tiny-mobile-list__content"
};
var _hoisted_3 = {
  class: "tiny-mobile-list__content-text"
};
var _hoisted_4 = {
  class: "tiny-mobile-list__main-text"
};
var _hoisted_5 = {
  key: 0,
  class: "tiny-mobile-list__sub-text"
};
var _hoisted_6 = {
  key: 0,
  class: "tiny-mobile-list__content-des"
};
var _hoisted_7 = {
  key: 1,
  class: "tiny-mobile-list__content-des"
};
var _hoisted_8 = {
  key: 1,
  class: "tiny-mobile-list__suffix"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass([{
        "is-show-prefix": _ctx.slots.prefix,
        "is-padding": _ctx.list
      }, "tiny-mobile-list"]),
      onClick: _cache[0] || (_cache[0] = function() {
        return _ctx.clickList && _ctx.clickList.apply(_ctx, arguments);
      })
    },
    [_ctx.slots.prefix ? (openBlock(), createElementBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "prefix")])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_2, [createElementVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "default", {}, function() {
      return [createElementVNode(
        "span",
        _hoisted_4,
        toDisplayString(_ctx.content),
        1
        /* TEXT */
      )];
    }), _ctx.subText ? (openBlock(), createElementBlock(
      "span",
      _hoisted_5,
      toDisplayString(_ctx.subText),
      1
      /* TEXT */
    )) : createCommentVNode("v-if", true)]), _ctx.slots.description ? (openBlock(), createElementBlock("div", _hoisted_6, [renderSlot(_ctx.$slots, "description")])) : createCommentVNode("v-if", true), _ctx.contentDes ? (openBlock(), createElementBlock(
      "p",
      _hoisted_7,
      toDisplayString(_ctx.contentDes),
      1
      /* TEXT */
    )) : createCommentVNode("v-if", true)]), _ctx.slots.suffix ? (openBlock(), createElementBlock("div", _hoisted_8, [renderSlot(_ctx.$slots, "suffix")])) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  );
}
var List = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
List.install = function(Vue) {
  Vue.component(List.name, List);
};
List.version = version;

export { List as default };
