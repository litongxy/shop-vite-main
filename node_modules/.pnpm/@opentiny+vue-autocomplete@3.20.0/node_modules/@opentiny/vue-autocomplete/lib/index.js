function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/autocomplete/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  WARP_CLS: ".tiny-autocomplete-suggestion__wrap",
  ITEM_CLS: ".tiny-autocomplete-suggestion__list li"
};
var autoCompleteProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  autofocus: Boolean,
  clearable: {
    type: Boolean,
    default: function _default2() {
      return false;
    }
  },
  customItem: String,
  debounce: {
    type: Number,
    default: function _default3() {
      return 300;
    }
  },
  disabled: Boolean,
  fetchSuggestions: Function,
  hideLoading: Boolean,
  highlightFirstItem: {
    type: Boolean,
    default: function _default4() {
      return false;
    }
  },
  label: String,
  maxlength: Number,
  minlength: Number,
  modelValue: String,
  name: String,
  placeholder: String,
  placement: {
    type: String,
    default: function _default5() {
      return "bottom-start";
    }
  },
  popperAppendToBody: {
    type: Boolean,
    default: function _default6() {
      return true;
    }
  },
  popperClass: String,
  popperOptions: Object,
  prefixIcon: [String, Object],
  selectWhenUnmatched: {
    type: Boolean,
    default: function _default7() {
      return false;
    }
  },
  size: String,
  suffixIcon: [String, Object],
  triggerOnFocus: {
    type: Boolean,
    default: function _default8() {
      return true;
    }
  },
  valueKey: {
    type: String,
    default: function _default9() {
      return "value";
    }
  },
  displayOnly: {
    type: Boolean,
    default: false
  },
  validateEvent: {
    type: Boolean,
    default: void 0
  }
});
var Autocomplete = defineComponent({
  name: $prefix + "Autocomplete",
  props: autoCompleteProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Autocomplete.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Autocomplete.install = function(Vue) {
  Vue.component(Autocomplete.name, Autocomplete);
};
Autocomplete.version = version;
export {
  Autocomplete as default
};
