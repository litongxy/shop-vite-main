declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    name?: any;
    label?: any;
    disabled?: any;
    size?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    modelValue?: any;
    tabindex?: any;
    suffixIcon?: any;
    placement?: any;
    popperClass?: any;
    popperAppendToBody?: any;
    autofocus?: any;
    popperOptions?: any;
    prefixIcon?: any;
    clearable?: any;
    validateEvent?: any;
    displayOnly?: any;
    placeholder?: any;
    maxlength?: any;
    valueKey?: any;
    minlength?: any;
    fetchSuggestions?: any;
    triggerOnFocus?: any;
    customItem?: any;
    selectWhenUnmatched?: any;
    debounce?: any;
    hideLoading?: any;
    highlightFirstItem?: any;
}>, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
    m: (...cssClasses: any[]) => string;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("select" | "blur" | "focus" | "clear" | "update:modelValue" | "created")[], "select" | "blur" | "focus" | "clear" | "update:modelValue" | "created", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    name?: any;
    label?: any;
    disabled?: any;
    size?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    modelValue?: any;
    tabindex?: any;
    suffixIcon?: any;
    placement?: any;
    popperClass?: any;
    popperAppendToBody?: any;
    autofocus?: any;
    popperOptions?: any;
    prefixIcon?: any;
    clearable?: any;
    validateEvent?: any;
    displayOnly?: any;
    placeholder?: any;
    maxlength?: any;
    valueKey?: any;
    minlength?: any;
    fetchSuggestions?: any;
    triggerOnFocus?: any;
    customItem?: any;
    selectWhenUnmatched?: any;
    debounce?: any;
    hideLoading?: any;
    highlightFirstItem?: any;
}>>> & {
    onSelect?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    onCreated?: ((...args: any[]) => any) | undefined;
}, {
    readonly name?: any;
    readonly label?: any;
    readonly disabled?: any;
    readonly size?: any;
    readonly tiny_mode?: any;
    readonly tiny_mode_root?: any;
    readonly tiny_template?: any;
    readonly tiny_renderless?: any;
    readonly _constants?: any;
    readonly tiny_theme?: any;
    readonly tiny_chart_theme?: any;
    readonly modelValue?: any;
    readonly tabindex?: any;
    readonly suffixIcon?: any;
    readonly placement?: any;
    readonly popperClass?: any;
    readonly popperAppendToBody?: any;
    readonly autofocus?: any;
    readonly popperOptions?: any;
    readonly prefixIcon?: any;
    readonly clearable?: any;
    readonly validateEvent?: any;
    readonly displayOnly?: any;
    readonly placeholder?: any;
    readonly maxlength?: any;
    readonly valueKey?: any;
    readonly minlength?: any;
    readonly fetchSuggestions?: any;
    readonly triggerOnFocus?: any;
    readonly customItem?: any;
    readonly selectWhenUnmatched?: any;
    readonly debounce?: any;
    readonly hideLoading?: any;
    readonly highlightFirstItem?: any;
}, {}>;
export default _default;
