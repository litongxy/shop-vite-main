import type { PropType } from '@opentiny/vue-common';
export type VariantType = 'image' | 'circle' | 'square';
export type SizeType = 'large' | 'medium' | 'small';
export declare const $constants: {};
export declare const skeletonItemProps: {
    _constants: {
        type: ObjectConstructor;
        default: () => {};
    };
    modelValue: StringConstructor;
    variant: {
        type: PropType<VariantType>;
        default: string;
    };
    size: {
        type: PropType<SizeType>;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {};
    };
    modelValue: StringConstructor;
    variant: {
        type: PropType<VariantType>;
        default: string;
    };
    size: {
        type: PropType<SizeType>;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {};
    };
    modelValue: StringConstructor;
    variant: {
        type: PropType<VariantType>;
        default: string;
    };
    size: {
        type: PropType<SizeType>;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    size: SizeType;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    variant: VariantType;
}, {}>;
export default _default;
