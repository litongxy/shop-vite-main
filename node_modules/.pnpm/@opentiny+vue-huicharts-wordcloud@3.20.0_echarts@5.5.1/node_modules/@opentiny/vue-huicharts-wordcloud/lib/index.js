import Core, { itemLabel, itemContent } from '@opentiny/vue-huicharts-core';
import { $prefix } from '@opentiny/vue-common';
import 'echarts-wordcloud';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getTooltip = function getTooltip2(args) {
  var tooltipFormatter = args.tooltipFormatter;
  function formatter(params) {
    var data2 = params.data;
    var name = data2.name, value = data2.value;
    if (tooltipFormatter) {
      return tooltipFormatter.apply(void 0, params);
    }
    return "" + itemLabel(name) + itemContent(value);
  }
  return formatter;
};
var shapeSquare = function shapeSquare2(theta) {
  return Math.min(1 / Math.abs(Math.cos(theta)), 1 / Math.abs(Math.sin(theta)));
};
var getData = function getData2(args) {
  var dimension = args.dimension, metrics = args.metrics, rows = args.rows;
  return rows.slice().map(function(row) {
    return {
      name: row[dimension],
      value: row[metrics]
    };
  });
};
var getWordColor = function getWordColor2(args) {
  var color = args.color, colors = args.colors;
  var tempColor = color || colors;
  if (Array.isArray(tempColor) && tempColor.length) {
    var textColor = function textColor2(word) {
      return tempColor[word.dataIndex % tempColor.length];
    };
    return {
      textColor
    };
  }
  if (!Array.isArray(tempColor) && Boolean(tempColor)) {
    return {
      color: tempColor
    };
  }
  return "rgb(" + Math.round(Math.random() * 160) + "," + Math.round(Math.random() * 160) + "," + Math.round(Math.random() * 160) + ")";
};
var wordcloud = function wordcloud2(columns, rows, settings, extra) {
  var _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? columns[1] : _settings$metrics;
  var _settings$sizeMax = settings.sizeMax, sizeMax = _settings$sizeMax === void 0 ? 60 : _settings$sizeMax, _settings$sizeMin = settings.sizeMin, sizeMin = _settings$sizeMin === void 0 ? 12 : _settings$sizeMin, shape = settings.shape, _settings$color = settings.color, color = _settings$color === void 0 ? "" : _settings$color;
  var tooltipVisible = extra.tooltipVisible, tooltipFormatter = extra.tooltipFormatter, colors = extra.color;
  var data2 = getData({
    dimension,
    metrics,
    rows
  });
  var wordColors = getWordColor({
    color,
    colors
  });
  var ichartOptions = _extends({
    sizeRange: [sizeMin, sizeMax],
    shape: shape || shapeSquare,
    data: data2
  }, wordColors);
  if (tooltipVisible) {
    ichartOptions.tipHtml = getTooltip({
      tooltipFormatter
    });
  }
  return ichartOptions;
};
var _sfc_main = {
  name: $prefix + "ChartWordcloud",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "WordCloudChart"
    };
  },
  methods: {
    updateChart: function updateChart() {
      var _this$data = this.data, _this$data$columns = _this$data.columns, columns = _this$data$columns === void 0 ? [] : _this$data$columns, _this$data$rows = _this$data.rows, rows = _this$data$rows === void 0 ? [] : _this$data$rows;
      var extra = {
        tooltipVisible: this.tooltipVisible
      };
      var option = wordcloud(columns, rows, this.settings, extra);
      this.huiChartOption = _extends({}, option);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsWordcloud = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsWordcloud.install = function(Vue) {
  Vue.component(HuiChartsWordcloud.name, HuiChartsWordcloud);
};

export { HuiChartsWordcloud, HuiChartsWordcloud as default };
