import { renderless, api } from '@opentiny/vue-renderless/dialog-box/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import '@opentiny/vue-theme-mobile/dialog-box/index.css';
import { openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, withModifiers, createElementBlock, normalizeClass, renderSlot, toDisplayString, createCommentVNode, vShow } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["update:visible", "change", "before-close", "open", "close", "opened", "confirm", "cancel", "closed"],
  props: [].concat(props, ["visible", "title", "modal", "closeOnClickModal", "modalAppendToBody", "appendToBody", "width", "top", "showHeader", "destroyOnClose"]),
  model: {
    prop: "visible",
    event: "update:visible"
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "tiny-mobile-dialog-box__header"
};
var _hoisted_2 = {
  class: "tiny-mobile-dialog-box__title"
};
var _hoisted_3 = {
  class: "tiny-mobile-dialog-box__body"
};
var _hoisted_4 = {
  class: "tiny-mobile-dialog-box__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(Transition, {
    name: "dialog-fade",
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          class: "tiny-mobile-dialog-box__wrapper",
          onClick: _cache[2] || (_cache[2] = withModifiers(function() {
            return _ctx.handleWrapperClick && _ctx.handleWrapperClick.apply(_ctx, arguments);
          }, ["self"]))
        },
        [(openBlock(), createElementBlock(
          "div",
          {
            ref: "dialog",
            class: normalizeClass([{
              "is-hide-header": !_ctx.showHeader
            }, "tiny-mobile-dialog-box"]),
            key: _ctx.state.key
          },
          [_ctx.showHeader ? (openBlock(), createElementBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "title", {}, function() {
            return [createElementVNode(
              "span",
              _hoisted_2,
              toDisplayString(_ctx.title),
              1
              /* TEXT */
            )];
          })])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "default")]), createElementVNode("div", _hoisted_4, [renderSlot(_ctx.$slots, "footer", {}, function() {
            return [createElementVNode(
              "button",
              {
                type: "button",
                onClick: _cache[0] || (_cache[0] = function() {
                  return _ctx.handleCancel && _ctx.handleCancel.apply(_ctx, arguments);
                }),
                class: "tiny-mobile-dialog-box__button cancel-button"
              },
              toDisplayString(_ctx.t("ui.dialogBox.cancel")),
              1
              /* TEXT */
            ), createElementVNode(
              "button",
              {
                type: "button",
                onClick: _cache[1] || (_cache[1] = function() {
                  return _ctx.handleConfirm && _ctx.handleConfirm.apply(_ctx, arguments);
                }),
                class: "tiny-mobile-dialog-box__button confirm-button"
              },
              toDisplayString(_ctx.t("ui.dialogBox.confirm")),
              1
              /* TEXT */
            )];
          })])],
          2
          /* CLASS */
        ))],
        512
        /* NEED_PATCH */
      ), [[vShow, _ctx.visible]])];
    }),
    _: 3
    /* FORWARDED */
  });
}
var mobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobile as default };
