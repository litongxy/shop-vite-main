import { renderless, api } from '@opentiny/vue-renderless/dialog-box/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import { iconClose, iconFullscreen, iconMinscreen } from '@opentiny/vue-icon';
import '@opentiny/vue-theme/dialog-box/index.css';
import { resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, withModifiers, createVNode, createElementBlock, normalizeStyle, renderSlot, toDisplayString, createCommentVNode, vShow } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    IconClose: iconClose(),
    IconFullscreen: iconFullscreen(),
    IconMinscreen: iconMinscreen()
  },
  emits: [
    "update:visible",
    "change",
    "before-close",
    "open",
    "close",
    "opened",
    "confirm",
    "cancel",
    "closed",
    "drag-start",
    "drag-move",
    "drag-end",
    // tiny 新增
    "resize"
  ],
  props: [].concat(props, ["resize", "isFormReset", "visible", "title", "modal", "modalAppendToBody", "appendToBody", "lockScroll", "closeOnClickModal", "closeOnPressEscape", "showClose", "width", "fullscreen", "top", "center", "draggable", "dragOutsideWindow", "showHeader", "rightSlide", "destroyOnClose", "dialogClass", "beforeClose", "maxHeight", "dialogTransition"]),
  model: {
    prop: "visible",
    event: "update:visible"
  },
  provide: function provide() {
    return {
      dialog: this
    };
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-dialog-box__title"
};
var _hoisted_2 = {
  class: "tiny-dialog-box__btn-tools"
};
var _hoisted_3 = {
  class: "tiny-dialog-box__body"
};
var _hoisted_4 = {
  key: 1,
  ref: "footer",
  class: "tiny-dialog-box__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_fullscreen = resolveComponent("icon-fullscreen");
  var _component_icon_minscreen = resolveComponent("icon-minscreen");
  var _component_icon_close = resolveComponent("icon-close");
  return openBlock(), createBlock(Transition, {
    name: _ctx.state.animationName,
    onAfterEnter: _ctx.afterEnter,
    onAfterLeave: _ctx.afterLeave,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          class: normalizeClass(["tiny-dialog-box__wrapper", _ctx.dialogClass]),
          onClick: _cache[4] || (_cache[4] = withModifiers(function() {
            return _ctx.handleWrapperClick && _ctx.handleWrapperClick.apply(_ctx, arguments);
          }, ["self"])),
          onMouseup: _cache[5] || (_cache[5] = function() {
            return _ctx.useMouseEventUp && _ctx.useMouseEventUp.apply(_ctx, arguments);
          }),
          onMousedown: _cache[6] || (_cache[6] = function() {
            return _ctx.useMouseEventDown && _ctx.useMouseEventDown.apply(_ctx, arguments);
          })
        },
        [createVNode(Transition, {
          name: _ctx.dialogTransition
        }, {
          default: withCtx(function() {
            return [(_ctx.destroyOnClose ? _ctx.visible : true) ? withDirectives((openBlock(), createElementBlock(
              "div",
              {
                ref: "dialog",
                class: normalizeClass([[{
                  "is-fullscreen": _ctx.state.isFull,
                  "is-center": _ctx.center,
                  "is-right-slide": _ctx.rightSlide
                }], "tiny-dialog-box"]),
                style: normalizeStyle(_ctx.state.style),
                key: _ctx.state.key
              },
              [_ctx.showHeader ? (openBlock(), createElementBlock(
                "div",
                {
                  key: 0,
                  ref: "header",
                  class: "tiny-dialog-box__header",
                  onMousedown: _cache[3] || (_cache[3] = function() {
                    return _ctx.handleDrag && _ctx.handleDrag.apply(_ctx, arguments);
                  })
                },
                [renderSlot(_ctx.$slots, "title", {}, function() {
                  return [createElementVNode(
                    "span",
                    _hoisted_1,
                    toDisplayString(_ctx.title),
                    1
                    /* TEXT */
                  )];
                }), createElementVNode("div", _hoisted_2, [_ctx.resize && !_ctx.state.isFull ? (openBlock(), createElementBlock("button", {
                  key: 0,
                  type: "button",
                  class: "tiny-dialog-box__headerbtn",
                  "aria-label": "Resize",
                  onClick: _cache[0] || (_cache[0] = function($event) {
                    return _ctx.toggleFullScreen(true);
                  })
                }, [createVNode(_component_icon_fullscreen, {
                  class: "tiny-svg-size tiny-dialog-box__resize"
                })])) : createCommentVNode("v-if", true), _ctx.resize && _ctx.state.isFull ? (openBlock(), createElementBlock("button", {
                  key: 1,
                  type: "button",
                  class: "tiny-dialog-box__headerbtn",
                  "aria-label": "Resize",
                  onClick: _cache[1] || (_cache[1] = function($event) {
                    return _ctx.toggleFullScreen(false);
                  })
                }, [createVNode(_component_icon_minscreen, {
                  class: "tiny-svg-size tiny-dialog-box__resize"
                })])) : createCommentVNode("v-if", true), _ctx.showClose ? (openBlock(), createElementBlock("button", {
                  key: 2,
                  type: "button",
                  class: "tiny-dialog-box__headerbtn",
                  "aria-label": "Close",
                  onClick: _cache[2] || (_cache[2] = function($event) {
                    return _ctx.handleClose("close", $event);
                  })
                }, [createVNode(_component_icon_close, {
                  class: "tiny-svg-size tiny-dialog-box__close"
                })])) : createCommentVNode("v-if", true)])],
                544
                /* NEED_HYDRATION, NEED_PATCH */
              )) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "default")]), _ctx.slots.footer ? (openBlock(), createElementBlock(
                "div",
                _hoisted_4,
                [renderSlot(_ctx.$slots, "footer", {
                  beforeClose: _ctx.beforeClose
                })],
                512
                /* NEED_PATCH */
              )) : createCommentVNode("v-if", true)],
              6
              /* CLASS, STYLE */
            )), [[vShow, _ctx.visible]]) : createCommentVNode("v-if", true)];
          }),
          _: 3
          /* FORWARDED */
        }, 8, ["name"])],
        34
        /* CLASS, NEED_HYDRATION */
      ), [[vShow, _ctx.visible]])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["name", "onAfterEnter", "onAfterLeave"]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
