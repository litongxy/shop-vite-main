function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  DIALOG_SLIDER_RIGHT: "dialog-slideRight",
  DIALOG_FADE: "dialog-fade",
  SELECT_DROPDOWN: $prefix + "SelectDropdown",
  DROPDOWN_MENU: $prefix + "DropdownMenu",
  DIALOG_BOX_CLASS: "div.tiny-dialog-box",
  PC_SCROLL_LOCK_CLASS: "dialog-box__scroll-lock",
  MOBILE_SCROLL_LOCK_CLASS: "mobile-dialog-box__scroll-lock",
  Mode: "pc",
  SCROLL_LOCK_CLASS: function SCROLL_LOCK_CLASS(mode) {
    return mode === this.Mode ? this.PC_SCROLL_LOCK_CLASS : this.MOBILE_SCROLL_LOCK_CLASS;
  }
};
var dialogBoxProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  appendToBody: {
    type: Boolean,
    default: function _default2() {
      return false;
    }
  },
  beforeClose: Function,
  center: {
    type: Boolean,
    default: function _default3() {
      return false;
    }
  },
  closeOnClickModal: {
    type: Boolean,
    default: function _default4() {
      return true;
    }
  },
  closeOnPressEscape: {
    type: Boolean,
    default: function _default5() {
      return true;
    }
  },
  destroyOnClose: {
    type: Boolean,
    default: function _default6() {
      return false;
    }
  },
  dialogClass: {
    type: String,
    default: function _default7() {
      return "";
    }
  },
  draggable: {
    type: Boolean,
    default: function _default8() {
      return false;
    }
  },
  dragOutsideWindow: {
    type: Boolean,
    default: function _default9() {
      return false;
    }
  },
  fullscreen: {
    type: Boolean,
    default: function _default10() {
      return false;
    }
  },
  isFormReset: {
    type: Boolean,
    default: function _default11() {
      return true;
    }
  },
  lockScroll: {
    type: Boolean,
    default: function _default12() {
      return true;
    }
  },
  modal: {
    type: Boolean,
    default: function _default13() {
      return true;
    }
  },
  modalAppendToBody: {
    type: Boolean,
    default: function _default14() {
      return true;
    }
  },
  resize: {
    type: Boolean,
    default: function _default15() {
      return false;
    }
  },
  rightSlide: {
    type: Boolean,
    default: function _default16() {
      return false;
    }
  },
  showClose: {
    type: Boolean,
    default: function _default17() {
      return true;
    }
  },
  showHeader: {
    type: Boolean,
    default: function _default18() {
      return true;
    }
  },
  title: {
    type: String,
    default: function _default19() {
      return "";
    }
  },
  top: String,
  visible: {
    type: Boolean,
    default: function _default20() {
      return false;
    }
  },
  width: {
    type: String,
    default: function _default21() {
      return "500px";
    }
  },
  maxHeight: {
    type: String,
    default: function _default22() {
      return "";
    }
  },
  dialogTransition: {
    type: String,
    default: ""
  }
});
var DialogBox = defineComponent({
  name: $prefix + "DialogBox",
  model: {
    prop: "visible",
    event: "update:visible"
  },
  props: dialogBoxProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
DialogBox.install = function(Vue) {
  Vue.component(DialogBox.name, DialogBox);
};
DialogBox.version = version;
export {
  DialogBox as default
};
