import type { PropType } from '@opentiny/vue-common';
export type IconPosition = 'center' | 'top';
export declare const $constants: {
    FORM_ITEM: string;
    FORM_CHANGE: string;
    CHECKBOX: string;
    CHECKBOX_GROUP: string;
};
export declare const checkboxProps: {
    _constants: {
        type: ObjectConstructor;
        default: () => {
            FORM_ITEM: string;
            FORM_CHANGE: string;
            CHECKBOX: string;
            CHECKBOX_GROUP: string;
        };
    };
    modelValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    label: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: string;
    };
    indeterminate: BooleanConstructor;
    disabled: BooleanConstructor;
    checked: BooleanConstructor;
    name: StringConstructor;
    trueLabel: (StringConstructor | NumberConstructor)[];
    falseLabel: (StringConstructor | NumberConstructor)[];
    id: StringConstructor;
    controls: {
        type: StringConstructor;
        default: string;
    };
    border: BooleanConstructor;
    size: StringConstructor;
    text: StringConstructor;
    customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    events: {
        type: ObjectConstructor;
        default: () => {};
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconPosition: PropType<IconPosition>;
    shape: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            FORM_ITEM: string;
            FORM_CHANGE: string;
            CHECKBOX: string;
            CHECKBOX_GROUP: string;
        };
    };
    modelValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    label: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: string;
    };
    indeterminate: BooleanConstructor;
    disabled: BooleanConstructor;
    checked: BooleanConstructor;
    name: StringConstructor;
    trueLabel: (StringConstructor | NumberConstructor)[];
    falseLabel: (StringConstructor | NumberConstructor)[];
    id: StringConstructor;
    controls: {
        type: StringConstructor;
        default: string;
    };
    border: BooleanConstructor;
    size: StringConstructor;
    text: StringConstructor;
    customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    events: {
        type: ObjectConstructor;
        default: () => {};
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconPosition: PropType<IconPosition>;
    shape: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            FORM_ITEM: string;
            FORM_CHANGE: string;
            CHECKBOX: string;
            CHECKBOX_GROUP: string;
        };
    };
    modelValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    label: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: string;
    };
    indeterminate: BooleanConstructor;
    disabled: BooleanConstructor;
    checked: BooleanConstructor;
    name: StringConstructor;
    trueLabel: (StringConstructor | NumberConstructor)[];
    falseLabel: (StringConstructor | NumberConstructor)[];
    id: StringConstructor;
    controls: {
        type: StringConstructor;
        default: string;
    };
    border: BooleanConstructor;
    size: StringConstructor;
    text: StringConstructor;
    customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    events: {
        type: ObjectConstructor;
        default: () => {};
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconPosition: PropType<IconPosition>;
    shape: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    label: string | number | boolean;
    disabled: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    modelValue: string | number | boolean;
    tabindex: string;
    border: boolean;
    events: Record<string, any>;
    validateEvent: boolean;
    displayOnly: boolean;
    shape: string;
    checked: boolean;
    indeterminate: boolean;
    controls: string;
}, {}>;
export default _default;
