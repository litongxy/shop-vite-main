function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { withDirectives, createVNode, vShow } from "vue";
import { renderless, api } from "@opentiny/vue-renderless/tooltip/vue";
import { defineComponent, $prefix, $props, setup as _setup, createComponent, h, mergeClass, parseVnode, isEmptyVnode } from "@opentiny/vue-common";
var classes = {
  "tooltip": "absolute bg-color-text-primary text-color-text-inverse shadow-none -left-[9999px] py-2 px-3 sm:py-1.5 sm:px-2 text-sm sm:text-xs leading-tight min-w-[theme(spacing.12)] max-w-[theme(spacing.80)] sm:max-w-[theme(spacing.112)] z-[2000] break-words rounded [&[x-placement^=top]]:mb-2.5 [&[x-placement^=bottom]]:mt-2.5 [&[x-placement^=right]]:ml-2.5 [&[x-placement^=left]]:mr-2.5",
  "tooltip-sm": "sm:bg-color-bg-1 sm:text-color-text-primary sm:shadow-md",
  "arrow": 'drop-shadow-none absolute block w-0 h-0 border-[0.375rem] border-transparent border-solid after:absolute after:block after:w-0 after:h-0 after:border-[0.3125rem] after:border-transparent after:border-solid after:content-[""]',
  "placement-top": "-bottom-3 border-t-color-text-primary border-b-w-0 after:-bottom-1 after:-ml-1.5 after:border-t-color-text-primary after:border-b-w-0",
  "placement-bottom": "-top-3 border-t-w-0 border-b-color-text-primary after:-top-1 after:-ml-1.5 after:border-t-w-0 after:border-b-color-text-primary",
  "placement-right": "-left-3 border-r-color-text-primary border-l-w-0 after:-bottom-1 after:-left-1 after:border-r-color-text-primary after:border-l-w-0",
  "placement-left": "-right-1.5 border-l-color-text-primary border-r-0 after:-bottom-1 after:right-px after:-ml-1.5 after:border-l-color-text-primary after:border-r-0",
  "placement-top-sm": "sm:drop-shadow-[0_2px_2px_rgba(0,0,0,0.08)] sm:border-t-color-bg-1 sm:after:border-t-color-bg-1",
  "placement-bottom-sm": "sm:drop-shadow-[0_-2px_2px_rgba(0,0,0,0.08)] sm:border-b-color-bg-1 sm:after:border-b-color-bg-1",
  "placement-right-sm": "sm:drop-shadow-[-2px_0px_2px_rgba(0,0,0,0.08)] sm:border-r-color-bg-1 sm:after:border-r-color-bg-1",
  "placement-left-sm": "sm:drop-shadow-[2px_0_2px_rgba(0,0,0,0.08)] sm:border-l-color-bg-1 sm:after:border-l-color-bg-1",
  "placement-top-light": "border-t-color-bg-1 drop-shadow-[0_2px_2px_rgba(0,0,0,0.08)] after:border-t-color-bg-1",
  "placement-bottom-light": "border-b-color-bg-1 drop-shadow-[0_-2px_2px_rgba(0,0,0,0.08)] after:border-b-color-bg-1",
  "placement-left-light": "border-l-color-bg-1 drop-shadow-[2px_0_2px_rgba(0,0,0,0.08)] after:border-l-color-bg-1",
  "placement-right-light": "border-r-color-bg-1 drop-shadow-[-2px_0px_2px_rgba(0,0,0,0.08)] after:border-r-color-bg-1",
  "placement-top-dark": "border-t-color-text-primary after:border-t-color-text-primary",
  "placement-bottom-dark": "border-b-color-text-primary after:border-b-color-text-primary",
  "placement-left-dark": "border-l-color-text-primary after:border-l-color-text-primary",
  "placement-right-dark": "border-r-color-text-primary after:border-r-color-text-primary",
  "effect-dark": "bg-color-text-primary text-color-text-inverse shadow-none",
  "effect-light": "bg-color-bg-1 text-color-text-primary shadow-md",
  "is-warning": "text-color-text-inverse bg-color-warning border-color-warning",
  "is-error": "text-color-text-inverse bg-color-error border-color-error",
  "is-info": "text-color-text-inverse bg-color-info-secondary border-color-info-secondary",
  "is-success": "text-color-text-inverse bg-color-success border-color-success",
  "arrow-top-warning": "border-t-color-warning after:border-t-color-warning",
  "arrow-bottom-warning": "border-b-color-warning after:border-b-color-warning",
  "arrow-left-warning": "border-l-color-warning after:border-l-color-warning",
  "arrow-right-warning": "border-r-color-warning after:border-r-color-warning",
  "arrow-top-error": "border-t-color-error after:border-t-color-error",
  "arrow-bottom-error": "border-b-color-error after:border-b-color-error",
  "arrow-left-error": "border-l-color-error after:border-l-color-error",
  "arrow-right-error": "border-r-color-error after:border-r-color-error",
  "arrow-top-info": "border-t-color-info-secondary after:border-t-color-info-secondary",
  "arrow-bottom-info": "border-b-color-info-secondary after:border-b-color-info-secondary",
  "arrow-left-info": "border-l-color-info-secondary after:border-l-color-info-secondary",
  "arrow-right-info": "border-r-color-info-secondary after:border-r-color-info-secondary",
  "arrow-top-success": "border-t-color-success after:border-t-color-success",
  "arrow-bottom-success": "border-b-color-success after:border-b-color-success",
  "arrow-left-success": "border-l-color-success after:border-l-color-success",
  "arrow-right-success": "border-r-color-success after:border-r-color-success"
};
var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "Tooltip",
  componentName: "Tooltip",
  props: _extends({}, $props, {
    adjustArrow: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    appendToBody: {
      type: Boolean,
      default: function _default2() {
        return true;
      }
    },
    arrowOffset: {
      type: Number,
      default: function _default3() {
        return 0;
      }
    },
    boundariesPadding: {
      type: Number,
      default: function _default4() {
        return 5;
      }
    },
    closeDelay: {
      type: Number,
      default: function _default5() {
        return 100;
      }
    },
    content: {
      type: String
    },
    disabled: {
      type: Boolean
    },
    effect: {
      type: String,
      default: function _default6() {
        return "";
      }
    },
    enterable: {
      type: Boolean,
      default: function _default7() {
        return true;
      }
    },
    hideAfter: {
      type: Number,
      default: function _default8() {
        return 0;
      }
    },
    manual: {
      type: Boolean
    },
    modelValue: {
      type: Boolean
    },
    offset: {
      default: function _default9() {
        return 0;
      }
    },
    openDelay: {
      type: Number,
      default: function _default10() {
        return 0;
      }
    },
    placement: {
      type: String,
      default: function _default11() {
        return "bottom";
      }
    },
    popper: {},
    popperClass: {
      type: String
    },
    popperOptions: {
      default: function _default12() {
        return {
          gpuAcceleration: false,
          boundariesPadding: 10
        };
      }
    },
    pre: {
      type: Boolean
    },
    reference: {},
    renderContent: {
      type: Function
    },
    tabindex: {
      type: Number,
      default: function _default13() {
        return 0;
      }
    },
    transformOrigin: {
      type: [Boolean, String],
      default: function _default14() {
        return true;
      }
    },
    type: {
      type: String,
      validator: function validator(value) {
        return ~["normal", "warning", "error", "info", "success"].indexOf(value);
      }
    },
    visibleArrow: {
      type: Boolean,
      default: function _default15() {
        return true;
      }
    },
    genArrowByHtml: {
      type: Boolean,
      default: function _default16() {
        return true;
      }
    },
    zIndex: {
      type: String,
      default: function _default17() {
        return "next";
      }
    }
  }),
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api
    });
  },
  render: function render() {
    var _this = this;
    var getContent = function getContent2(vm) {
      var slotContent = vm.slots.content && vm.slots.content();
      if (slotContent) {
        return slotContent;
      }
      var attrContent;
      if (vm.renderContent) {
        attrContent = vm.renderContent(h, vm.content);
      } else if (vm.pre) {
        attrContent = vm.content ? h("pre", {
          class: "whitespace-pre-wrap"
        }, vm.content) : null;
      } else {
        attrContent = vm.content;
      }
      return attrContent;
    };
    if (!Object.hasOwnProperty.call(this, "popperVM")) {
      var _cacheVm = {
        value: null
      };
      this.d({
        popperVM: {
          get: function get() {
            if (!_cacheVm.value) {
              _cacheVm.value = createComponent({
                el: document.createElement("div"),
                component: {
                  render: function render2() {
                    var content = getContent(_this);
                    var propsData = {
                      on: {
                        "after-leave": _this.doDestroy
                      }
                    };
                    var mouseenter = function mouseenter2() {
                      return _this.setExpectedState(true);
                    };
                    var mouseleave = function mouseleave2() {
                      _this.setExpectedState(false);
                      _this.debounceClose();
                    };
                    var xPlacement = _this.state.xPlacement || "";
                    return h("transition", propsData, [withDirectives(createVNode("div", {
                      "data-tag": "tiny-tooltip",
                      "ref": "popper",
                      "id": _this.state.tooltipId,
                      "appendToBody": _this.appendToBody,
                      "class": mergeClass([classes.tooltip, !_this.effect && !_this.type && classes["tooltip-sm"], _this.effect && classes["effect-" + _this.effect], _this.type && classes["is-" + _this.type], _this.disabled || !_this.state.showPopper ? "hidden" : "", _this.popperClass]),
                      "role": "tooltip",
                      "aria-hidden": _this.disabled || !_this.state.showPopper ? "true" : "false",
                      "onMouseenter": function onMouseenter() {
                        return mouseenter();
                      },
                      "onMouseleave": function onMouseleave() {
                        return mouseleave();
                      }
                    }, [content, _this.visibleArrow ? createVNode("div", {
                      "x-arrow": true,
                      "class": mergeClass([classes.arrow, classes["placement-" + xPlacement.split("-")[0]], !_this.effect && !_this.type && classes["placement-" + xPlacement.split("-")[0] + "-sm"], _this.effect === "light" ? classes["placement-" + xPlacement.split("-")[0] + "-light"] : "", _this.effect === "dark" ? classes["placement-" + xPlacement.split("-")[0] + "-dark"] : "", _this.type ? classes["arrow-" + xPlacement.split("-")[0] + "-" + _this.type] : ""])
                    }, null) : ""]), [[vShow, !_this.disabled && _this.state.showPopper && content]])]);
                  }
                }
              });
            }
            return _cacheVm.value;
          },
          set: function set(val) {
            return _cacheVm.value = val;
          }
        }
      });
    }
    var stringifyBindClass = function stringifyBindClass2(bindClass, removeClassRE) {
      var trimStr = function trimStr2(str) {
        return str ? str.trim() : str;
      };
      var stringifyClassArr = function stringifyClassArr2(classArr) {
        var arr = [];
        classArr.forEach(function(item) {
          if (item && typeof item === "string") {
            arr.push(trimStr(item));
          } else if (item && typeof item === "object") {
            arr.push(stringifyClassObj(item));
          }
        });
        return arr.join(" ");
      };
      var stringifyClassObj = function stringifyClassObj2(classObj) {
        var arr = [];
        Object.keys(classObj).forEach(function(key) {
          if (classObj[key]) {
            arr.push(key);
          }
        });
        return arr.join(" ");
      };
      var className = "";
      if (bindClass) {
        if (typeof bindClass === "string") {
          className = className + trimStr(bindClass);
        } else if (Array.isArray(bindClass)) {
          className = className + stringifyClassArr(bindClass);
        } else if (typeof bindClass === "object") {
          className = className + stringifyClassObj(bindClass);
        }
      }
      return trimStr(className.replace(removeClassRE, ""));
    };
    var addTooltipClass = function addTooltipClass2(bindClass) {
      var className = stringifyBindClass(bindClass, /\btiny-tooltip\b/g);
      return "tiny-tooltip " + className;
    };
    var getFirstElement = function getFirstElement2() {
      var slots = _this.slots.default && _this.slots.default();
      if (!Array.isArray(slots))
        return null;
      var element = null;
      for (var index = 0; index < slots.length; index++) {
        var vnode = parseVnode(slots[index]);
        if (!isEmptyVnode(vnode)) {
          element = vnode;
          break;
        }
      }
      return element;
    };
    var firstElement = getFirstElement();
    if (!firstElement)
      return null;
    var data = firstElement.data || firstElement.props || (firstElement.props = {});
    data.class = addTooltipClass(data.class);
    return firstElement;
  }
});
export {
  _sfc_main as default
};
