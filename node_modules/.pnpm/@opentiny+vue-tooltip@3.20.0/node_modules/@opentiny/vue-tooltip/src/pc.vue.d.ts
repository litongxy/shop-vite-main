import { hooks } from '@opentiny/vue-common';
import type { ITooltipApi } from '@opentiny/vue-renderless/types/tooltip.type';
declare const _default: hooks.DefineComponent<{
    visible: {
        type: StringConstructor;
        default: () => string;
        validator: (value: string) => boolean;
    };
    adjustArrow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    appendToBody: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    arrowOffset: {
        type: NumberConstructor;
        default: () => number;
    };
    boundariesPadding: {
        type: NumberConstructor;
        default: () => number;
    };
    closeDelay: {
        type: NumberConstructor;
        default: () => number;
    };
    content: {
        type: (StringConstructor | ObjectConstructor)[];
    };
    disabled: {
        type: BooleanConstructor;
    };
    effect: {
        type: StringConstructor;
        default: () => string;
    };
    enterable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    hideAfter: {
        type: NumberConstructor;
        default: () => number;
    };
    manual: {
        type: BooleanConstructor;
    };
    modelValue: {
        type: BooleanConstructor;
    };
    offset: {
        default: () => number;
    };
    openDelay: {
        type: NumberConstructor;
        default: () => number;
    };
    placement: {
        type: StringConstructor;
        default: () => string;
    };
    popper: {};
    popperClass: {
        type: StringConstructor;
    };
    popperOptions: {
        default: () => {
            gpuAcceleration: boolean;
            boundariesPadding: number;
        };
    };
    pre: {
        type: BooleanConstructor;
    };
    reference: {};
    renderContent: {
        type: FunctionConstructor;
    };
    tabindex: {
        type: NumberConstructor;
        default: () => number;
    };
    transition: {
        type: StringConstructor;
        default: () => string;
    };
    type: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    visibleArrow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    zIndex: {
        type: StringConstructor;
        default: () => string;
    };
    contentMaxHeight: {
        type: StringConstructor;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, ITooltipApi, unknown, {}, {}, hooks.ComponentOptionsMixin, hooks.ComponentOptionsMixin, {}, string, hooks.PublicProps, Readonly<hooks.ExtractPropTypes<{
    visible: {
        type: StringConstructor;
        default: () => string;
        validator: (value: string) => boolean;
    };
    adjustArrow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    appendToBody: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    arrowOffset: {
        type: NumberConstructor;
        default: () => number;
    };
    boundariesPadding: {
        type: NumberConstructor;
        default: () => number;
    };
    closeDelay: {
        type: NumberConstructor;
        default: () => number;
    };
    content: {
        type: (StringConstructor | ObjectConstructor)[];
    };
    disabled: {
        type: BooleanConstructor;
    };
    effect: {
        type: StringConstructor;
        default: () => string;
    };
    enterable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    hideAfter: {
        type: NumberConstructor;
        default: () => number;
    };
    manual: {
        type: BooleanConstructor;
    };
    modelValue: {
        type: BooleanConstructor;
    };
    offset: {
        default: () => number;
    };
    openDelay: {
        type: NumberConstructor;
        default: () => number;
    };
    placement: {
        type: StringConstructor;
        default: () => string;
    };
    popper: {};
    popperClass: {
        type: StringConstructor;
    };
    popperOptions: {
        default: () => {
            gpuAcceleration: boolean;
            boundariesPadding: number;
        };
    };
    pre: {
        type: BooleanConstructor;
    };
    reference: {};
    renderContent: {
        type: FunctionConstructor;
    };
    tabindex: {
        type: NumberConstructor;
        default: () => number;
    };
    transition: {
        type: StringConstructor;
        default: () => string;
    };
    type: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    visibleArrow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    zIndex: {
        type: StringConstructor;
        default: () => string;
    };
    contentMaxHeight: {
        type: StringConstructor;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    disabled: boolean;
    pre: boolean;
    transition: string;
    tiny_mode_root: boolean;
    effect: string;
    modelValue: boolean;
    tabindex: number;
    visibleArrow: boolean;
    arrowOffset: number;
    placement: string;
    zIndex: string;
    appendToBody: boolean;
    visible: string;
    offset: number;
    manual: boolean;
    boundariesPadding: number;
    closeDelay: number;
    openDelay: number;
    popperOptions: {
        gpuAcceleration: boolean;
        boundariesPadding: number;
    };
    adjustArrow: boolean;
    enterable: boolean;
    hideAfter: number;
}, {}>;
export default _default;
