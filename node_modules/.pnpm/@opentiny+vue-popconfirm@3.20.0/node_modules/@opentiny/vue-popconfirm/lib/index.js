function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  PC_PREFIXCLS: "tiny-popconfim",
  MOBILE_PREFIXCLS: "tiny-mobile-popconfim",
  Mode: "pc",
  prefixcls: function prefixcls(mode) {
    return mode === this.Mode ? this.PC_PREFIXCLS : this.MOBILE_PREFIXCLS;
  },
  ICON_MAP: {
    success: "icon-success",
    error: "icon-error",
    info: "icon-help",
    warning: "icon-warning-triangle"
  }
};
var popConfirmProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  message: String,
  customClass: String,
  popperOptions: Object,
  trigger: {
    type: String,
    default: "hover",
    validator: function validator(value) {
      return ["click", "hover"].includes(value);
    }
  },
  cancelButton: {
    type: Boolean,
    default: true
  },
  closeOnClickOutside: {
    type: Boolean,
    default: true
  },
  title: String,
  placement: {
    type: String,
    default: "top"
  },
  width: [String, Number],
  type: [String, Object],
  reference: {},
  events: Object,
  popperAppendToBody: {
    type: Boolean,
    default: true
  }
});
var Popconfirm = defineComponent({
  name: $prefix + "Popconfim",
  props: popConfirmProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Popconfirm.install = function(Vue) {
  Vue.component(Popconfirm.name, Popconfirm);
};
Popconfirm.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Popconfirm.version = version;
export {
  Popconfirm as default
};
