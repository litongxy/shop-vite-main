import { defineComponent, $prefix, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/tree-select/vue';
import Tree from '@opentiny/vue-tree';
import BaseSelect from '@opentiny/vue-base-select';
import { resolveComponent, openBlock, createBlock, withCtx, createVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "TreeSelect",
  components: {
    TinyTree: Tree,
    TinyBaseSelect: BaseSelect
  },
  props: {
    clearable: Boolean,
    filterable: Boolean,
    filterMethod: Function,
    modelValue: {},
    multiple: Boolean,
    textField: {
      type: String,
      default: "label"
    },
    treeOp: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    valueField: {
      type: String,
      default: "value"
    }
  },
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_tree = resolveComponent("tiny-tree");
  var _component_tiny_base_select = resolveComponent("tiny-base-select");
  return openBlock(), createBlock(_component_tiny_base_select, {
    ref: "baseSelectRef",
    class: "tiny-tree-select",
    modelValue: _ctx.state.value,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.value = $event;
    }),
    clearable: _ctx.clearable,
    filterable: _ctx.filterable,
    "filter-method": _ctx.filter,
    multiple: _ctx.multiple
  }, {
    panel: withCtx(function() {
      return [createVNode(_component_tiny_tree, {
        ref: "treeRef",
        "current-node-key": !_ctx.multiple ? _ctx.state.currentKey : "",
        data: _ctx.state.treeData,
        "default-checked-keys": _ctx.multiple ? _ctx.state.defaultCheckedKeys : _ctx.treeOp.defaultCheckedKeys || [],
        "default-expand-all": true,
        "expand-on-click-node": false,
        "filter-node-method": _ctx.filterMethod,
        "icon-trigger-click-node": false,
        "node-key": _ctx.valueField,
        props: {
          label: _ctx.textField
        },
        "show-checkbox": _ctx.multiple,
        onCheck: _ctx.check,
        onNodeClick: _ctx.nodeClick
      }, null, 8, ["current-node-key", "data", "default-checked-keys", "filter-node-method", "node-key", "props", "show-checkbox", "onCheck", "onNodeClick"])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "clearable", "filterable", "filter-method", "multiple"]);
}
var TreeSelect = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
TreeSelect.install = function(Vue) {
  Vue.component(TreeSelect.name, TreeSelect);
};
TreeSelect.version = version;

export { TreeSelect as default };
