declare const _default: import("@vue/runtime-core").DefineComponent<{
    inverse: BooleanConstructor;
    total: {
        type: NumberConstructor;
        default: number;
    };
    select: {
        type: ArrayConstructor;
        default: () => never[];
    };
    config: {
        type: ObjectConstructor;
        default: () => {};
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    inverse: BooleanConstructor;
    total: {
        type: NumberConstructor;
        default: number;
    };
    select: {
        type: ArrayConstructor;
        default: () => never[];
    };
    config: {
        type: ObjectConstructor;
        default: () => {};
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    select: unknown[];
    tiny_mode_root: boolean;
    config: Record<string, any>;
    total: number;
    inverse: boolean;
}, {}>;
export default _default;
