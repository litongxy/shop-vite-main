function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props, createComponent, appProperties, hooks, setupComponent } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  SCROLL_LOCK_CLASS: function SCROLL_LOCK_CLASS(mode) {
    var scrollLockClasses = {
      "mobile-first": "overflow-hidden",
      "pc": "popup-parent--hidden dialog-box__scroll-lock"
    };
    return scrollLockClasses[mode] || "";
  },
  DEFAULT_WIDTH: "500px",
  DEFAULT_HEIGHT: "100vh"
};
var drawerProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  visible: {
    type: Boolean,
    default: false
  },
  customClass: [String, Object, Array],
  placement: {
    type: String,
    default: "right"
  },
  width: {
    type: String
  },
  height: {
    type: String
  },
  title: String,
  showClose: {
    type: Boolean,
    default: true
  },
  showHeader: {
    type: Boolean,
    default: true
  },
  showFooter: {
    type: Boolean,
    default: false
  },
  mask: {
    type: Boolean,
    default: true
  },
  maskClosable: {
    type: Boolean,
    default: true
  },
  dragable: Boolean,
  lockScroll: {
    type: Boolean,
    default: true
  },
  flex: {
    type: Boolean,
    default: false
  },
  zIndex: {
    type: Number,
    default: 2e3
  },
  beforeClose: Function,
  tipsProps: Object,
  // tiny 新增：用于方法调用组件
  customSlots: Object
});
var Drawer = defineComponent({
  name: $prefix + "Drawer",
  props: drawerProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var defaultConfigs = {
  customClass: null,
  placement: "right",
  width: null,
  height: null,
  title: "",
  showClose: true,
  showHeader: true,
  showFooter: false,
  mask: true,
  maskClosable: true,
  dragable: false,
  lockScroll: true,
  flex: false,
  zIndex: 2e3,
  beforeClose: null,
  tipsProps: null
};
var service = function service2(configs) {
  var _appProperties$tiny_m;
  if (configs === void 0) {
    configs = {};
  }
  var events = {
    onOpen: function onOpen(params) {
      var _configs$events;
      if (typeof ((_configs$events = configs.events) == null ? void 0 : _configs$events.open) === "function") {
        configs.events.open(params);
      }
    },
    onClose: function onClose(params) {
      var _configs$events2;
      if (typeof ((_configs$events2 = configs.events) == null ? void 0 : _configs$events2.close) === "function") {
        configs.events.close(params);
      }
    },
    onConfirm: function onConfirm(params) {
      var _configs$events3;
      if (typeof ((_configs$events3 = configs.events) == null ? void 0 : _configs$events3.confirm) === "function") {
        configs.events.confirm(params);
      }
    }
  };
  var options = _extends({}, defaultConfigs, configs, events);
  var instance = createComponent({
    component: Drawer,
    propsData: _extends({}, options, {
      _constants: $constants,
      tiny_mode: configs.tiny_mode || ((_appProperties$tiny_m = appProperties().tiny_mode) == null ? void 0 : _appProperties$tiny_m.value)
    }),
    el: document.createElement("div")
  });
  var parent = document.body;
  parent.appendChild(instance.$el);
  hooks.nextTick(function() {
    instance.open();
  });
  return instance;
};
var version = "3.20.0";
Drawer.model = {
  prop: "visible",
  event: "update:visible"
};
Drawer.service = service;
Drawer.install = function(Vue) {
  Vue.component(Drawer.name, Drawer);
};
Drawer.version = version;
setupComponent.TINYDrawer = {
  init: function init(root) {
    var prefix = root.$apiPrefix || "$";
    root[prefix + "drawer"] = service;
  }
};
export {
  Drawer as default
};
