import { renderless, api } from '@opentiny/vue-renderless/picker/vue';
import { defineComponent, directive, setup } from '@opentiny/vue-common';
import Input from '@opentiny/vue-input';
import Clickoutside from '@opentiny/vue-renderless/common/deps/clickoutside';
import DatePanel from '@opentiny/vue-date-panel';
import DateRange from '@opentiny/vue-date-range';
import MonthRange from '@opentiny/vue-month-range';
import YearRange from '@opentiny/vue-year-range';
import Time from '@opentiny/vue-time';
import TimeRange from '@opentiny/vue-time-range';
import TimePanel from '@opentiny/vue-time-panel';
import { iconClose, IconCalendar, IconTime, IconClose } from '@opentiny/vue-icon';
import Tooltip from '@opentiny/vue-tooltip';
import FilterBox from '@opentiny/vue-filter-box';
import DatePickerMobileFirst from '@opentiny/vue-date-picker-mobile-first';
import TimePickerMobile from '@opentiny/vue-time-picker-mobile';
import { resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, withDirectives, createBlock, mergeProps, createSlots, withCtx, createElementVNode, Transition, resolveDynamicComponent, createCommentVNode, createVNode, toDisplayString, Fragment, renderSlot } from 'vue';

var pickerProps = {
  type: {
    type: String,
    default: "date"
  },
  tabindex: {
    type: String,
    default: "1"
  },
  timeArrowControl: Boolean,
  timeEditable: {
    type: Boolean,
    default: true
  },
  size: String,
  format: String,
  valueFormat: String,
  timeFormat: String,
  readonly: Boolean,
  placeholder: String,
  startPlaceholder: String,
  endPlaceholder: String,
  prefixIcon: Object,
  suffixIcon: Object,
  label: String,
  shape: String,
  tip: String,
  clearIcon: {
    type: Object,
    default: function _default() {
      return iconClose();
    }
  },
  name: {
    default: "",
    validator: function validator(value) {
      return value === null || value === void 0 || typeof value === "string" || value instanceof String || Array.isArray(value) && value.length === 2 && value.every(function(item) {
        return typeof item === "string" || item instanceof String;
      });
    }
  },
  clearable: {
    type: Boolean,
    default: true
  },
  changeOnConfirm: {
    type: Boolean,
    default: false
  },
  disabled: Boolean,
  id: {
    default: "",
    validator: function validator2(value) {
      return value === null || value === void 0 || typeof value === "string" || value instanceof String || Array.isArray(value) && value.length === 2 && value.every(function(item) {
        return typeof item === "string" || item instanceof String;
      });
    }
  },
  popperClass: String,
  popperAppendToBody: {
    type: Boolean,
    default: true
  },
  align: {
    type: String,
    default: "left"
  },
  editable: {
    type: Boolean,
    default: true
  },
  modelValue: {},
  defaultValue: {},
  defaultTime: {},
  rangeSeparator: {
    type: [Object, String],
    default: "-"
  },
  unlinkPanels: Boolean,
  pickerOptions: {},
  validateEvent: {
    type: Boolean,
    default: true
  },
  isRange: Boolean,
  arrowControl: Boolean,
  timezoneData: {},
  showTimezone: {
    type: Boolean,
    default: false
  },
  defaultTimezone: String,
  isutc8: {
    type: Boolean,
    default: false
  },
  dbTimezone: Number,
  timezone: Number,
  timezoneOffset: Number,
  iso8601: Boolean,
  displayOnly: {
    type: Boolean,
    default: false
  },
  step: {
    type: Object,
    default: function _default2() {
      return {
        hour: 1,
        minute: 1,
        second: 1
      };
    }
  },
  showWeekNumber: {
    type: Boolean,
    default: false
  },
  formatWeeks: Function,
  autoFormat: {
    type: Boolean,
    default: false
  },
  title: String,
  blank: {
    type: Boolean,
    default: false
  },
  changeCompat: {
    type: Boolean,
    default: false
  },
  nowClick: {
    type: Function
  }
};

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var classes = {
  "input-label": "text-color-text-placeholder text-xs sm:text-sm mr-2 inline-block text-left max-w-[100px] truncate",
  "range-editor": "bg-color-bg-1 relative inline-flex items-center py-1 sm:px-3 border-0 sm:border border-color-border hover:border-color-border-hover rounded mt-0.5",
  "range-input": "appearance-none border-none outline-0 p-0 w-[35%] text-color-text-primary focus:border-color-brand-focus disabled:border-color-border placeholder:text-color-text-placeholder disabled:cursor-not-allowed text-sm sm:placeholder:text-sm sm:text-sm h-full m-0 truncate disabled:text-color-icon-placeholder disabled:bg-transparent sm:disabled:bg-color-border-disabled",
  "datetimerange": "w-full sm:w-96 sm:max-w-full",
  "range-separator": "px-1 leading-5 w-[12%] text-color-text-primary text-xs sm:text-sm h-full m-0",
  "close-icon": "absolute right-1.5 text-base w-6 float-right leading-8 mr-5 flex justify-center items-center cursor-pointer",
  "suffix": "absolute top-1/2 -translate-y-2/4 transition-all duration-300 text-center text-color-text-secondary flex items-center right-2 pointer-events-none z-[1]",
  "is-disabled": "sm:bg-color-border-disabled border-color-border text-color-text-disabled cursor-not-allowed focus:border-color-border hover:border-color-border",
  "is-active": "border-color-border-focus",
  "is-display-only": "leading-7 relative inline border-0 sm:border-0 text-color-text-primary bg-transparent hover:bg-transparent px-0 py-0"
};
var _sfc_main = defineComponent({
  components: {
    TinyInput: Input,
    TinyFilterBox: FilterBox,
    TinyDatePickerMobile: DatePickerMobileFirst,
    TinyTimePickerMobile: TimePickerMobile,
    IconCalendar: IconCalendar(),
    IconTime: IconTime(),
    IconClose: IconClose(),
    TinyTooltip: Tooltip
  },
  emits: ["created", "select-change", "update:modelValue", "blur", "focus", "change"],
  props: pickerProps,
  directives: directive({
    Clickoutside
  }),
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api,
      classes,
      extendOptions: {
        DatePanel,
        DateRangePanel: DateRange,
        MonthRangePanel: MonthRange,
        YearRangePanel: YearRange,
        TimePanel: Time,
        TimeRangePanel: TimeRange,
        TimeSelect: TimePanel
      }
    });
  }
});
var _hoisted_1 = {
  "data-tag": "icon",
  class: "flex items-center cursor-pointer"
};
var _hoisted_2 = ["placeholder", "value", "title", "disabled", "readonly", "name"];
var _hoisted_3 = ["placeholder", "value", "title", "disabled", "readonly", "name"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_filter_box = resolveComponent("tiny-filter-box");
  var _component_tiny_tooltip = resolveComponent("tiny-tooltip");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_date_picker_mobile = resolveComponent("tiny-date-picker-mobile");
  var _component_tiny_time_picker_mobile = resolveComponent("tiny-time-picker-mobile");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return openBlock(), createElementBlock(
    "div",
    {
      ref: "reference",
      "data-tag": "tiny-date-container",
      class: normalizeClass(_ctx.state.isDisplayOnly ? "inline" : "")
    },
    [_ctx.shape === "filter" ? withDirectives((openBlock(), createBlock(_component_tiny_filter_box, {
      key: 0,
      onClick: _ctx.handleFocus,
      "show-close": _ctx.clearable,
      placeholder: _ctx.placeholder,
      disabled: _ctx.state.pickerDisabled,
      label: _ctx.label,
      tip: _ctx.tip,
      value: _ctx.state.displayValue.toString(),
      "drop-down-visible": _ctx.state.pickerVisible,
      blank: _ctx.blank
    }, null, 8, ["onClick", "show-close", "placeholder", "disabled", "label", "tip", "value", "drop-down-visible", "blank"])), [[_directive_clickoutside, _ctx.handleClose, void 0, {
      mousedown: true
    }]]) : !_ctx.state.ranged ? withDirectives((openBlock(), createBlock(_component_tiny_input, mergeProps({
      key: 1,
      tabindex: _ctx.tabindex,
      "data-tag": "tiny-date-editor",
      readonly: _ctx.state.isMobileScreen || !_ctx.editable || _ctx.readonly || _ctx.state.type === "dates" || _ctx.state.type === "week",
      disabled: _ctx.state.pickerDisabled,
      size: _ctx.state.pickerSize,
      name: _ctx.name
    }, _ctx.state.firstInputId, {
      placeholder: _ctx.placeholder,
      onFocus: _ctx.handleFocus,
      onKeydown: _ctx.handleKeydown,
      "model-value": _ctx.state.displayValue,
      title: _ctx.state.type === "date" ? "" : _ctx.state.displayValue,
      "display-only": _ctx.state.isDisplayOnly,
      "display-only-content": _ctx.state.displayValue,
      onInput: _ctx.handleInput,
      onChange: _ctx.handleChange,
      onMouseenter: _ctx.handleMouseEnter,
      onMouseleave: _cache[2] || (_cache[2] = function($event) {
        return _ctx.state.showClose = false;
      }),
      "validate-event": false,
      "custom-class": "sm:border " + _ctx.gcls(_ctx.state.type)
    }), createSlots({
      suffix: withCtx(function() {
        return [createElementVNode("i", _hoisted_1, [!_ctx.state.isMobileScreen ? (openBlock(), createBlock(Transition, {
          key: 0,
          name: "tiny-transition-icon-scale-in"
        }, {
          default: withCtx(function() {
            return [_ctx.state.haveTrigger ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.showClose ? _ctx.clearIcon : null), {
              key: 0,
              onClick: _ctx.handleClickIcon,
              onMouseenter: _cache[0] || (_cache[0] = function($event) {
                return _ctx.state.showClose = true;
              }),
              onMouseleave: _cache[1] || (_cache[1] = function($event) {
                return _ctx.state.showClose = false;
              }),
              class: "fill-color-text-placeholder hover:fill-color-text-primary"
            }, null, 40, ["onClick"])) : createCommentVNode("v-if", true)];
          }),
          _: 1
          /* STABLE */
        })) : createCommentVNode("v-if", true), (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.triggerClass), {
          onClick: _ctx.handleFocus,
          "custom-class": "h-5 w-5 sm:h-4 sm:w-4",
          class: normalizeClass(!_ctx.state.isDisplayOnly && _ctx.state.pickerDisabled ? "fill-color-icon-placeholder sm:fill-color-icon-disabled" : "fill-color-icon-secondary sm:fill-color-text-placeholder")
        }, null, 8, ["onClick", "class"]))])];
      }),
      _: 2
      /* DYNAMIC */
    }, [_ctx.label ? {
      name: "prefix",
      fn: withCtx(function() {
        return [createVNode(_component_tiny_tooltip, {
          effect: "light",
          content: _ctx.state.labelTooltip,
          placement: "top",
          onMouseenter: _ctx.handleEnterPickerlabel
        }, {
          default: withCtx(function() {
            return [createElementVNode(
              "span",
              {
                "data-tag": "tiny-input__label",
                class: normalizeClass(_ctx.gcls("input-label")),
                ref: "label"
              },
              toDisplayString(_ctx.label),
              3
              /* TEXT, CLASS */
            )];
          }),
          _: 1
          /* STABLE */
        }, 8, ["content", "onMouseenter"])];
      }),
      key: "0"
    } : void 0]), 1040, ["tabindex", "readonly", "disabled", "size", "name", "placeholder", "onFocus", "onKeydown", "model-value", "title", "display-only", "display-only-content", "onInput", "onChange", "onMouseenter", "custom-class"])), [[_directive_clickoutside, _ctx.handleClose, void 0, {
      mousedown: true
    }]]) : withDirectives((openBlock(), createElementBlock(
      "div",
      {
        key: 2,
        "data-tag": "tiny-date-editor tiny-range-editor tiny-input tiny-input__inner",
        class: normalizeClass(_ctx.m(_ctx.gcls("range-editor"), _ctx.gcls(_ctx.state.type), _ctx.state.pickerVisible && _ctx.gcls("is-active"), !_ctx.state.isDisplayOnly && _ctx.state.pickerDisabled && _ctx.gcls("is-disabled"), _ctx.state.isDisplayOnly && _ctx.gcls("is-display-only"))),
        onClick: _cache[10] || (_cache[10] = function() {
          return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
        }),
        onMouseenter: _cache[11] || (_cache[11] = function() {
          return _ctx.handleMouseEnter && _ctx.handleMouseEnter.apply(_ctx, arguments);
        }),
        onMouseleave: _cache[12] || (_cache[12] = function($event) {
          return _ctx.state.showClose = false;
        }),
        onKeydown: _cache[13] || (_cache[13] = function() {
          return _ctx.handleKeydown && _ctx.handleKeydown.apply(_ctx, arguments);
        })
      },
      [createVNode(_component_tiny_tooltip, {
        effect: "light",
        content: _ctx.state.labelTooltip,
        placement: "top",
        onMouseenter: _ctx.handleEnterPickerlabel
      }, {
        default: withCtx(function() {
          return [_ctx.label ? (openBlock(), createElementBlock(
            "span",
            {
              key: 0,
              "data-tag": "tiny-input__label",
              ref: "label"
            },
            toDisplayString(_ctx.label),
            513
            /* TEXT, NEED_PATCH */
          )) : createCommentVNode("v-if", true)];
        }),
        _: 1
        /* STABLE */
      }, 8, ["content", "onMouseenter"]), !_ctx.state.isDisplayOnly ? (openBlock(), createElementBlock(
        Fragment,
        {
          key: 0
        },
        [createElementVNode("input", mergeProps({
          autocomplete: "off",
          placeholder: _ctx.startPlaceholder,
          value: _ctx.state.displayValue && _ctx.state.displayValue[0],
          title: _ctx.state.displayValue && _ctx.state.displayValue[0],
          disabled: _ctx.state.pickerDisabled
        }, _ctx.state.firstInputId, {
          readonly: _ctx.state.isMobileScreen || !_ctx.editable || _ctx.readonly,
          name: _ctx.name && _ctx.name[0],
          onInput: _cache[3] || (_cache[3] = function() {
            return _ctx.handleStartInput && _ctx.handleStartInput.apply(_ctx, arguments);
          }),
          onChange: _cache[4] || (_cache[4] = function() {
            return _ctx.handleStartChange && _ctx.handleStartChange.apply(_ctx, arguments);
          }),
          onFocus: _cache[5] || (_cache[5] = function() {
            return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
          }),
          "data-tag": "tiny-range-input",
          class: _ctx.gcls("range-input")
        }), null, 16, _hoisted_2), renderSlot(_ctx.$slots, "range-separator", {}, function() {
          return [typeof _ctx.rangeSeparator === "string" ? (openBlock(), createElementBlock(
            "span",
            {
              key: 0,
              "data-tag": "tiny-range-separator",
              class: normalizeClass(_ctx.m(_ctx.gcls("range-separator"), {
                "text-center": _ctx.type === "datetimerange"
              }, {
                "text-color-icon-placeholder": !_ctx.state.isDisplayOnly && _ctx.state.pickerDisabled
              }))
            },
            toDisplayString(_ctx.rangeSeparator),
            3
            /* TEXT, CLASS */
          )) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.rangeSeparator), {
            key: 1
          }))];
        }), createElementVNode("input", mergeProps({
          autocomplete: "off",
          placeholder: _ctx.endPlaceholder,
          value: _ctx.state.displayValue && _ctx.state.displayValue[1],
          title: _ctx.state.displayValue && _ctx.state.displayValue[1],
          disabled: _ctx.state.pickerDisabled
        }, _ctx.state.secondInputId, {
          readonly: _ctx.state.isMobileScreen || !_ctx.editable || _ctx.readonly,
          name: _ctx.name && _ctx.name[1],
          onInput: _cache[6] || (_cache[6] = function() {
            return _ctx.handleEndInput && _ctx.handleEndInput.apply(_ctx, arguments);
          }),
          onChange: _cache[7] || (_cache[7] = function() {
            return _ctx.handleEndChange && _ctx.handleEndChange.apply(_ctx, arguments);
          }),
          onFocus: _cache[8] || (_cache[8] = function() {
            return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
          }),
          "data-tag": "tiny-range-input",
          class: _ctx.gcls("range-input")
        }), null, 16, _hoisted_3), !_ctx.state.isMobileScreen && _ctx.state.haveTrigger ? (openBlock(), createElementBlock(
          "i",
          {
            key: 0,
            onClick: _cache[9] || (_cache[9] = function() {
              return _ctx.handleClickIcon && _ctx.handleClickIcon.apply(_ctx, arguments);
            }),
            "data-tag": "tiny-input__icon tiny-range__close-icon",
            class: normalizeClass(_ctx.gcls("close-icon"))
          },
          [createVNode(Transition, {
            name: "tiny-transition-icon-scale-in"
          }, {
            default: withCtx(function() {
              return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.state.showClose ? _ctx.clearIcon : null), {
                "custom-class": "fill-color-text-placeholder"
              }))];
            }),
            _: 1
            /* STABLE */
          })],
          2
          /* CLASS */
        )) : createCommentVNode("v-if", true), !_ctx.state.isDisplayOnly ? (openBlock(), createElementBlock(
          "i",
          {
            key: 1,
            "data-tag": "tiny-input__icon tiny-range__icon tiny-input__suffix",
            class: normalizeClass(_ctx.gcls("suffix"))
          },
          [(openBlock(), createBlock(resolveDynamicComponent(_ctx.state.triggerClass), {
            "custom-class": "h-5 w-5 sm:h-4 sm:w-4",
            class: normalizeClass(!_ctx.state.isDisplayOnly && _ctx.state.pickerDisabled ? "fill-color-icon-placeholder sm:fill-color-icon-secondary" : "fill-color-icon-secondary sm:fill-color-text-placeholder")
          }, null, 8, ["class"]))],
          2
          /* CLASS */
        )) : createCommentVNode("v-if", true)],
        64
        /* STABLE_FRAGMENT */
      )) : createCommentVNode("v-if", true), _ctx.state.isDisplayOnly ? (openBlock(), createBlock(_component_tiny_tooltip, {
        key: 1,
        "data-tag": "tiny-range-editor-display-only",
        content: _ctx.state.displayOnlyTooltip,
        effect: "light",
        placement: "top",
        onMouseenter: _ctx.handleEnterDisplayOnlyContent
      }, {
        default: withCtx(function() {
          return [createElementVNode(
            "span",
            null,
            toDisplayString(_ctx.state.displayValue && _ctx.state.displayValue.join(" " + _ctx.t("ui.datepicker.to") + " ")),
            1
            /* TEXT */
          )];
        }),
        _: 1
        /* STABLE */
      }, 8, ["content", "onMouseenter"])) : createCommentVNode("v-if", true)],
      34
      /* CLASS, NEED_HYDRATION */
    )), [[_directive_clickoutside, _ctx.handleClose, void 0, {
      mousedown: true
    }]]), !_ctx.state.isMobileScreen ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.panel), {
      key: 3,
      step: _ctx.step,
      "show-week-number": _ctx.showWeekNumber,
      "format-weeks": _ctx.formatWeeks,
      "now-click": _ctx.nowClick,
      ref: "picker",
      visible: _ctx.state.pickerVisible,
      onPick: _ctx.handlePick,
      onSelectRange: _ctx.handleSelectRange,
      onSelectChange: _ctx.handleSelectChange
    }, {
      default: withCtx(function() {
        return [renderSlot(_ctx.$slots, "now")];
      }),
      _: 3
      /* FORWARDED */
    }, 40, ["step", "show-week-number", "format-weeks", "now-click", "visible", "onPick", "onSelectRange", "onSelectChange"])) : createCommentVNode("v-if", true), _ctx.state.isMobileScreen && _ctx.state.isDateMobileComponent ? (openBlock(), createBlock(_component_tiny_date_picker_mobile, {
      key: 4,
      ref: "datePickerMobile",
      modelValue: _ctx.state.dateMobileOption.value,
      "onUpdate:modelValue": _cache[14] || (_cache[14] = function($event) {
        return _ctx.state.dateMobileOption.value = $event;
      }),
      title: _ctx.title,
      clearable: _ctx.clearable,
      step: _ctx.step,
      "show-time-second": _ctx.state.showSeconds,
      "range-separator": _ctx.rangeSeparator,
      "end-placeholder": _ctx.endPlaceholder,
      "custom-class": "max-h-[80%]",
      type: _ctx.state.dateMobileOption.type,
      visible: _ctx.state.dateMobileOption.visible,
      "picker-options": _ctx.pickerOptions,
      onConfirm: _ctx.emitInput,
      onClear: _ctx.emitInput,
      "onUpdate:visible": _ctx.dateMobileToggle
    }, null, 8, ["modelValue", "title", "clearable", "step", "show-time-second", "range-separator", "end-placeholder", "type", "visible", "picker-options", "onConfirm", "onClear", "onUpdate:visible"])) : createCommentVNode("v-if", true), _ctx.state.isMobileScreen && _ctx.state.isTimeMobileComponent ? (openBlock(), createBlock(_component_tiny_time_picker_mobile, {
      key: 5,
      ref: "datePickerMobile",
      modelValue: _ctx.state.timeMobileOption.value,
      "onUpdate:modelValue": _cache[15] || (_cache[15] = function($event) {
        return _ctx.state.timeMobileOption.value = $event;
      }),
      "default-value": _ctx.state.timeMobileOption.defaultValue,
      title: _ctx.title,
      clearable: _ctx.clearable,
      step: _ctx.step,
      "show-seconds": _ctx.state.showSeconds,
      "custom-class": "max-h-[80%]",
      type: _ctx.state.timeMobileOption.type,
      visible: _ctx.state.timeMobileOption.visible,
      onConfirm: _ctx.timeMobileConfirm,
      "onUpdate:visible": _ctx.timeMobileToggle
    }, null, 8, ["modelValue", "default-value", "title", "clearable", "step", "show-seconds", "type", "visible", "onConfirm", "onUpdate:visible"])) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  );
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobileFirst as default };
