import type { IDropdownMenuApi } from '@opentiny/vue-renderless/types/dropdown-menu.type';
declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    checkedStatus?: any;
    visibleArrow?: any;
    arrowOffset?: any;
    placement?: any;
    popperClass?: any;
    popperAppendToBody?: any;
    options?: any;
    textField?: any;
}>, IDropdownMenuApi, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("click" | "mouseenter" | "mouseleave" | "update:modelValue" | "created")[], "click" | "mouseenter" | "mouseleave" | "update:modelValue" | "created", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    checkedStatus?: any;
    visibleArrow?: any;
    arrowOffset?: any;
    placement?: any;
    popperClass?: any;
    popperAppendToBody?: any;
    options?: any;
    textField?: any;
}>>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onMouseenter?: ((...args: any[]) => any) | undefined;
    onMouseleave?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onCreated?: ((...args: any[]) => any) | undefined;
}, {
    readonly tiny_mode?: any;
    readonly tiny_mode_root?: any;
    readonly tiny_template?: any;
    readonly tiny_renderless?: any;
    readonly _constants?: any;
    readonly tiny_theme?: any;
    readonly tiny_chart_theme?: any;
    readonly checkedStatus?: any;
    readonly visibleArrow?: any;
    readonly arrowOffset?: any;
    readonly placement?: any;
    readonly popperClass?: any;
    readonly popperAppendToBody?: any;
    readonly options?: any;
    readonly textField?: any;
}, {}>;
export default _default;
