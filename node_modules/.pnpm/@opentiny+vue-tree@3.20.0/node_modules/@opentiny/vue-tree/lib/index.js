function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/tree/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  EMPTY_TEXT_LOCAL: "ui.tree.emptyText"
};
var Tree = defineComponent({
  name: $prefix + "Tree",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    accordion: Boolean,
    allowDrag: Function,
    allowDrop: Function,
    autoExpandParent: {
      type: Boolean,
      default: true
    },
    checkDescendants: {
      type: Boolean,
      default: false
    },
    checkOnClickNode: Boolean,
    checkStrictly: Boolean,
    currentNodeKey: [String, Number],
    data: {
      type: Array
    },
    dataset: Object,
    defaultCheckedKeys: Array,
    defaultExpandAll: Boolean,
    defaultExpandedKeys: Array,
    defaultExpandedKeysHighlight: [Number, String],
    draggable: {
      type: Boolean,
      default: false
    },
    emptyText: String,
    expandIcon: Object,
    expandOnClickNode: {
      type: Boolean,
      default: true
    },
    filterNodeMethod: Function,
    highlightCurrent: Boolean,
    icon: Object,
    iconTriggerClickNode: {
      type: Boolean,
      default: true
    },
    indent: {
      type: Number,
      default: 16
    },
    lazy: {
      type: Boolean,
      default: false
    },
    load: Function,
    nodeKey: String,
    parentKey: String,
    props: {
      default: function _default2() {
        return {
          children: "children",
          label: "label",
          disabled: "disabled",
          isLeaf: "isLeaf"
        };
      }
    },
    renderAfterExpand: {
      type: Boolean,
      default: true
    },
    renderContent: Function,
    showCheckbox: {
      type: Boolean,
      default: false
    },
    showContextmenu: {
      type: Boolean,
      default: false
    },
    showRadio: {
      type: Boolean,
      default: false
    },
    showNumber: {
      type: Boolean,
      default: false
    },
    collapsible: {
      type: Boolean,
      default: true
    },
    showCheckEasily: {
      type: Boolean,
      default: false
    },
    nodeHeight: Number,
    shrinkIcon: Object,
    expandIconColor: String,
    shrinkIconColor: String,
    size: {
      type: String,
      default: "medium"
    },
    deleteDisabledKeys: Array,
    editDisabledKeys: Array,
    addDisabledKeys: Array,
    theme: String,
    viewType: {
      type: String,
      default: "tree",
      validator: function validator(value) {
        return ~["tree", "plain"].indexOf(value);
      }
    },
    // 平铺视图时，是否显示下面的辅助信息
    showAuxi: {
      type: Boolean,
      default: true
    },
    pathSplit: {
      type: String,
      default: "/"
    },
    filterPlainMethod: Function,
    afterLoad: Function,
    lazyCurrent: Boolean,
    baseIndent: {
      type: Number,
      default: 0
    },
    deleteNodeMethod: Function,
    showCheckedMark: Boolean,
    willChangeView: {
      type: Boolean,
      default: true
    },
    onlyCheckChildren: Boolean,
    editConfig: {
      type: Object,
      default: function _default3() {
        return {};
      }
    },
    // tiny 新增
    showLine: Boolean,
    // tiny 新增，是否显示树节点聚焦时的背景颜色
    isShowFocusBg: {
      type: Boolean,
      default: true
    },
    // 是否在匹配的节点中，高亮搜索文字
    highlightQuery: {
      type: Boolean,
      default: false
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Tree.install = function(Vue) {
  Vue.component(Tree.name, Tree);
};
Tree.version = version;
export {
  Tree as default
};
