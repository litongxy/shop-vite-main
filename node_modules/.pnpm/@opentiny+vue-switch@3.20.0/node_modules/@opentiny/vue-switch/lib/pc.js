import { renderless, api } from '@opentiny/vue-renderless/switch/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import '@opentiny/vue-theme/switch/index.css';
import { IconLoadingShadow } from '@opentiny/vue-icon';
import { resolveComponent, openBlock, createElementBlock, normalizeClass, withKeys, createElementVNode, renderSlot, createTextVNode, createCommentVNode, createBlock, toDisplayString } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["change", "update:modelValue"],
  props: [].concat(props, ["modelValue", "trueValue", "falseValue", "disabled", "mini", "tabindex", "showText", "beforeChange", "displayOnly", "loading"]),
  components: {
    IconLoading: IconLoadingShadow()
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = ["tabindex"];
var _hoisted_2 = {
  key: 0
};
var _hoisted_3 = {
  class: "tiny-switch__button"
};
var _hoisted_4 = {
  key: 1
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_loading = resolveComponent("icon-loading");
  return !_ctx.state.isDisplayOnly ? (openBlock(), createElementBlock("span", {
    key: 0,
    class: normalizeClass([_ctx.state.wrapClasses, _ctx.state.showText ? "tiny-switch__text" : ""]),
    tabindex: _ctx.tabindex,
    onClick: _cache[0] || (_cache[0] = function() {
      return _ctx.toggle && _ctx.toggle.apply(_ctx, arguments);
    }),
    onKeydown: [_cache[1] || (_cache[1] = withKeys(function() {
      return _ctx.toggle && _ctx.toggle.apply(_ctx, arguments);
    }, ["space"])), _cache[2] || (_cache[2] = withKeys(function() {
      return _ctx.toggle && _ctx.toggle.apply(_ctx, arguments);
    }, ["enter"]))]
  }, [createElementVNode(
    "span",
    {
      class: normalizeClass(_ctx.state.innerClasses)
    },
    [!_ctx.mini && _ctx.state.showText && !_ctx.loading ? (openBlock(), createElementBlock("div", _hoisted_2, [_ctx.state.currentValue === _ctx.trueValue ? renderSlot(_ctx.$slots, "open", {
      key: 0
    }, function() {
      return [createTextVNode("ON")];
    }) : createCommentVNode("v-if", true), _ctx.state.currentValue === _ctx.falseValue ? renderSlot(_ctx.$slots, "close", {
      key: 1
    }, function() {
      return [createTextVNode("OFF")];
    }) : createCommentVNode("v-if", true)])) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  ), createElementVNode("span", _hoisted_3, [_ctx.loading ? (openBlock(), createBlock(_component_icon_loading, {
    key: 0,
    class: normalizeClass([_ctx.state.currentValue === _ctx.trueValue ? "tiny-switch__on-loading" : "tiny-switch__off-loading", _ctx.mini ? "tiny-switch__loading-size" : ""])
  }, null, 8, ["class"])) : createCommentVNode("v-if", true), _ctx.state.currentValue === _ctx.trueValue && !_ctx.loading ? renderSlot(_ctx.$slots, "active-icon", {
    key: 1
  }) : createCommentVNode("v-if", true), _ctx.state.currentValue === _ctx.falseValue && !_ctx.loading ? renderSlot(_ctx.$slots, "inactive-icon", {
    key: 2
  }) : createCommentVNode("v-if", true)])], 42, _hoisted_1)) : (openBlock(), createElementBlock("span", _hoisted_4, [_ctx.state.currentValue === _ctx.trueValue ? renderSlot(_ctx.$slots, "open", {
    key: 0
  }, function() {
    return [createTextVNode(
      toDisplayString(_ctx.t("yes")),
      1
      /* TEXT */
    )];
  }) : createCommentVNode("v-if", true), _ctx.state.currentValue === _ctx.falseValue ? renderSlot(_ctx.$slots, "close", {
    key: 1
  }, function() {
    return [createTextVNode(
      toDisplayString(_ctx.t("no")),
      1
      /* TEXT */
    )];
  }) : createCommentVNode("v-if", true)]));
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
