export declare const floatingButtonProps: {
    position: {
        type: StringConstructor;
        default: string;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
    resetTime: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    expandList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    isExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    vague: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: BooleanConstructor;
        default: boolean;
    };
    elementSelector: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    position: {
        type: StringConstructor;
        default: string;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
    resetTime: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    expandList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    isExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    vague: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: BooleanConstructor;
        default: boolean;
    };
    elementSelector: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    position: {
        type: StringConstructor;
        default: string;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
    resetTime: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    expandList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    isExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    vague: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: BooleanConstructor;
        default: boolean;
    };
    elementSelector: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    icon: string | Record<string, any>;
    position: string;
    mask: boolean;
    tiny_mode_root: boolean;
    resetTime: string | number;
    backgroundColor: string;
    animated: boolean;
    expandList: unknown[];
    isExpand: boolean;
    vague: boolean;
    elementSelector: string;
}, {}>;
export default _default;
