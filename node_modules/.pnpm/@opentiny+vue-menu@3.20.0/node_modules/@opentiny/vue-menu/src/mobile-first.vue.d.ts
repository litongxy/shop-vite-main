declare const _default: import("@vue/runtime-core").DefineComponent<{
    showFilter: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchIcon: {
        type: ObjectConstructor;
        default: () => import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    emptyText: {
        type: StringConstructor;
        default: string;
    };
    expandedKeys: {
        type: ArrayConstructor;
        default: () => never[];
    };
    activedKeys: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    onlyCheckChildren: {
        type: BooleanConstructor;
        default: boolean;
    };
    expandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    data: {
        type: ArrayConstructor;
        default: () => never[];
    };
    widthAdapt: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
    m: (...cssClasses: any[]) => string;
}, any, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("node-click" | "current-change" | "node-clicked" | "node-changed")[], "node-click" | "current-change" | "node-clicked" | "node-changed", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    showFilter: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchIcon: {
        type: ObjectConstructor;
        default: () => import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    emptyText: {
        type: StringConstructor;
        default: string;
    };
    expandedKeys: {
        type: ArrayConstructor;
        default: () => never[];
    };
    activedKeys: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    onlyCheckChildren: {
        type: BooleanConstructor;
        default: boolean;
    };
    expandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    data: {
        type: ArrayConstructor;
        default: () => never[];
    };
    widthAdapt: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>> & {
    "onCurrent-change"?: ((...args: any[]) => any) | undefined;
    "onNode-click"?: ((...args: any[]) => any) | undefined;
    "onNode-clicked"?: ((...args: any[]) => any) | undefined;
    "onNode-changed"?: ((...args: any[]) => any) | undefined;
}, {
    data: unknown[];
    tiny_mode_root: boolean;
    emptyText: string;
    onlyCheckChildren: boolean;
    expandAll: boolean;
    searchIcon: Record<string, any>;
    widthAdapt: boolean;
    showFilter: boolean;
    activedKeys: string | number;
    expandedKeys: unknown[];
}, {}>;
export default _default;
