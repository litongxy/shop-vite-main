import { createVNode, resolveComponent } from 'vue';
import { renderless as renderless$1, api as api$1 } from '@opentiny/vue-renderless/tabs/vue';
import { $props, defineComponent, $prefix, setup, h, props } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/tab-nav/vue';
import { iconClose, iconChevronDown, iconPlus } from '@opentiny/vue-icon';
import { touchStart, touchMove } from '@opentiny/vue-renderless/common/deps/touch';
import '@opentiny/vue-theme-mobile/tabs/index.css';

function _extends$1() {
  return _extends$1 = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends$1.apply(null, arguments);
}
_extends$1({}, $props, {
  panes: {
    type: Array,
    default: function _default() {
      return [];
    }
  },
  currentName: String,
  editable: Boolean,
  overflowTitle: Boolean,
  onTabClick: {
    type: Function,
    default: function _default2() {
    }
  },
  onTabRemove: {
    type: Function,
    default: function _default3() {
    }
  },
  tabStyle: String,
  stretch: Boolean,
  showMoreTabs: Boolean,
  showPanesCount: Number,
  popperClass: String,
  popperAppendToBody: {
    type: Boolean,
    default: true
  },
  dropConfig: {
    type: Object,
    default: function _default4() {
      return null;
    }
  },
  titleWidth: {
    type: String,
    default: "256px"
  },
  // tiny 新增
  tooltipConfig: [String, Object],
  panelMaxHeight: String,
  panelWidth: String
});
var tabNavMobileProps = _extends$1({}, $props, {
  panes: {
    type: Array,
    default: function _default5() {
      return [];
    }
  },
  currentName: String,
  activeColor: {
    type: String,
    default: ""
  },
  onTabClick: {
    type: Function,
    default: function _default6() {
    }
  },
  onTabRemove: {
    type: Function,
    default: function _default7() {
    }
  },
  showExpandTabs: Boolean,
  expandPanesWidth: {
    type: String,
    default: ""
  },
  expandTabsTitle: {
    type: String,
    default: "请选择"
  },
  expandTabsMode: {
    type: String,
    default: "columns"
  },
  stretch: {
    type: Boolean,
    default: false
  }
});
_extends$1({}, $props, {
  tabs: Array
});

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var _sfc_main$1 = /* @__PURE__ */ defineComponent({
  name: $prefix + "TabNav",
  components: {
    IconClose: iconClose(),
    IconChevronDown: iconChevronDown()
  },
  props: tabNavMobileProps,
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api,
      mono: true,
      h
    });
  },
  render: function render() {
    var state = this.state, panes = this.panes, onTabClick = this.onTabClick, onTabRemove = this.onTabRemove, showExpandTabs = this.showExpandTabs, expandTabShow = this.expandTabShow, activeColor = this.activeColor, expandPanesWidth = this.expandPanesWidth, currentName = this.currentName, expandTabsTitle = this.expandTabsTitle, expandTabsMode = this.expandTabsMode, stretch = this.stretch;
    var tabsExpandIcon = showExpandTabs ? createVNode("div", {
      "class": "tiny-mobile-tabs__expand-icon"
    }, [createVNode("span", {
      "slot": "reference",
      "class": "tiny-mobile-tabs__expand",
      "onClick": function onClick() {
        expandTabShow();
      }
    }, [createVNode(resolveComponent("icon-chevron-down"), null, null)])]) : null;
    var tabsExpandContent = createVNode("div", {
      "class": "tiny-mobile-tabs__expand-content",
      "style": state.showExpandItem ? {
        display: "block",
        width: expandPanesWidth ? expandPanesWidth + "px" : ""
      } : {
        display: "none"
      }
    }, [createVNode("div", {
      "class": "tiny-mobile-tabs__expand-mask"
    }, null), createVNode("div", {
      "class": "tiny-mobile-tabs__expand-header"
    }, [createVNode("label", {
      "class": "tiny-mobile-tabs__expand-header-title",
      "style": state.expandHeaderStyle
    }, [expandTabsTitle]), createVNode("span", {
      "slot": "reference",
      "class": "tiny-mobile-tabs__expand",
      "style": {
        transform: "rotate(180deg)"
      }
    }, [createVNode(resolveComponent("icon-chevron-down"), null, null)])]), createVNode("div", {
      "class": "tiny-mobile-tabs__expand-list"
    }, [panes.map(function(pane, index) {
      var _class;
      var tabName = pane.name || pane.state.index || index;
      var tabTitle = pane.$slots.title || pane.title;
      return createVNode("div", {
        "class": (_class = {
          "tiny-mobile-tabs__expand-item": true
        }, _class["tiny-mobile-tabs__expand-mode-" + expandTabsMode] = expandTabsMode === "columns", _class)
      }, [createVNode("div", {
        "class": {
          "tiny-mobile-tabs__expand-item-title": true,
          "is-current": currentName === tabName
        },
        "onClick": function onClick(e) {
          onTabClick(pane, tabName, e);
        }
      }, [tabTitle])]);
    })])]);
    var navStyle = {};
    var tabs = panes.map(function(pane, index) {
      var _class2;
      var tabName = pane.name || pane.state.index || index;
      var withClose = pane.state.isClosable;
      pane.state.index = "" + index;
      var btnClose = withClose && panes.length > 1 ? createVNode("span", {
        "class": "tiny-mobile-tabs__icon-close"
      }, [createVNode(resolveComponent("icon-close"), {
        "onClick": function onClick(e) {
          onTabRemove(pane, e);
        }
      }, null)]) : null;
      var tabTitle = pane.$slots.title || pane.title;
      var tabItemStyle = {};
      if (!stretch) {
        tabItemStyle.flex = 0;
        navStyle.justifyContent = "center";
      }
      if (index === panes.length - 1) {
        tabItemStyle.marginRight = 0;
      }
      return createVNode("div", {
        "class": (_class2 = {
          "tiny-mobile-tabs__item": true
        }, _class2["is-" + state.rootTabs.position] = true, _class2["is-active"] = pane.state.active, _class2["is-disabled"] = pane.disabled, _class2["is-closable"] = withClose, _class2),
        "style": tabItemStyle,
        "role": "tab",
        "ref": "tabs",
        "id": "tab-" + tabName,
        "key": "tab-" + tabName,
        "aria-controls": "pane-" + tabName,
        "aria-selected": pane.state.active,
        "onClick": function onClick(e) {
          onTabClick(pane, tabName, e);
        }
      }, [createVNode("span", {
        "class": "tiny-mobile-tabs__name",
        "style": activeColor && pane.state.active ? {
          color: activeColor
        } : {}
      }, [tabTitle, btnClose])]);
    });
    return createVNode("div", {
      "style": showExpandTabs ? {
        paddingRight: "46px"
      } : {},
      "class": ["tiny-mobile-tabs__nav-wrap", state.scrollable ? "is-scrollable" : "", panes.length > 4 ? "tiny-mobile-tabs__wrap-scrollable" : "", showExpandTabs ? "is-show-expand" : "", "is-" + state.rootTabs.position]
    }, [createVNode("div", {
      "class": ["tiny-mobile-tabs__nav-scroll"],
      "ref": "navScroll"
    }, [createVNode("div", {
      "class": ["tiny-mobile-tabs__nav", "is-" + state.rootTabs.position],
      "style": navStyle,
      "ref": "nav",
      "role": "tablist"
    }, [tabs, createVNode("div", {
      "class": "tiny-mobile-tabs__line",
      "style": [state.navStyle, activeColor ? {
        backgroundColor: activeColor
      } : {}]
    }, null)])]), [tabsExpandIcon, tabsExpandContent]]);
  }
});
var MIN_SWIPE_DISTANCE = 50;
var _sfc_main = /* @__PURE__ */ defineComponent({
  props: [].concat(props, ["activeName", "position", "withClose", "withAdd", "activeColor", "modelValue", "beforeLeave", "editable", "showExpandTabs", "childrenTabs", "swipeable", "expandTabsTitle", "expandTabsMode", "stretch", "size"]),
  components: {
    TabNav: _sfc_main$1,
    IconPlus: iconPlus()
  },
  setup: function setup2(props2, context) {
    return setup({
      props: props2,
      context,
      renderless: renderless$1,
      api: api$1
    });
  },
  methods: {
    getCurIndex: function getCurIndex() {
      var _this = this;
      var current = 0;
      this.state.panes.filter(function(node, index) {
        return node.name === _this.state.currentName && (current = index);
      });
      return current;
    },
    onTouchEnd: function onTouchEnd() {
      var _this$state = this.state, direction = _this$state.direction, deltaX = _this$state.deltaX;
      var currentIndex = this.getCurIndex();
      if (direction === "horizontal" && this.state.offsetX >= MIN_SWIPE_DISTANCE) {
        if (deltaX > 0 && currentIndex !== 0) {
          var name = this.state.panes[currentIndex - 1].name;
          this.$emit("swipeLeft", name);
          this.setCurrentName(name);
          this.$refs.nav.scrollToActiveTab();
        } else if (deltaX < 0 && currentIndex !== this.state.panes.length - 1) {
          var _name = this.state.panes[currentIndex + 1].name;
          this.$emit("swipeRight", _name);
          this.setCurrentName(_name);
          this.$refs.nav.scrollToActiveTab();
        }
      }
    }
  },
  render: function render2() {
    var _class3;
    var state = this.state, position = this.position, handleTabClick = this.handleTabClick, handleTabRemove = this.handleTabRemove, handleTabAdd = this.handleTabAdd, editable = this.editable, withAdd = this.withAdd, showExpandTabs = this.showExpandTabs, swipeable = this.swipeable, activeColor = this.activeColor, expandTabsTitle = this.expandTabsTitle, expandTabsMode = this.expandTabsMode, stretch = this.stretch, size = this.size;
    var newButton = editable || withAdd ? createVNode("span", {
      "class": "tiny-mobile-tabs__new-tab",
      "onClick": handleTabAdd,
      "tabindex": "0",
      "onKeydown": function onKeydown(ev) {
        if (ev.keyCode === 13) {
          handleTabAdd();
        }
      }
    }, [createVNode(resolveComponent("icon-plus"), null, null)]) : null;
    var navData = {
      props: {
        currentName: state.currentName,
        panes: state.panes,
        activeColor,
        onTabClick: handleTabClick,
        onTabRemove: handleTabRemove,
        showExpandTabs,
        expandPanesWidth: state.expandPanesWidth,
        expandTabsTitle,
        expandTabsMode,
        stretch
      },
      ref: "nav"
    };
    var TabNavComponent = h(_sfc_main$1, _extends({}, navData));
    var header = createVNode("div", {
      "class": ["tiny-mobile-tabs__header", "is-" + position]
    }, [newButton, TabNavComponent]);
    var listeners = swipeable ? {
      touchstart: touchStart(state),
      touchmove: touchMove(state),
      touchend: this.onTouchEnd,
      touchcancel: this.onTouchEnd
    } : {};
    var panels = h("div", {
      class: "tiny-mobile-tabs__content",
      on: _extends({}, listeners)
    }, this.slots.default());
    return createVNode("div", {
      "class": (_class3 = {
        "tiny-mobile-tabs": true
      }, _class3["tiny-mobile--" + position] = true, _class3["tiny-mobile-tabs-small"] = size === "small", _class3)
    }, [[header, panels]]);
  }
});

export { _sfc_main as default };
