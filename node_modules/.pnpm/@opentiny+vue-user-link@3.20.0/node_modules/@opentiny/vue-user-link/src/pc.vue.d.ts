declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    card?: any;
    modelValue?: any;
    popperAppendToBody?: any;
    textField?: any;
    valueField?: any;
    service?: any;
    textSplit?: any;
    valueSplit?: any;
    batch?: any;
    fetchUser?: any;
    fetchW3Accounts?: any;
    fetchUserByUserId?: any;
    getUserImageUrl?: any;
    cacheFields?: any;
    cacheKey?: any;
    cache?: any;
    userCache?: any;
}>, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
    m: (...cssClasses: any[]) => string;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    card?: any;
    modelValue?: any;
    popperAppendToBody?: any;
    textField?: any;
    valueField?: any;
    service?: any;
    textSplit?: any;
    valueSplit?: any;
    batch?: any;
    fetchUser?: any;
    fetchW3Accounts?: any;
    fetchUserByUserId?: any;
    getUserImageUrl?: any;
    cacheFields?: any;
    cacheKey?: any;
    cache?: any;
    userCache?: any;
}>>>, {
    readonly tiny_mode?: any;
    readonly tiny_mode_root?: any;
    readonly tiny_template?: any;
    readonly tiny_renderless?: any;
    readonly _constants?: any;
    readonly tiny_theme?: any;
    readonly tiny_chart_theme?: any;
    readonly card?: any;
    readonly modelValue?: any;
    readonly popperAppendToBody?: any;
    readonly textField?: any;
    readonly valueField?: any;
    readonly service?: any;
    readonly textSplit?: any;
    readonly valueSplit?: any;
    readonly batch?: any;
    readonly fetchUser?: any;
    readonly fetchW3Accounts?: any;
    readonly fetchUserByUserId?: any;
    readonly getUserImageUrl?: any;
    readonly cacheFields?: any;
    readonly cacheKey?: any;
    readonly cache?: any;
    readonly userCache?: any;
}, {}>;
export default _default;
