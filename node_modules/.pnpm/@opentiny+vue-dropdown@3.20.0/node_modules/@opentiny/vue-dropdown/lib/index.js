function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/dropdown/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var dropdownProps = _extends({}, $props, {
  modelValue: [String, Number],
  type: String,
  trigger: String,
  // 默认主题为 'hover'
  size: {
    type: String,
    default: ""
  },
  disabled: {
    type: Boolean,
    default: false
  },
  splitButton: Boolean,
  singleButton: {
    type: Boolean,
    default: false
  },
  showTimeout: {
    type: Number,
    default: 250
  },
  hideTimeout: {
    type: Number,
    default: 150
  },
  hideOnClick: {
    type: Boolean,
    default: true
  },
  tabindex: {
    type: Number,
    default: 0
  },
  border: {
    type: Boolean,
    default: false
  },
  round: {
    type: Boolean,
    default: false
  },
  showIcon: {
    type: Boolean,
    default: true
  },
  showSelfIcon: {
    type: Boolean,
    default: false
  },
  // tiny新增
  menuOptions: {
    type: Object,
    default: function _default() {
      return {
        options: [],
        textField: "label",
        popperClass: "",
        placement: "bottom-end"
      };
    }
  },
  title: {
    type: String,
    default: "下拉菜单"
  },
  inheritWidth: {
    type: Boolean,
    default: false
  },
  suffixIcon: Object,
  lazyShowPopper: {
    type: Boolean,
    default: false
  }
});
var Dropdown = defineComponent({
  name: $prefix + "Dropdown",
  componentName: "TinyDropdown",
  props: dropdownProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Dropdown.install = function(Vue) {
  Vue.component(Dropdown.name, Dropdown);
};
Dropdown.version = version;
export {
  Dropdown as default
};
