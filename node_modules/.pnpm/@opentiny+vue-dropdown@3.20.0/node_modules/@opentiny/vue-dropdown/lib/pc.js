function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { createVNode, resolveComponent, withDirectives, resolveDirective } from "vue";
import { renderless, api } from "@opentiny/vue-renderless/dropdown/vue";
import { defineComponent, $prefix, directive, $props, setup as _setup, h } from "@opentiny/vue-common";
import Button from "@opentiny/vue-button";
import ButtonGroup from "@opentiny/vue-button-group";
import Clickoutside from "@opentiny/vue-renderless/common/deps/clickoutside";
import DropdownMenu from "@opentiny/vue-dropdown-menu";
import { iconDownWard } from "@opentiny/vue-icon";
var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "Dropdown",
  componentName: "TinyDropdown",
  components: {
    TinyButton: Button,
    TinyButtonGroup: ButtonGroup,
    TinyDropdownMenu: DropdownMenu,
    IconDownWard: iconDownWard()
  },
  directives: directive({
    Clickoutside
  }),
  props: _extends({}, $props, {
    type: String,
    trigger: String,
    size: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    splitButton: Boolean,
    showTimeout: {
      type: Number,
      default: 250
    },
    hideTimeout: {
      type: Number,
      default: 150
    },
    hideOnClick: {
      type: Boolean,
      default: true
    },
    tabindex: {
      type: Number,
      default: 0
    },
    border: {
      type: Boolean,
      default: false
    },
    round: {
      type: Boolean,
      default: false
    },
    showIcon: {
      type: Boolean,
      default: true
    },
    menuOptions: {
      type: Object,
      default: function _default() {
        return {
          options: [],
          textField: "label",
          popperClass: "",
          placement: "bottom-end"
        };
      }
    },
    title: {
      type: String,
      default: "下拉菜单"
      // TINY-TODO: 国际化
    },
    inheritWidth: {
      type: Boolean,
      default: false
    },
    suffixIcon: Object,
    prefixIcon: Object,
    lazyShowPopper: {
      type: Boolean,
      default: false
    }
  }),
  emits: ["visible-change", "item-click", "button-click", "menu-item-click", "handle-click", "is-disabled", "selected-index"],
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      h
    });
  },
  render: function render() {
    var _state$designConfig, _state$designConfig$i, _state$designConfig2, _state$designConfig2$;
    var splitButton = this.splitButton, type = this.type, disabled = this.disabled, handleMainButtonClick = this.handleMainButtonClick, menuOptions = this.menuOptions, title = this.title, suffixIcon = this.suffixIcon, prefixIcon = this.prefixIcon;
    var slots = this.slots, size = this.size, state = this.state, border = this.border, showIcon = this.showIcon, round = this.round, clickOutside = this.clickOutside;
    var params = {
      visible: state.visible
    };
    var triggerElm = null;
    var triggerClass = "tiny-dropdown__trigger tiny-dropdown-trigger";
    var visibleClass = state.visible ? "tiny-dropdown--visible tiny-dropdown-visible" : "";
    var IconDown = suffixIcon || ((_state$designConfig = state.designConfig) == null ? void 0 : (_state$designConfig$i = _state$designConfig.icons) == null ? void 0 : _state$designConfig$i.dropdownIcon) || iconDownWard();
    var IconPre = prefixIcon;
    var ButtonIconDown = ((_state$designConfig2 = state.designConfig) == null ? void 0 : (_state$designConfig2$ = _state$designConfig2.icons) == null ? void 0 : _state$designConfig2$.dropdownIcon) || iconDownWard();
    var defaultSlot = slots.default && slots.default(params);
    if (splitButton) {
      triggerElm = createVNode(resolveComponent("tiny-button-group"), null, {
        default: function _default2() {
          return [createVNode(resolveComponent("tiny-button"), {
            "type": type,
            "size": size,
            "onClick": handleMainButtonClick,
            "disabled": disabled,
            "class": "tiny-dropdown__title-button"
          }, {
            default: function _default3() {
              return [defaultSlot || createVNode("span", null, [title])];
            }
          }), createVNode(resolveComponent("tiny-button"), {
            "ref": "trigger",
            "type": type,
            "size": size,
            "class": "tiny-dropdown__caret-button " + triggerClass,
            "disabled": disabled,
            "reset-time": 0
          }, {
            default: function _default3() {
              return [createVNode(ButtonIconDown, {
                "class": visibleClass
              }, null)];
            }
          })];
        }
      });
    } else {
      var _defaultSlot$;
      var suffixSlot = slots["suffix-icon"] && slots["suffix-icon"]();
      var prefixSlot = slots["prefix-icon"] && slots["prefix-icon"]();
      var vnodeData = defaultSlot && ((_defaultSlot$ = defaultSlot[0]) == null ? void 0 : _defaultSlot$.data) || {};
      var _vnodeData$attrs = vnodeData.attrs, attrs = _vnodeData$attrs === void 0 ? {} : _vnodeData$attrs;
      if (disabled && !attrs.disabled) {
        attrs.disabled = true;
        vnodeData.attrs = attrs;
      }
      var suffixInner = showIcon ? createVNode("span", {
        "class": "tiny-dropdown__suffix-inner " + visibleClass
      }, [suffixSlot || createVNode(IconDown, null, null)]) : "";
      var prefixInner = prefixIcon || prefixSlot ? createVNode("span", {
        "class": "tiny-dropdown__prefix-inner " + visibleClass
      }, [prefixSlot || createVNode(IconPre, null, null)]) : "";
      var defaultTriggerElm = defaultSlot || title ? createVNode("span", {
        "class": "tiny-dropdown__title"
      }, [defaultSlot || title]) : null;
      triggerElm = border ? createVNode(resolveComponent("tiny-button"), {
        "ref": "trigger",
        "round": round,
        "disabled": disabled,
        "type": type,
        "class": "tiny-dropdown__border " + (state.visible ? "is-expand" : "") + (showIcon ? " is-show-icon " : "") + " " + triggerClass,
        "reset-time": 0
      }, {
        default: function _default2() {
          return [prefixInner, defaultTriggerElm, suffixInner];
        }
      }) : createVNode("span", {
        "ref": "trigger",
        "class": "is-text" + (state.visible ? " is-expand" : " is-hide") + (disabled ? " is-disabled" : "") + " " + triggerClass
      }, [prefixInner, defaultTriggerElm, suffixInner]);
    }
    var defaulMenuElm = createVNode(resolveComponent("tiny-dropdown-menu"), {
      "options": menuOptions.options,
      "text-field": menuOptions.textField || menuOptions["text-field"],
      "popper-class": menuOptions.popperClass || menuOptions["popper-class"],
      "placement": menuOptions.placement
    }, null);
    var menuElm = disabled ? null : slots.dropdown && slots.dropdown() || defaulMenuElm;
    return withDirectives(createVNode("div", {
      "class": "tiny-dropdown",
      "aria-disabled": disabled
    }, [triggerElm, menuElm]), [[resolveDirective("clickoutside"), clickOutside]]);
  }
});
export {
  _sfc_main as default
};
