import { renderless, api } from '@opentiny/vue-renderless/date-range/vue';
import { defineComponent, directive, props, setup } from '@opentiny/vue-common';
import Clickoutside from '@opentiny/vue-renderless/common/deps/clickoutside';
import Time from '@opentiny/vue-time';
import DateTable from '@opentiny/vue-date-table';
import Input from '@opentiny/vue-input';
import Button from '@opentiny/vue-button';
import { IconDoubleRight, IconDoubleLeft, IconChevronLeft, IconChevronRight } from '@opentiny/vue-icon';
import { resolveComponent, resolveDirective, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, renderSlot, createElementBlock, Fragment, renderList, toDisplayString, createCommentVNode, createVNode, createTextVNode, vShow } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var classes = {
  "picker-panel": "text-color-text-primary text-xs shadow-md bg-color-bg-1 rounded leading-4 my-0.5 mx-0",
  "date-range-picker": "w-144",
  "sidebar": "absolute top-0 bottom-0 w-28 border-r border-r-color-bg-3 box-border pt-5 bg-color-bg-1 overflow-auto",
  "shortcut": "block my-0 mx-auto w-24 rounded border-0 bg-transparent leading-8 text-xs text-color-text-primary pl-4 text-left outline-0 cursor-pointer hover:bg-color-bg-2",
  "shortcut-selected": "text-color-brand bg-color-brand-hover-subtle",
  "body": "min-w-[513px]",
  "time-header": "relative text-xs h-10 leading-10 table w-full box-border border-b border-b-color-bg-3",
  "content": "float-left w-1/2 box-border pt-4 pr-4 pb-1.5 pl-4",
  "header": "relative text-center p-4 h-12",
  "icon-btn": "text-sm leading-4 fill-color-text-primary border-0 cursor-pointer outline-0 hover:fill-color-brand",
  "is-disabled": "text-color-text-disabled hover:cursor-not-allowed",
  "arrow-left": "float-left",
  "arrow-right": "float-right",
  "editors-wrap": "box-border table-cell",
  "is-left": "border-r border-r-color-bg-3 relative -left-px",
  "is-right": "text-right",
  "time-picker-wrap": "relative table-cell px-1",
  "time-picker-wrap-left": "before:content-[''] before:h-6 before:absolute before:right-0 before:top-2 before:border-r before:border-r-color-bg-3",
  "editor": "relative items-center sm:border-0 text-center",
  "footer": "border-t border-t-color-bg-3 py-3 px-4 bg-color-bg-1 overflow-hidden rounded-b"
};
var _sfc_main = defineComponent({
  directives: directive({
    Clickoutside
  }),
  components: {
    TimePicker: Time,
    DateTable,
    TinyInput: Input,
    TinyButton: Button,
    IconDoubleRight: IconDoubleRight(),
    IconDoubleLeft: IconDoubleLeft(),
    IconChevronLeft: IconChevronLeft(),
    IconChevronRight: IconChevronRight()
  },
  props: [].concat(props, ["emitter", "step", "showWeekNumber", "formatWeeks"]),
  emits: ["dodestroy", "pick"],
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api,
      classes
    });
  }
});
var _hoisted_1 = {
  "data-tag": "tiny-picker-panel__body-wrapper",
  class: "relative"
};
var _hoisted_2 = ["onClick"];
var _hoisted_3 = {
  "data-tag": "tiny-picker-panel__body"
};
var _hoisted_4 = /* @__PURE__ */ createElementVNode(
  "span",
  {
    "data-tag": "tiny-icon-arrow-right"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_5 = ["disabled"];
var _hoisted_6 = ["disabled"];
var _hoisted_7 = {
  class: "mx-12"
};
var _hoisted_8 = ["disabled"];
var _hoisted_9 = ["disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_time_picker = resolveComponent("time-picker");
  var _component_icon_double_left = resolveComponent("icon-double-left");
  var _component_icon_chevron_left = resolveComponent("icon-chevron-left");
  var _component_icon_double_right = resolveComponent("icon-double-right");
  var _component_icon_chevron_right = resolveComponent("icon-chevron-right");
  var _component_date_table = resolveComponent("date-table");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return openBlock(), createBlock(Transition, {
    name: "tiny-zoom-in-top",
    onAfterLeave: _cache[19] || (_cache[19] = function($event) {
      return _ctx.$emit("dodestroy");
    }),
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          "data-tag": "tiny-picker-panel tiny-date-range-picker tiny-popper",
          class: normalizeClass(_ctx.m(_ctx.gcls(["picker-panel", "date-range-picker"]), _ctx.state.popperClass)),
          ref: "refDateRange"
        },
        [createElementVNode("div", _hoisted_1, [renderSlot(_ctx.$slots, "sidebar", {
          dataTag: "tiny-picker-panel__sidebar",
          class: normalizeClass(_ctx.gcls("sidebar"))
        }), _ctx.state.shortcuts ? (openBlock(), createElementBlock(
          "div",
          {
            key: 0,
            ref: "shortcut",
            "data-tag": "tiny-picker-panel__sidebar",
            class: normalizeClass(_ctx.gcls("sidebar"))
          },
          [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.shortcuts, function(shortcut, key) {
              return openBlock(), createElementBlock("button", {
                type: "button",
                "data-tag": "tiny-picker-panel__shortcut",
                key,
                class: normalizeClass(_ctx.m(_ctx.gcls("shortcut"), _ctx.state.singleSelect && shortcut.type === _ctx.state.shortcutType && shortcut.text === _ctx.state.shortcutText && _ctx.gcls("shortcut-selected"))),
                onClick: function onClick($event) {
                  return _ctx.handleShortcutClick(shortcut);
                }
              }, toDisplayString(shortcut.text), 11, _hoisted_2);
            }),
            128
            /* KEYED_FRAGMENT */
          ))],
          2
          /* CLASS */
        )) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_3, [_ctx.state.showTime ? (openBlock(), createElementBlock(
          "div",
          {
            key: 0,
            "data-tag": "tiny-date-range-picker__time-header",
            class: normalizeClass(_ctx.gcls("time-header"))
          },
          [createElementVNode(
            "span",
            {
              "data-tag": "tiny-date-range-picker__editors-wrap",
              class: normalizeClass(_ctx.gcls(["editors-wrap", "is-left"]))
            },
            [createElementVNode(
              "span",
              {
                "data-tag": "tiny-date-range-picker__time-picker-wrap",
                class: normalizeClass(_ctx.gcls(["time-picker-wrap", "time-picker-wrap-left"]))
              },
              [createVNode(_component_tiny_input, {
                size: "small",
                disabled: _ctx.state.rangeState.selecting,
                ref: "minInput",
                placeholder: _ctx.t("ui.datepicker.startDate"),
                "data-tag": "tiny-date-range-picker__editor",
                "custom-class": _ctx.gcls("editor"),
                modelValue: _ctx.state.minVisibleDate,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = function(val) {
                  return _ctx.handleDateInput(val, "min");
                }),
                onChange: _cache[1] || (_cache[1] = function(val) {
                  return _ctx.handleDateChange(val, "min");
                })
              }, null, 8, ["disabled", "placeholder", "custom-class", "modelValue"])],
              2
              /* CLASS */
            ), withDirectives((openBlock(), createElementBlock(
              "span",
              {
                "data-tag": "tiny-date-range-picker__time-picker-wrap",
                class: normalizeClass(_ctx.gcls("time-picker-wrap"))
              },
              [createVNode(_component_tiny_input, {
                size: "small",
                "data-tag": "tiny-date-range-picker__editor",
                "custom-class": _ctx.gcls("editor"),
                disabled: _ctx.state.rangeState.selecting,
                placeholder: _ctx.t("ui.datepicker.startTime"),
                modelValue: _ctx.state.minVisibleTime,
                onFocus: _cache[2] || (_cache[2] = function($event) {
                  return _ctx.state.minTimePickerVisible = true;
                }),
                "onUpdate:modelValue": _cache[3] || (_cache[3] = function(val) {
                  return _ctx.handleTimeInput(val, "min");
                }),
                onChange: _cache[4] || (_cache[4] = function(val) {
                  return _ctx.handleTimeChange(val, "min");
                })
              }, null, 8, ["custom-class", "disabled", "placeholder", "modelValue"]), createVNode(_component_time_picker, {
                ref: "minTimePicker",
                step: _ctx.step,
                "time-arrow-control": _ctx.state.arrowControl,
                show: _ctx.state.minTimePickerVisible,
                value: _ctx.state.minDate,
                onPick: _ctx.handleMinTimePick
              }, null, 8, ["step", "time-arrow-control", "show", "value", "onPick"])],
              2
              /* CLASS */
            )), [[_directive_clickoutside, _ctx.handleMinTimeClose]])],
            2
            /* CLASS */
          ), _hoisted_4, createElementVNode(
            "span",
            {
              "data-tag": "tiny-date-range-picker__editors-wrap is-right",
              class: normalizeClass(_ctx.gcls(["editors-wrap", "is-right"]))
            },
            [createElementVNode(
              "span",
              {
                "data-tag": "tiny-date-range-picker__time-picker-wrap",
                class: normalizeClass(_ctx.gcls(["time-picker-wrap", "time-picker-wrap-left"]))
              },
              [createVNode(_component_tiny_input, {
                size: "small",
                "data-tag": "tiny-date-range-picker__editor",
                "custom-class": _ctx.gcls("editor"),
                disabled: _ctx.state.rangeState.selecting,
                placeholder: _ctx.t("ui.datepicker.endDate"),
                modelValue: _ctx.state.maxVisibleDate,
                readonly: !_ctx.state.minDate,
                "onUpdate:modelValue": _cache[5] || (_cache[5] = function(val) {
                  return _ctx.handleDateInput(val, "max");
                }),
                onChange: _cache[6] || (_cache[6] = function(val) {
                  return _ctx.handleDateChange(val, "max");
                })
              }, null, 8, ["custom-class", "disabled", "placeholder", "modelValue", "readonly"])],
              2
              /* CLASS */
            ), withDirectives((openBlock(), createElementBlock(
              "span",
              {
                "data-tag": "tiny-date-range-picker__time-picker-wrap",
                class: normalizeClass(_ctx.gcls("time-picker-wrap"))
              },
              [createVNode(_component_tiny_input, {
                size: "small",
                "data-tag": "tiny-date-range-picker__editor",
                "custom-class": _ctx.gcls("editor"),
                disabled: _ctx.state.rangeState.selecting,
                placeholder: _ctx.t("ui.datepicker.endTime"),
                modelValue: _ctx.state.maxVisibleTime,
                readonly: !_ctx.state.minDate,
                onFocus: _cache[7] || (_cache[7] = function($event) {
                  return _ctx.state.minDate && (_ctx.state.maxTimePickerVisible = true);
                }),
                "onUpdate:modelValue": _cache[8] || (_cache[8] = function(val) {
                  return _ctx.handleTimeInput(val, "max");
                }),
                onChange: _cache[9] || (_cache[9] = function(val) {
                  return _ctx.handleTimeChange(val, "max");
                })
              }, null, 8, ["custom-class", "disabled", "placeholder", "modelValue", "readonly"]), createVNode(_component_time_picker, {
                ref: "maxTimePicker",
                step: _ctx.step,
                "time-arrow-control": _ctx.state.arrowControl,
                show: _ctx.state.maxTimePickerVisible,
                value: _ctx.state.maxDate,
                onPick: _ctx.handleMaxTimePick
              }, null, 8, ["step", "time-arrow-control", "show", "value", "onPick"])],
              2
              /* CLASS */
            )), [[_directive_clickoutside, _ctx.handleMaxTimeClose]])],
            2
            /* CLASS */
          )],
          2
          /* CLASS */
        )) : createCommentVNode("v-if", true), createElementVNode(
          "div",
          {
            "data-tag": "tiny-picker-panel__content tiny-date-range-picker__content is-left",
            class: normalizeClass(_ctx.gcls(["content", "is-left"]))
          },
          [createElementVNode(
            "div",
            {
              "data-tag": "tiny-date-range-picker__header",
              class: normalizeClass(_ctx.gcls("header"))
            },
            [createElementVNode(
              "button",
              {
                type: "button",
                onClick: _cache[10] || (_cache[10] = function() {
                  return _ctx.leftPrevYear && _ctx.leftPrevYear.apply(_ctx, arguments);
                }),
                "data-tag": "tiny-picker-panel__icon-btn tiny-icon-d-arrow-left",
                class: normalizeClass(_ctx.gcls(["icon-btn", "arrow-left"]))
              },
              [createVNode(_component_icon_double_left)],
              2
              /* CLASS */
            ), createElementVNode(
              "button",
              {
                type: "button",
                onClick: _cache[11] || (_cache[11] = function() {
                  return _ctx.leftPrevMonth && _ctx.leftPrevMonth.apply(_ctx, arguments);
                }),
                "data-tag": "tiny-picker-panel__icon-btn tiny-icon-arrow-left",
                class: normalizeClass(_ctx.gcls(["icon-btn", "arrow-left"]))
              },
              [createVNode(_component_icon_chevron_left)],
              2
              /* CLASS */
            ), _ctx.state.unlinkPanels ? (openBlock(), createElementBlock("button", {
              key: 0,
              type: "button",
              onClick: _cache[12] || (_cache[12] = function() {
                return _ctx.leftNextYear && _ctx.leftNextYear.apply(_ctx, arguments);
              }),
              disabled: !_ctx.state.enableYearArrow,
              class: normalizeClass({
                "is-disabled": !_ctx.state.enableYearArrow
              }),
              "data-tag": "tiny-picker-panel__icon-btn tiny-icon-d-arrow-right"
            }, [createVNode(_component_icon_double_right)], 10, _hoisted_5)) : createCommentVNode("v-if", true), _ctx.state.unlinkPanels ? (openBlock(), createElementBlock("button", {
              key: 1,
              type: "button",
              onClick: _cache[13] || (_cache[13] = function() {
                return _ctx.leftNextMonth && _ctx.leftNextMonth.apply(_ctx, arguments);
              }),
              disabled: !_ctx.state.enableMonthArrow,
              class: normalizeClass({
                "is-disabled": !_ctx.state.enableMonthArrow
              }),
              "data-tag": "tiny-picker-panel__icon-btn tiny-icon-arrow-right"
            }, [createVNode(_component_icon_chevron_right)], 10, _hoisted_6)) : createCommentVNode("v-if", true), createElementVNode(
              "div",
              _hoisted_7,
              toDisplayString(_ctx.state.leftLabel),
              1
              /* TEXT */
            )],
            2
            /* CLASS */
          ), createVNode(_component_date_table, {
            "selection-mode": "range",
            date: _ctx.state.leftDate,
            "default-value": _ctx.state.defaultValue,
            "min-date": _ctx.state.minDate,
            "max-date": _ctx.state.maxDate,
            "range-state": _ctx.state.rangeState,
            "disabled-date": _ctx.state.disabledDate,
            "cell-class-name": _ctx.state.cellClassName,
            onChangerange: _ctx.handleChangeRange,
            "first-day-of-week": _ctx.state.firstDayOfWeek,
            "show-week-number": _ctx.showWeekNumber,
            "format-weeks": _ctx.formatWeeks,
            onPick: _ctx.handleRangePick
          }, null, 8, ["date", "default-value", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "first-day-of-week", "show-week-number", "format-weeks", "onPick"])],
          2
          /* CLASS */
        ), createElementVNode(
          "div",
          {
            "data-tag": "tiny-picker-panel__content tiny-date-range-picker__content is-right",
            class: normalizeClass(_ctx.gcls(["content", "is-right"]))
          },
          [createElementVNode(
            "div",
            {
              "data-tag": "tiny-date-range-picker__header",
              class: normalizeClass(_ctx.gcls("header"))
            },
            [_ctx.state.unlinkPanels ? (openBlock(), createElementBlock("button", {
              key: 0,
              type: "button",
              onClick: _cache[14] || (_cache[14] = function() {
                return _ctx.rightPrevYear && _ctx.rightPrevYear.apply(_ctx, arguments);
              }),
              disabled: !_ctx.state.enableYearArrow,
              class: normalizeClass(_ctx.m(_ctx.gcls(["icon-btn", "arrow-left"]), !_ctx.state.enableYearArrow && _ctx.gcls("is-disabled"))),
              "data-tag": "tiny-picker-panel__icon-btn tiny-icon-d-arrow-left"
            }, [createVNode(_component_icon_double_left)], 10, _hoisted_8)) : createCommentVNode("v-if", true), _ctx.state.unlinkPanels ? (openBlock(), createElementBlock("button", {
              key: 1,
              "data-tag": "tiny-picker-panel__icon-btn tiny-icon-arrow-left",
              type: "button",
              disabled: !_ctx.state.enableMonthArrow,
              class: normalizeClass(_ctx.m(_ctx.gcls(["icon-btn", "arrow-left"]), !_ctx.state.enableMonthArrow && _ctx.gcls("is-disabled"))),
              onClick: _cache[15] || (_cache[15] = function() {
                return _ctx.rightPrevMonth && _ctx.rightPrevMonth.apply(_ctx, arguments);
              })
            }, [createVNode(_component_icon_chevron_left)], 10, _hoisted_9)) : createCommentVNode("v-if", true), createElementVNode(
              "button",
              {
                type: "button",
                onClick: _cache[16] || (_cache[16] = function() {
                  return _ctx.rightNextYear && _ctx.rightNextYear.apply(_ctx, arguments);
                }),
                "data-tag": "tiny-picker-panel__icon-btn tiny-icon-d-arrow-right",
                class: normalizeClass(_ctx.gcls(["icon-btn", "arrow-right"]))
              },
              [createVNode(_component_icon_double_right)],
              2
              /* CLASS */
            ), createElementVNode(
              "button",
              {
                type: "button",
                onClick: _cache[17] || (_cache[17] = function() {
                  return _ctx.rightNextMonth && _ctx.rightNextMonth.apply(_ctx, arguments);
                }),
                "data-tag": "tiny-picker-panel__icon-btn tiny-icon-arrow-right",
                class: normalizeClass(_ctx.gcls(["icon-btn", "arrow-right"]))
              },
              [createVNode(_component_icon_chevron_right)],
              2
              /* CLASS */
            ), createElementVNode(
              "div",
              null,
              toDisplayString(_ctx.state.rightLabel),
              1
              /* TEXT */
            )],
            2
            /* CLASS */
          ), createVNode(_component_date_table, {
            "selection-mode": "range",
            date: _ctx.state.rightDate,
            "default-value": _ctx.state.defaultValue,
            "min-date": _ctx.state.minDate,
            "max-date": _ctx.state.maxDate,
            "range-state": _ctx.state.rangeState,
            "disabled-date": _ctx.state.disabledDate,
            "cell-class-name": _ctx.state.cellClassName,
            onChangerange: _ctx.handleChangeRange,
            "first-day-of-week": _ctx.state.firstDayOfWeek,
            "show-week-number": _ctx.showWeekNumber,
            "format-weeks": _ctx.formatWeeks,
            onPick: _ctx.handleRangePick
          }, null, 8, ["date", "default-value", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "first-day-of-week", "show-week-number", "format-weeks", "onPick"])],
          2
          /* CLASS */
        )])]), _ctx.state.showTime ? (openBlock(), createElementBlock(
          "div",
          {
            key: 0,
            "data-tag": "tiny-picker-panel__footer",
            class: normalizeClass(_ctx.gcls("footer"))
          },
          [createVNode(_component_tiny_button, {
            size: "mini",
            type: "text",
            "data-tag": "tiny-picker-panel__link-btn",
            onClick: _ctx.handleClear,
            "custom-class": "text-left pl-0"
          }, {
            default: withCtx(function() {
              return [createTextVNode(
                toDisplayString(_ctx.t("ui.datepicker.clear")),
                1
                /* TEXT */
              )];
            }),
            _: 1
            /* STABLE */
          }, 8, ["onClick"]), createVNode(_component_tiny_button, {
            type: "primary",
            size: "mini",
            "data-tag": "tiny-picker-panel__link-btn",
            "custom-class": "float-right",
            disabled: _ctx.state.btnDisabled,
            onClick: _cache[18] || (_cache[18] = function($event) {
              return _ctx.handleConfirm(false);
            })
          }, {
            default: withCtx(function() {
              return [createTextVNode(
                toDisplayString(_ctx.t("ui.datepicker.confirm")),
                1
                /* TEXT */
              )];
            }),
            _: 1
            /* STABLE */
          }, 8, ["disabled"])],
          2
          /* CLASS */
        )) : createCommentVNode("v-if", true)],
        2
        /* CLASS */
      ), [[vShow, _ctx.state.visible]])];
    }),
    _: 3
    /* FORWARDED */
  });
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobileFirst as default };
