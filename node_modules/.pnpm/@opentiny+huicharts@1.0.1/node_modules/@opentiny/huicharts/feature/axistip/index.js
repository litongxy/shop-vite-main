import Theme from '../token/index.js';
import { isBoolean, isArray } from '../../util/type.js';

/**
 * Copyright (c) 2024 - present OpenTiny HUICharts Authors.
 * Copyright (c) 2024 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */

var distanceX = 16; // 鼠标与气泡框之间的左右偏移量
var distanceY = 24; // 鼠标与气泡框之间的上偏移量
var axisType = ['xAxis', 'yAxis'];

// 设置 TriggerEvent
function setAxisTriggerEvent(eChartOption, type) {
  if (!eChartOption[type]) return;
  if (isArray(eChartOption[type])) {
    eChartOption[type].forEach(function (subitem) {
      subitem.triggerEvent = true;
    });
  } else {
    eChartOption[type].triggerEvent = true;
  }
}

// 设置气泡的位置
function setPosition(tipContainer, echartsDom, param) {
  var tipContainerReact = tipContainer.getBoundingClientRect();
  var echartsDomRect = echartsDom.getBoundingClientRect();
  var echartsDomStyle = getComputedStyle(echartsDom);
  var echartsDomBorder = parseFloat(echartsDomStyle.borderRightWidth) + parseFloat(echartsDomStyle.borderLeftWidth);
  var tipContainerW = tipContainerReact.width;
  var tipContainerH = tipContainerReact.height;
  var _param$event = param.event,
    offsetX = _param$event.offsetX,
    offsetY = _param$event.offsetY;
  var tipLeft = 0;
  var tipTop = 0;
  // 判断tips 容器宽度是否小于图表容器
  if (tipContainerW < echartsDomRect.width - echartsDomBorder) {
    tipTop = offsetY - distanceY;
    // 处理临界值 >0 时向右，<0 时向左
    var reviseL = echartsDomRect.width - echartsDomBorder - offsetX - tipContainerW - distanceX;
    if (reviseL > 0) {
      tipLeft = offsetX + distanceX;
    } else {
      tipLeft = offsetX - tipContainerW - distanceX;
    }
  } else {
    tipTop = offsetY - tipContainerH - distanceY;
  }
  tipContainer.style.cssText = "\n    position: absolute;\n    display: inline-block;\n    word-break: break-all;\n    opacity: '1';\n    padding: 8px;\n    top:" + tipTop + "px;\n    left:" + tipLeft + "px;\n    color: " + Theme.config.tooltipTextColor + ";\n    font-size: " + Theme.config.tooltipTextFontSize + ";\n    background: " + Theme.config.tooltipBg + ";\n    box-shadow:0 " + Theme.config.tooltipShadowOffsetY + "px\n    " + Theme.config.tooltipShadowBlur + "px 0 " + Theme.config.tooltipShadowColor + ";\n  ";
}

// 坐标轴文本添加tip提示
function axistip(echartsDom, echartsIns, eChartOption, axistip) {
  if (!axistip) return;
  if (isBoolean(axistip)) {
    axistip = {};
    axisType.forEach(function (item) {
      axistip[item] = true;
    });
  }
  Object.keys(axistip).forEach(function (item) {
    setAxisTriggerEvent(eChartOption, item);
  });
  // 气泡容器
  var tipContainer = document.createElement('div');
  tipContainer.className = 'labeltip';
  tipContainer.style.display = 'inline-block';
  tipContainer.style.opacity = '0';
  echartsIns.on('mousemove', function (param) {
    tipContainer.textContent = param.value;
    if (axisType.indexOf(param.componentType) !== -1) {
      setPosition(tipContainer, echartsDom, param);
    }
  });
  echartsIns.on('mouseout', function (param) {
    if (axisType.indexOf(param.componentType) !== -1) {
      tipContainer.textContent = '';
      tipContainer.style.cssText = "\n        opacity:0;\n        padding: 8px;\n        font-size: " + Theme.config.tooltipTextFontSize + ";\n        position: absolute;\n        display: inline-block;\n        word-break: break-all;\n      ";
    }
  });
  var labeltipDom = echartsDom.getElementsByClassName('labeltip')[0];
  if (labeltipDom) {
    echartsDom.removeChild(labeltipDom);
  }
  echartsDom.appendChild(tipContainer);
}
export { axistip as default };
