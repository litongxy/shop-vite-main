var _aliasTokenMap;
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { THEMES } from '../../../util/constants.js';
import getAliasToken$1 from '../theme/ict/getAliasToken.js';
import getAliasToken$3 from '../theme/cloud/getAliasToken.js';
import getAliasToken$2 from '../theme/hdesign/getAliasToken.js';

/**
 * Copyright (c) 2024 - present OpenTiny HUICharts Authors.
 * Copyright (c) 2024 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */

// aliasToken的回调映射,bit先和hdesign拉齐原先那套暂不删除
var aliasTokenMap = (_aliasTokenMap = {}, _aliasTokenMap[THEMES.LIGHT] = getAliasToken$1, _aliasTokenMap[THEMES.DARK] = function (globalToken) {
  return getAliasToken$1(globalToken, false);
}, _aliasTokenMap[THEMES.BPIT_LIGHT] = getAliasToken$2, _aliasTokenMap[THEMES.BPIT_DARK] = function (globalToken) {
  return getAliasToken$2(globalToken, false);
}, _aliasTokenMap[THEMES.CLOUD_LIGHT] = getAliasToken$3, _aliasTokenMap[THEMES.CLOUD_DARK] = function (globalToken) {
  return getAliasToken$3(globalToken, false);
}, _aliasTokenMap[THEMES.HDESIGN_LIGHT] = getAliasToken$2, _aliasTokenMap[THEMES.HDESIGN_DARK] = function (globalToken) {
  return getAliasToken$2(globalToken, false);
}, _aliasTokenMap);

/**
 *  根据globalToken获取aliasToken
 * @param {string} themeName  主题名称
 * @param {object} globalToken  globalToken
 */
function getAliasToken(themeName, globalToken) {
  return _extends({}, aliasTokenMap[themeName](globalToken));
}
export { aliasTokenMap, getAliasToken as default };
