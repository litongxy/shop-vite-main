function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import random from '../../util/random.js';

/**
 * Copyright (c) 2024 - present OpenTiny HUICharts Authors.
 * Copyright (c) 2024 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */

function overallLayout(params, api, distance, displayRoot, d3) {
  var context = params.context;
  // d3函数：设置球的大小padding值等
  d3.pack().size([api.getWidth() - 2, api.getHeight() - 2]).padding(distance)(displayRoot);
  context.nodes = {};
  displayRoot.descendants().forEach(function (node) {
    context.nodes[node.id] = node;
  });
}
function setChartPosition(params) {
  var iChartOption = params.iChartOption,
    height = params.height,
    width = params.width;
  var radius = params.radius,
    widthDis = params.widthDis,
    heightDis = params.heightDis;
  // 获取缩放值以及left、top的位移值
  if (!iChartOption.chartPosition) {
    iChartOption.chartPosition = {
      center: ['50%', '50%'],
      radius: '80%'
    };
  } else {
    if (!iChartOption.chartPosition.center) {
      iChartOption.chartPosition.center = ['50%', '50%'];
    } else {
      if (!iChartOption.chartPosition.radius) {
        iChartOption.chartPosition.radius = '80%';
      }
    }
  }
  radius = iChartOption.chartPosition.radius || '80%';
  if (typeof radius !== 'number') {
    if (radius.indexOf('%') !== -1) {
      radius = (radius.substring(0, radius.indexOf('%')) - 0) / 100;
    } else {
      radius = parseFloat(radius) / Math.min(height, width);
    }
  } else {
    radius = radius / Math.min(height, width);
  }
  var leftValue = iChartOption.chartPosition.center[0] || '50%';
  if (typeof leftValue !== 'number') {
    if (leftValue.indexOf('%') !== -1) {
      leftValue = (leftValue.substring(0, leftValue.indexOf('%')) - 0) / 100;
      widthDis = width * (leftValue - radius / 2);
    } else {
      widthDis = parseFloat(leftValue);
    }
  } else {
    widthDis = leftValue;
  }
  var topValue = iChartOption.chartPosition.center[1] || '50%';
  if (typeof topValue !== 'number') {
    if (topValue.indexOf('%') !== -1) {
      topValue = (topValue.substring(0, topValue.indexOf('%')) - 0) / 100;
      heightDis = height * (topValue - radius / 2);
    } else {
      heightDis = parseFloat(topValue);
    }
  } else {
    heightDis = topValue;
  }
  return {
    radius: radius,
    widthDis: widthDis,
    heightDis: heightDis
  };
}
function returnValue(params, iChartOption) {
  var node = params.node,
    radius = params.radius,
    widthDis = params.widthDis,
    heightDis = params.heightDis,
    nodeName = params.nodeName,
    type = params.type,
    z2 = params.z2;
  var textStyle = iChartOption.textStyle || {};
  var value = {
    type: 'circle',
    // 定义球的坐标及半径
    shape: {
      cx: node.x * radius + widthDis,
      cy: node.y * radius + heightDis,
      // 若移动页面使得球的半径小于0时则取反
      r: node.r * radius > 0 ? node.r * radius : -node.r * radius
    },
    transition: ['shape'],
    z2: z2,
    // 定义球的文本信息等
    textContent: {
      type: 'text',
      style: _extends({
        text: node.depth !== 0 && node.data.showLabel ? textStyle.formatter && textStyle.formatter(node) || nodeName : '',
        fontFamily: 'Arial',
        width: node.r,
        height: node.r,
        borderRadius: node.r,
        // 文本溢出显示
        overflow: 'visible',
        fontSize: Math.max(node.r / 3, 12),
        fill: '#ffffff'
      }, textStyle),
      // 在非文本溢出显示前提下，鼠标划入时展示省略号的内容
      emphasis: {
        style: {
          overflow: null,
          fontSize: Math.max(node.r / 3, 12)
        }
      }
    },
    // 设置文本显示的位置
    textConfig: {
      position: 'inside'
    },
    style: {
      // 设置球的边框色
      stroke: node.depth >= 1 && type === 'nested' ? node.data.borderColor : null,
      // 设置球的背景色
      fill: node.data.color
    },
    // 设置球的跳动范围
    keyframeAnimation: {
      duration: 3000,
      loop: true,
      delay: random() * 2000,
      keyframes: [{
        y: -3,
        percent: 0.5,
        easing: 'cubicOut'
      }, {
        y: 0,
        percent: 1,
        easing: 'bounceOut'
      }, {
        x: -3,
        percent: 0.5,
        easing: 'cubicOut'
      }, {
        x: 0,
        percent: 1,
        easing: 'bounceOut'
      }]
    }
  };
  return value;
}
function handleRootData(params) {
  var d3 = params.d3,
    baseOption = params.baseOption,
    chartInstance = params.chartInstance,
    iChartOption = params.iChartOption;
  var type = iChartOption.type,
    distance = iChartOption.distance;
  distance = distance !== undefined ? distance : type === 'non-nested' ? 50 : 5;
  function stratify() {
    // d3函数：定义球的大小排列与id名处理等
    return d3.stratify().parentId(function (d) {
      return d.id.substring(0, d.id.lastIndexOf('.'));
    })(baseOption.dataset[0].source).sum(function (d) {
      return d.value || 0;
    }).sort(function (a, b) {
      return b.value - a.value;
    });
  }
  // 配置renderItem函数，返回值是球的相关配置
  var displayRoot = stratify();
  function renderItem(params, api) {
    var context = params.context;
    if (!context.layout) {
      context.layout = true;
      overallLayout(params, api, distance, displayRoot, d3);
    }
    var nodePath = api.value('id');
    var node = context.nodes[nodePath];
    if (!node) {
      return;
    }
    var isLeaf = !node.children || !node.children.length;
    // 设置label值是否显示，若有嵌套则不显示，否则显示
    var nodeName = isLeaf ? node.data.label : '';
    var z2 = api.value('depth') * 2;
    // 获取实例的宽高
    var width = chartInstance.getWidth();
    var height = chartInstance.getHeight();
    var widthDis = '';
    var heightDis = '';
    var radius = '';
    radius = setChartPosition({
      iChartOption: iChartOption,
      height: height,
      width: width,
      widthDis: widthDis,
      heightDis: heightDis,
      radius: radius
    }).radius;
    widthDis = setChartPosition({
      iChartOption: iChartOption,
      height: height,
      width: width,
      widthDis: widthDis,
      heightDis: heightDis,
      radius: radius
    }).widthDis;
    heightDis = setChartPosition({
      iChartOption: iChartOption,
      height: height,
      width: width,
      widthDis: widthDis,
      heightDis: heightDis,
      radius: radius
    }).heightDis;
    return returnValue({
      node: node,
      radius: radius,
      widthDis: widthDis,
      heightDis: heightDis,
      nodeName: nodeName,
      type: type,
      z2: z2
    }, iChartOption);
  }
  // 给baseOptionion设置renderItem,且只能设置一次，多次则会造成视图重叠
  baseOption.series[baseOption.legend.data.length].renderItem = renderItem;
}
export { handleRootData };
