import { createEl, addClass, appendText, appendNode, appendEL, getTitle, setStyle, handleSelectTimeLineLabel, setTranslateX, handleTimeLineLabel, insetArrow } from './util.js';
import CoordinateSystem from './CoordinateSystem.js';
import { SECONDS } from './constant.js';

/**
 * Copyright (c) 2024 - present OpenTiny HUICharts Authors.
 * Copyright (c) 2024 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */
var TimeLine = /*#__PURE__*/function () {
  function TimeLine(wrapper, option, barContainerWidth, barContainerHeight) {
    var _this = this;
    this.wrapper = null;
    // 左手柄的开始坐标
    this.startX = 0;
    // 左手柄的位移值
    this.distance = 0;
    // 右手柄的开始坐标
    this.startX2 = 0;
    // 右手柄的位移值
    this.distance2 = 0;
    // 初始的左手柄的位移值
    this.handleLDis = 0;
    // 初始的右手柄位移值
    this.handleRDis = 0;
    // 遮罩
    this.mask = null;
    // 左手柄
    this.handleL = null;
    // 右手柄
    this.handleR = null;
    // 图表宽度
    this.innerChartWidth = 0;
    // option
    this.option = {};
    // chartHeight
    this.innerChartHeight = 0;
    // 头部下半部分的时间轴
    this.selectTimeLine = null;
    // 内部canvas对象
    this.innerCtx = null;
    this.coordinateSystem = void 0;
    this.mouseMoveLeft = function (e) {
      var pageX = e.clientX;
      var moveX = pageX - _this.startX + _this.distance;
      // 向右边取的极限值
      var rightLimitValue = _this.handleRDis - 15;
      // 移动时距离左边的距离
      if (moveX >= rightLimitValue) {
        _this.handleLDis = rightLimitValue;
        // 修正位移值
        moveX = rightLimitValue;
      } else if (moveX <= 0) {
        _this.handleLDis = 0;
        // 修正位移值
        moveX = 0;
      } else {
        _this.handleLDis = moveX;
      }
      if (moveX <= rightLimitValue && moveX >= 0) {
        _this.resetTimeLine(_this.handleL, moveX, 'left');
        // 待定
        _this.resetBody();
      }
    };
    this.mouseUpLeft = function (e) {
      var pageX = e.clientX;
      _this.distance += pageX - _this.startX;
      // 距离左边的距离
      var rightLimitValue = _this.handleRDis - 15;
      if (_this.distance >= rightLimitValue) {
        _this.handleLDis = rightLimitValue;
        // 修正位移值
        _this.distance = rightLimitValue;
      } else if (_this.distance <= 0) {
        _this.handleLDis = 0;
        // 修正位移值
        _this.distance = 0;
      } else {
        _this.handleLDis = _this.distance;
      }
      document.removeEventListener('mousemove', _this.mouseMoveLeft);
      document.removeEventListener('mouseup', _this.mouseUpLeft);
    };
    this.mouseDownLeft = function (e) {
      var pageX = e.clientX;
      _this.startX = pageX;
      document.addEventListener('mousemove', _this.mouseMoveLeft);
      document.addEventListener('mouseup', _this.mouseUpLeft);
      return false;
    };
    this.mouseMoveRight = function (e) {
      var pageX = e.clientX;
      var moveX = pageX - _this.startX2 + _this.distance2;
      var leftLimitValue = _this.handleLDis + 15;
      // 移动时算出和左边的距离
      if (moveX >= 0) {
        _this.handleRDis = _this.innerChartWidth;
        moveX = 0;
      } else if (moveX <= -(_this.innerChartWidth - leftLimitValue)) {
        _this.handleRDis = leftLimitValue;
        moveX = -(_this.innerChartWidth - leftLimitValue);
      } else {
        _this.handleRDis = _this.innerChartWidth + moveX;
      }
      if (moveX >= -(_this.innerChartWidth - leftLimitValue) && moveX <= 0) {
        _this.resetTimeLine(_this.handleR, moveX, 'right');
        _this.resetBody();
      }
    };
    this.mouseUpRight = function (e) {
      var pageX = e.clientX;
      _this.distance2 += pageX - _this.startX2;
      var leftLimitValue = _this.handleLDis + 15;
      // 结束时距离左边的距离
      if (_this.distance2 <= -(_this.innerChartWidth - leftLimitValue)) {
        _this.handleRDis = leftLimitValue;
        _this.distance2 = -(_this.innerChartWidth - leftLimitValue);
      } else if (_this.distance2 >= 0) {
        _this.handleRDis = _this.innerChartWidth;
        _this.distance2 = 0;
      } else {
        _this.handleRDis = _this.innerChartWidth + _this.distance2;
      }
      document.removeEventListener('mousemove', _this.mouseMoveRight);
      document.removeEventListener('mouseup', _this.mouseUpRight);
    };
    this.mouseDownRight = function (e) {
      var pageX = e.clientX;
      _this.startX2 = pageX;
      document.addEventListener('mousemove', _this.mouseMoveRight);
      document.addEventListener('mouseup', _this.mouseUpRight);
      return false;
    };
    this.wrapper = wrapper;
    this.handleRDis = barContainerWidth;
    this.innerChartWidth = barContainerWidth;
    this.option = option;
    this.innerChartHeight = barContainerHeight;
  }
  var _proto = TimeLine.prototype;
  _proto.createDom = function createDom(className) {
    var node = createEl('div');
    addClass(node, className);
    return node;
  };
  _proto.addClassName = function addClassName(node, className) {
    addClass(node, className);
  };
  _proto.addText = function addText(node, text) {
    appendText(node, text);
  };
  _proto.clearDom = function clearDom(node) {
    appendNode(node, '');
  };
  _proto.addDom = function addDom(container, node) {
    appendEL(container, node);
  };
  _proto.renderTitle = function renderTitle(node) {
    // 标题
    var headerTitle = this.createDom('ev_GanttChart_headerTitle');
    var title = getTitle(this.option.currentTime);
    // 上标题
    var titleTop = this.createDom('ev_GanttChart_titleTop');
    this.addText(titleTop, title.yearLabel);
    this.addDom(headerTitle, titleTop);
    // 下标题
    var titleBtn = this.createDom('ev_GanttChart_titleBtn');
    this.addText(titleBtn, title.dateLabel);
    this.addDom(headerTitle, titleBtn);
    this.addDom(node, headerTitle);
  }

  // 设置遮罩宽度
  ;
  _proto.setMaskWidth = function setMaskWidth() {
    var width = this.handleRDis - this.handleLDis - 12 + "px";
    var left = this.handleLDis + 6 + "px";
    setStyle(this.mask, 'width', width);
    setStyle(this.mask, 'left', left);
  }

  // 获取手柄选中的时间范围
  ;
  _proto.getTimeScope = function getTimeScope() {
    var leftTime = parseInt(this.handleLDis / this.innerChartWidth * SECONDS.weekSeconds);
    var rightTime = parseInt(this.handleRDis / this.innerChartWidth * SECONDS.weekSeconds);
    var timeScope = {
      leftTime: leftTime,
      rightTime: rightTime
    };
    return timeScope;
  }

  // 生成头部下半部分的时间轴
  ;
  _proto.renderSelectTimeLine = function renderSelectTimeLine(timeScope) {
    if (this.selectTimeLine) {
      this.clearDom(this.selectTimeLine);
    }
    var label = handleSelectTimeLineLabel(this.option.currentTime, timeScope);
    // 左边显示的文本
    var selectLeft = this.createDom('ev_GanttChart_selectLeft');
    this.addText(selectLeft, label[0]);
    this.addDom(this.selectTimeLine, selectLeft);
    // 中间的线
    var verticalLineL = this.createDom('ev_GanttChart_verticalLineL');
    this.addDom(this.selectTimeLine, verticalLineL);
    var horizontalLine = this.createDom('ev_GanttChart_horizontalLine');
    this.addDom(this.selectTimeLine, horizontalLine);
    var verticalLineR = this.createDom('ev_GanttChart_verticalLineR');
    this.addDom(this.selectTimeLine, verticalLineR);
    // 右边显示的文本
    var selectRight = this.createDom('ev_GanttChart_selectRight');
    this.addText(selectRight, label[1]);
    this.addDom(this.selectTimeLine, selectRight);
  }

  // 手柄移动时设置头部的下半部分时间轴
  ;
  _proto.setSelectTimeLine = function setSelectTimeLine() {
    // 当前两个手柄之间的所占时间
    var timeScope = this.getTimeScope();
    this.renderSelectTimeLine(timeScope);
  }

  // 重绘头部时间轴
  ;
  _proto.resetTimeLine = function resetTimeLine(node, distance) {
    setTranslateX(node, distance);
    this.setMaskWidth();
    this.setSelectTimeLine();
  };
  // 生成头部上半部分的时间轴
  _proto.renderHeaderTime = function renderHeaderTime(node) {
    var label = handleTimeLineLabel(this.option.currentTime);
    for (var i = 0; i <= 28; i++) {
      // 刻度
      var scale = this.createDom('ev_GanttChart_scale');
      this.addDom(node, scale);

      // 数字刻度
      if (i % 4 === 0) {
        var nubScale = this.createDom('ev_GanttChart_nubScale');
        this.addClassName(scale, 'nub');
        this.addText(nubScale, label[i / 4]);
        this.addDom(scale, nubScale);
      }
      // 高刻度
      if (i % 2 === 0 && i / 2 % 2 !== 0) {
        this.addClassName(scale, 'high');
      }
      // 刻度线
      if (i < 28) {
        var scaleBlank = this.createDom('ev_GanttChart_scaleBlank');
        this.addDom(node, scaleBlank);
      }
      if (i === 28) {
        // 增加时间轴拖动手柄
        var handleWrapper = this.createDom('ev_GanttChart_handleWrapper');
        this.addDom(node, handleWrapper);
        // 左手柄
        var handleLeft = this.createDom('ev_GanttChart_handleLeft');
        this.handleL = handleLeft;
        var leftIcon = this.createDom('ev_GanttChart_Icon');
        insetArrow(leftIcon);
        //  中间的遮罩
        var maskMid = this.createDom('ev_GanttChart_mask');
        this.mask = maskMid;
        this.addDom(handleWrapper, maskMid);
        // 右手柄
        var handleRight = this.createDom('ev_GanttChart_handleRight');
        this.handleR = handleRight;
        var rightIcon = this.createDom(['ev_GanttChart_Icon', 'right']);
        insetArrow(rightIcon);
        this.addDom(handleLeft, leftIcon);
        this.addDom(handleWrapper, handleLeft);
        this.addDom(handleRight, rightIcon);
        this.addDom(handleWrapper, handleRight);
        this.handleL.onmousedown = this.mouseDownLeft;
        this.handleR.onmousedown = this.mouseDownRight;
      }
    }
  }

  // 两个手柄之间的差值
  ;
  _proto.getCurrentTotalTime = function getCurrentTotalTime() {
    var diffDistance = this.handleRDis - this.handleLDis;
    var distancePercent = diffDistance / this.innerChartWidth;
    var time = parseInt(distancePercent * SECONDS.weekSeconds);
    return time;
  };
  _proto.resetBody = function resetBody() {
    // 当前两个手柄之间的所占时间
    var currentTotalTime = this.getCurrentTotalTime();
    var timeScope = this.getTimeScope();
    // 调用重新渲染的函数
    this.coordinateSystem.resetCanvas(currentTotalTime, timeScope);
  };
  _proto.initHandlePositon = function initHandlePositon() {
    this.handleLDis = this.distance = parseInt(this.innerChartWidth * 6 / 7);
    setTranslateX(this.handleL, this.distance);
    this.setMaskWidth('left');
    // 待定
    this.resetBody();
  };
  _proto.init = function init() {
    var header = this.createDom('ev_GanttChart_header');
    this.addDom(this.wrapper, header);
    // 时间轴部分
    var headerTimeLine = this.createDom('ev_GanttChart_headerTimeLine');
    this.addDom(header, headerTimeLine);
    this.renderTitle(headerTimeLine);
    // 时间轴
    var time = this.createDom('ev_GanttChart_headerTime');
    this.addDom(headerTimeLine, time);
    // 上部分的时间轴
    var timeTopContainer = this.createDom('ev_GanttChart_headerTimeTop_container');
    this.addDom(time, timeTopContainer);
    var timeTop = this.createDom('ev_GanttChart_headerTimeTop');
    this.addDom(timeTopContainer, timeTop);

    // 创建头部时间刻度
    this.renderHeaderTime(timeTop);
    // // 下半部分的时间轴
    var timeBtmContainer = this.createDom('ev_GanttChart_headerTimeBtm_container');
    this.addDom(time, timeBtmContainer);
    var timeBtm = this.createDom('ev_GanttChart_headerTimeBtm');
    this.addDom(timeBtmContainer, timeBtm);
    this.selectTimeLine = timeBtm;
    this.renderSelectTimeLine();
    this.coordinateSystem = new CoordinateSystem(this.wrapper, this.option, this.innerChartWidth, this.innerChartHeight);
    this.coordinateSystem.init();
    this.initHandlePositon();
  };
  return TimeLine;
}();
export { TimeLine as default };
