import { isArray } from '../../util/type.js';
import { SECONDS, TIMELIMIT } from './constant.js';
import defendXSS from '../../util/defendXSS.js';

/**
 * Copyright (c) 2024 - present OpenTiny HUICharts Authors.
 * Copyright (c) 2024 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */

// 创造元素
function createEl(elName) {
  return document.createElement(elName);
}

// 添加元素
function appendEL(parNode, chiNode) {
  parNode.appendChild(chiNode);
}

// 设置类名
function className(node, name) {
  node.className = name;
}

// 添加文本
function appendText(node, text) {
  node.innerText = text;
}

// 添加dom节点
function appendNode(node, nodeContent) {
  node.innerHTML = nodeContent;
}

// 设置样式
function setStyle(target, key, value) {
  target.style[key] = value;
}

// 设置位移值
function setTranslateX(el, translateX) {
  el.style.transform = "translateX(" + translateX + "px)";
}
function getTitle(currentTime) {
  var curTime = new Date(currentTime);
  var curMon = curTime.getMonth() + 1;
  var curDate = curTime.getDate();
  var time = curTime.getTime();
  var startTime = new Date(time - SECONDS.weekSeconds);
  var stMon = startTime.getMonth() + 1;
  var stDate = startTime.getDate();
  var year = startTime.getFullYear();
  var yearLabel = "" + year;
  var dateLabel = stMon + "." + stDate + "\xA0-\xA0" + curMon + "." + curDate;
  return {
    yearLabel: yearLabel,
    dateLabel: dateLabel
  };
}
function handleTimeLineLabel(currentTime) {
  var TimeLineLabel = [];
  var curTime = new Date(currentTime).getTime();
  for (var i = 0; i <= 7; i++) {
    var time = curTime - (7 - i) * SECONDS.daySeconds;
    var frontTime = new Date(time);
    var month = frontTime.getMonth() + 1;
    var date = frontTime.getDate();
    var label = month + "." + date;
    TimeLineLabel.push(label);
  }
  return TimeLineLabel;
}
function addClass(ganttDom, classes) {
  if (isArray(classes)) {
    classes.forEach(function (cls) {
      ganttDom.classList.add(cls);
    });
  } else {
    ganttDom.classList.add(classes);
  }
}

// 下半部分的时间轴文本
function handleSelectTimeLineLabel(currentTime, timeScope) {
  var label = [];
  var leftTimes, RightTimes;
  if (timeScope) {
    leftTimes = new Date(currentTime).getTime() - (SECONDS.weekSeconds - timeScope.leftTime);
    RightTimes = new Date(currentTime).getTime() - (SECONDS.weekSeconds - timeScope.rightTime);
  } else {
    leftTimes = new Date(currentTime).getTime() - SECONDS.daySeconds;
    RightTimes = new Date(currentTime).getTime();
  }
  var rightDate = new Date(RightTimes);
  var leftDate = new Date(leftTimes);
  var monL = leftDate.getMonth() + 1;
  var dateL = leftDate.getDate();
  var hourL = leftDate.getHours();
  var minL = leftDate.getMinutes();
  var secL = leftDate.getSeconds();
  var labelL = monL + "." + dateL + "\xA0" + hourL + ":" + (minL < 10 ? "0" + minL : minL) + ":" + (secL < 10 ? "0" + secL : secL);
  label.push(labelL);
  var monR = rightDate.getMonth() + 1;
  var dateR = rightDate.getDate();
  var hourR = rightDate.getHours();
  var minR = rightDate.getMinutes();
  var secR = rightDate.getSeconds();
  var labelR = monR + "." + dateR + "\xA0" + hourR + ":" + (minR < 10 ? "0" + minR : minR) + ":" + (secR < 10 ? "0" + secR : secR);
  label.push(labelR);
  return label;
}
function isSelectTime(currentTotalTime, sTime, eTime) {
  return currentTotalTime >= sTime * SECONDS.daySeconds && currentTotalTime <= eTime * SECONDS.daySeconds;
}
function handleSelectTime(duration, limit) {
  return duration > limit * SECONDS.seconds ? duration : limit * SECONDS.seconds;
}
function handleLimitValue(duration, currentTotalTime) {
  var value;
  TIMELIMIT.forEach(function (item) {
    if (isSelectTime(currentTotalTime, item.sTime, item.eTime)) {
      value = handleSelectTime(duration, item.limit);
    }
  });
  return value;
}
function handlePercent(postItemTime, currentTime, currentTotalTime, timeScope) {
  var selectTime;
  var percent;
  // 手柄拖拽的时候的逻辑
  if (currentTotalTime && timeScope) {
    var leftTimeScope = currentTime - (SECONDS.weekSeconds - timeScope.leftTime);
    var rightTimeScope = currentTime - (SECONDS.weekSeconds - timeScope.rightTime);
    // 当前数据在手柄选中时间内
    if (postItemTime.startTime >= leftTimeScope && postItemTime.endTime <= rightTimeScope) {
      selectTime = handleLimitValue(postItemTime.endTime - postItemTime.startTime, currentTotalTime);
      percent = selectTime / currentTotalTime;
      // 当前数据范围超过手柄的选中时间
    } else if (postItemTime.startTime < leftTimeScope && rightTimeScope < postItemTime.endTime) {
      percent = 1;
      // 当前数据的开始时间不在手柄选中范围，结束时间在手柄选中范围
    } else if (postItemTime.startTime < leftTimeScope && postItemTime.endTime <= rightTimeScope && postItemTime.endTime >= leftTimeScope) {
      selectTime = handleLimitValue(postItemTime.endTime - leftTimeScope, currentTotalTime);
      percent = selectTime / currentTotalTime;
      // 当前数据的开始时间在手柄选中范围，结束时间不在手柄选中范围
    } else if (postItemTime.startTime >= leftTimeScope && postItemTime.startTime <= rightTimeScope && postItemTime.endTime > rightTimeScope) {
      selectTime = handleLimitValue(rightTimeScope - postItemTime.startTime, currentTotalTime);
      percent = selectTime / currentTotalTime;
      // 当前数据在选中时间之外
    } else if (postItemTime.endTime <= leftTimeScope) {
      percent = 0;
      // 当前数据在选中时间之外
    } else if (postItemTime.startTime >= rightTimeScope) {
      percent = 0;
    }
  } else {
    // 初始加载的时候的逻辑
    percent = (postItemTime.endTime - postItemTime.startTime <= SECONDS.minuteSeconds ? SECONDS.minuteSeconds : postItemTime.endTime - postItemTime.startTime) / SECONDS.weekSeconds;
  }
  return percent;
}
function handleLeft(postItemTime, currentTime, currentTotalTime, timeScope) {
  var left;
  if (currentTotalTime && timeScope) {
    var leftTimeScope = currentTime - (SECONDS.weekSeconds - timeScope.leftTime);
    var rightTimeScope = currentTime - (SECONDS.weekSeconds - timeScope.rightTime);
    // 当前数据在手柄选中时间内
    if (leftTimeScope <= postItemTime.startTime && postItemTime.endTime <= rightTimeScope) {
      left = (currentTotalTime - (rightTimeScope - postItemTime.startTime)) / currentTotalTime;
      // 当前数据范围超过手柄的选中时间
    } else if (postItemTime.startTime < leftTimeScope && rightTimeScope < postItemTime.endTime) {
      left = 0;
      // 当前数据的开始时间不在手柄选中范围，结束时间在手柄选中范围
    } else if (postItemTime.startTime < leftTimeScope && postItemTime.endTime <= rightTimeScope && postItemTime.endTime >= leftTimeScope) {
      left = 0;
      // 当前数据的开始时间在手柄选中范围，结束时间不在手柄选中范围
    } else if (postItemTime.startTime >= leftTimeScope && postItemTime.startTime <= rightTimeScope && postItemTime.endTime > rightTimeScope) {
      left = (postItemTime.startTime - leftTimeScope) / currentTotalTime;
    } else if (postItemTime.endTime <= leftTimeScope) {
      left = 0;
    } else if (postItemTime.startTime >= rightTimeScope) {
      left = 0;
    }
  } else {
    left = (SECONDS.weekSeconds - (currentTime - postItemTime.startTime)) / SECONDS.weekSeconds;
  }
  return left;
}

// 柱子的颜色
function handleFillColor(postItem) {
  var color;
  switch (postItem.status) {
    case 'during':
      color = '#2070F3';
      break;
    case 'success':
      color = '#50C291';
      break;
    case 'stop':
      color = '#939393';
      break;
    case 'waiting':
      color = '#EEBA18';
      break;
    default:
      color = '#F46465';
      break;
  }
  return color;
}
function getChartPostLabel(differenceTime) {
  if (differenceTime >= SECONDS.daySeconds) {
    var day = Math.floor(differenceTime / SECONDS.daySeconds);
    var hour = Math.floor((differenceTime - day * SECONDS.daySeconds) / SECONDS.hourSeconds);
    return day + "d'" + hour + "h";
  } else if (differenceTime < SECONDS.daySeconds && differenceTime >= SECONDS.hourSeconds) {
    var _hour = Math.floor(differenceTime / SECONDS.hourSeconds);
    var min = Math.floor((differenceTime - _hour * SECONDS.hourSeconds) / SECONDS.minuteSeconds);
    return _hour + "h'" + min + "min";
  } else {
    var _min = Math.floor(differenceTime / SECONDS.minuteSeconds);
    var _second = Math.floor((differenceTime - _min * SECONDS.minuteSeconds) / SECONDS.seconds);
    return _min + "min'" + _second + "s";
  }
}
function innerTooltip(data, dataIndex, postIndex) {
  var tagHtml;
  var status = data[dataIndex].data[postIndex].status;
  if (status === 'success') {
    tagHtml = '<span class="tag success">执行成功</span>';
  } else if (status === 'during') {
    tagHtml = '<span class="tag">执行中</span>';
  } else {
    tagHtml = '<span class="tag failed">执行失败</span>';
  }
  return "\n        <p class='title'>" + defendXSS(data[dataIndex].name) + "</p>\n        " + tagHtml + "\n        <p class='time'>\u5F00\u59CB\u65F6\u95F4\uFF1A" + defendXSS(data[dataIndex].data[postIndex].startTime) + "</p>\n        <p class='time'>\u7ED3\u675F\u65F6\u95F4\uFF1A" + defendXSS(data[dataIndex].data[postIndex].endTime) + "</p>\n        <span class='ev_linkField'>\u67E5\u770B\u62A5\u544A</span>";
}
var arrowStr = "\n<svg width=\"5px\" height=\"8px\" viewBox=\"0 0 5 6\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <title>\u8DEF\u5F84</title>\n    <g id=\"\u9875\u9762-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <g id=\"\u5168\u94FE\u8DEF\u538B\u6D4B\u5DE5\u5177-\u5DE5\u4F5C\u53F0-\u7518\u7279\u56FE\u65F6\u95F4\u8F74\u4FEE\u6539\" transform=\"translate(-621.000000, -707.000000)\" stroke=\"#2070F3\">\n            <g id=\"\u538B\u6D4B\u62A5\u544A\u5907\u4EFD\" transform=\"translate(32.000000, 644.000000)\">\n                <g id=\"\u7F16\u7EC4-13\u5907\u4EFD-8\" transform=\"translate(32.000000, 56.000000)\">\n                    <g id=\"\u7F16\u7EC4-5\" transform=\"translate(553.000000, 0.000000)\">\n                        <polyline id=\"\u8DEF\u5F84\" transform=\"translate(6.500000, 10.000000) rotate(-180.000000) translate(-6.500000, -10.000000) \" points=\"8 13 5 10 8 7\"></polyline>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>";
function insetArrow(container) {
  container.innerHTML = arrowStr;
}
export { addClass, appendEL, appendNode, appendText, className, createEl, getChartPostLabel, getTitle, handleFillColor, handleLeft, handlePercent, handleSelectTimeLineLabel, handleTimeLineLabel, innerTooltip, insetArrow, setStyle, setTranslateX };
