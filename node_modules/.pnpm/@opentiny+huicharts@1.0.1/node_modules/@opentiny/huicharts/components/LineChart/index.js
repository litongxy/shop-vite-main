function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import init from '../../option/init/index.js';
import mini from '../../feature/mini/miniLineChart.js';
import { setSeries } from './handleSeries.js';
import cloneDeep from '../../util/cloneDeep.js';
import base from '../../option/base/index.js';
import { setVisualMap } from './handleVisualMap.js';
import { handlePredict } from './handlePredict.js';
import topArea from './AreaChart/topArea.js';
import bottomArea from './AreaChart/bottomArea.js';
import { mergeSeries, mergeVisualMap } from '../../util/merge.js';
import { handleData, onlyOnePoint, discrete } from './handleOptipn.js';
import RectCoordSys from '../../option/RectSys/index.js';
import { lttb } from '../../feature/performance/lttb.js';
import { CHART_TYPE } from '../../util/constants.js';
import xkey from '../../option/config/xAxis/xkey.js';
import xdata from '../../option/config/xAxis/xdata.js';
import ldata from '../../option/config/legend/ldata.js';
import ydata from '../../option/config/yAxis/ydata.js';

/**
 * Copyright (c) 2024 - present OpenTiny HUICharts Authors.
 * Copyright (c) 2024 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */
var LineChart = /*#__PURE__*/function () {
  function LineChart(iChartOption, chartInstance) {
    this.baseOption = {};
    this.baseOption = cloneDeep(base);
    this.iChartOption = {};
    // 组装 iChartOption, 补全默认值
    this.iChartOption = init(iChartOption);
    // 根据 iChartOption 组装 baseOption
    this.updateOption(chartInstance);
  }
  var _proto = LineChart.prototype;
  _proto.updateOption = function updateOption(chartInstance) {
    var iChartOption = this.iChartOption;
    // 装载除series之外的其他配置
    RectCoordSys(this.baseOption, this.iChartOption, CHART_TYPE.LINE);
    // x轴key值
    var xAxisKey = xkey(iChartOption);
    var data = iChartOption.massive ? lttb(iChartOption.data) : iChartOption.data;
    // x轴数据
    var xAxisData = xdata(data, xAxisKey);
    // 图例数据
    var legendData = ldata(data, xAxisKey);
    // 连线的数据
    var seriesData = ydata(data, legendData);
    // 给图例和x轴赋值
    handleData(this.baseOption, legendData, xAxisData);
    // 组装series
    this.baseOption.series = setSeries({
      seriesData: seriesData,
      legendData: legendData,
      yAxis: iChartOption.yAxis,
      focus: iChartOption.focus,
      stack: iChartOption.stack,
      isStep: iChartOption.step,
      isArea: iChartOption.area,
      colors: this.baseOption.color,
      isSmooth: iChartOption.smooth,
      markLine: iChartOption.markLine,
      markPoint: iChartOption.markPoint,
      splitLine: iChartOption.splitLine,
      labelHtml: iChartOption.labelHtml,
      itemStyle: iChartOption.itemStyle,
      massive: iChartOption.massive
    });
    // 设置VisualMap，通过数值映射颜色
    this.baseOption.visualMap = setVisualMap(legendData, seriesData, iChartOption.markLine, iChartOption.color);
    // 针对预测值图表需求，图表需要进行特殊处理
    handlePredict(this.baseOption, iChartOption.predict, iChartOption.tipHtml, iChartOption.lineStyle);
    // 是否关闭hover态的效果，默认为false
    if (iChartOption.silent) {
      this.baseOption.tooltip = {};
    }
    // 当数据只有一条时，显示数据点
    onlyOnePoint(this.baseOption);
    // 针对离散数据, 创建同名Series, 显示离散数据的单个点
    discrete(iChartOption, this.baseOption);
    // 合并用户自定义series
    mergeSeries(iChartOption, this.baseOption);
    // 合并用户自定义visualMap
    mergeVisualMap(iChartOption, this.baseOption);
    // 处理特性
    mini(iChartOption, this.baseOption);
  }

  // 根据渲染出的结果，二次计算option
  ;
  _proto.updateOptionAgain = function updateOptionAgain(echartsIns) {
    var YAxiMax = this.getYAxisMaxValue(echartsIns, 0);
    var YAxiMin = this.getYAxisMinValue(echartsIns, 0);
    // 面积图上部红色阈值区域需要在二次计算中实现 -- 在原有Series上添加areaStyle
    topArea(this.baseOption, this.iChartOption, YAxiMin);
    // 面积图下部红色阈值区域需要在二次计算中实现 -- 植入假的同名Series
    bottomArea(this.baseOption, this.iChartOption, YAxiMax);
    // 合并用户自定义series
    mergeSeries(this.iChartOption, this.baseOption);
  };
  _proto.getOption = function getOption() {
    return this.baseOption;
  }

  /**
   * 图表渲染完毕后，获得y刻度的最大值
   * @param {echartsIns为图表实例} echartsIns
   * @param {index为yAxis数组下标} index
   * _extent是一个数组，_extent[0]为该轴上最小值，_extent[1]为该轴上最大值
   */;
  _proto.getYAxisMaxValue = function getYAxisMaxValue(echartsIns, index) {
    var _echartsIns$getModel$;
    return (_echartsIns$getModel$ = echartsIns.getModel().getComponent('yAxis', index)) == null ? void 0 : _echartsIns$getModel$.axis.scale._extent[1];
  }

  /**
   * 图表渲染完毕后，获得y轴刻度的最小值
   * @param {echartsIns为图表实例} echartsIns
   * @param {index为yAxis数组下标} index
   * _extent是一个数组，_extent[0]为该轴上最小值，_extent[1]为该轴上最大值
   */;
  _proto.getYAxisMinValue = function getYAxisMinValue(echartsIns, index) {
    var _echartsIns$getModel$2;
    return (_echartsIns$getModel$2 = echartsIns.getModel().getComponent('yAxis', index)) == null ? void 0 : _echartsIns$getModel$2.axis.scale._extent[0];
  };
  return LineChart;
}();
_defineProperty(LineChart, "name", CHART_TYPE.LINE);
export { LineChart as default };
