var _excluded = ["input", "change"], _excluded2 = ["field"];
function _defineProperties(e, r) {
  for (var t2 = 0; t2 < r.length; t2++) {
    var o = r[t2];
    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t2) {
  return r && _defineProperties(e.prototype, r), t2 && _defineProperties(e, t2), Object.defineProperty(e, "prototype", { writable: false }), e;
}
function _toPropertyKey(t2) {
  var i = _toPrimitive(t2, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive(t2, r) {
  if ("object" != typeof t2 || !t2)
    return t2;
  var e = t2[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t2, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t2);
}
function _regeneratorRuntime() {
  "use strict";
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  _regeneratorRuntime = function _regeneratorRuntime2() {
    return e;
  };
  var t2, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t3, e2, r2) {
    t3[e2] = r2.value;
  }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
  function define(t3, e2, r2) {
    return Object.defineProperty(t3, e2, { value: r2, enumerable: true, configurable: true, writable: true }), t3[e2];
  }
  try {
    define({}, "");
  } catch (t3) {
    define = function define2(t4, e2, r2) {
      return t4[e2] = r2;
    };
  }
  function wrap(t3, e2, r2, n2) {
    var i2 = e2 && e2.prototype instanceof Generator ? e2 : Generator, a2 = Object.create(i2.prototype), c2 = new Context(n2 || []);
    return o(a2, "_invoke", { value: makeInvokeMethod(t3, r2, c2) }), a2;
  }
  function tryCatch(t3, e2, r2) {
    try {
      return { type: "normal", arg: t3.call(e2, r2) };
    } catch (t4) {
      return { type: "throw", arg: t4 };
    }
  }
  e.wrap = wrap;
  var h2 = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var p = {};
  define(p, a, function() {
    return this;
  });
  var d = Object.getPrototypeOf, v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t3) {
    ["next", "throw", "return"].forEach(function(e2) {
      define(t3, e2, function(t4) {
        return this._invoke(e2, t4);
      });
    });
  }
  function AsyncIterator(t3, e2) {
    function invoke(r3, o2, i2, a2) {
      var c2 = tryCatch(t3[r3], t3, o2);
      if ("throw" !== c2.type) {
        var u2 = c2.arg, h3 = u2.value;
        return h3 && "object" == typeof h3 && n.call(h3, "__await") ? e2.resolve(h3.__await).then(function(t4) {
          invoke("next", t4, i2, a2);
        }, function(t4) {
          invoke("throw", t4, i2, a2);
        }) : e2.resolve(h3).then(function(t4) {
          u2.value = t4, i2(u2);
        }, function(t4) {
          return invoke("throw", t4, i2, a2);
        });
      }
      a2(c2.arg);
    }
    var r2;
    o(this, "_invoke", { value: function value(t4, n2) {
      function callInvokeWithMethodAndArg() {
        return new e2(function(e3, r3) {
          invoke(t4, n2, e3, r3);
        });
      }
      return r2 = r2 ? r2.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } });
  }
  function makeInvokeMethod(e2, r2, n2) {
    var o2 = h2;
    return function(i2, a2) {
      if (o2 === f)
        throw Error("Generator is already running");
      if (o2 === s) {
        if ("throw" === i2)
          throw a2;
        return { value: t2, done: true };
      }
      for (n2.method = i2, n2.arg = a2; ; ) {
        var c2 = n2.delegate;
        if (c2) {
          var u2 = maybeInvokeDelegate(c2, n2);
          if (u2) {
            if (u2 === y)
              continue;
            return u2;
          }
        }
        if ("next" === n2.method)
          n2.sent = n2._sent = n2.arg;
        else if ("throw" === n2.method) {
          if (o2 === h2)
            throw o2 = s, n2.arg;
          n2.dispatchException(n2.arg);
        } else
          "return" === n2.method && n2.abrupt("return", n2.arg);
        o2 = f;
        var p2 = tryCatch(e2, r2, n2);
        if ("normal" === p2.type) {
          if (o2 = n2.done ? s : l, p2.arg === y)
            continue;
          return { value: p2.arg, done: n2.done };
        }
        "throw" === p2.type && (o2 = s, n2.method = "throw", n2.arg = p2.arg);
      }
    };
  }
  function maybeInvokeDelegate(e2, r2) {
    var n2 = r2.method, o2 = e2.iterator[n2];
    if (o2 === t2)
      return r2.delegate = null, "throw" === n2 && e2.iterator.return && (r2.method = "return", r2.arg = t2, maybeInvokeDelegate(e2, r2), "throw" === r2.method) || "return" !== n2 && (r2.method = "throw", r2.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), y;
    var i2 = tryCatch(o2, e2.iterator, r2.arg);
    if ("throw" === i2.type)
      return r2.method = "throw", r2.arg = i2.arg, r2.delegate = null, y;
    var a2 = i2.arg;
    return a2 ? a2.done ? (r2[e2.resultName] = a2.value, r2.next = e2.nextLoc, "return" !== r2.method && (r2.method = "next", r2.arg = t2), r2.delegate = null, y) : a2 : (r2.method = "throw", r2.arg = new TypeError("iterator result is not an object"), r2.delegate = null, y);
  }
  function pushTryEntry(t3) {
    var e2 = { tryLoc: t3[0] };
    1 in t3 && (e2.catchLoc = t3[1]), 2 in t3 && (e2.finallyLoc = t3[2], e2.afterLoc = t3[3]), this.tryEntries.push(e2);
  }
  function resetTryEntry(t3) {
    var e2 = t3.completion || {};
    e2.type = "normal", delete e2.arg, t3.completion = e2;
  }
  function Context(t3) {
    this.tryEntries = [{ tryLoc: "root" }], t3.forEach(pushTryEntry, this), this.reset(true);
  }
  function values(e2) {
    if (e2 || "" === e2) {
      var r2 = e2[a];
      if (r2)
        return r2.call(e2);
      if ("function" == typeof e2.next)
        return e2;
      if (!isNaN(e2.length)) {
        var o2 = -1, i2 = function next() {
          for (; ++o2 < e2.length; )
            if (n.call(e2, o2))
              return next.value = e2[o2], next.done = false, next;
          return next.value = t2, next.done = true, next;
        };
        return i2.next = i2;
      }
    }
    throw new TypeError(typeof e2 + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: true }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: true }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function(t3) {
    var e2 = "function" == typeof t3 && t3.constructor;
    return !!e2 && (e2 === GeneratorFunction || "GeneratorFunction" === (e2.displayName || e2.name));
  }, e.mark = function(t3) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t3, GeneratorFunctionPrototype) : (t3.__proto__ = GeneratorFunctionPrototype, define(t3, u, "GeneratorFunction")), t3.prototype = Object.create(g), t3;
  }, e.awrap = function(t3) {
    return { __await: t3 };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function(t3, r2, n2, o2, i2) {
    void 0 === i2 && (i2 = Promise);
    var a2 = new AsyncIterator(wrap(t3, r2, n2, o2), i2);
    return e.isGeneratorFunction(r2) ? a2 : a2.next().then(function(t4) {
      return t4.done ? t4.value : a2.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function() {
    return this;
  }), define(g, "toString", function() {
    return "[object Generator]";
  }), e.keys = function(t3) {
    var e2 = Object(t3), r2 = [];
    for (var n2 in e2)
      r2.push(n2);
    return r2.reverse(), function next() {
      for (; r2.length; ) {
        var t4 = r2.pop();
        if (t4 in e2)
          return next.value = t4, next.done = false, next;
      }
      return next.done = true, next;
    };
  }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e2) {
    if (this.prev = 0, this.next = 0, this.sent = this._sent = t2, this.done = false, this.delegate = null, this.method = "next", this.arg = t2, this.tryEntries.forEach(resetTryEntry), !e2)
      for (var r2 in this)
        "t" === r2.charAt(0) && n.call(this, r2) && !isNaN(+r2.slice(1)) && (this[r2] = t2);
  }, stop: function stop() {
    this.done = true;
    var t3 = this.tryEntries[0].completion;
    if ("throw" === t3.type)
      throw t3.arg;
    return this.rval;
  }, dispatchException: function dispatchException(e2) {
    if (this.done)
      throw e2;
    var r2 = this;
    function handle(n2, o3) {
      return a2.type = "throw", a2.arg = e2, r2.next = n2, o3 && (r2.method = "next", r2.arg = t2), !!o3;
    }
    for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
      var i2 = this.tryEntries[o2], a2 = i2.completion;
      if ("root" === i2.tryLoc)
        return handle("end");
      if (i2.tryLoc <= this.prev) {
        var c2 = n.call(i2, "catchLoc"), u2 = n.call(i2, "finallyLoc");
        if (c2 && u2) {
          if (this.prev < i2.catchLoc)
            return handle(i2.catchLoc, true);
          if (this.prev < i2.finallyLoc)
            return handle(i2.finallyLoc);
        } else if (c2) {
          if (this.prev < i2.catchLoc)
            return handle(i2.catchLoc, true);
        } else {
          if (!u2)
            throw Error("try statement without catch or finally");
          if (this.prev < i2.finallyLoc)
            return handle(i2.finallyLoc);
        }
      }
    }
  }, abrupt: function abrupt(t3, e2) {
    for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
      var o2 = this.tryEntries[r2];
      if (o2.tryLoc <= this.prev && n.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
        var i2 = o2;
        break;
      }
    }
    i2 && ("break" === t3 || "continue" === t3) && i2.tryLoc <= e2 && e2 <= i2.finallyLoc && (i2 = null);
    var a2 = i2 ? i2.completion : {};
    return a2.type = t3, a2.arg = e2, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
  }, complete: function complete(t3, e2) {
    if ("throw" === t3.type)
      throw t3.arg;
    return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e2 && (this.next = e2), y;
  }, finish: function finish(t3) {
    for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
      var r2 = this.tryEntries[e2];
      if (r2.finallyLoc === t3)
        return this.complete(r2.completion, r2.afterLoc), resetTryEntry(r2), y;
    }
  }, catch: function _catch(t3) {
    for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
      var r2 = this.tryEntries[e2];
      if (r2.tryLoc === t3) {
        var n2 = r2.completion;
        if ("throw" === n2.type) {
          var o2 = n2.arg;
          resetTryEntry(r2);
        }
        return o2;
      }
    }
    throw Error("illegal catch attempt");
  }, delegateYield: function delegateYield(e2, r2, n2) {
    return this.delegate = { iterator: values(e2), resultName: r2, nextLoc: n2 }, "next" === this.method && (this.arg = t2), y;
  } }, e;
}
function asyncGeneratorStep(n, t2, e, r, o, a, c) {
  try {
    var i = n[a](c), u = i.value;
  } catch (n2) {
    return void e(n2);
  }
  i.done ? t2(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function() {
    var t2 = this, e = arguments;
    return new Promise(function(r, o) {
      var a = n.apply(t2, e);
      function _next(n2) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
      }
      function _throw(n2) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
      }
      _next(void 0);
    });
  };
}
function _readOnlyError(r) {
  throw new TypeError('"' + r + '" is read-only');
}
function _createForOfIteratorHelperLoose(r, e) {
  var t2 = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t2)
    return (t2 = t2.call(r)).next.bind(t2);
  if (Array.isArray(r) || (t2 = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t2 && (r = t2);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t2 = {}.toString.call(r).slice(8, -1);
    return "Object" === t2 && r.constructor && (t2 = r.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r)
    return {};
  var t2 = {};
  for (var n in r)
    if ({}.hasOwnProperty.call(r, n)) {
      if (e.includes(n))
        continue;
      t2[n] = r[n];
    }
  return t2;
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { t } from "@opentiny/vue-locale";
import "@opentiny/vue-theme/grid/index.css";
import { Interceptor, StoreMap } from "@opentiny/vue-renderless/grid/core";
import { extend, getObj } from "@opentiny/vue-renderless/common/object";
import { iconError, iconSortTriangleDescending, iconSortTriangleAscending, iconSortTriangle, iconUnfilter, iconEdit, iconConmentRefresh, iconMinscreen, iconFullscreen, iconSetting, iconClose, iconYes, iconChevronRight, iconChevronDown, iconRadio, iconRadioselected, iconSearch, iconCheckedSur, iconCheck, iconHalfselect, iconArrowBottom, iconExpand, iconPutAway, iconEllipsis, IconEllipsis, iconMarkOn } from "@opentiny/vue-icon";
import { $prefix, hooks, defineComponent, h, isVue2, $install, $props, isVnode, mergeClass, resolveTheme, useInstanceSlots, useRelation, emitter, resolveMode, useBreakpoint, setup as setup$1 } from "@opentiny/vue-common";
import { each, isObject, isFunction, assign, objectMap, set, get, isBoolean, find, isString, isArray, findIndexOf, arrayEach as arrayEach$1, toNumber, eachTree, findTree, clear, destructuring, clone, mapTree, has, isUndefined, isEqual as isEqual$1, filterTree, isNumber as isNumber$1, sum, sortBy, uniqueId, template, remove, arrayIndexOf, toStringJSON, toArray } from "@opentiny/vue-renderless/grid/static/";
import { getCellValue, setCellValue, getOffsetPos, emitEvent as _emitEvent, updateCellTitle, getClass, formatText, getRowkey, getRowid, getFuncText, getFilters, getDomNode, hasChildrenList, getColumnConfig, isScale, getColumnList, rowToVisible, colToVisible, getCell, getEventTargetNode, assemColumn, isPx, getListeners, GlobalEvent, setColumnFormat, getRowNodes, getCellNodeIndex } from "@opentiny/vue-renderless/grid/utils";
import Tooltip$1 from "@opentiny/vue-tooltip";
import { isNull, isObject as isObject$1, isNumber, isDate, isEmptyObject } from "@opentiny/vue-renderless/common/type";
import { addClass, removeClass, isDisplayNone, on, preventDefault, off, hasClass, getStyle } from "@opentiny/vue-renderless/common/deps/dom";
import { random, tryToCurrency, tryToDecimal, tryToInt, toFileSize, truncate, toRate, toBoolValue, toDecimal } from "@opentiny/vue-renderless/common/string";
import { createVNode, isVNode, mergeProps, createTextVNode, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, createCommentVNode, normalizeStyle, createElementVNode, Fragment, renderList } from "vue";
import { toDate, getDateWithNewTimezone, format, toDateStr } from "@opentiny/vue-renderless/common/date";
import { log } from "@opentiny/vue-renderless/common";
import { isEqual, arrayEach, toNumber as toNumber$1, find as find$1, findTree as findTree$1 } from "@opentiny/vue-renderless/grid/static";
import { AutoTip } from "@opentiny/vue-directive";
import Button from "@opentiny/vue-button";
import PopperJS from "@opentiny/vue-renderless/common/deps/popper";
import PopupManager from "@opentiny/vue-renderless/common/deps/popup-manager";
import debounce from "@opentiny/vue-renderless/common/deps/debounce";
import { getDataset } from "@opentiny/vue-renderless/common/dataset";
import Loading$1 from "@opentiny/vue-loading";
import { fastdom } from "@opentiny/vue-renderless/common/deps/fastdom";
import Dropdown from "@opentiny/vue-dropdown";
import DropdownMenu from "@opentiny/vue-dropdown-menu";
import DropdownItem from "@opentiny/vue-dropdown-item";
import browser from "@opentiny/vue-renderless/common/browser";
import Exception from "@opentiny/vue-exception";
import Tag from "@opentiny/vue-tag";
import { callInterceptor } from "@opentiny/vue-renderless/common/function";
import Methods$g from "@opentiny/vue-renderless/grid/plugins/export";
import throttle from "@opentiny/vue-renderless/common/deps/throttle";
import Validator$1 from "@opentiny/vue-renderless/common/validate";
import Resize$1 from "@opentiny/vue-renderless/grid/plugins/resize";
import Modal$1 from "@opentiny/vue-modal";
import Pager$1 from "@opentiny/vue-pager";
var GlobalConfig$1 = {
  validConfig: {
    message: "tooltip",
    icon: iconError()
  },
  // 默认开启点击头部单元格触发排序
  sortConfig: {
    multipleColumnSort: false
  },
  // 默认不开启隔行换色和行高亮，不暴露此配置
  stripe: false,
  // saas下默认不开启隔行换色和行高亮
  stripeSaas: false,
  // saas下默认开启下划线
  borderSaas: true,
  // saas下通过borderVertical开启边框竖线
  borderVertical: false,
  // 鼠标移入表格行是否高亮显示
  highlightHoverRow: true,
  resizable: true,
  // 操作列（type为index或radio或selection的列）默认不可拖动列宽
  operationColumnResizable: false,
  fit: true,
  showHeader: true,
  defaultTreeIndent: 16,
  defaultTreeSpacing: 30,
  rowId: "_RID",
  // 行数据的唯一主键字段名
  version: 0,
  // 版本号，对于某些带数据缓存的功能有用到，上升版本号可以用于重置数据
  optimization: {
    animat: true,
    delayHover: 250,
    scrollX: {
      gt: 100
    },
    scrollY: {
      gt: 500
    }
  },
  icon: {
    sortAsc: iconSortTriangleDescending(),
    sortDesc: iconSortTriangleAscending(),
    sortDefault: iconSortTriangle(),
    required: "tiny-grid-required-icon",
    filter: iconUnfilter(),
    edit: iconEdit(),
    tree: "tiny-grid-icon__caret-right",
    refresh: iconConmentRefresh(),
    minscreen: iconMinscreen(),
    fullscreen: iconFullscreen(),
    custom: iconSetting(),
    jumpPrev: "tiny-grid-icon__d-arrow-left",
    jumpNext: "tiny-grid-icon__d-arrow-right",
    prevPage: "tiny-grid-icon__arrow-left",
    nextPage: "tiny-grid-icon__arrow-right",
    zoomIn: "tiny-grid-icon__zoomin",
    zoomOut: "tiny-grid-icon__zoomout",
    modalClose: "tiny-grid-icon__close",
    modalInfo: "tiny-grid-icon__info",
    modalSuccess: "tiny-grid-icon__success",
    modalWarning: "tiny-grid-icon__warning",
    modalError: "tiny-grid-icon__error",
    modalQuestion: "tiny-grid-icon__question",
    modalLoading: "tiny-grid-icon__refresh roll",
    caretBottom: "tiny-grid-icon__caret-bottom",
    dropdownBottom: "tiny-grid-icon__arrow-bottom",
    btnLoading: "tiny-grid-icon__refresh roll"
  },
  grid: {},
  menu: {},
  tooltip: {
    trigger: "hover",
    theme: "dark"
  },
  pager: {},
  toolbar: {
    resizable: {
      storage: false
    },
    buttons: []
  },
  modal: {
    zIndex: 2e3,
    minWidth: 340,
    minHeight: 200,
    lockView: true,
    mask: true,
    duration: 3e3,
    marginSize: 10,
    animat: true
  },
  i18n: function i18n(key) {
    return key;
  },
  constant: {
    insertedField: "_$inserted",
    deletedField: "_$deleted",
    asyncPrefix: "_$async_"
  },
  TINY_TABLE_CUSTOM_COLUMN_WIDTH: "TINY_TABLE_CUSTOM_COLUMN_WIDTH",
  TINY_TABLE_CUSTOM_SETTING: "TINY_TABLE_CUSTOM_SETTING",
  viewConfig: {
    // 视图类型
    DEFAULT: "default",
    MF: "mf",
    CARD: "card",
    LIST: "list",
    GANTT: "gantt",
    CUSTOM: "custom",
    // 移动优先视图下展示类型
    MF_SHOW_LIST: "list",
    MF_SHOW_CARD: "card",
    // 在不同视图下表格模块的显示
    toolbar: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden sm:block"
    },
    pager: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden sm:block"
    },
    columnAnchor: {
      default: "flex",
      mf: "hidden sm:flex",
      card: "hidden"
    },
    hiddenColumn: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    tableHeader: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    emptyData: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    tableBody: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    tableFooter: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    fixedColumn: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    borderLine: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    resizeBar: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    gridLoading: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    tableWrapper: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    selectToolbar: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    mfTable: {
      default: "hidden",
      mf: "block sm:hidden",
      card: "block"
    },
    footerBorder: {
      default: "block",
      mf: "hidden sm:block",
      card: "hidden"
    },
    operButton: {
      default: "inline-block",
      mf: "hidden sm:inline-block",
      card: "hidden"
    }
  },
  themes: {
    TINY: "tiny",
    SAAS: "saas"
  },
  columnLevelKey: "ColumnLevelProvideKey",
  defaultColumnName: $prefix + "GridColumn"
};
function addListConfig() {
  var viewConfig2 = GlobalConfig$1.viewConfig;
  for (var _i = 0, _Object$keys = Object.keys(viewConfig2); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    if (typeof viewConfig2[key] === "object") {
      viewConfig2[key].list = viewConfig2[key].card;
      viewConfig2[key].gantt = viewConfig2[key].card;
      viewConfig2[key].custom = viewConfig2[key].card;
    }
  }
}
addListConfig();
var GlobalConfig$2 = GlobalConfig$1;
var setup = function setup2(options) {
  if (options === void 0) {
    options = {};
  }
  var icon = GlobalConfig$2.icon, menu = GlobalConfig$2.menu;
  if (options.menu) {
    menu = extend(true, {}, menu, options.menu);
  }
  if (options.icon) {
    icon = extend(true, {}, icon, options.icon);
  }
  extend(true, GlobalConfig$2, options, {
    icon,
    menu
  });
};
var Setup = setup;
function getAttrs(_ref, params) {
  var name = _ref.name, attrs = _ref.attrs;
  var props = attrs;
  if (typeof attrs === "function") {
    props = attrs(params);
  }
  if (name === "input") {
    props = _extends({
      type: "text"
    }, props);
  }
  return props;
}
var isSyncCell = function isSyncCell2(renderOpts, params, context) {
  return renderOpts.type === "visible" || context.$type === "cell";
};
function autoRefresh(renderOpts, params) {
  var _renderOpts$refresh = renderOpts.refresh, refresh = _renderOpts$refresh === void 0 ? false : _renderOpts$refresh;
  var $table = params.$table, row2 = params.row;
  var _$table$editConfig = $table.editConfig, editConfig = _$table$editConfig === void 0 ? {} : _$table$editConfig;
  return $table.isTemporaryRow(row2) || !editConfig.showStatus || typeof refresh === "boolean" && refresh || typeof refresh === "function" && refresh(params);
}
function getEvents(renderOpts, params, context) {
  var _on;
  var _renderOpts$component = renderOpts.component, component = _renderOpts$component === void 0 ? {} : _renderOpts$component, _renderOpts$events = renderOpts.events, events = _renderOpts$events === void 0 ? {} : _renderOpts$events;
  var native = typeof component === "string";
  var editorModel = component.model || {};
  var type = component === "select" ? "change" : native ? "input" : editorModel.event || "update:modelValue";
  var input = events.input, change = events.change, other = _objectWithoutPropertiesLoose(events, _excluded);
  var $table = params.$table, column = params.column, row2 = params.row;
  var model = column.model;
  var on2 = (_on = {}, _on[type] = function(event) {
    var cellValue = native ? event.target.value : event;
    if (!renderOpts.isValidAlways && isSyncCell(renderOpts, params, context)) {
      setCellValue(row2, column, cellValue);
    } else {
      native || set(row2, column.property, cellValue);
      model.update = true;
      model.value = cellValue;
      $table.updateStatus(params, cellValue, renderOpts);
    }
    if (native) {
      input && input.apply(null, [params].concat.apply(params, arguments));
      change && change.apply(null, [params].concat.apply(params, arguments));
    }
    if (autoRefresh(renderOpts, params)) {
      $table.editStore.editorAutoRefreshKey++;
    }
  }, _on);
  var evts = native ? other : events;
  var mapHandler = function mapHandler2(cb) {
    return function() {
      cb.apply(null, [params].concat.apply(params, arguments));
    };
  };
  assign(on2, objectMap(evts, mapHandler));
  return on2;
}
function renderOptions(h2, options, renderOpts, params, context) {
  var _renderOpts$optionPro = renderOpts.optionProps, optionProps = _renderOpts$optionPro === void 0 ? {} : _renderOpts$optionPro;
  var labelProp = optionProps.label || "label";
  var valueProp = optionProps.value || "value";
  var column = params.column, row2 = params.row;
  var formatConfig = column.own.formatConfig;
  var cellValue = isSyncCell(renderOpts, params, context) ? getCellValue(row2, column) : column.model.value;
  if (!options && formatConfig && formatConfig.data) {
    options = formatConfig.data;
  }
  return options.map(function(item, index2) {
    var attrs = {
      domProps: {
        value: item[valueProp],
        selected: item.value === cellValue
      },
      key: index2
    };
    return h2("option", attrs, item[labelProp]);
  });
}
function renderOptgroups(h2, options, params, context) {
  var optionGroups = options.optionGroups, _options$optionGroupP = options.optionGroupProps, optionGroupProps = _options$optionGroupP === void 0 ? {} : _options$optionGroupP;
  var groupLabel = optionGroupProps.label || "label";
  var groupOptions = optionGroupProps.options || "options";
  return optionGroups.map(function(group, key) {
    var attrs = {
      domProps: {
        label: group[groupLabel]
      },
      key
    };
    var children = renderOptions(h2, group[groupOptions], options, params, context);
    return h2("optgroup", attrs, children);
  });
}
function handleConfirmFilter(context, column, checked, item) {
  var key = column.filterMultiple ? "changeMultipleOption" : "changeRadioOption";
  var method = context[key];
  method({}, checked, item);
}
function getFilterEvents(item, renderOpts, params, context) {
  var _on2;
  var events = renderOpts.events, name = renderOpts.name;
  var column = params.column;
  var type = name === "select" ? "change" : "input";
  var on2 = (_on2 = {}, _on2[type] = function(event) {
    item.data = event.target.value;
    handleConfirmFilter(context, column, !!item.data, item);
  }, _on2);
  if (events) {
    var mapHandler = function mapHandler2(cb) {
      return function() {
        cb.apply(null, [params].concat.apply(params, arguments));
      };
    };
    assign(on2, objectMap(events, mapHandler));
  }
  return on2;
}
function defaultFilterRender(h2, renderOpts, params, context) {
  var name = renderOpts.name;
  var column = params.column;
  var attrs = getAttrs(renderOpts, params);
  return column.filters.map(function(item) {
    var props = {
      class: "tiny-grid-default-" + name,
      attrs,
      domProps: {
        value: item.data
      },
      on: getFilterEvents(item, renderOpts, params, context)
    };
    return h2(name, props);
  });
}
function defaultFilterMethod(_ref2) {
  var option = _ref2.option, row2 = _ref2.row, column = _ref2.column;
  var cellValue = get(row2, column.property);
  var data8 = option.data;
  return cellValue == data8;
}
function renderSelectEdit(h2, renderOpts, params, context) {
  var props = {
    class: "tiny-grid-default-select",
    on: getEvents(renderOpts, params, context)
  };
  var children = renderOpts.optionGroups ? renderOptgroups(h2, renderOpts, params, context) : renderOptions(h2, renderOpts.options, renderOpts, params, context);
  return [h2("select", props, children)];
}
function defaultEditRender(h2, renderOpts, params, context) {
  var _extends2;
  var $table = params.$table, column = params.column, row2 = params.row;
  var _column$formatValue = column.formatValue, formatValue = _column$formatValue === void 0 ? function(_ref3) {
    var cellValue2 = _ref3.cellValue;
    return cellValue2;
  } : _column$formatValue, own = column.own;
  var formatOpt = own.formatConfig || {};
  var children = renderOpts.children, _renderOpts$component2 = renderOpts.component, component = _renderOpts$component2 === void 0 ? {} : _renderOpts$component2;
  var attrs = getAttrs(renderOpts, params);
  var value = isSyncCell(renderOpts, params, context) ? getCellValue(row2, column) : column.model.value;
  var cellValue = formatValue(_extends({
    cellValue: value
  }, params));
  var isTag = ~["input", "textarea", "select"].indexOf(component);
  var editorModel = component.model || {};
  var modelProps = typeof component === "string" ? "value" : editorModel.prop || "modelValue";
  var options = {
    class: isTag ? "tiny-grid-default-" + component : "",
    attrs: _extends({
      formatOpt,
      options: formatOpt.data
    }, attrs, (_extends2 = {}, _extends2[modelProps] = cellValue, _extends2)),
    on: getEvents(renderOpts, params, context)
  };
  if (autoRefresh(renderOpts, params)) {
    options.attrs.editorAutoRefreshKey = $table.editStore.editorAutoRefreshKey;
  }
  var slot = children ? children(_extends({
    props: options
  }, params), h2) : null;
  var cell = [h2(hooks.toRaw(component), options, slot)];
  return isTag ? cell : [h2("div", {
    class: "tiny-grid-editor"
  }, cell)];
}
var buildRenderMap = function buildRenderMap2() {
  var renderMapInput = [["autofocus", "input"], ["renderEdit", defaultEditRender], ["renderDefault", defaultEditRender], ["renderFilter", defaultFilterRender], ["filterMethod", defaultFilterMethod]];
  var mapHandler = function mapHandler2(mapArr) {
    var obj = {};
    mapArr.forEach(function(item) {
      return obj[item[0]] = item[1];
    });
    return obj;
  };
  var renderMap2 = {};
  renderMap2.input = mapHandler(renderMapInput);
  renderMapInput[0][1] = "textarea";
  renderMap2.textarea = mapHandler(renderMapInput);
  renderMapInput.splice(0, 1);
  renderMapInput[0][1] = renderMapInput[1][1] = renderSelectEdit;
  renderMapInput[2][1] = function(h2, renderOpts, params, context) {
    var attrs = renderOpts.attrs;
    var column = params.column;
    return column.filters.map(function(item) {
      var props = {
        attrs,
        class: "tiny-grid-default-select",
        on: getFilterEvents(item, renderOpts, params, context)
      };
      var children = renderOpts.optionGroups ? renderOptgroups(h2, renderOpts, params) : renderOptions(h2, renderOpts.options, renderOpts, params);
      return h2("select", props, children);
    });
  };
  renderMap2.select = mapHandler(renderMapInput);
  return renderMap2;
};
var renderMap = buildRenderMap();
var buildRenderer = function buildRenderer2() {
  var Renderer2 = {};
  Renderer2.mixin = function(map) {
    each(map, function(options, name) {
      return Renderer2.add(name, options);
    });
    return Renderer2;
  };
  Renderer2.get = function(name) {
    return isObject(name) || isFunction(name) ? renderMap.input : renderMap[name] || null;
  };
  Renderer2.add = function(name, options) {
    var renders;
    var flag = name && options;
    if (!flag) {
      return Renderer2;
    }
    renders = renderMap[name];
    if (renders) {
      Object.assign(renders, options);
    } else {
      renderMap[name] = options;
    }
    return Renderer2;
  };
  Renderer2.delete = function(name) {
    delete renderMap[name];
    return Renderer2;
  };
  return Renderer2;
};
var Renderer = buildRenderer();
var Renderer$1 = Renderer;
var installedPlugins = [];
var Buttons = StoreMap;
var Menus = StoreMap;
var Grid$1 = {
  use: function use(Plugin, options) {
    if (Plugin && Plugin.install) {
      if (!installedPlugins.includes(Plugin)) {
        Plugin.install(this, options);
        installedPlugins.push(Plugin);
      }
    }
    return this;
  },
  setup: Setup,
  interceptor: Interceptor,
  renderer: Renderer$1,
  buttons: Buttons,
  menus: Menus,
  _tooltip: true
};
var handleClearEvent = function handleClearEvent2(params, event) {
  if (params && params.$table) {
    var getTarget = params.$table.getEventTargetNode;
    var bodyEl = document.body;
    if (getTarget(event, bodyEl, "tiny-autocomplete-suggestion").flag || getTarget(event, bodyEl, "tiny-select-dropdown").flag || getTarget(event, bodyEl, "tiny-cascader__dropdown").flag || getTarget(event, bodyEl, "tiny-cascader-menus").flag || getTarget(event, bodyEl, "tiny-picker-panel").flag || getTarget(event, bodyEl, "tiny-popper").flag || getTarget(event, bodyEl, "tiny-dialog-box").flag) {
      return false;
    }
  }
};
Grid$1.interceptor.add("event.clear_actived", handleClearEvent);
Grid$1.interceptor.add("event.clear_filter", handleClearEvent);
var GridAdapter = Grid$1;
function addListenerMousedown$1(_ref4) {
  var $table = _ref4.$table, mouseConfig = _ref4.mouseConfig, params = _ref4.params, thOns = _ref4.thOns;
  if (mouseConfig.checked) {
    thOns.mousedown = function(event) {
      return $table.triggerHeaderCellMousedownEvent(event, _extends({
        cell: event.currentTarget
      }, params));
    };
  }
}
function addListenerDblclick$2(_ref5) {
  var $table = _ref5.$table, params = _ref5.params, tableListeners = _ref5.tableListeners, thOns = _ref5.thOns;
  if (tableListeners["header-cell-dblclick"]) {
    thOns.dblclick = function(event) {
      return _emitEvent($table, "header-cell-dblclick", [_extends({
        cell: event.currentTarget
      }, params), event]);
    };
  }
}
function addListenerClick$2(_ref6) {
  var $table = _ref6.$table, highlightCurrentColumn = _ref6.highlightCurrentColumn, mouseConfig = _ref6.mouseConfig, params = _ref6.params, sortOpts2 = _ref6.sortOpts, tableListeners = _ref6.tableListeners, thOns = _ref6.thOns;
  if (highlightCurrentColumn || tableListeners["header-cell-click"] || mouseConfig.checked || sortOpts2.trigger === "cell") {
    thOns.click = function(event) {
      return $table.triggerHeaderCellClickEvent(event, _extends({
        cell: event.currentTarget
      }, params));
    };
  }
}
function addListenerMouseout$1(_ref7) {
  var $table = _ref7.$table, showHeaderTip = _ref7.showHeaderTip, showTooltip2 = _ref7.showTooltip, thOns = _ref7.thOns;
  if (showTooltip2 || showHeaderTip) {
    thOns.mouseout = function() {
      if ($table._isResize) {
        return;
      }
      $table.clostTooltip();
    };
  }
}
function addListenerMouseover$1(_ref8) {
  var $table = _ref8.$table, params = _ref8.params, showHeaderTip = _ref8.showHeaderTip, showTitle = _ref8.showTitle, showTooltip2 = _ref8.showTooltip, thOns = _ref8.thOns;
  if (showTitle || showTooltip2 || showHeaderTip) {
    thOns.mouseover = function(event) {
      if ($table._isResize) {
        return;
      }
      if (showTitle) {
        updateCellTitle(event);
      } else if (showTooltip2 || showHeaderTip) {
        $table.triggerHeaderTooltipEvent(event, _extends({
          showHeaderTip
        }, params));
      }
    };
  }
}
function modifyHeadAlign(_ref9) {
  var column = _ref9.column, headAlign = _ref9.headAlign;
  if (~["radio", "selection", "index"].indexOf(column.type)) {
    headAlign = headAlign || "center";
  }
  return headAlign;
}
function computeDragLeft(args) {
  var dragMinLeft = args.dragMinLeft, resizableConfig = args.resizableConfig, scrollLeft = args.scrollLeft, column = args.column, startColumnLeft = args.startColumnLeft, left = args.left;
  var dragLeft = Math.max(left, dragMinLeft);
  if ((resizableConfig == null ? void 0 : resizableConfig.limit) instanceof Function) {
    var currentMouseLeft = dragLeft - scrollLeft;
    var width = resizableConfig.limit({
      field: column.own.field,
      width: currentMouseLeft - startColumnLeft
    });
    dragLeft = startColumnLeft + width;
  }
  return {
    left,
    dragMinLeft,
    dragLeft
  };
}
function renderTableColgroup(tableColumn3) {
  return h("colgroup", {
    ref: "colgroup"
  }, tableColumn3.map(function(column, columnIndex) {
    return h("col", {
      attrs: {
        name: column.id
      },
      key: columnIndex
    });
  }).concat([h("col", {
    attrs: {
      name: "col_gutter"
    }
  })]));
}
function renderRepair() {
  return h("div", {
    class: "tiny-grid__repair",
    ref: "repair"
  });
}
function renderXSpace() {
  return h("div", {
    class: "tiny-grid-body__x-space",
    ref: "xSpace"
  });
}
var classMap$2 = {
  colFixed: "col__fixed",
  colIndex: "col__index",
  colRadio: "col__radio",
  colSelection: "col__selection",
  colGroup: "col__group",
  colEllipsis: "col__ellipsis",
  fixedHidden: "fixed__column",
  isSortable: "is__sortable",
  isEditable: "is__editable",
  isFilter: "is__filter",
  filterActive: "filter__active"
};
function getThPropsArg(args) {
  var _ref10, _column$style, _column$style2;
  var column = args.column, columnIndex = args.columnIndex, columnKey = args.columnKey, fixedHiddenColumn = args.fixedHiddenColumn, hasEllipsis = args.hasEllipsis, headAlign = args.headAlign, columnStore = args.columnStore;
  var headerCellClassName = args.headerCellClassName, headerClassName = args.headerClassName, isColGroup = args.isColGroup, isDragHeaderSorting = args.isDragHeaderSorting, params = args.params, thOns = args.thOns, scrollbarWidth = args.scrollbarWidth;
  var leftList = columnStore.leftList, rightList = columnStore.rightList;
  return {
    class: ["tiny-grid-header__column", column.id, (_ref10 = {}, _ref10["col__" + headAlign] = headAlign, _ref10[classMap$2.colFixed] = column.fixed, _ref10[classMap$2.colIndex] = column.type === "index", _ref10[classMap$2.colRadio] = column.type === "radio", _ref10[classMap$2.colSelection] = column.type === "selection", _ref10[classMap$2.colGroup] = isColGroup, _ref10[classMap$2.colEllipsis] = hasEllipsis, _ref10[classMap$2.fixedHidden] = fixedHiddenColumn, _ref10[classMap$2.isSortable] = !["index", "radio", "selection"].includes(column.type) && column.sortable, _ref10[classMap$2.isEditable] = column.editor, _ref10[classMap$2.isFilter] = isObject$1(column.filter), _ref10[classMap$2.filterActive] = column.filter && column.filter.hasFilter, _ref10["fixed-left-last__column"] = column.fixed === "left" && (leftList[leftList.length - 1] === column || column.isFixedLeftLast), _ref10["fixed-right-first__column"] = column.fixed === "right" && (rightList[0] === column || column.isFixedRightFirst), _ref10), getClass(headerClassName, params), getClass(headerCellClassName, params)],
    attrs: {
      "data-colid": column.id,
      colspan: column.colSpan,
      rowspan: column.rowSpan
    },
    style: fixedHiddenColumn ? {
      left: ((_column$style = column.style) == null ? void 0 : _column$style.left) + "px",
      right: ((_column$style2 = column.style) == null ? void 0 : _column$style2.right) + scrollbarWidth + "px"
    } : null,
    on: thOns,
    key: isDragHeaderSorting ? random() : columnKey || isColGroup ? column.id : columnIndex
  };
}
function renderThPartition(_ref11) {
  var border = _ref11.border, column = _ref11.column, isColGroup = _ref11.isColGroup, resizable = _ref11.resizable;
  var res = null;
  var classMap2 = {
    isLine: "is__line"
  };
  if (!isColGroup && !(isBoolean(column.resizable) ? column.resizable : resizable) && column.type !== "index") {
    var _ref12;
    res = h("div", {
      class: ["tiny-grid-thead-partition", (_ref12 = {}, _ref12[classMap2.isLine] = !border, _ref12)]
    });
  }
  return res;
}
function renderThCell(args) {
  var column = args.column, fixedHiddenColumn = args.fixedHiddenColumn, headerSuffixIconAbsolute = args.headerSuffixIconAbsolute, params = args.params, $table = args.$table;
  var showEllipsis = args.showEllipsis, showHeaderTip = args.showHeaderTip, showTitle = args.showTitle, showTooltip2 = args.showTooltip;
  return h(
    "div",
    {
      class: ["tiny-grid-cell", {
        "tiny-grid-cell__title": showTitle,
        "tiny-grid-cell__tooltip": showTooltip2 || showHeaderTip,
        "tiny-grid-cell__ellipsis": showEllipsis,
        "tiny-grid-cell__header-suffix": headerSuffixIconAbsolute
      }]
    },
    // 如果不是表格形态，就只保留表格结构（到tiny-grid-cell），不渲染具体的内容
    $table.isShapeTable ? column.renderHeader(h, _extends({
      isHidden: fixedHiddenColumn
    }, params)) : null
  );
}
function renderThResize(_ref13) {
  var _vm = _ref13._vm, border = _ref13.border, column = _ref13.column, fixedHiddenColumn = _ref13.fixedHiddenColumn, isColGroup = _ref13.isColGroup, params = _ref13.params, resizable = _ref13.resizable, isColResize = _ref13.isColResize;
  var res = null;
  var classMap2 = {
    isLine: "is__line"
  };
  if (!isColGroup && isColResize && (isBoolean(column.resizable) ? column.resizable : resizable)) {
    var _ref14;
    res = h("div", {
      class: ["tiny-grid-resizable", (_ref14 = {}, _ref14[classMap2.isLine] = !border, _ref14)],
      on: {
        mousedown: function mousedown(event) {
          return _vm.resizeMousedown(event, _extends({
            isHidden: fixedHiddenColumn
          }, params));
        }
      }
    });
  }
  return res;
}
function getThHandler(args) {
  var $rowIndex = args.$rowIndex, $table = args.$table, _vm = args._vm, allAlign = args.allAlign, allColumnHeaderOverflow = args.allColumnHeaderOverflow, allHeaderAlign = args.allHeaderAlign, border = args.border, columnKey = args.columnKey, headerCellClassName = args.headerCellClassName;
  var headerSuffixIconAbsolute = args.headerSuffixIconAbsolute, highlightCurrentColumn = args.highlightCurrentColumn, isDragHeaderSorting = args.isDragHeaderSorting, mouseConfig = args.mouseConfig, resizable = args.resizable, sortOpts2 = args.sortOpts, tableListeners = args.tableListeners;
  var operationColumnResizable = $table.operationColumnResizable;
  return function(column, $columnIndex) {
    var showHeaderOverflow = column.showHeaderOverflow, showHeaderTip = column.showHeaderTip, headerAlign = column.headerAlign, align = column.align, headerClassName = column.headerClassName;
    var isColGroup = column.children && column.children.length;
    var fixedHiddenColumn = column.fixed;
    var headOverflow = isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;
    var showEllipsis = headOverflow === "ellipsis";
    var showTitle = headOverflow === "title";
    var headAlign = headerAlign || align || allHeaderAlign || allAlign;
    var showTooltip2 = headOverflow === true || headOverflow === "tooltip";
    var thOns = {};
    var hasEllipsis = showTitle || showTooltip2 || showEllipsis;
    var columnStore = $table.columnStore, scrollbarWidth = $table.scrollbarWidth;
    var isColResize = ["index", "radio", "selection"].includes(column.type) ? operationColumnResizable : true;
    headAlign = modifyHeadAlign({
      column,
      headAlign
    });
    var columnIndex = $table.getColumnIndex(column);
    var params = {
      $table,
      $rowIndex,
      column
    };
    Object.assign(params, {
      columnIndex,
      $columnIndex
    });
    addListenerMouseover$1({
      $table,
      params,
      showHeaderTip,
      showTitle,
      showTooltip: showTooltip2,
      thOns
    });
    addListenerMouseout$1({
      $table,
      showHeaderTip,
      showTooltip: showTooltip2,
      thOns
    });
    var args1 = {
      $table,
      highlightCurrentColumn,
      mouseConfig,
      params
    };
    Object.assign(args1, {
      sortOpts: sortOpts2,
      tableListeners,
      thOns
    });
    addListenerClick$2(args1);
    addListenerDblclick$2({
      $table,
      params,
      tableListeners,
      thOns
    });
    addListenerMousedown$1({
      $table,
      mouseConfig,
      params,
      thOns
    });
    args1 = {
      column,
      columnIndex,
      columnKey,
      fixedHiddenColumn,
      hasEllipsis,
      headAlign,
      columnStore,
      scrollbarWidth
    };
    Object.assign(args1, {
      headerCellClassName,
      headerClassName,
      isColGroup,
      isDragHeaderSorting,
      params,
      thOns
    });
    var args2 = {
      column,
      fixedHiddenColumn,
      headerSuffixIconAbsolute,
      params,
      $table
    };
    Object.assign(args2, {
      showEllipsis,
      showHeaderTip,
      showTitle,
      showTooltip: showTooltip2
    });
    return h("th", getThPropsArg(args1), [
      renderThPartition({
        border,
        column,
        isColGroup,
        resizable
      }),
      renderThCell(args2),
      // 列宽拖动
      renderThResize({
        _vm,
        border,
        column,
        fixedHiddenColumn,
        isColGroup,
        params,
        resizable,
        isColResize
      })
    ]);
  };
}
function renderTableThead(args) {
  var $table = args.$table, _vm = args._vm, allAlign = args.allAlign, allColumnHeaderOverflow = args.allColumnHeaderOverflow;
  var allHeaderAlign = args.allHeaderAlign, border = args.border, columnKey = args.columnKey;
  var headerCellClassName = args.headerCellClassName, headerColumn = args.headerColumn, headerRowClassName = args.headerRowClassName, headerSuffixIconAbsolute = args.headerSuffixIconAbsolute;
  var highlightCurrentColumn = args.highlightCurrentColumn, isDragHeaderSorting = args.isDragHeaderSorting, mouseConfig = args.mouseConfig;
  var overflowX = args.overflowX, resizable = args.resizable, sortOpts2 = args.sortOpts, tableListeners = args.tableListeners;
  return h("thead", {
    ref: "thead"
  }, headerColumn.map(function(cols, $rowIndex) {
    var args1 = {
      $rowIndex,
      $table,
      _vm,
      allAlign,
      allColumnHeaderOverflow,
      allHeaderAlign,
      border,
      columnKey
    };
    Object.assign(args1, {
      headerCellClassName,
      headerSuffixIconAbsolute,
      highlightCurrentColumn
    });
    Object.assign(args1, {
      isDragHeaderSorting,
      mouseConfig,
      overflowX,
      resizable,
      sortOpts: sortOpts2,
      tableListeners
    });
    return h("tr", {
      class: ["tiny-grid-header__row", headerRowClassName ? isFunction(headerRowClassName) ? headerRowClassName({
        $table,
        $rowIndex
      }) : headerRowClassName : ""]
    }, cols.map(getThHandler(args1)).concat([h("th", {
      class: "col__gutter"
    })]));
  }));
}
function updateResizableToolbar($table) {
  var toolbarVm = $table.getVm("toolbar");
  if (toolbarVm) {
    toolbarVm.updateResizable();
  }
}
function renderTable$1(args) {
  var $table = args.$table, _vm = args._vm, allAlign = args.allAlign, allColumnHeaderOverflow = args.allColumnHeaderOverflow, allHeaderAlign = args.allHeaderAlign, border = args.border, columnKey = args.columnKey;
  var headerCellClassName = args.headerCellClassName, headerColumn = args.headerColumn, headerRowClassName = args.headerRowClassName, headerSuffixIconAbsolute = args.headerSuffixIconAbsolute;
  var highlightCurrentColumn = args.highlightCurrentColumn, isDragHeaderSorting = args.isDragHeaderSorting, mouseConfig = args.mouseConfig, overflowX = args.overflowX, resizable = args.resizable, sortOpts2 = args.sortOpts;
  var tableColumn3 = args.tableColumn, tableLayout = args.tableLayout, tableListeners = args.tableListeners;
  var args1 = {
    $table,
    _vm,
    allAlign,
    allColumnHeaderOverflow,
    allHeaderAlign,
    border,
    columnKey
  };
  Object.assign(args1, {
    headerCellClassName,
    headerColumn,
    headerRowClassName,
    headerSuffixIconAbsolute
  });
  Object.assign(args1, {
    highlightCurrentColumn,
    isDragHeaderSorting,
    mouseConfig
  });
  Object.assign(args1, {
    overflowX,
    resizable,
    sortOpts: sortOpts2,
    tableListeners
  });
  return h("table", {
    class: "tiny-grid__header",
    style: {
      tableLayout
    },
    attrs: {
      cellspacing: 0,
      cellpadding: 0,
      border: 0
    },
    ref: "table"
  }, [
    // 列宽
    renderTableColgroup(tableColumn3),
    // 头部
    renderTableThead(args1)
  ]);
}
var documentOnmouseup = function documentOnmouseup2(_ref15) {
  var oldMousemove = _ref15.oldMousemove, oldMouseup = _ref15.oldMouseup, column = _ref15.column, dragPosLeft = _ref15.dragPosLeft, dragLeft = _ref15.dragLeft, resizeBarElem = _ref15.resizeBarElem, $table = _ref15.$table, params = _ref15.params;
  document.onmousemove = oldMousemove;
  document.onmouseup = oldMouseup;
  var resizeWidth = column.renderWidth + dragLeft - dragPosLeft;
  resizeWidth = typeof resizeWidth === "number" ? resizeWidth : parseInt(resizeWidth, 10) || 40;
  column.resizeWidth = resizeWidth < 40 ? 40 : resizeWidth;
  resizeBarElem.style.display = "none";
  removeClass($table.$el, "tiny-grid-cell__resize");
  Object.assign($table, {
    _isResize: false,
    _lastResizeTime: Date.now()
  });
  $table.analyColumnWidth();
  $table.recalculate();
  updateResizableToolbar($table);
  _emitEvent($table, "resizable-change", [params]);
};
var Header = defineComponent({
  name: $prefix + "GridHeader",
  props: {
    collectColumn: Array,
    fixedColumn: Array,
    size: String,
    isGroup: Boolean,
    tableColumn: Array,
    tableData: Array,
    visibleColumn: Array,
    resizableConfig: Object
  },
  watch: {
    tableColumn: function tableColumn() {
      this.uploadColumn();
    }
  },
  data: function data() {
    return {
      headerColumn: []
    };
  },
  mounted: function mounted() {
    var $el = this.$el, $table = this.$parent, $refs = this.$refs;
    var elemStore = $table.elemStore, dropConfig = $table.dropConfig;
    var keyPrefix = "main-header-";
    elemStore[keyPrefix + "wrapper"] = $el;
    elemStore[keyPrefix + "table"] = $refs.table;
    elemStore[keyPrefix + "colgroup"] = $refs.colgroup;
    elemStore[keyPrefix + "list"] = $refs.thead;
    elemStore[keyPrefix + "x-space"] = $refs.xSpace;
    elemStore[keyPrefix + "repair"] = $refs.repair;
    if (dropConfig) {
      var plugin = dropConfig.plugin, _dropConfig$column = dropConfig.column, column = _dropConfig$column === void 0 ? true : _dropConfig$column, scheme = dropConfig.scheme;
      if (scheme !== "v2") {
        plugin && column && (this.columnSortable = $table.columnDrop(this.$el));
      }
    }
  },
  beforeUnmount: function beforeUnmount() {
    this.columnSortable && this.columnSortable.destroy();
  },
  created: function created() {
    this.uploadColumn();
  },
  render: function render() {
    var $table = this.$parent, headerColumn = this.headerColumn, tableColumn3 = this.tableColumn;
    var allAlign = $table.align, border = $table.border, columnKey = $table.columnKey, allHeaderAlign = $table.headerAlign;
    var headerCellClassName = $table.headerCellClassName, headerRowClassName = $table.headerRowClassName, headerSuffixIconAbsolute = $table.headerSuffixIconAbsolute;
    var highlightCurrentColumn = $table.highlightCurrentColumn, isDragHeaderSorting = $table.isDragHeaderSorting, _$table$mouseConfig = $table.mouseConfig, mouseConfig = _$table$mouseConfig === void 0 ? {} : _$table$mouseConfig, overflowX = $table.overflowX;
    var resizable = $table.resizable, allColumnHeaderOverflow = $table.showHeaderOverflow;
    var sortOpts2 = $table.sortOpts, tableLayout = $table.tableLayout, tableListeners = $table.tableListeners;
    var args = {
      $table,
      _vm: this,
      allAlign,
      allColumnHeaderOverflow,
      allHeaderAlign,
      border,
      columnKey
    };
    Object.assign(args, {
      headerCellClassName,
      headerColumn,
      headerRowClassName,
      headerSuffixIconAbsolute
    });
    Object.assign(args, {
      highlightCurrentColumn,
      isDragHeaderSorting,
      mouseConfig,
      overflowX,
      resizable,
      sortOpts: sortOpts2
    });
    Object.assign(args, {
      tableColumn: tableColumn3,
      tableLayout,
      tableListeners
    });
    return h("div", {
      class: ["tiny-grid__header-wrapper", "body__wrapper"]
    }, [
      // 表格主体内容x轴方向虚拟滚动条占位元素，在表头中属于无效元素，待删除
      renderXSpace(),
      renderTable$1(args),
      // x轴方向虚拟滚动适配线
      renderRepair()
    ]);
  },
  methods: {
    uploadColumn: function uploadColumn() {
      this.headerColumn = this.isGroup ? this.$parent._sliceColumnTree(this.tableColumn) : [this.tableColumn];
    },
    resizeMousedown: function resizeMousedown(event, params) {
      var $el = this.$el, $table = this.$parent, resizableConfig = this.resizableConfig;
      var dragClientX = event.clientX, dragBtnElem = event.target;
      var column = params.column;
      var _ref16 = {}, _ref16$dragLeft = _ref16.dragLeft, dragLeft = _ref16$dragLeft === void 0 ? 0 : _ref16$dragLeft, _ref16$minInterval = _ref16.minInterval, minInterval = _ref16$minInterval === void 0 ? 36 : _ref16$minInterval, _ref16$fixedOffsetWid = _ref16.fixedOffsetWidth, fixedOffsetWidth = _ref16$fixedOffsetWid === void 0 ? 0 : _ref16$fixedOffsetWid;
      var _$table$$refs = $table.$refs, resizeBarElem = _$table$$refs.resizeBar, tableBody = _$table$$refs.tableBody;
      var _ref17 = {}, _ref17$cell = _ref17.cell, cell = _ref17$cell === void 0 ? dragBtnElem.parentNode : _ref17$cell, _ref17$dragBtnWidth = _ref17.dragBtnWidth, dragBtnWidth = _ref17$dragBtnWidth === void 0 ? dragBtnElem.clientWidth : _ref17$dragBtnWidth;
      var _ref18 = {}, _ref18$pos = _ref18.pos, pos = _ref18$pos === void 0 ? getOffsetPos(dragBtnElem, $el) : _ref18$pos, _ref18$tableBodyElem = _ref18.tableBodyElem, tableBodyElem = _ref18$tableBodyElem === void 0 ? tableBody.$el : _ref18$tableBodyElem;
      var startColumnLeft = cell.offsetLeft;
      var dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2);
      var dragMinLeft = pos.left - cell.clientWidth + dragBtnWidth + minInterval;
      var dragPosLeft = pos.left + dragBtnOffsetWidth;
      var _ref19 = {}, _ref19$oldMousemove = _ref19.oldMousemove, oldMousemove = _ref19$oldMousemove === void 0 ? document.onmousemove : _ref19$oldMousemove, _ref19$oldMouseup = _ref19.oldMouseup, oldMouseup = _ref19$oldMouseup === void 0 ? document.onmouseup : _ref19$oldMouseup;
      var handleMousemoveEvent = function handleMousemoveEvent2(event2) {
        event2.stopPropagation();
        event2.preventDefault();
        var _ref20 = {}, _ref20$offsetX = _ref20.offsetX, offsetX = _ref20$offsetX === void 0 ? event2.clientX - dragClientX : _ref20$offsetX, _ref20$left = _ref20.left, left = _ref20$left === void 0 ? offsetX + dragPosLeft : _ref20$left;
        var scrollLeft = tableBodyElem.scrollLeft;
        var args = {
          cell,
          dragMinLeft,
          dragPosLeft,
          fixedOffsetWidth,
          resizableConfig,
          scrollLeft,
          column,
          dragBtnOffsetWidth,
          startColumnLeft
        };
        Object.assign(args, {
          left,
          minInterval,
          tableBodyElem
        });
        var ret = computeDragLeft(args);
        dragMinLeft = ret.dragMinLeft;
        dragLeft = ret.dragLeft - dragBtnOffsetWidth;
        var currentLeft = ret.dragLeft - scrollLeft;
        resizeBarElem.style.left = currentLeft + "px";
      };
      resizeBarElem.style.display = "block";
      addClass($table.$el, "tiny-grid-cell__resize");
      $table._isResize = true;
      document.onmousemove = handleMousemoveEvent;
      document.onmouseup = function() {
        documentOnmouseup({
          oldMousemove,
          oldMouseup,
          column,
          dragPosLeft,
          dragLeft,
          resizeBarElem,
          $table,
          params
        });
      };
      handleMousemoveEvent(event);
    }
  }
});
Header.install = function(Vue) {
  Vue.component(Header.name, Header);
};
var classMap$1 = {
  fixedHidden: "fixed__column",
  colEllipsis: "col__ellipsis",
  filterActive: "filter__active",
  cellSummary: "cell__summary",
  fixedLeftLast: "fixed-left-last__column",
  fixedRightFirst: "fixed-right-first__column",
  colRadio: "col__radio",
  colSelection: "col__selection"
};
function doFooterSpan(_ref21) {
  var attrs = _ref21.attrs, footerData = _ref21.footerData, footerSpanMethod = _ref21.footerSpanMethod, params = _ref21.params;
  if (footerSpanMethod) {
    var _ref22 = footerSpanMethod(_extends({
      data: footerData
    }, params)) || {}, _ref22$rowspan = _ref22.rowspan, rowspan = _ref22$rowspan === void 0 ? 1 : _ref22$rowspan, _ref22$colspan = _ref22.colspan, colspan = _ref22$colspan === void 0 ? 1 : _ref22$colspan;
    if (!rowspan || !colspan) {
      return null;
    }
    attrs.rowspan = rowspan;
    attrs.colspan = colspan;
  }
}
function addListenerDblclick$1(_ref23) {
  var $table = _ref23.$table, params = _ref23.params, tableListeners = _ref23.tableListeners, tfOns = _ref23.tfOns;
  if (tableListeners["footer-cell-dblclick"]) {
    tfOns.dblclick = function(event) {
      _emitEvent($table, "footer-cell-dblclick", [_extends({
        cell: event.currentTarget
      }, params), event]);
    };
  }
}
function addListenerClick$1(_ref24) {
  var $table = _ref24.$table, params = _ref24.params, tableListeners = _ref24.tableListeners, tfOns = _ref24.tfOns;
  if (tableListeners["footer-cell-click"]) {
    tfOns.click = function(event) {
      _emitEvent($table, "footer-cell-click", [_extends({
        cell: event.currentTarget
      }, params), event]);
    };
  }
}
function addListenerMouseout(_ref25) {
  var $table = _ref25.$table, showTooltip2 = _ref25.showTooltip, tfOns = _ref25.tfOns;
  if (showTooltip2) {
    tfOns.mouseout = function() {
      $table.clostTooltip();
    };
  }
}
function addListenerMouseover(_ref26) {
  var $table = _ref26.$table, params = _ref26.params, showTitle = _ref26.showTitle, showTooltip2 = _ref26.showTooltip, tfOns = _ref26.tfOns;
  if (showTitle || showTooltip2) {
    tfOns.mouseover = function(event) {
      if (showTitle) {
        updateCellTitle(event);
      } else if (showTooltip2) {
        $table.triggerFooterTooltipEvent(event, params);
      }
    };
  }
}
function renderColgroup(tableColumn3) {
  return h("colgroup", {
    ref: "colgroup"
  }, tableColumn3.map(function(column, columnIndex) {
    return h("col", {
      attrs: {
        name: column.id
      },
      key: columnIndex
    });
  }).concat([h("col", {
    attrs: {
      name: "col_gutter"
    }
  })]));
}
var renderfoots = function renderfoots2(opt) {
  var $table = opt.$table, allAlign = opt.allAlign, allColumnOverflow = opt.allColumnOverflow, allFooterAlign = opt.allFooterAlign, buildParamFunc2 = opt.buildParamFunc, columnKey = opt.columnKey, columnStore = opt.columnStore;
  var footerCellClassName = opt.footerCellClassName, footerData = opt.footerData, footerRowClassName = opt.footerRowClassName, footerSpanMethod = opt.footerSpanMethod, overflowX = opt.overflowX, tableColumn3 = opt.tableColumn, tableListeners = opt.tableListeners;
  var scrollbarWidth = $table.scrollbarWidth;
  return function(list, $rowIndex) {
    return h("tr", {
      class: ["tiny-grid-footer__row", footerRowClassName ? isFunction(footerRowClassName) ? footerRowClassName({
        $table,
        $rowIndex
      }) : footerRowClassName : ""]
    }, tableColumn3.map(function(column, $columnIndex) {
      var _ref28, _ref29;
      var arg1 = {
        $columnIndex,
        $rowIndex,
        $table,
        allAlign,
        allColumnOverflow,
        allFooterAlign
      };
      var arg2 = {
        column,
        footerData,
        footerSpanMethod,
        overflowX,
        tableListeners
      };
      var _buildParamFunc = buildParamFunc2(Object.assign(arg1, arg2)), attrs = _buildParamFunc.attrs, columnIndex = _buildParamFunc.columnIndex, fixedHiddenColumn = _buildParamFunc.fixedHiddenColumn, footAlign = _buildParamFunc.footAlign, footerClassName = _buildParamFunc.footerClassName, hasEllipsis = _buildParamFunc.hasEllipsis, params = _buildParamFunc.params, tfOns = _buildParamFunc.tfOns, isShowEllipsis = _buildParamFunc.isShowEllipsis, isShowTitle = _buildParamFunc.isShowTitle, showTooltip2 = _buildParamFunc.showTooltip;
      var leftList = columnStore.leftList, rightList = columnStore.rightList;
      var _ref27 = column.style || {}, leftPosition = _ref27.left, right = _ref27.right;
      var rightPosition = right >= 0 ? right + scrollbarWidth : "";
      return h("td", {
        class: ["tiny-grid-footer__column", column.id, (_ref28 = {}, _ref28["col__" + footAlign] = footAlign, _ref28[classMap$1.fixedHidden] = fixedHiddenColumn, _ref28[classMap$1.colEllipsis] = hasEllipsis, _ref28[classMap$1.filterActive] = column.filter && column.filter.hasFilter, _ref28[classMap$1.fixedLeftLast] = column.fixed === "left" && leftList[leftList.length - 1] === column, _ref28[classMap$1.fixedRightFirst] = column.fixed === "right" && rightList[0] === column, _ref28[classMap$1.colRadio] = column.type === "radio", _ref28[classMap$1.colSelection] = column.type === "selection", _ref28), getClass(footerClassName, params), getClass(footerCellClassName, params)],
        style: fixedHiddenColumn ? {
          left: leftPosition + "px",
          right: rightPosition + "px"
        } : null,
        attrs,
        on: tfOns,
        key: columnKey ? column.id : columnIndex
      }, [h(
        "div",
        {
          class: ["tiny-grid-cell", (_ref29 = {}, _ref29[classMap$1.cellSummary] = $table.summaryConfig, _ref29["tiny-grid-cell__title"] = isShowTitle, _ref29["tiny-grid-cell__tooltip"] = showTooltip2 || column.showTip, _ref29["tiny-grid-cell__ellipsis"] = isShowEllipsis, _ref29)]
        },
        // 如果不是表格形态，就只保留表格结构（到tiny-grid-cell），不渲染具体的内容
        $table.isShapeTable ? formatText(list[$table.tableColumn.indexOf(column)], 1) : null
      )]);
    }).concat([h("td", {
      class: "col__gutter"
    })]));
  };
};
function renderTfoot(opt) {
  return h("tfoot", {
    ref: "tfoot"
  }, opt.footerData.map(renderfoots(opt)));
}
var Footer = defineComponent({
  name: $prefix + "GridFooter",
  props: {
    fixedColumn: Array,
    fixedType: String,
    footerData: Array,
    size: String,
    tableColumn: Array,
    visibleColumn: Array
  },
  mounted: function mounted2() {
    var $el = this.$el, $table = this.$parent, $refs = this.$refs;
    var elemStore = $table.elemStore;
    var keyPrefix = "main-footer-";
    elemStore[keyPrefix + "wrapper"] = $el;
    elemStore[keyPrefix + "table"] = $refs.table;
    elemStore[keyPrefix + "colgroup"] = $refs.colgroup;
    elemStore[keyPrefix + "list"] = $refs.tfoot;
    elemStore[keyPrefix + "x-space"] = $refs.xSpace;
  },
  render: function render2() {
    var $table = this.$parent, buildParamFunc2 = this.buildParamFunc, fixedColumn = this.fixedColumn, fixedType = this.fixedType, footerData = this.footerData, tableColumn3 = this.tableColumn;
    var allAlign = $table.align, columnKey = $table.columnKey, allFooterAlign = $table.footerAlign, footerCellClassName = $table.footerCellClassName, footerRowClassName = $table.footerRowClassName, footerSpanMethod = $table.footerSpanMethod, columnStore = $table.columnStore;
    var overflowX = $table.overflowX, allColumnOverflow = $table.showOverflow, tableLayout = $table.tableLayout, tableListeners = $table.tableListeners, renderFooter = $table.renderFooter;
    var tableAttrs = {
      cellspacing: 0,
      cellpadding: 0,
      border: 0
    };
    var colgroupVNode = renderColgroup(tableColumn3);
    var arg1 = {
      $table,
      allAlign,
      allColumnOverflow,
      allFooterAlign,
      buildParamFunc: buildParamFunc2,
      columnKey,
      columnStore
    };
    var arg2 = {
      footerCellClassName,
      footerData,
      footerRowClassName,
      footerSpanMethod,
      overflowX,
      tableColumn: tableColumn3,
      tableListeners
    };
    var tfootVNode = renderTfoot(Object.assign(arg1, arg2));
    var renderParams = {
      $table,
      columns: tableColumn3,
      footerData,
      fixedColumns: fixedColumn,
      fixedType
    };
    return h("div", {
      class: ["tiny-grid__footer-wrapper", "body__wrapper"],
      on: {
        scroll: this.scrollEvent
      }
    }, [h("div", {
      class: "tiny-grid-body__x-space",
      ref: "xSpace"
    }), typeof renderFooter === "function" ? renderFooter(renderParams, h) : h("table", {
      class: "tiny-grid__footer",
      style: {
        tableLayout
      },
      attrs: tableAttrs,
      ref: "table"
    }, [
      //  列宽
      colgroupVNode,
      // 底部
      tfootVNode
    ])]);
  },
  methods: {
    scrollEvent: function scrollEvent(event) {
      var $table = this.$parent;
      var $refs = $table.$refs, lastScrollLeft = $table.lastScrollLeft, scrollXLoad = $table.scrollXLoad;
      var tableBody = $refs.tableBody, tableFooter = $refs.tableFooter, tableHeader = $refs.tableHeader;
      var headerElem = tableHeader ? tableHeader.$el : null;
      var bodyElem = tableBody ? tableBody.$el : null;
      var footerElem = tableFooter ? tableFooter.$el : null;
      var scrollLeft = footerElem.scrollLeft;
      var isX = scrollLeft !== lastScrollLeft;
      var setElemScrollLeft = function setElemScrollLeft2(elem, scrollLeft2) {
        if (elem) {
          elem.scrollLeft = scrollLeft2;
        }
      };
      var eventParams = [{
        $table,
        isX,
        isY: false,
        scrollLeft,
        scrollTop: bodyElem.scrollTop,
        type: "footer"
      }, event];
      $table.lastScrollTime = Date.now();
      $table.lastScrollLeft = scrollLeft;
      setElemScrollLeft(headerElem, scrollLeft);
      setElemScrollLeft(bodyElem, scrollLeft);
      if (scrollXLoad && isX) {
        $table.triggerScrollXEvent(event);
      }
      _emitEvent($table, "scroll", eventParams);
    },
    buildParamFunc: function buildParamFunc(opt) {
      var $columnIndex = opt.$columnIndex, $rowIndex = opt.$rowIndex, $table = opt.$table, allAlign = opt.allAlign, allColumnOverflow = opt.allColumnOverflow, allFooterAlign = opt.allFooterAlign;
      var column = opt.column, footerData = opt.footerData, footerSpanMethod = opt.footerSpanMethod, tableListeners = opt.tableListeners;
      var showOverflow = column.showOverflow, footerAlign = column.footerAlign, align = column.align, footerClassName = column.footerClassName;
      var fixedHiddenColumn = column.fixed;
      var cellOverflowValue = isNull(showOverflow) ? allColumnOverflow : showOverflow;
      var footAlign = footerAlign || align || allFooterAlign || allAlign;
      var isShowEllipsis = cellOverflowValue === "ellipsis";
      var isShowTitle = cellOverflowValue === "title";
      var showTooltip2 = cellOverflowValue === true || cellOverflowValue === "tooltip";
      var hasEllipsis = isShowTitle || showTooltip2 || isShowEllipsis;
      var attrs = {
        "data-colid": column.id
      };
      var tfOns = {};
      var columnIndex = $table.getColumnIndex(column);
      var params = {
        $table,
        $rowIndex,
        column,
        columnIndex,
        $columnIndex
      };
      addListenerMouseover({
        $table,
        params,
        showTitle: isShowTitle,
        showTooltip: showTooltip2,
        tfOns
      });
      addListenerMouseout({
        $table,
        showTooltip: showTooltip2,
        tfOns
      });
      addListenerClick$1({
        $table,
        params,
        tableListeners,
        tfOns
      });
      addListenerDblclick$1({
        $table,
        params,
        tableListeners,
        tfOns
      });
      doFooterSpan({
        attrs,
        footerData,
        footerSpanMethod,
        params
      });
      return {
        attrs,
        columnIndex,
        fixedHiddenColumn,
        footAlign,
        footerClassName,
        hasEllipsis,
        isShowEllipsis,
        isShowTitle,
        showTooltip: showTooltip2,
        params,
        tfOns
      };
    }
  }
});
Footer.install = function(Vue) {
  Vue.component(Footer.name, Footer);
};
var outLog = function outLog2(type) {
  return function(message, detail) {
    var msg = "[tiny-grid] " + (GlobalConfig$2.i18n(message) || message);
    if (detail) {
      msg += ": " + detail;
    }
    log(msg, type);
    return msg;
  };
};
var warn = outLog("warn");
var error = outLog("error");
var DateFormat = {
  FULLDATETIME: "yyyy-MM-dd hh:mm:ss.SSS",
  LONGDATETIME: "yyyy-MM-dd hh:mm:ss",
  DATETIME: "yyyy-MM-dd hh:mm",
  DATE: "yyyy-MM-dd",
  FULLTIME: "hh:mm:ss.SSS",
  LONGTIME: "hh:mm:ss",
  TIME: "hh:mm",
  YEARMONTH: "yyyy-MM"
};
var dateFormat = function dateFormat2(value, formatString) {
  var userFormat = _extends({
    dateFormat: formatString
  }, this.own.formatConfig);
  if (value) {
    if (typeof value === "string") {
      if (userFormat.valueFormat) {
        value = toDate(value, userFormat.valueFormat);
      } else {
        warn("ui.grid.error.missingValueFormat");
        if (isNaN(Date.parse(value))) {
          return value;
        }
      }
    } else if (typeof value === "number") {
      value = new Date(value);
    }
  }
  if (userFormat.isutc8) {
    if (!value) {
      return value;
    }
    var currentTimezone = 0 - (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
    var newDate = getDateWithNewTimezone(isDate(value) ? value : new Date(toDate(value)), currentTimezone, userFormat.timezone || 8);
    return format(newDate, userFormat.dateFormat);
  }
  return toDateStr(value, userFormat.dateFormat, userFormat.timezone);
};
var Formatter = {
  money: function money(value) {
    var prefix = "$";
    var format2 = _extends({
      fraction: 2,
      flag: prefix + "{0}"
    }, this.own.formatConfig);
    return tryToCurrency(value, format2.fraction, format2.flag, "");
  },
  enum: function _enum(value) {
    var format2 = _extends({
      label: "label",
      value: "value"
    }, this.own.formatConfig);
    var data8 = Array.isArray(format2.data) && find(format2.data, function(item) {
      return item[format2.value] === value;
    });
    return data8 ? data8[format2.label] : "";
  },
  select: function select(cellValue) {
    var _this$editor = this.editor, options = _this$editor.options, optionGroups = _this$editor.optionGroups, _this$editor$optionPr = _this$editor.optionProps, optionProps = _this$editor$optionPr === void 0 ? {} : _this$editor$optionPr, _this$editor$optionGr = _this$editor.optionGroupProps, optionGroupProps = _this$editor$optionGr === void 0 ? {} : _this$editor$optionGr;
    var format2 = this.own.formatConfig;
    if (isNull(cellValue) || cellValue === "") {
      return "";
    }
    var selectItem;
    var labelProp = optionProps.label || "label";
    var valueProp = optionProps.value || "value";
    if (optionGroups) {
      var groupOptions = optionGroupProps.options || "options";
      for (var _index = 0; _index < optionGroups.length; _index++) {
        selectItem = find(optionGroups[_index][groupOptions], function(item) {
          return item[valueProp] === cellValue;
        });
        if (selectItem) {
          break;
        }
      }
      return selectItem ? selectItem[labelProp] : null;
    } else {
      if (!options && format2 && format2.async && format2.data) {
        options = format2.data;
      }
      selectItem = find(options, function(item) {
        return item[valueProp] === cellValue;
      });
      return selectItem ? selectItem[labelProp] : null;
    }
  },
  number: function number(value) {
    var format2 = _extends({
      fraction: 2
    }, this.own.formatConfig);
    return tryToDecimal(value, format2.fraction, false, "");
  },
  integer: function integer(value) {
    return tryToInt(value, "");
  },
  filesize: function filesize(value) {
    var format2 = _extends({}, this.own.formatConfig);
    return toFileSize(value, format2.unit, format2.currUnit);
  },
  date: function date(value) {
    return dateFormat.call(this, value, DateFormat.DATE);
  },
  dateTime: function dateTime(value) {
    return dateFormat.call(this, value, DateFormat.DATETIME);
  },
  longDateTime: function longDateTime(value) {
    return dateFormat.call(this, value, DateFormat.LONGDATETIME);
  },
  time: function time(value) {
    return dateFormat.call(this, value, DateFormat.TIME);
  },
  longTime: function longTime(value) {
    return dateFormat.call(this, value, DateFormat.LONGTIME);
  },
  yearMonth: function yearMonth(value) {
    return dateFormat.call(this, value, DateFormat.YEARMONTH);
  },
  ellipsis: function ellipsis(value) {
    var format2 = _extends({}, this.own.formatConfig);
    return function(h2) {
      return h2("div", {
        class: "data-ellipsis"
      }, [h2("span", {
        domProps: {
          title: value
        }
      }, truncate(value, format2.len))]);
    };
  },
  /**
   * rate 渲染器的计算规则：
   * 如果配置了 max，就按照 value / max 计算样式百分比，按照 value / 1 计算显示百分比；
   * 如果未配置 max，就按照 value / total 计算样式百分比和显示百分比；
   * @param {Number} value
   * @returns Function
   */
  rate: function rate(value) {
    var format2 = _extends({
      fraction: 2,
      total: 1,
      section: [30, 60, 90]
    }, this.own.formatConfig);
    var rateMethod = format2.rateMethod;
    var rate2;
    var formatTotal = format2.total;
    var getLengthRate = function getLengthRate2(value2, config2) {
      var lengthRate2;
      if (config2.max && typeof config2.max === "number" && typeof value2 === "number") {
        formatTotal = 1;
        lengthRate2 = toRate(value2 / config2.max, formatTotal, format2.fraction);
      }
      return lengthRate2;
    };
    var lengthRate = getLengthRate(value, format2);
    if (typeof rateMethod === "function") {
      rate2 = rateMethod.call(this, value, Object.assign({
        formatTotal
      }, format2));
    } else {
      rate2 = toRate(value, formatTotal, format2.fraction);
    }
    lengthRate = lengthRate || rate2;
    var section = format2.section;
    var css = "";
    if (section) {
      var rateValue = parseInt(lengthRate, 10);
      if (!isNumber(rateValue)) {
        return rate2;
      }
      if (rateValue === 100) {
        css = " tiny-grid__chart-completed";
      } else {
        var cssMap = {
          0: " tiny-grid__chart-danger",
          1: " tiny-grid__chart-warning",
          2: " tiny-grid__chart-normal"
        };
        Array.isArray(section) || (section = section.split(","));
        for (var i = 0; i < section.length; i++) {
          if (rateValue < section[i]) {
            css = cssMap[i];
            break;
          }
        }
      }
    }
    return function(h2) {
      return h2("div", {
        class: "tiny-grid__data-rate"
      }, [h2("div", {
        class: "tiny-grid__rate-chart" + css,
        style: {
          width: lengthRate
        }
      }), h2("span", {
        class: "tiny-grid__rate-text"
      }, rate2)]);
    };
  },
  boole: function boole(value) {
    var defaultFormat = {
      trueValue: true,
      falseValue: false,
      htmlView: true,
      noFork: false
    };
    var format2 = Object.assign(defaultFormat, this.own.formatConfig);
    var cellValue = !isNull(format2.trueValue) ? value === format2.trueValue : toBoolValue(value);
    if (!format2.htmlView) {
      return cellValue;
    }
    if (format2.noFork && !value) {
      return "";
    }
    var icon = !cellValue ? iconClose() : iconYes();
    return function(h2) {
      return h2("div", {
        class: "tiny-grid__data-boole"
      }, [h2(icon, {
        class: ["tiny-svg-size", !cellValue ? "icon-close" : "icon-yes"]
      })]);
    };
  }
};
function getRenderType(_ref30) {
  var editor = _ref30.editor, formatConfig = _ref30.formatConfig, formatText2 = _ref30.formatText;
  var renderType = formatText2 || formatConfig.type;
  if (!renderType && editor && editor.component === "select") {
    renderType = "select";
  }
  return renderType;
}
function getFormatData(_ref31) {
  var $table = _ref31.$table, cacheFormat = _ref31.cacheFormat, row2 = _ref31.row;
  var rest, formatData;
  if (cacheFormat) {
    rest = $table.fullAllDataRowMap.get(row2);
    formatData = rest.formatData;
    if (!formatData) {
      formatData = $table.fullAllDataRowMap.get(row2).formatData = {};
    }
  }
  return {
    rest,
    formatData
  };
}
function hasCacheValue(_ref32) {
  var async = _ref32.async, cellValue = _ref32.cellValue, colid = _ref32.colid, formatData = _ref32.formatData, rest = _ref32.rest;
  return rest && formatData[colid] && formatData[colid].value === cellValue && (!async || formatData[colid].label);
}
function notHasCacheVal(_ref33) {
  var cellLabel = _ref33.cellLabel, cellValue = _ref33.cellValue, column = _ref33.column, formatText2 = _ref33.formatText, hasCacheVal = _ref33.hasCacheVal, params = _ref33.params, renderType = _ref33.renderType, row2 = _ref33.row;
  if (!hasCacheVal) {
    var cellText = row2[GlobalConfig$2.constant.insertedField + column.property];
    var formatParams = {
      cellValue
    };
    if (cellText) {
      formatParams.cellLabel = cellText;
    }
    cellLabel = isString(renderType) ? Formatter[renderType].call(column, cellValue) : formatText2(Object.assign(formatParams, params));
  }
  return cellLabel;
}
function setFormatData(_ref34) {
  var cellLabel = _ref34.cellLabel, cellValue = _ref34.cellValue, colid = _ref34.colid, formatData = _ref34.formatData;
  if (formatData) {
    formatData[colid] = {
      value: cellValue,
      label: cellLabel
    };
  }
}
var getCellLabel = function getCellLabel2(row2, column, params) {
  var formatText2 = column.formatText, editor = column.editor;
  var _column$own$formatCon = column.own.formatConfig, formatConfig = _column$own$formatCon === void 0 ? {} : _column$own$formatCon;
  var cellValue = getCellValue(row2, column);
  var cellLabel = cellValue;
  var renderType = getRenderType({
    editor,
    formatConfig,
    formatText: formatText2
  });
  if (params && renderType) {
    var $table = params.$table;
    var colid = column.id;
    var _column$own$formatCon2 = column.own.formatConfig, formatConfig2 = _column$own$formatCon2 === void 0 ? {} : _column$own$formatCon2;
    var async = formatConfig2.async === true;
    var cacheFormat = $table && $table.fullAllDataRowMap.has(row2);
    var _getFormatData = getFormatData({
      $table,
      cacheFormat,
      row: row2
    }), rest = _getFormatData.rest, formatData = _getFormatData.formatData;
    var hasCacheVal = hasCacheValue({
      async,
      cellValue,
      colid,
      formatData,
      rest
    });
    if (hasCacheVal) {
      return formatData[colid].label;
    }
    cellLabel = notHasCacheVal({
      cellLabel,
      cellValue,
      column,
      formatText: formatText2,
      hasCacheVal,
      params,
      renderType,
      row: row2
    });
    setFormatData({
      cellLabel,
      cellValue,
      colid,
      formatData
    });
  }
  return cellLabel;
};
var index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Formatter,
  error,
  getCellLabel,
  warn
}, Symbol.toStringTag, {
  value: "Module"
}));
var toRaw = hooks.toRaw;
var TEMPORARY_CHILDREN = "_$children_";
var TEMPORARY_SHOW = "_$show_";
var ROWKEY_MAP = /* @__PURE__ */ new WeakMap();
var TOTALROWS_MAP = /* @__PURE__ */ new WeakMap();
var CHART_MAP = /* @__PURE__ */ new WeakMap();
var VIRTUAL_ROW_KEY = "_$virtual_";
var rowUniqueId = 0;
var getRowUniqueId = function getRowUniqueId2() {
  return "row_" + ++rowUniqueId;
};
var isValidArray = function isValidArray2(arr) {
  return Array.isArray(arr) && arr.length;
};
var setTableRowKey = function setTableRowKey2($table) {
  if (!ROWKEY_MAP.has($table)) {
    ROWKEY_MAP.set($table, getRowkey($table));
  }
  return ROWKEY_MAP.get($table);
};
var getTableRowKey = function getTableRowKey2($table) {
  if (!ROWKEY_MAP.has($table)) {
    setTableRowKey($table);
  }
  return ROWKEY_MAP.get($table);
};
var setTreeScrollYCache = function setTreeScrollYCache2(_vm) {
  setCacheChartMap(_vm);
  setTotalRows(_vm);
};
var buildChart = function buildChart2(_vm) {
  var afterFullData = _vm.afterFullData, scrollYLoad = _vm.scrollYLoad, treeConfig = _vm.treeConfig, treeExpandeds = _vm.treeExpandeds;
  if (!scrollYLoad || !treeConfig)
    return;
  var chart = [];
  var stack = [];
  var isExpanded = function isExpanded2(row2) {
    return ~treeExpandeds.indexOf(row2);
  };
  var children = treeConfig.children;
  var iterate = function iterate2(arr, chart2) {
    return isValidArray(arr) && arr.forEach(function(row2) {
      return traverse(row2, chart2);
    });
  };
  var traverse = function traverse2(row2, chart2) {
    chart2.push([].concat(stack, [row2]));
    if (isExpanded(row2)) {
      stack.push(row2);
      iterate(row2[children], chart2);
      stack.pop();
    }
  };
  iterate(afterFullData, chart);
  return chart;
};
var clearTreeShow = function clearTreeShow2(_vm) {
  var afterFullData = _vm.afterFullData, scrollYLoad = _vm.scrollYLoad, treeConfig = _vm.treeConfig, _subTree = _vm._subTree;
  if (!scrollYLoad || !treeConfig)
    return;
  var children = treeConfig.children, _treeConfig$temporary = treeConfig.temporaryChildren, temporaryChildren = _treeConfig$temporary === void 0 ? TEMPORARY_CHILDREN : _treeConfig$temporary, _treeConfig$temporary2 = treeConfig.temporaryShow, temporaryShow = _treeConfig$temporary2 === void 0 ? TEMPORARY_SHOW : _treeConfig$temporary2;
  var iterate = function iterate2(arr) {
    return isValidArray(arr) && arr.forEach(function(child) {
      return traverse(child);
    });
  };
  var traverse = function traverse2(row2) {
    row2[temporaryShow] = false;
    row2[temporaryChildren] = [];
    iterate(row2[children]);
  };
  iterate(_subTree || afterFullData);
};
var sliceTreeData = function sliceTreeData2(_vm) {
  clearTreeShow(_vm);
  var chart = getCacheChartMap(_vm);
  var scrollYStore = _vm.scrollYStore, treeConfig = _vm.treeConfig;
  var renderSize = scrollYStore.renderSize, startIndex = scrollYStore.startIndex;
  var subChart = chart.slice(startIndex, startIndex + renderSize);
  var subTree = [];
  var _treeConfig$temporary3 = treeConfig.temporaryChildren, temporaryChildren = _treeConfig$temporary3 === void 0 ? TEMPORARY_CHILDREN : _treeConfig$temporary3, _treeConfig$temporary4 = treeConfig.temporaryShow, temporaryShow = _treeConfig$temporary4 === void 0 ? TEMPORARY_SHOW : _treeConfig$temporary4;
  var pushIfNot = function pushIfNot2(arr, item) {
    return !arr.includes(item) && arr.push(item);
  };
  subChart.forEach(function(chartItem) {
    var lastIndex = chartItem.length - 1;
    for (var i = lastIndex; i > -1; i--) {
      if (i === lastIndex) {
        chartItem[i][temporaryShow] = true;
      } else {
        if (!chartItem[i][temporaryChildren]) {
          chartItem[i][temporaryChildren] = [];
        }
        pushIfNot(chartItem[i][temporaryChildren], chartItem[i + 1]);
      }
    }
    pushIfNot(subTree, chartItem[0]);
  });
  _vm._subTree = subTree;
  return subTree;
};
var sliceFullData = function sliceFullData2(_vm) {
  var afterFullData = _vm.afterFullData, scrollYLoad = _vm.scrollYLoad, scrollYStore = _vm.scrollYStore, treeConfig = _vm.treeConfig, hasVirtualRow = _vm.hasVirtualRow, groupFullData = _vm.groupFullData;
  var renderSize = scrollYStore.renderSize, startIndex = scrollYStore.startIndex;
  var result;
  var fullData;
  fullData = hasVirtualRow ? groupFullData : afterFullData;
  if (scrollYLoad) {
    if (treeConfig) {
      result = sliceTreeData(_vm);
    } else {
      result = fullData.slice(startIndex, startIndex + renderSize);
    }
  } else {
    result = fullData.slice(0);
  }
  return result;
};
var setTotalRows = function setTotalRows2(_vm) {
  var afterFullData = _vm.afterFullData, scrollYLoad = _vm.scrollYLoad, treeConfig = _vm.treeConfig;
  var totalRows = afterFullData.length;
  if (scrollYLoad && treeConfig) {
    totalRows = getCacheChartMap(_vm).length;
  }
  TOTALROWS_MAP.set(_vm, totalRows);
};
var getTotalRows = function getTotalRows2(_vm) {
  var afterFullData = _vm.afterFullData, scrollYLoad = _vm.scrollYLoad, scrollLoad = _vm.scrollLoad, treeConfig = _vm.treeConfig, hasVirtualRow = _vm.hasVirtualRow, groupFullData = _vm.groupFullData;
  var totalRows = afterFullData.length;
  if (scrollYLoad && treeConfig) {
    if (!TOTALROWS_MAP.get(_vm)) {
      setTotalRows(_vm);
    }
    totalRows = TOTALROWS_MAP.get(_vm);
  }
  if (scrollLoad) {
    totalRows = scrollLoad.pageSize || 10;
  }
  if (hasVirtualRow) {
    totalRows = groupFullData.length;
  }
  return totalRows;
};
var getTreeChildrenKey = function getTreeChildrenKey2(_ref35) {
  var scrollYLoad = _ref35.scrollYLoad, treeConfig = _ref35.treeConfig;
  if (!treeConfig) {
    return;
  }
  var childrenKey = treeConfig.children, _treeConfig$temporary5 = treeConfig.temporaryChildren, temporaryChildren = _treeConfig$temporary5 === void 0 ? TEMPORARY_CHILDREN : _treeConfig$temporary5;
  if (scrollYLoad) {
    childrenKey = temporaryChildren;
  }
  return childrenKey;
};
var getTreeShowKey = function getTreeShowKey2(_ref36) {
  var scrollYLoad = _ref36.scrollYLoad, treeConfig = _ref36.treeConfig;
  if (!treeConfig) {
    return;
  }
  var treeShowKey = "";
  var _treeConfig$temporary6 = treeConfig.temporaryShow, temporaryShow = _treeConfig$temporary6 === void 0 ? TEMPORARY_SHOW : _treeConfig$temporary6;
  if (scrollYLoad) {
    treeShowKey = temporaryShow;
  }
  return treeShowKey;
};
var sliceVisibleColumn = function sliceVisibleColumn2(args) {
  var lastStartIndex = args.lastStartIndex, renderSize = args.renderSize, scrollXLoad = args.scrollXLoad, startIndex = args.startIndex, tableColumn3 = args.tableColumn, columnStore = args.columnStore;
  var treeConfig = args.treeConfig, visibleColumn = args.visibleColumn, visibleColumnChanged = args.visibleColumnChanged;
  var leftList = columnStore.leftList, rightList = columnStore.rightList;
  var tableColumn22 = tableColumn3;
  var lastStartIndex2 = lastStartIndex;
  var visibleColumnChanged2 = visibleColumnChanged;
  var sliced = false;
  if (scrollXLoad && treeConfig) {
    if (visibleColumnChanged || !~lastStartIndex || lastStartIndex !== startIndex) {
      tableColumn22 = visibleColumn.slice(startIndex, startIndex + renderSize);
      lastStartIndex2 = startIndex;
      visibleColumnChanged2 = false;
      sliced = true;
    }
  } else {
    tableColumn22 = visibleColumn.slice(startIndex, startIndex + renderSize);
    sliced = true;
  }
  tableColumn22 = Array.from(/* @__PURE__ */ new Set([].concat(leftList, tableColumn22, rightList)));
  return {
    tableColumn: tableColumn22,
    lastStartIndex: lastStartIndex2,
    visibleColumnChanged: visibleColumnChanged2,
    sliced
  };
};
var removeSliceColumnTree = function removeSliceColumnTree2(_vm) {
  return _vm._sliceColumnTree && (_vm._sliceColumnTree = null);
};
var clearOnTableUnmount = function clearOnTableUnmount2($table) {
  if (ROWKEY_MAP.has($table)) {
    ROWKEY_MAP.delete($table);
  }
  if (TOTALROWS_MAP.has($table)) {
    TOTALROWS_MAP.delete($table);
  }
  if (CHART_MAP.has($table)) {
    CHART_MAP.delete($table);
  }
  removeSliceColumnTree($table);
};
var setCacheChartMap = function setCacheChartMap2(_vm) {
  if (_vm._subTree)
    _vm._subTree = null;
  CHART_MAP.set(_vm, buildChart(_vm));
};
var getCacheChartMap = function getCacheChartMap2(_vm) {
  return CHART_MAP.get(_vm);
};
var sliceColumnTree = function sliceColumnTree2(_vm) {
  var collectColumn2 = _vm.collectColumn;
  var columnChart = [];
  var stack = [];
  var fixedMap = /* @__PURE__ */ new WeakMap();
  var maxLevel = 1;
  var _buildColumnChart = function buildColumnChart(columns2, columnChart2, stack2) {
    var _loop = function _loop2() {
      var column = columns2[i];
      setColumnLevel(column, stack2);
      column.rowSpan = 1;
      column.colSpan = 1;
      if (stack2.length === 0) {
        fixedMap.set(column, column.fixed || "");
      }
      if (Array.isArray(column.children) && column.children.length) {
        stack2.push(column);
        _buildColumnChart(column.children, columnChart2, stack2);
        stack2.pop();
      } else {
        var chartItem = [].concat(stack2, [column]);
        columnChart2.push(chartItem);
        if (chartItem.length > 1) {
          chartItem.slice(1).forEach(function(_ref37) {
            var fixed = _ref37.fixed;
            var rootColumn = chartItem[0];
            var cachedFixed = fixedMap.get(rootColumn);
            if (fixed) {
              if (cachedFixed && cachedFixed !== fixed) {
                warn("ui.grid.error.groupColumnFixedError");
              } else if (!cachedFixed) {
                fixedMap.set(rootColumn, fixed);
              }
            }
          });
        }
      }
    };
    for (var i = 0; i < columns2.length; i++) {
      _loop();
    }
  };
  var setColumnLevel = function setColumnLevel2(column, stack2) {
    column.level = stack2.length + 1;
    if (column.level > maxLevel) {
      maxLevel = column.level;
    }
  };
  var setColumnRowSpan = function setColumnRowSpan2(columnChart2) {
    columnChart2.forEach(function(cols) {
      var lastColumn = cols[cols.length - 1];
      lastColumn.rowSpan = maxLevel - lastColumn.level + 1;
    });
  };
  var findChartItem = function findChartItem2(lastColumn) {
    for (var i = 0; i < columnChart.length; i++) {
      var chartItem = columnChart[i];
      if (chartItem[chartItem.length - 1] === lastColumn) {
        return chartItem;
      }
    }
  };
  var tryRepairFixedType = function tryRepairFixedType2(chart) {
    chart.forEach(function(item) {
      var rootColumn = item[0];
      item.forEach(function(col) {
        col.fixed = fixedMap.get(rootColumn);
      });
    });
  };
  _buildColumnChart(collectColumn2, columnChart, stack);
  setColumnRowSpan(columnChart);
  tryRepairFixedType(columnChart);
  _vm.columnChart = columnChart;
  return function() {
    var tableColumn3 = _vm.tableColumn;
    var levelColumns = [];
    var subChart = [];
    tableColumn3.forEach(function(column) {
      subChart.push(findChartItem(column));
    });
    subChart.forEach(function(chartItem) {
      chartItem.forEach(function(column) {
        var levelIndex = column.level - 1;
        if (!levelColumns[levelIndex])
          levelColumns[levelIndex] = [];
        var levelArr = levelColumns[levelIndex];
        if (levelArr[levelArr.length - 1] === column) {
          column.colSpan += 1;
        } else {
          levelArr.push(column);
          column.colSpan = 1;
        }
      });
    });
    return levelColumns;
  };
};
var setSliceColumnTree = function setSliceColumnTree2(_vm) {
  return _vm.isGroup && (_vm._sliceColumnTree = sliceColumnTree(_vm));
};
var isVirtualRow = function isVirtualRow2(row2) {
  return row2 && row2[VIRTUAL_ROW_KEY];
};
var orderingGroupBy = function orderingGroupBy2(arr, key, equals, active, rowKey) {
  var result = [];
  var virtualItems = [];
  var virtualRowId = 0;
  var createVirtualItem = function createVirtualItem2(vItem) {
    var _vItem;
    vItem = (_vItem = {}, _vItem[VIRTUAL_ROW_KEY] = true, _vItem[rowKey] = "row_g_" + ++virtualRowId, _vItem.value = null, _vItem.children = [], _vItem.fold = false, _vItem.hover = false, _vItem);
    result.push(vItem);
    virtualItems.push(vItem);
    return vItem;
  };
  var virtualItem = createVirtualItem();
  var prevSibling, equalsParam;
  arrayEach(arr, function(item, i) {
    if (i > 0) {
      prevSibling = arr[i - 1];
      equalsParam = {
        prevRow: prevSibling,
        row: item
      };
    }
    if (i > 0 && !equals(prevSibling[key], item[key], equalsParam)) {
      virtualItem = createVirtualItem();
    }
    virtualItem.children.push(item);
    result.push(item);
  });
  arrayEach(virtualItems, function(vItem) {
    vItem.value = vItem.children[0][key];
    if (typeof active === "function") {
      var expand = active(vItem);
      vItem.fold = typeof expand === "boolean" ? !expand : false;
    }
  });
  var rawResult = result.map(toRaw);
  arrayEach(virtualItems.slice().reverse(), function(vItem) {
    if (!vItem.fold)
      return;
    var index2 = rawResult.indexOf(toRaw(vItem.children[0]));
    if (index2 > -1) {
      result.splice(index2, vItem.children.length);
    }
  });
  return result;
};
var buildRowGroupFullData = function buildRowGroupFullData2(fullData, _vm) {
  var treeConfig = _vm.treeConfig, rowGroup = _vm.rowGroup;
  var _ref38 = rowGroup || {}, field = _ref38.field, equals = _ref38.equals, activeMethod = _ref38.activeMethod;
  _vm.hasVirtualRow = !treeConfig && rowGroup && field && fullData.length > 0;
  if (_vm.hasVirtualRow) {
    _vm.groupFullData = orderingGroupBy(fullData, field, equals || isEqual, activeMethod, getTableRowKey(_vm));
  }
};
var handleRowGroupFold = function handleRowGroupFold2(row2, _vm) {
  var hasVirtualRow = _vm.hasVirtualRow, groupFullData = _vm.groupFullData, _vm$rowGroup = _vm.rowGroup, rowGroup = _vm$rowGroup === void 0 ? {} : _vm$rowGroup;
  var _rowGroup$closeable = rowGroup.closeable, closeable = _rowGroup$closeable === void 0 ? true : _rowGroup$closeable;
  if (!hasVirtualRow || !closeable || !isVirtualRow(row2))
    return;
  row2.fold = !row2.fold;
  var copy = groupFullData.slice(0).map(toRaw);
  var index2 = copy.indexOf(toRaw(row2.children[0]));
  if (row2.fold) {
    if (index2 > -1) {
      copy.splice(index2, row2.children.length);
    }
  } else if (index2 === -1) {
    copy.splice.apply(copy, [copy.indexOf(toRaw(row2)) + 1, 0].concat(row2.children));
  }
  _vm.groupFullData = copy;
  _vm.handleTableData().then(_vm.recalculate);
};
var generateFixedClassName = function generateFixedClassName2(_ref39) {
  var $table = _ref39.$table, bodyElem = _ref39.bodyElem, leftList = _ref39.leftList, rightList = _ref39.rightList;
  if (!$table || !bodyElem) {
    return;
  }
  var scrollLeft = bodyElem.scrollLeft;
  if (leftList.length) {
    if (scrollLeft === 0) {
      removeClass($table.$el, "tiny-grid-fixed__left");
    } else {
      addClass($table.$el, "tiny-grid-fixed__left");
    }
  }
  if (rightList.length) {
    var isShowRightFixed = bodyElem.scrollWidth - bodyElem.clientWidth - bodyElem.scrollLeft;
    if (isShowRightFixed === 0) {
      removeClass($table.$el, "tiny-grid-fixed__right");
    } else {
      addClass($table.$el, "tiny-grid-fixed__right");
    }
  }
};
var isOperateMouse = function isOperateMouse2($table) {
  return $table._isResize || $table.lastScrollTime && Date.now() < $table.lastScrollTime + $table.optimizeOpts.delayHover;
};
var classMap = {
  colEdit: "col__edit",
  colIndex: "col__index",
  colRadio: "col__radio",
  colSelection: "col__selection",
  colEllipsis: "col__ellipsis",
  editVisible: "edit__visible",
  fixedColumn: "fixed__column",
  colDirty: "col__dirty",
  colActived: "col__actived",
  rowNew: "row__new",
  rowSelected: "row__selected",
  rowRadio: "row__radio",
  rowActived: "row__actived",
  isScrollload: "is__scrollload"
};
var renderBorder = function renderBorder2(h2, type) {
  var vnTop = h2("span", {
    class: "tiny-grid-border-top",
    ref: type + "Top"
  });
  var vnRight = h2("span", {
    class: "tiny-grid-border-right",
    ref: type + "Right"
  });
  var vnBottom = h2("span", {
    class: "tiny-grid-border-bottom",
    ref: type + "Bottom"
  });
  var vnLeft = h2("span", {
    class: "tiny-grid-border-left",
    ref: type + "Left"
  });
  return h2("div", {
    class: "tiny-grid-" + type + "ed-borders",
    ref: type + "Borders"
  }, [vnTop, vnRight, vnBottom, vnLeft]);
};
function buildColumnProps(args) {
  var _ref40, _column$style3, _column$style4;
  var attrs = args.attrs, cellAlign = args.cellAlign, cellClassName = args.cellClassName, className = args.className, column = args.column, columnActived = args.columnActived, columnIndex = args.columnIndex, columnKey = args.columnKey, editor = args.editor;
  var fixedHiddenColumn = args.fixedHiddenColumn, hasEllipsis = args.hasEllipsis, isDirty = args.isDirty, params = args.params, tdOns = args.tdOns, validError = args.validError, validated = args.validated, columnStore = args.columnStore;
  var leftList = columnStore.leftList, rightList = columnStore.rightList;
  return {
    class: ["tiny-grid-body__column", column.id, (_ref40 = {}, _ref40["col__" + cellAlign] = cellAlign, _ref40[classMap.colEdit] = editor, _ref40[classMap.colIndex] = column.type === "index", _ref40[classMap.colRadio] = column.type === "radio", _ref40[classMap.colSelection] = column.type === "selection", _ref40[classMap.colEllipsis] = hasEllipsis, _ref40[classMap.editVisible] = editor && editor.type === "visible", _ref40[classMap.fixedColumn] = fixedHiddenColumn, _ref40[classMap.colDirty] = isDirty, _ref40[classMap.colActived] = columnActived, _ref40["col__valid-error"] = validError && validated, _ref40["col__valid-success"] = columnActived ? !validError && !validated : isDirty && !validated, _ref40["col__treenode"] = column.treeNode, _ref40["fixed-left-last__column"] = column.fixed === "left" && leftList[leftList.length - 1] === column, _ref40["fixed-right-first__column"] = column.fixed === "right" && rightList[0] === column, _ref40), getClass(className, params), getClass(cellClassName, params)],
    style: fixedHiddenColumn ? {
      left: ((_column$style3 = column.style) == null ? void 0 : _column$style3.left) + "px",
      right: ((_column$style4 = column.style) == null ? void 0 : _column$style4.right) + "px"
    } : null,
    key: columnKey ? column.id : columnIndex,
    attrs,
    on: tdOns
  };
}
function buildColumnChildren(args) {
  var h2 = args.h, hasDefaultTip = args.hasDefaultTip, params = args.params, row2 = args.row, validError = args.validError, column = args.column, $table = args.$table;
  var showEllipsis = args.showEllipsis, showTip = args.showTip, showTitle = args.showTitle, showTooltip2 = args.showTooltip, validStore = args.validStore;
  var dropConfig = args.dropConfig || {};
  var validOpts2 = $table.validOpts;
  var cellNode = [];
  var validNode = null;
  if (hasDefaultTip) {
    validNode = [null];
    if (validError) {
      validNode = h2("div", {
        class: "tiny-grid-cell__valid",
        style: validStore.rule && validStore.rule.width ? {
          width: validStore.rule.width + "px"
        } : null
      }, [validOpts2 != null && validOpts2.icon ? h2(validOpts2.icon, {
        class: "tiny-grid-cell__valid-icon"
      }) : null, h2("span", {
        class: "tiny-grid-cell__valid-msg",
        attrs: {
          title: validStore.content
        }
      }, validStore.content)]);
    }
  }
  cellNode = [dropConfig.rowHandle === "index" && column.type === "index" ? h2("div", {
    class: "row__drop-handle"
  }) : null, h2(
    "div",
    {
      class: ["tiny-grid-cell", {
        "tiny-grid-cell__title": showTitle,
        "tiny-grid-cell__tooltip": showTooltip2 || showTip,
        "tiny-grid-cell__ellipsis": showEllipsis
      }],
      attrs: {
        title: showTitle ? getCellLabel(row2, column, params) : null
      }
    },
    // 调用column组件的renderCell渲染单元格内部的内容
    // 如果不是表格形态，就只保留表格结构（到tiny-grid-cell），不渲染具体的内容
    $table.isShapeTable ? column.renderCell(h2, params) : null
  ), validNode];
  return cellNode;
}
function modifyCellAlign(_ref41) {
  var cellAlign = _ref41.cellAlign, column = _ref41.column;
  if (~["radio", "selection", "index"].indexOf(column.type)) {
    cellAlign = cellAlign || "center";
  }
  return cellAlign;
}
function modifyShowEllipsis(_ref42) {
  var hasEllipsis = _ref42.hasEllipsis, scrollXLoad = _ref42.scrollXLoad, scrollYLoad = _ref42.scrollYLoad, showEllipsis = _ref42.showEllipsis;
  if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {
    showEllipsis = true;
  }
  return showEllipsis;
}
function addListenerMouseenter(_ref43) {
  var $table = _ref43.$table, evntParams = _ref43.evntParams, showTip = _ref43.showTip, showTitle = _ref43.showTitle, showTooltip2 = _ref43.showTooltip, tableListeners = _ref43.tableListeners, tdOns = _ref43.tdOns;
  if (showTip || showTitle || showTooltip2 || tableListeners["cell-mouseenter"]) {
    tdOns.mouseenter = function(event) {
      if (isOperateMouse($table)) {
        return;
      }
      evntParams.cell = event.currentTarget;
      if (showTitle) {
        updateCellTitle(event);
      } else if (showTip || showTooltip2) {
        $table.triggerTooltipEvent(event, evntParams);
      }
      _emitEvent($table, "cell-mouseenter", [evntParams, event]);
    };
  }
}
function addListenerMouseleave(_ref44) {
  var $table = _ref44.$table, evntParams = _ref44.evntParams, showTip = _ref44.showTip, showTooltip2 = _ref44.showTooltip, tableListeners = _ref44.tableListeners, tdOns = _ref44.tdOns;
  if (showTip || showTooltip2 || tableListeners["cell-mouseleave"]) {
    tdOns.mouseleave = function(event) {
      if (isOperateMouse($table)) {
        return;
      }
      if (showTip || showTooltip2) {
        $table.clostTooltip();
      }
      evntParams.cell = event.currentTarget;
      _emitEvent($table, "cell-mouseleave", [evntParams, event]);
    };
  }
}
function addListenerMousedown(_ref45) {
  var $table = _ref45.$table, evntParams = _ref45.evntParams, mouseConfig = _ref45.mouseConfig, tdOns = _ref45.tdOns;
  if (mouseConfig.checked || mouseConfig.selected) {
    tdOns.mousedown = function(event) {
      evntParams.cell = event.currentTarget;
      $table.triggerCellMousedownEvent(event, evntParams);
    };
  }
}
function addListenerClick(args) {
  var $table = args.$table, column = args.column, editConfig = args.editConfig, editor = args.editor, evntParams = args.evntParams, expandConfig = args.expandConfig, highlightCurrentRow = args.highlightCurrentRow;
  var mouseConfig = args.mouseConfig, radioConfig = args.radioConfig, selectConfig = args.selectConfig, tableListeners = args.tableListeners, tdOns = args.tdOns, treeConfig = args.treeConfig;
  var satisfy = function satisfy2(equal, trigger) {
    return trigger === "row" || equal(column) && trigger === "cell";
  };
  if (highlightCurrentRow || tableListeners["cell-click"] || mouseConfig.checked || editor && editConfig || satisfy(function() {
    return true;
  }, expandConfig.trigger) || satisfy(function(_ref46) {
    var type = _ref46.type;
    return type === "radio";
  }, radioConfig.trigger) || satisfy(function(_ref47) {
    var type = _ref47.type;
    return type === "selection";
  }, selectConfig.trigger) || satisfy(function(_ref48) {
    var treeNode = _ref48.treeNode;
    return treeNode;
  }, treeConfig.trigger)) {
    tdOns.click = function(event) {
      evntParams.cell = event.currentTarget;
      $table.triggerCellClickEvent(event, evntParams);
    };
  }
}
function getRowSpanMethod(rowSpan) {
  return function(_ref49) {
    var row2 = _ref49.row, $rowIndex = _ref49.$rowIndex, column = _ref49.column, data8 = _ref49.data;
    var fields = [];
    if (rowSpan) {
      rowSpan.forEach(function(item) {
        column.visible && fields.push(item.field);
      });
    }
    var cellVal = row2[column.property];
    if (cellVal && ~fields.indexOf(column.property)) {
      var prevSiblingRow = data8[$rowIndex - 1];
      var nextSiblingRow = data8[$rowIndex + 1];
      if (prevSiblingRow && prevSiblingRow[column.property] === cellVal) {
        return {
          rowspan: 0,
          colspan: 0
        };
      } else {
        var rowspanCount = 1;
        while (nextSiblingRow && nextSiblingRow[column.property] === cellVal) {
          nextSiblingRow = data8[++rowspanCount + $rowIndex];
        }
        if (rowspanCount > 1) {
          return {
            rowspan: rowspanCount,
            colspan: 1
          };
        }
      }
    }
  };
}
function addListenerDblclick(_ref50) {
  var $table = _ref50.$table, evntParams = _ref50.evntParams, tableListeners = _ref50.tableListeners, tdOns = _ref50.tdOns, triggerDblclick = _ref50.triggerDblclick;
  if (triggerDblclick || tableListeners["cell-dblclick"]) {
    tdOns.dblclick = function(event) {
      evntParams.cell = event.currentTarget;
      $table.triggerCellDBLClickEvent(event, evntParams);
    };
  }
}
function doSpan(_ref51) {
  var attrs = _ref51.attrs, params = _ref51.params, rowSpan = _ref51.rowSpan, spanMethod = _ref51.spanMethod;
  var rowSpanMethod = getRowSpanMethod(rowSpan);
  if (spanMethod || rowSpan) {
    var _ref52 = (spanMethod ? spanMethod(params) : rowSpanMethod(params)) || {}, _ref52$rowspan = _ref52.rowspan, rowspan = _ref52$rowspan === void 0 ? 1 : _ref52$rowspan, _ref52$colspan = _ref52.colspan, colspan = _ref52$colspan === void 0 ? 1 : _ref52$colspan;
    if (!rowspan || !colspan) {
      return false;
    }
    attrs.rowspan = rowspan;
    attrs.colspan = colspan;
  }
  return true;
}
function isCellDirty(_ref53) {
  var $table = _ref53.$table, column = _ref53.column, editConfig = _ref53.editConfig, isDirty = _ref53.isDirty, row2 = _ref53.row;
  var _ref54 = editConfig || {}, _ref54$showStatus = _ref54.showStatus, showStatus = _ref54$showStatus === void 0 ? false : _ref54$showStatus, _ref54$relationFields = _ref54.relationFields, relationFields = _ref54$relationFields === void 0 ? true : _ref54$relationFields;
  var canChange = relationFields === true || Array.isArray(relationFields) && relationFields.includes(column.property);
  if (editConfig && showStatus && column.property && (column.editor || relationFields && canChange)) {
    isDirty = $table.hasRowChange(row2, column.property);
  }
  return isDirty;
}
var setColumnEvents = function setColumnEvents2(args1) {
  var $columnIndex = args1.$columnIndex, $rowIndex = args1.$rowIndex, $table = args1.$table, column = args1.column, columnIndex = args1.columnIndex;
  var row2 = args1.row, rowIndex = args1.rowIndex, rowLevel = args1.rowLevel, seq = args1.seq;
  var editConfig = $table.editConfig, _$table$expandConfig = $table.expandConfig, expandConfig = _$table$expandConfig === void 0 ? {} : _$table$expandConfig;
  var _$table$radioConfig = $table.radioConfig, radioConfig = _$table$radioConfig === void 0 ? {} : _$table$radioConfig, allColumnOverflow = $table.showOverflow;
  var highlightCurrentRow = $table.highlightCurrentRow, _$table$mouseConfig2 = $table.mouseConfig, mouseConfig = _$table$mouseConfig2 === void 0 ? {} : _$table$mouseConfig2;
  var scrollXLoad = $table.scrollXLoad, scrollYLoad = $table.scrollYLoad, _$table$selectConfig = $table.selectConfig, selectConfig = _$table$selectConfig === void 0 ? {} : _$table$selectConfig;
  var tableListeners = $table.tableListeners, _$table$treeConfig = $table.treeConfig, treeConfig = _$table$treeConfig === void 0 ? {} : _$table$treeConfig;
  var tdOns = {};
  var fixedHiddenColumn = column.fixed;
  var editor = column.editor, showOverflow = column.showOverflow, showTip = column.showTip;
  var cellOverflow = isNull(showOverflow) ? allColumnOverflow : showOverflow;
  var showTitle = cellOverflow === "title";
  var showTooltip2 = cellOverflow === true || cellOverflow === "tooltip";
  var showEllipsis = cellOverflow === "ellipsis";
  var hasEllipsis = showTitle || showTooltip2 || showEllipsis;
  var triggerDblclick = editor && editConfig && editConfig.trigger === "dblclick";
  var commonParams = {
    $columnIndex,
    $rowIndex,
    $table,
    column,
    columnIndex
  };
  Object.assign(commonParams, {
    isHidden: fixedHiddenColumn,
    level: rowLevel,
    row: row2,
    rowIndex,
    seq
  });
  var evntParams = _extends({
    showTip
  }, commonParams);
  showEllipsis = modifyShowEllipsis({
    hasEllipsis,
    scrollXLoad,
    scrollYLoad,
    showEllipsis
  });
  addListenerMouseenter({
    $table,
    evntParams,
    showTip,
    showTitle,
    showTooltip: showTooltip2,
    tableListeners,
    tdOns
  });
  addListenerMouseleave({
    $table,
    evntParams,
    showTip,
    showTooltip: showTooltip2,
    tableListeners,
    tdOns
  });
  addListenerMousedown({
    $table,
    evntParams,
    mouseConfig,
    tdOns
  });
  var args = {
    $table,
    column,
    editConfig,
    editor,
    evntParams,
    expandConfig,
    highlightCurrentRow
  };
  Object.assign(args, {
    mouseConfig,
    radioConfig,
    selectConfig,
    tableListeners,
    tdOns,
    treeConfig
  });
  addListenerClick(args);
  addListenerDblclick({
    $table,
    evntParams,
    tableListeners,
    tdOns,
    triggerDblclick
  });
  return {
    commonParams,
    args,
    cellOverflow,
    showTitle,
    showTooltip: showTooltip2,
    showEllipsis,
    hasEllipsis,
    tdOns,
    fixedHiddenColumn
  };
};
function renderColumn(args1) {
  var $seq = args1.$seq, $table = args1.$table, column = args1.column, columnIndex = args1.columnIndex;
  var h2 = args1.h, row2 = args1.row;
  var allAlign = $table.align, cellClassName = $table.cellClassName, columnKey = $table.columnKey, editConfig = $table.editConfig;
  var editRules = $table.editRules, editStore = $table.editStore, rowId = $table.rowId, rowSpan = $table.rowSpan, height2 = $table.height;
  var tableData = $table.tableData, validOpts2 = $table.validOpts, validStore = $table.validStore, validatedMap = $table.validatedMap, spanMethod = $table.spanMethod, columnStore = $table.columnStore, _$table$dropConfig = $table.dropConfig, dropConfig = _$table$dropConfig === void 0 ? {} : _$table$dropConfig;
  var _ref55 = {}, isDirty = _ref55.isDirty, _ref55$attrs = _ref55.attrs, attrs = _ref55$attrs === void 0 ? {
    "data-colid": column.id
  } : _ref55$attrs;
  var isMessageDefault = validOpts2.isMessageDefault, isMessageInline = validOpts2.isMessageInline;
  var actived = editStore.actived;
  var validated = validatedMap[column.id + "-" + row2[rowId]];
  var validError = validStore.row === row2 && validStore.column === column;
  var hasDefaultTip = editRules && (isMessageDefault ? height2 || tableData.length > 1 : isMessageInline);
  var align = column.align, editor = column.editor, showTip = column.showTip;
  var className = column.own.className;
  var cellAlign = align || allAlign;
  var columnActived = editConfig && editor && actived.row === row2 && (actived.column === column || editConfig.mode === "row");
  var _setColumnEvents = setColumnEvents(args1), commonParams = _setColumnEvents.commonParams, args = _setColumnEvents.args, showTitle = _setColumnEvents.showTitle, showTooltip2 = _setColumnEvents.showTooltip, showEllipsis = _setColumnEvents.showEllipsis, _setColumnEvents$tdOn = _setColumnEvents.tdOns, tdOns = _setColumnEvents$tdOn === void 0 ? {} : _setColumnEvents$tdOn, hasEllipsis = _setColumnEvents.hasEllipsis, fixedHiddenColumn = _setColumnEvents.fixedHiddenColumn;
  var params = _extends({
    $seq,
    data: tableData
  }, commonParams);
  cellAlign = modifyCellAlign({
    cellAlign,
    column
  });
  if (!doSpan({
    attrs,
    params,
    rowSpan,
    spanMethod
  })) {
    return;
  }
  isDirty = isCellDirty({
    $table,
    column,
    editConfig,
    isDirty,
    row: row2
  });
  args = {
    attrs,
    cellAlign,
    cellClassName,
    className,
    column,
    columnActived,
    columnIndex,
    columnKey,
    editor,
    columnStore
  };
  Object.assign(args, {
    fixedHiddenColumn,
    hasEllipsis,
    isDirty,
    params,
    tdOns,
    validError,
    validated
  });
  var colProps = buildColumnProps(args);
  args = {
    column,
    h: h2,
    hasDefaultTip,
    params,
    row: row2,
    $table
  };
  Object.assign(args, {
    showEllipsis,
    showTip,
    showTitle,
    showTooltip: showTooltip2,
    validError,
    validStore,
    dropConfig
  });
  var colChildren = buildColumnChildren(args);
  return h2("td", colProps, colChildren);
}
function renderRowGroupTds(args) {
  var $table = args.$table, closeable = args.closeable, currentIcon = args.currentIcon, render18 = args.render, renderGroupCell = args.renderGroupCell;
  var row2 = args.row, tableColumn3 = args.tableColumn, tds = args.tds, title = args.title;
  var targetColumn = $table._rowGroupTargetColumn;
  var value = row2.value || "";
  for (var _index2 in tableColumn3) {
    if (Object.prototype.hasOwnProperty.call(tableColumn3, _index2)) {
      var column = tableColumn3[_index2];
      var columnIndex = $table.getColumnIndex(column);
      var header = title || formatText(getFuncText(column.title), 1) || value;
      var params = {
        value,
        header,
        children: row2.children,
        expand: !row2.fold,
        row: row2,
        column,
        columnIndex
      };
      if (column._rowGroupColspan <= 0) {
        continue;
      }
      if (column === targetColumn) {
        var groupTitleVNode = void 0;
        if (render18) {
          groupTitleVNode = render18(h, params);
        } else {
          groupTitleVNode = [createVNode("span", {
            "class": "row-group-title"
          }, [header]), ":" + value, createVNode("span", {
            "class": "tiny-badge"
          }, [row2.children.length])];
        }
        tds.push(createVNode("td", {
          "class": ["tiny-grid-body__column td-group", column.id],
          "colspan": column._rowGroupColspan
        }, [createVNode("div", {
          "class": "tiny-grid-cell-group"
        }, [[closeable ? currentIcon : null].concat(groupTitleVNode)])]));
      } else {
        tds.push(createVNode("td", {
          "class": ["tiny-grid-body__column td-placeholder", column.id],
          "colspan": column._rowGroupColspan
        }, [createVNode("div", {
          "class": "tiny-grid-cell-group"
        }, [renderGroupCell ? renderGroupCell(h, params) : null])]));
      }
    }
  }
}
function renderRowGroupData(_ref56) {
  var $table = _ref56.$table, virtualRow = _ref56.virtualRow, row2 = _ref56.row, rowGroup = _ref56.rowGroup, rowid2 = _ref56.rowid, rows = _ref56.rows, tableColumn3 = _ref56.tableColumn;
  if (!virtualRow) {
    return;
  }
  var title = rowGroup.title, _rowGroup$closeable2 = rowGroup.closeable, closeable = _rowGroup$closeable2 === void 0 ? true : _rowGroup$closeable2, render18 = rowGroup.render, renderGroupCell = rowGroup.renderGroupCell, className = rowGroup.className;
  var _ref57 = {}, _ref57$tds = _ref57.tds, tds = _ref57$tds === void 0 ? [] : _ref57$tds, _ref57$ChevronRight = _ref57.ChevronRight, ChevronRight = _ref57$ChevronRight === void 0 ? iconChevronRight() : _ref57$ChevronRight, _ref57$ChevronDown = _ref57.ChevronDown, ChevronDown = _ref57$ChevronDown === void 0 ? iconChevronDown() : _ref57$ChevronDown;
  var currentIcon = row2.fold ? createVNode(ChevronRight, {
    "class": "tiny-svg-size"
  }, null) : createVNode(ChevronDown, {
    "class": "tiny-svg-size"
  }, null);
  var args = {
    $table,
    closeable,
    currentIcon,
    render: render18,
    renderGroupCell
  };
  Object.assign(args, {
    row: row2,
    tableColumn: tableColumn3,
    tds,
    title
  });
  renderRowGroupTds(args);
  var onClick = function onClick2(event) {
    handleRowGroupFold(row2, $table);
    if ($table.tableListeners["toggle-group-change"]) {
      _emitEvent($table, "toggle-group-change", [{
        $table,
        row: row2
      }, event]);
    }
  };
  rows.push(createVNode("tr", {
    "class": ["tiny-grid-body__row", "group", className, {
      hover: row2.hover
    }],
    "data-rowid": rowid2,
    "onMouseout": function onMouseout() {
      return row2.hover = false;
    },
    "onMouseover": function onMouseover() {
      return row2.hover = true;
    },
    "onClick": onClick
  }, [tds]));
}
function renderRow(args) {
  var _ref58;
  var $rowIndex = args.$rowIndex, $seq = args.$seq, $table = args.$table, _vm = args._vm, editStore = args.editStore;
  var h2 = args.h, row2 = args.row, rowActived = args.rowActived;
  var rowClassName = args.rowClassName, rowIndex = args.rowIndex, rowKey = args.rowKey, rowLevel = args.rowLevel, rowid2 = args.rowid, rows = args.rows;
  var seq = args.seq, trOn = args.trOn, isNotRenderRow = args.isNotRenderRow;
  var selection = $table.selection, tableColumn3 = $table.tableColumn, treeConfig = $table.treeConfig, selectRow = $table.selectRow;
  if (isNotRenderRow) {
    return;
  }
  rows.push(h2("tr", {
    class: ["tiny-grid-body__row", (_ref58 = {}, _ref58["row__level-" + rowLevel] = treeConfig, _ref58[classMap.rowNew] = editStore.insertList.includes(row2), _ref58[classMap.rowSelected] = selection.includes(row2), _ref58[classMap.rowRadio] = selectRow === row2, _ref58[classMap.rowActived] = rowActived, _ref58), rowClassName ? isFunction(rowClassName) ? rowClassName({
      $table,
      $seq,
      seq,
      rowLevel,
      row: row2,
      rowIndex,
      $rowIndex
    }) : rowClassName : ""],
    attrs: {
      "data-rowid": rowid2
    },
    key: rowKey || treeConfig ? rowid2 : $rowIndex,
    on: trOn
  }, tableColumn3.map(function(column, $columnIndex) {
    var columnIndex = $table.getColumnIndex(column);
    var args1 = {
      $columnIndex,
      $rowIndex,
      $seq,
      $table,
      _vm,
      column,
      columnIndex
    };
    Object.assign(args1, {
      h: h2,
      row: row2,
      rowIndex,
      rowLevel,
      seq
    });
    return renderColumn(args1);
  })));
}
function renderRowAfter(_ref59) {
  var $table = _ref59.$table, h2 = _ref59.h, row2 = _ref59.row, rowIndex = _ref59.rowIndex, rows = _ref59.rows, tableData = _ref59.tableData;
  typeof $table.renderRowAfter === "function" && $table.renderRowAfter({
    rows,
    row: row2,
    data: tableData,
    rowIndex,
    renderColumn
  }, h2);
}
function renderRowExpanded(args) {
  var $table = args.$table, expandMethod = args.expandMethod, expandeds = args.expandeds, h2 = args.h, row2 = args.row, rowIndex = args.rowIndex;
  var rowLevel = args.rowLevel, rowid2 = args.rowid, rows = args.rows, seq = args.seq, tableColumn3 = args.tableColumn, trOn = args.trOn, treeConfig = args.treeConfig;
  if (expandeds.length && expandeds.includes(row2) && (typeof expandMethod === "function" ? expandMethod(row2, rowLevel) : true)) {
    var column = find(tableColumn3, function(column2) {
      return column2.type === "expand";
    });
    var columnIndex = $table.getColumnIndex(column);
    var cellStyle;
    if (treeConfig) {
      cellStyle = {
        paddingLeft: rowLevel * (treeConfig.indent || 16) + 30 + "px"
      };
    }
    if (column) {
      var renderData = {
        $table,
        seq,
        row: row2,
        rowIndex,
        column,
        columnIndex,
        level: rowLevel
      };
      rows.push(h2("tr", {
        class: "tiny-grid-body__expanded-row",
        key: "expand_" + rowid2,
        on: trOn
      }, [h2("td", {
        class: "tiny-grid-body__expanded-column",
        attrs: {
          colspan: tableColumn3.length
        }
      }, [h2("div", {
        class: "tiny-grid-body__expanded-cell",
        style: cellStyle
      }, [column.renderData(h2, renderData)])])]));
    }
  }
}
function renderRowTree(args, renderRows2) {
  var $seq = args.$seq, $table = args.$table, _vm = args._vm, h2 = args.h, row2 = args.row, rowLevel = args.rowLevel;
  var rows = args.rows, seq = args.seq, seqCount = args.seqCount, tableColumn3 = args.tableColumn, treeConfig = args.treeConfig, treeExpandeds = args.treeExpandeds;
  var scrollYLoad = $table.scrollYLoad;
  if (!treeConfig || !treeExpandeds.length) {
    return;
  }
  var childrenKey = getTreeChildrenKey({
    scrollYLoad,
    treeConfig
  });
  var rowChildren = row2[childrenKey];
  if (!rowChildren || !rowChildren.length || !~treeExpandeds.indexOf(row2)) {
    return;
  }
  var args1 = {
    h: h2,
    _vm,
    $table,
    // $seq 树表特有序号：1 --> 1.1
    $seq: $seq ? $seq + "." + seq : "" + seq,
    rowLevel: rowLevel + 1,
    tableData: rowChildren,
    tableColumn: tableColumn3,
    seqCount
  };
  rows.push.apply(rows, renderRows2(args1));
}
function renderRows(_ref60) {
  var h2 = _ref60.h, _vm = _ref60._vm, $table = _ref60.$table, $seq = _ref60.$seq, rowLevel = _ref60.rowLevel, tableData = _ref60.tableData, tableColumn3 = _ref60.tableColumn, seqCount = _ref60.seqCount;
  var rowKey = $table.rowKey, rowClassName = $table.rowClassName, treeConfig = $table.treeConfig, treeExpandeds = $table.treeExpandeds;
  var groupData = $table.groupData, scrollYLoad = $table.scrollYLoad, scrollYStore = $table.scrollYStore, editConfig = $table.editConfig, editStore = $table.editStore, _$table$expandConfig2 = $table.expandConfig, expandConfig = _$table$expandConfig2 === void 0 ? {} : _$table$expandConfig2;
  var expandeds = $table.expandeds, selection = $table.selection, rowGroup = $table.rowGroup, hasVirtualRow = $table.hasVirtualRow, afterFullData = $table.afterFullData, treeOrdered = $table.treeOrdered;
  var rows = [];
  var expandMethod = expandConfig.activeMethod;
  var startIndex = scrollYStore.startIndex;
  var isOrdered = treeConfig ? Boolean(treeOrdered) : false;
  seqCount = seqCount || {
    value: 0
  };
  var treeShowKey = getTreeShowKey({
    scrollYLoad,
    treeConfig
  });
  var _ref61 = treeConfig || {}, hideMethod = _ref61.hideMethod;
  tableData.forEach(function(row2, $rowIndex) {
    var trOn = {};
    var rowIndex = $rowIndex;
    var actived = editStore.actived;
    var rowActived = editConfig && actived.row === row2;
    var virtualRow = isVirtualRow(row2);
    var isNotRenderRow = treeShowKey && !row2[treeShowKey] || hideMethod && hideMethod(row2, rowLevel) || virtualRow;
    if (!isNotRenderRow) {
      seqCount.value = seqCount.value + 1;
    }
    var seq = isOrdered ? seqCount.value : rowIndex + 1;
    if (scrollYLoad) {
      seq += startIndex;
    }
    if (hasVirtualRow && !virtualRow) {
      seq = afterFullData.indexOf(row2) + 1;
    }
    rowIndex = $table.getRowIndex(row2);
    var rowid2 = getRowid($table, row2);
    renderRowGroupData({
      $table,
      virtualRow,
      row: row2,
      rowGroup,
      rowid: rowid2,
      rows,
      tableColumn: tableColumn3
    });
    var args = {
      $rowIndex,
      $seq,
      $table,
      _vm,
      editStore,
      h: h2,
      row: row2,
      rowActived
    };
    Object.assign(args, {
      rowClassName,
      rowIndex,
      rowKey,
      rowLevel,
      rowid: rowid2,
      rows,
      selection,
      seq
    });
    Object.assign(args, {
      tableColumn: tableColumn3,
      trOn,
      treeConfig,
      isNotRenderRow
    });
    renderRow(args);
    renderRowAfter({
      $table,
      h: h2,
      row: row2,
      rowIndex,
      rows,
      tableData
    });
    args = {
      $table,
      expandMethod,
      expandeds,
      h: h2,
      row: row2,
      rowIndex,
      rowLevel
    };
    Object.assign(args, {
      rowid: rowid2,
      rows,
      seq,
      tableColumn: tableColumn3,
      trOn,
      treeConfig
    });
    renderRowExpanded(args);
    args = {
      $seq,
      $table,
      _vm,
      h: h2,
      row: row2,
      rowLevel,
      rows
    };
    Object.assign(args, {
      seq,
      seqCount,
      tableColumn: tableColumn3,
      treeConfig,
      treeExpandeds
    });
    renderRowTree(args, renderRows);
  });
  return rows;
}
function renderDefEmpty(h2) {
  return [h2("p", {
    class: "tiny-grid__empty-img"
  }), h2("span", {
    class: "tiny-grid__empty-text"
  }, GlobalConfig$2.i18n("ui.grid.emptyText"))];
}
var syncHeaderAndFooterScroll = function syncHeaderAndFooterScroll2(_ref62) {
  var bodyElem = _ref62.bodyElem, footerElem = _ref62.footerElem, headerElem = _ref62.headerElem, isX = _ref62.isX;
  if (isX && headerElem) {
    headerElem.scrollLeft = bodyElem.scrollLeft;
  }
  if (isX && footerElem) {
    footerElem.scrollLeft = bodyElem.scrollLeft;
  }
};
function doScrollLoad(_ref63) {
  var $table = _ref63.$table, _vm = _ref63._vm, bodyElem = _ref63.bodyElem, event = _ref63.event, headerElem = _ref63.headerElem, isX = _ref63.isX, isY = _ref63.isY, scrollLeft = _ref63.scrollLeft, scrollXLoad = _ref63.scrollXLoad, scrollYLoad = _ref63.scrollYLoad;
  var isScrollX = scrollXLoad && isX;
  if (isScrollX) {
    $table.triggerScrollXEvent(event);
  }
  if (isScrollX && headerElem && scrollLeft + bodyElem.clientWidth >= bodyElem.scrollWidth) {
    _vm.$nextTick(function() {
      if (bodyElem.scrollLeft !== headerElem.scrollLeft) {
        headerElem.scrollLeft = bodyElem.scrollLeft;
      }
    });
  }
  if (scrollYLoad && isY) {
    $table.triggerScrollYEvent(event);
  }
}
function renderEmptyBlock(_ref64) {
  var $slots = _ref64.$slots, $table = _ref64.$table, _vm = _ref64._vm, isCenterCls = _ref64.isCenterCls, renderEmpty = _ref64.renderEmpty, tableData = _ref64.tableData;
  return h("div", {
    class: "tiny-grid__empty-block" + (tableData.length ? "" : " is__visible") + " " + isCenterCls,
    ref: "emptyBlock"
  }, $slots.empty ? $slots.empty.call(_vm, {
    $table
  }, h) : renderEmpty ? [renderEmpty(h, $table)] : renderDefEmpty(h));
}
function renderBorders(_ref65) {
  var keyboardConfig = _ref65.keyboardConfig, mouseConfig = _ref65.mouseConfig;
  var res = null;
  if (mouseConfig.checked || keyboardConfig.isCut) {
    res = h("div", {
      class: "tiny-grid__borders"
    }, [mouseConfig.checked ? renderBorder(h, "check") : null, keyboardConfig.isCut ? renderBorder(h, "copy") : null]);
  }
  return res;
}
function renderTable(_ref66) {
  var $table = _ref66.$table, _vm = _ref66._vm, tableColumn3 = _ref66.tableColumn, tableData = _ref66.tableData, tableLayout = _ref66.tableLayout;
  return h("table", {
    class: "tiny-grid__body",
    style: {
      tableLayout
    },
    attrs: {
      cellspacing: 0,
      cellpadding: 0,
      border: 0
    },
    ref: "table"
  }, [
    // 渲染colgroup标签，设置表格列宽度，保证表头的表格和表体的表格每列宽相同
    h("colgroup", {
      ref: "colgroup"
    }, tableColumn3.map(function(column, columnIndex) {
      return h("col", {
        attrs: {
          name: column.id
        },
        key: columnIndex
      });
    })),
    // 表格每次数据改变都会触发renderRow重新执行，会造成性能损失，此处待优化
    h("tbody", {
      ref: "tbody"
    }, renderRows({
      h,
      _vm,
      $table,
      $seq: "",
      rowLevel: 0,
      tableData,
      tableColumn: tableColumn3
    }))
  ]);
}
function renderYSpace(_ref67) {
  var scrollLoad = _ref67.scrollLoad;
  return h("div", {
    class: "tiny-grid-body__y-space visual",
    ref: "ySpace"
  }, [scrollLoad ? h("div", {
    class: "tiny-grid-body__y-scrollbar"
  }) : [null]]);
}
var Body = /* @__PURE__ */ defineComponent({
  name: $prefix + "GridBody",
  props: {
    collectColumn: Array,
    fixedColumn: Array,
    isGroup: Boolean,
    size: String,
    tableColumn: Array,
    tableData: Array,
    visibleColumn: Array
  },
  mounted: function mounted3() {
    var $el = this.$el, $table = this.$parent, $refs = this.$refs;
    var elemStore = $table.elemStore, dropConfig = $table.dropConfig;
    var keyPrefix = "main-body-";
    elemStore[keyPrefix + "wrapper"] = $el;
    elemStore[keyPrefix + "table"] = $refs.table;
    elemStore[keyPrefix + "colgroup"] = $refs.colgroup;
    elemStore[keyPrefix + "list"] = $refs.tbody;
    elemStore[keyPrefix + "xSpace"] = $refs.xSpace;
    elemStore[keyPrefix + "ySpace"] = $refs.ySpace;
    elemStore[keyPrefix + "emptyBlock"] = $refs.emptyBlock;
    $el.onscroll = this.scrollEvent;
    $el._onscroll = this.scrollEvent;
    if (dropConfig) {
      var plugin = dropConfig.plugin, _dropConfig$row = dropConfig.row, row2 = _dropConfig$row === void 0 ? true : _dropConfig$row;
      plugin && row2 && (this.rowSortable = $table.rowDrop(this.$el));
    }
  },
  beforeUnmount: function beforeUnmount2() {
    this.rowSortable && this.rowSortable.destroy();
  },
  updated: function updated() {
    var $table = this.$parent, fixedType = this.fixedType;
    !fixedType && $table.updateTableBodyHeight();
  },
  setup: function setup3(props, _ref68) {
    var slots = _ref68.slots;
    hooks.onBeforeUnmount(function() {
      var table = hooks.getCurrentInstance().proxy;
      table.$el._onscroll = null;
      table.$el.onscroll = null;
    });
    return {
      slots
    };
  },
  render: function render3() {
    var _ref69;
    var $table = this.$parent;
    var $grid = $table.$grid, isCenterEmpty = $table.isCenterEmpty, _$table$keyboardConfi = $table.keyboardConfig, keyboardConfig = _$table$keyboardConfi === void 0 ? {} : _$table$keyboardConfi, _$table$mouseConfig3 = $table.mouseConfig, mouseConfig = _$table$mouseConfig3 === void 0 ? {} : _$table$mouseConfig3, renderEmpty = $table.renderEmpty;
    var scrollLoad = $table.scrollLoad, tableColumn3 = $table.tableColumn, tableData = $table.tableData, tableLayout = $table.tableLayout;
    var $slots = $grid.slots;
    var isCenterCls = isCenterEmpty ? "is__center" : "";
    return h("div", {
      ref: "body",
      class: ["tiny-grid__body-wrapper", "body__wrapper", (_ref69 = {}, _ref69[classMap.isScrollload] = scrollLoad, _ref69)]
    }, [
      // 表格主体内容x轴方向虚拟滚动条占位元素
      h("div", {
        class: "tiny-grid-body__x-space",
        ref: "xSpace"
      }),
      renderYSpace({
        scrollLoad
      }),
      renderTable({
        $table,
        _vm: this,
        tableColumn: tableColumn3,
        tableData,
        tableLayout
      }),
      // 开启鼠标或者配置项选中边框线
      renderBorders({
        keyboardConfig,
        mouseConfig
      }),
      // 空数据
      renderEmptyBlock({
        $slots,
        $table,
        _vm: this,
        isCenterCls,
        renderEmpty,
        tableData
      })
    ]);
  },
  methods: {
    // 滚动处理，如果存在列固定右侧，同步更新滚动状态
    scrollEvent: function scrollEvent2(event) {
      var $table = this.$parent;
      var $refs = $table.$refs, lastScrollLeft = $table.lastScrollLeft, lastScrollTop = $table.lastScrollTop, scrollXLoad = $table.scrollXLoad, scrollYLoad = $table.scrollYLoad, columnStore = $table.columnStore;
      var leftList = columnStore.leftList, rightList = columnStore.rightList;
      var tableBody = $refs.tableBody, tableFooter = $refs.tableFooter, tableHeader = $refs.tableHeader;
      var headerElem = tableHeader ? tableHeader.$el : null;
      var bodyElem = tableBody.$el;
      var footerElem = tableFooter ? tableFooter.$el : null;
      var scrollLeft = bodyElem.scrollLeft;
      var scrollTop = bodyElem.scrollTop;
      var isY = scrollTop !== lastScrollTop;
      var isX = scrollLeft !== lastScrollLeft;
      $table.lastScrollTime = Date.now();
      $table.lastScrollLeft = scrollLeft;
      $table.lastScrollTop = scrollTop;
      $table.scrollDirection = isX ? "X" : "Y";
      syncHeaderAndFooterScroll({
        bodyElem,
        footerElem,
        headerElem,
        isX
      });
      if (leftList.length || rightList.length) {
        generateFixedClassName({
          $table,
          bodyElem,
          leftList,
          rightList
        });
      }
      doScrollLoad({
        $table,
        _vm: this,
        bodyElem,
        event,
        headerElem,
        isX,
        isY,
        scrollLeft,
        scrollXLoad,
        scrollYLoad
      });
      _emitEvent($table, "scroll", [{
        type: "body",
        scrollTop,
        scrollLeft,
        isX,
        isY,
        $table
      }, event]);
    }
  }
});
Body.install = function(Vue) {
  Vue.component(Body.name, Body);
};
var Radio = defineComponent({
  name: $prefix + "GridRadio",
  emits: ["update:modelValue", "change"],
  props: {
    modelValue: [String, Number],
    label: [String, Number],
    disabled: Boolean,
    name: String,
    size: String
  },
  directives: {
    AutoTip
  },
  computed: {
    vSize: function vSize() {
      return this.size || this.$parent.size || this.$parent.vSize;
    }
  },
  setup: function setup4(props, _ref70) {
    var slots = _ref70.slots;
    return {
      slots
    };
  },
  render: function render4() {
    var _ref71, _this2 = this;
    var disabled = this.disabled, vSize4 = this.vSize, modelValue = this.modelValue, label = this.label, name = this.name;
    var $slots = this.slots;
    var disableClass = "disabled";
    var labelContent = function labelContent2() {
      var content = h("span", {
        class: "tiny-grid-radio__label",
        directives: isVue2 ? [{
          name: "AutoTip"
        }] : null
      }, $slots.default());
      if (!isVue2) {
        hooks.withDirectives(content, [[AutoTip]]);
      }
      return content;
    };
    return h("label", {
      class: ["tiny-grid-radio", (_ref71 = {}, _ref71["size__" + vSize4] = vSize4, _ref71["is__" + disableClass] = disabled, _ref71)]
    }, [h("input", {
      attrs: {
        type: "radio",
        name,
        disabled
      },
      domProps: {
        checked: modelValue === label
      },
      on: {
        change: function change(event) {
          if (!disabled) {
            _this2.$emit("update:modelValue", label);
            _this2.$emit("change", label, event);
          }
        }
      }
    }), h("span", {
      class: "tiny-grid-radio__icon"
    }, [h(iconRadio(), {
      class: ["tiny-svg-size", "icon-radio"]
    }), h(iconRadioselected(), {
      class: ["tiny-svg-size", "icon-radio-selected"]
    })]), $slots.default ? labelContent() : null]);
  }
});
Radio.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
$install(Radio);
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var renderInputArgs = function renderInputArgs2(_ref72) {
  var _vm = _ref72._vm, inputFilter = _ref72.inputFilter;
  var isAddbyProgram = false;
  if (typeof inputFilter.relations_addby !== "undefined") {
    isAddbyProgram = inputFilter.relations_addby === "program";
  }
  var inputRelations;
  if (isAddbyProgram) {
    inputRelations = inputFilter.relations_backup;
  } else {
    inputRelations = inputFilter.relations;
  }
  if (!inputRelations) {
    inputRelations = [{
      label: _vm.i18n("ui.grid.filter.prefix"),
      value: "startwith"
    }, {
      label: _vm.i18n("ui.grid.filter.equal"),
      value: "equals"
    }, {
      label: _vm.i18n("ui.grid.filter.include"),
      value: "contains"
    }];
  }
  return {
    isAddbyProgram,
    inputRelations
  };
};
var renderInputProps = function renderInputProps2(_ref73) {
  var _on3;
  var InputComponent = _ref73.InputComponent, condition2 = _ref73.condition, event = _ref73.event, inputFilter = _ref73.inputFilter, isNativeInput = _ref73.isNativeInput, prop = _ref73.prop;
  var inputProps = {
    style: "width:100%",
    on: (_on3 = {}, _on3[event] = function(value) {
      condition2.input = value && value.target ? value.target.value : value;
    }, _on3),
    ref: "filterInputComponent"
  };
  if (isNativeInput) {
    var _domProps;
    inputProps = Object.assign(inputProps, {
      domProps: (_domProps = {}, _domProps[prop] = condition2.input, _domProps),
      attrs: _extends({}, inputFilter.attrs)
    });
  } else {
    var _extends3;
    InputComponent = hooks.toRaw(InputComponent);
    inputProps = Object.assign(inputProps, {
      props: _extends({}, inputFilter.attrs, (_extends3 = {}, _extends3[prop] = condition2.input, _extends3))
    });
  }
  return {
    inputProps,
    InputComponent
  };
};
var iconRender = function iconRender2(checked, index2, halfChecked) {
  var CheckedSur = iconCheckedSur();
  var Check = iconCheck();
  var HalfCheck = iconHalfselect();
  var props = {
    class: "tiny-svg-size",
    tabindex: index2
  };
  if (typeof halfChecked === "undefined") {
    return checked ? createVNode(CheckedSur, mergeProps(props, {
      "class": "is-checked"
    }), null) : createVNode(Check, props, null);
  } else {
    return checked ? createVNode(CheckedSur, mergeProps(props, {
      "class": "is-checked"
    }), null) : halfChecked ? createVNode(HalfCheck, mergeProps(props, {
      "class": "is-checked"
    }), null) : createVNode(Check, props, null);
  }
};
var renderEnumableOptions = function renderEnumableOptions2(_ref74) {
  var iconRender3 = _ref74.iconRender, _vm = _ref74._vm, filterStore = _ref74.filterStore, selectAll = _ref74.selectAll, searchable = _ref74.searchable;
  var resultList = filterStore.options.filter(function(value) {
    var _value$label;
    return (_value$label = value.label) == null ? void 0 : _value$label.toString().includes(filterStore.searchValue);
  });
  if (resultList.length) {
    var filterList = resultList.map(function(item, index2) {
      return createVNode("li", {
        "class": ["tiny-grid__filter-option", {
          selected: item.checked
        }],
        "onClick": function onClick() {
          if (!filterStore.multi) {
            filterStore.options.forEach(function(option) {
              option.checked = option === item;
            });
            _vm.filterEnum();
          } else {
            item.checked = !item.checked;
          }
        }
      }, [filterStore.multi ? iconRender3(item.checked, index2 + 1) : null, createVNode("a", {
        "title": item.label
      }, [createTextVNode(" "), item.label, createTextVNode(" ")])]);
    });
    var isShowAllSelect = selectAll && (!filterStore.multi || !searchable && filterStore.multi);
    return isShowAllSelect ? [createVNode("li", {
      "class": "tiny-grid__filter-option",
      "onClick": function onClick() {
        var isAllSelected = filterStore.options.every(function(item) {
          return item.checked;
        });
        filterStore.options.forEach(function(option) {
          option.checked = !isAllSelected;
        });
        if (!filterStore.multi) {
          _vm.filterEnum();
        }
      }
    }, [filterStore.multi ? iconRender3(filterStore.options.every(function(item) {
      return item.checked;
    }), 0, filterStore.options.some(function(item) {
      return item.checked;
    })) : null, createVNode("a", {
      "title": _vm.i18n("ui.grid.filter.allSelect")
    }, [createTextVNode(" "), _vm.i18n("ui.grid.filter.allSelect")])])].concat(filterList) : filterList;
  } else {
    return [createVNode("li", {
      "class": "tiny-grid__filter-empty"
    }, [_vm.i18n("ui.grid.emptyText")])];
  }
};
var Panel$1 = /* @__PURE__ */ defineComponent({
  name: $prefix + "GridFilter",
  props: {
    filterStore: Object,
    optimizeOpts: Object
  },
  inject: {
    $grid: {
      default: null
    }
  },
  watch: {
    id: function id() {
      this.updatePanel();
    },
    visible: function visible() {
      this.showAdvance = false;
      this.updatePanel();
    }
  },
  data: function data2() {
    return {
      popperJS: null,
      showAdvance: false,
      showAdvItems: false,
      listPopper: null
    };
  },
  render: function render5() {
    var _this3 = this, _ref75;
    var filterStore = this.filterStore, $grid = this.$grid, $table = this.$parent, optimizeOpts2 = this.optimizeOpts, renderInput2 = this.renderInput, renderEnumable2 = this.renderEnumable, renderDefault2 = this.renderDefault, renderExtends2 = this.renderExtends, renderBase2 = this.renderBase, renderSimple2 = this.renderSimple;
    var args = filterStore.args, column = filterStore.column, options = filterStore.options, _filterStore$layout = filterStore.layout, layout = _filterStore$layout === void 0 ? "input,enum,default,extends,base" : _filterStore$layout;
    var layoutMap = {
      input: renderInput2,
      enum: renderEnumable2,
      default: renderDefault2,
      extends: renderExtends2,
      base: renderBase2,
      simple: renderSimple2
    };
    var quickFilter = layout.split(",").map(function(item) {
      return layoutMap[item] && layoutMap[item].call(_this3);
    });
    var map = {
      filterActive: "filter__active"
    };
    return createVNode("div", {
      "class": ["tiny-grid__wrapper", "tiny-grid__filter-wrapper", "filter__prevent-default", (_ref75 = {
        "tiny-grid__animat": optimizeOpts2.animat
      }, _ref75[map.filterActive] = filterStore.visible, _ref75["tiny-grid__filter-simple"] = layout.includes("simple"), _ref75["filter-wrapper-saas"] = $table.isThemeSaas, _ref75)],
      "style": filterStore.style
    }, [filterStore.visible ? createVNode("div", {
      "class": ["tiny-grid__filter-body", {
        "show-addvance": this.showAdvance
      }]
    }, [column.slots && column.slots.filter ? column.slots.filter({
      $grid,
      values: options,
      args,
      context: this
    }) : quickFilter]) : null]);
  },
  computed: {
    condition: function condition() {
      return this.filterStore.condition;
    },
    visible: function visible2() {
      return this.filterStore.visible;
    },
    id: function id2() {
      return this.filterStore.id;
    },
    i18n: function i18n2() {
      return t || this.$t;
    }
  },
  methods: {
    updatePanel: debounce(20, function() {
      var _this4 = this;
      this.correctRelations();
      var inputFilter = this.filterStore.inputFilter;
      if (inputFilter) {
        var relations = inputFilter.relations;
        if (inputFilter !== true && !relations.filter(function(r) {
          return r.value === _this4.condition.relation;
        }).length) {
          this.resetInput();
        }
      }
      if (this.popperJS) {
        this.popperJS.destroy();
        this.popperJS = null;
      }
      if (this.visible) {
        setTimeout(function() {
          var _this4$filterStore = _this4.filterStore, targetElemParentTr = _this4$filterStore.targetElemParentTr, id3 = _this4$filterStore.id;
          var reference = targetElemParentTr && targetElemParentTr.querySelector("svg.tiny-grid-filter__btn." + id3);
          var popper = _this4.$el;
          popper.style.zIndex = PopupManager.nextZIndex();
          _this4.popperJS = new PopperJS(reference, popper, {
            placement: "bottom-end",
            gpuAcceleration: false
          });
          popper.style.display = "block";
        });
      }
    }),
    // 基础清除选项
    renderBase: function renderBase() {
      return createVNode("ul", {
        "class": "tiny-grid__filter-panel filter-panel__clear"
      }, [createVNode("li", {
        "class": "tiny-grid__filter-option",
        "onClick": this.resetFilter
      }, [createVNode("a", {
        "class": "item-content"
      }, [this.i18n("ui.grid.filter.clear")])]), createVNode("li", {
        "class": "tiny-grid__filter-option",
        "onClick": this.clearFilter
      }, [createVNode("a", {
        "class": "item-content"
      }, [this.i18n("ui.grid.filter.clearAll")])])]);
    },
    // 设置筛选条件为空和不为空
    renderDefault: function renderDefault() {
      var _this5 = this;
      var condition2 = this.condition, filterStore = this.filterStore;
      if (!filterStore.defaultFilter) {
        return null;
      }
      return createVNode("ul", {
        "class": "tiny-grid__filter-panel filter-panel__default"
      }, [createVNode("li", {
        "class": ["tiny-grid__filter-option", {
          active: condition2.empty === true
        }],
        "onClick": function onClick() {
          _this5.filterNull(true);
        }
      }, [createVNode("a", {
        "class": "item-content"
      }, [this.i18n("ui.grid.filter.empty")])]), createVNode("li", {
        "class": ["tiny-grid__filter-option", {
          active: condition2.empty === false
        }],
        "onClick": function onClick() {
          _this5.filterNull(false);
        }
      }, [createVNode("a", {
        "class": "item-content"
      }, [this.i18n("ui.grid.filter.unempty")])])]);
    },
    // 筛选扩展项
    renderExtends: function renderExtends() {
      var _this6 = this;
      var filterStore = this.filterStore;
      if (!filterStore.extends) {
        return null;
      }
      return createVNode("ul", {
        "class": "tiny-grid__filter-panel filter-panel__clear"
      }, [filterStore.extends.map(function(item) {
        return createVNode("li", {
          "class": "tiny-grid__filter-option",
          "onClick": function onClick() {
            _this6.filterExtends(item);
          }
        }, [createVNode("a", {
          "class": "item-content"
        }, [item.label])]);
      })]);
    },
    // 输入筛选项
    renderInput: function renderInput() {
      var _slot, _slot2, _slot3;
      this.correctRelations();
      var condition2 = this.condition, filterStore = this.filterStore;
      var inputFilter = filterStore.inputFilter;
      if (!inputFilter)
        return null;
      var _renderInputArgs = renderInputArgs({
        _vm: this,
        inputFilter
      }), isAddbyProgram = _renderInputArgs.isAddbyProgram, inputRelations = _renderInputArgs.inputRelations;
      var InputComponent = inputFilter.component || "input";
      var isNativeInput = InputComponent === "input";
      var model = InputComponent.model || {};
      var prop = isNativeInput ? "value" : model.prop || "modelValue";
      var event = isNativeInput ? "input" : model.event || "update:modelValue";
      var ret = renderInputProps({
        InputComponent,
        condition: condition2,
        event,
        inputFilter,
        isNativeInput,
        prop
      });
      var inputProps = ret.inputProps;
      InputComponent = ret.InputComponent;
      return createVNode("ul", {
        "class": "tiny-grid__filter-panel"
      }, [isAddbyProgram ? null : createVNode("li", {
        "class": "tiny-grid__filter-option filter-option__radios"
      }, [inputRelations.map(function(_ref76) {
        var label = _ref76.label, value = _ref76.value, method = _ref76.method;
        return createVNode(Radio, {
          "modelValue": condition2.relation,
          "label": value,
          "onChange": function onChange(value2) {
            condition2.relation = value2;
            condition2.method = method || function() {
              return true;
            };
          }
        }, _isSlot(label) ? label : {
          default: function _default25() {
            return [label];
          }
        });
      })]), createVNode("li", {
        "class": "filter-option__input"
      }, [h(InputComponent, inputProps)]), createVNode("li", {
        "class": "tiny-grid__filter-option filter-option__btns"
      }, [createVNode(Button, {
        "type": "primary",
        "onClick": this.filterInput
      }, _isSlot(_slot = this.i18n("ui.base.confirm")) ? _slot : {
        default: function _default25() {
          return [_slot];
        }
      }), createVNode(Button, {
        "onClick": this.resetInput
      }, _isSlot(_slot2 = this.i18n("ui.base.reset")) ? _slot2 : {
        default: function _default25() {
          return [_slot2];
        }
      }), createVNode(Button, {
        "onClick": this.close
      }, _isSlot(_slot3 = this.i18n("ui.base.cancel")) ? _slot3 : {
        default: function _default25() {
          return [_slot3];
        }
      })])]);
    },
    // 选择筛选项
    renderEnumable: function renderEnumable() {
      var _slot4, _slot5;
      var filterStore = this.filterStore;
      if (!filterStore.enumable)
        return null;
      return createVNode("div", {
        "class": "tiny-grid__filter-panel filter-panel__enum"
      }, [createVNode("ul", {
        "class": "tiny-grid__filter-options"
      }, [renderEnumableOptions({
        iconRender,
        _vm: this,
        filterStore
      })]), filterStore.multi ? createVNode("div", {
        "class": "tiny-grid__filter-option filter-option__btns"
      }, [createVNode(Button, {
        "type": "primary",
        "onClick": this.filterEnum
      }, _isSlot(_slot4 = this.i18n("ui.base.confirm")) ? _slot4 : {
        default: function _default25() {
          return [_slot4];
        }
      }), createVNode(Button, {
        "onClick": function onClick() {
          filterStore.visible = false;
        }
      }, _isSlot(_slot5 = this.i18n("ui.base.cancel")) ? _slot5 : {
        default: function _default25() {
          return [_slot5];
        }
      })]) : null]);
    },
    // 简化版筛选按钮对齐，对齐管理侧规范
    renderSimple: function renderSimple() {
      var filterStore = this.filterStore;
      var simpleFilter = filterStore.simpleFilter;
      if (!simpleFilter) {
        return null;
      }
      if (simpleFilter.isDatetime) {
        var _simpleFilter$datetim, _simpleFilter$datetim2, _simpleFilter$datetim3, _simpleFilter$datetim4, _simpleFilter$datetim5, _simpleFilter$datetim6;
        var _slot6, _slot7;
        var DatePickComponents = simpleFilter != null && (_simpleFilter$datetim = simpleFilter.datetimeConfig) != null && _simpleFilter$datetim.component ? hooks.toRaw(simpleFilter.datetimeConfig.component) : null;
        var _format = simpleFilter == null ? void 0 : (_simpleFilter$datetim2 = simpleFilter.datetimeConfig) == null ? void 0 : _simpleFilter$datetim2.format;
        var valueFormat = simpleFilter == null ? void 0 : (_simpleFilter$datetim3 = simpleFilter.datetimeConfig) == null ? void 0 : _simpleFilter$datetim3.valueFormat;
        var type = simpleFilter == null ? void 0 : (_simpleFilter$datetim4 = simpleFilter.datetimeConfig) == null ? void 0 : _simpleFilter$datetim4.type;
        var max = simpleFilter == null ? void 0 : (_simpleFilter$datetim5 = simpleFilter.datetimeConfig) == null ? void 0 : _simpleFilter$datetim5.max;
        var min = simpleFilter == null ? void 0 : (_simpleFilter$datetim6 = simpleFilter.datetimeConfig) == null ? void 0 : _simpleFilter$datetim6.min;
        var pickerOptions = {
          disabledDate: function disabledDate(time2) {
            return time2.getTime() < min || time2.getTime() > max;
          }
        };
        return createVNode("div", {
          "class": "tiny-grid__filter-panel filter-panel__enum filter-panel__simple"
        }, [createVNode("div", {
          "class": "tiny-grid__filter-date-title"
        }, [this.i18n("ui.grid.filter.dateTips")]), createVNode("ul", {
          "class": "tiny-grid__filter-date"
        }, [createVNode("li", {
          "class": "tiny-grid__filter-date-item"
        }, [createVNode("span", null, [this.i18n("ui.grid.filter.startDate")]), createVNode(DatePickComponents, {
          "format": _format,
          "type": type,
          "value-format": valueFormat,
          "picker-options": pickerOptions,
          "class": "tiny-grid__filter-date-pick",
          "onChange": function onChange(value) {
            if (filterStore.datetimeConfig) {
              filterStore.datetimeConfig.startDate = value;
            }
          },
          "modelValue": filterStore.startDate,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return filterStore.startDate = $event;
          }
        }, null)]), createVNode("li", {
          "class": "tiny-grid__filter-date-item"
        }, [createVNode("span", null, [this.i18n("ui.grid.filter.endDate")]), createVNode(DatePickComponents, {
          "format": _format,
          "type": type,
          "value-format": valueFormat,
          "picker-options": pickerOptions,
          "class": "tiny-grid__filter-date-pick",
          "modelValue": filterStore.endDate,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return filterStore.endDate = $event;
          },
          "onChange": function onChange(value) {
            if (filterStore.datetimeConfig) {
              filterStore.datetimeConfig.endDate = value;
            }
          }
        }, null)])]), createVNode("div", {
          "class": "tiny-grid__filter-option filter-option__btns filter-option__date-button"
        }, [createVNode(Button, {
          "type": "primary",
          "onClick": this.filterDate
        }, _isSlot(_slot6 = this.i18n("ui.base.confirm")) ? _slot6 : {
          default: function _default25() {
            return [_slot6];
          }
        }), createVNode(Button, {
          "onClick": function onClick() {
            filterStore.visible = false;
          }
        }, _isSlot(_slot7 = this.i18n("ui.base.cancel")) ? _slot7 : {
          default: function _default25() {
            return [_slot7];
          }
        })])]);
      } else {
        var _simpleFilter$searchC;
        var _slot8, _slot9;
        var IconSearch = iconSearch();
        var InputComponents = simpleFilter != null && (_simpleFilter$searchC = simpleFilter.searchConfig) != null && _simpleFilter$searchC.component ? hooks.toRaw(simpleFilter.searchConfig.component) : null;
        return createVNode("div", {
          "class": "tiny-grid__filter-panel filter-panel__enum filter-panel__simple"
        }, [InputComponents ? createVNode(InputComponents, {
          "modelValue": filterStore.searchValue,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return filterStore.searchValue = $event;
          },
          "onChange": function onChange(value) {
            if (filterStore.searchConfig) {
              filterStore.searchConfig.searchValue = value;
            }
          },
          "class": "tiny-grid__filter-search",
          "clearable": true
        }, {
          suffix: function suffix() {
            return createVNode(IconSearch, null, null);
          }
        }) : null, createVNode("ul", {
          "class": "tiny-grid__filter-options"
        }, [renderEnumableOptions({
          iconRender,
          _vm: this,
          filterStore,
          selectAll: simpleFilter.selectAll,
          searchable: Boolean(InputComponents)
        })]), filterStore.multi ? createVNode("div", {
          "class": "tiny-grid__filter-option filter-option__btns"
        }, [createVNode(Button, {
          "type": "primary",
          "onClick": this.filterEnum
        }, _isSlot(_slot8 = this.i18n("ui.base.confirm")) ? _slot8 : {
          default: function _default25() {
            return [_slot8];
          }
        }), createVNode(Button, {
          "onClick": function onClick() {
            filterStore.visible = false;
          }
        }, _isSlot(_slot9 = this.i18n("ui.base.cancel")) ? _slot9 : {
          default: function _default25() {
            return [_slot9];
          }
        })]) : null]);
      }
    },
    renderSlot: function renderSlot(h2) {
      var $table = this.$parent, filterStore = this.filterStore;
      var args = filterStore.args, column = filterStore.column;
      var slots = column.slots;
      if (slots && slots.filter) {
        return slots.filter.call($table, _extends({
          $table,
          context: this
        }, args), h2);
      }
    },
    // 全部筛选事件
    filterCheckAllEvent: function filterCheckAllEvent(event, value) {
      var filterStore = this.filterStore;
      filterStore.options.forEach(function(item) {
        item.checked = value;
      });
      filterStore.isAllSelected = value;
      filterStore.isIndeterminate = false;
    },
    // 筛选发生改变 check 是否检查默认值的有效性，当自定义relations时，需要检查
    resetInput: function resetInput() {
      this.correctRelations();
      var _this$filterStore = this.filterStore, inputFilter = _this$filterStore.inputFilter, onResetInputFilter = _this$filterStore.onResetInputFilter;
      if (inputFilter) {
        var _this$filterStore$inp = this.filterStore.inputFilter, relations = _this$filterStore$inp.relations, relation = _this$filterStore$inp.relation;
        this.condition.input = "";
        if (typeof onResetInputFilter === "function") {
          onResetInputFilter(this.$refs.filterInputComponent);
        }
        var defaultrelation = "equals";
        var relationValues;
        var relationValue;
        if (Array.isArray(relations) && relations.length) {
          this.condition.method = relations[0].method;
          defaultrelation = relations[0].value || "equals";
          for (var i = 0; i < relations.length; i++) {
            if (relations[i].value === "equals") {
              defaultrelation = "equals";
              break;
            }
          }
          relationValues = relations.map(function(r) {
            return r.value;
          });
          if (relation && ~relationValues.indexOf(relation)) {
            relationValue = relation;
          }
        }
        this.condition.relation = relationValue || defaultrelation;
      }
    },
    // 确认筛选
    confirmFilter: function confirmFilter(type) {
      var column = this.filterStore.column;
      this.condition.type = type;
      column.filter.condition = extend(true, {}, this.condition);
      this.$parent.confirmFilterEvent();
    },
    // 对外的暴露自定义提交方法
    commitFilter: function commitFilter() {
      var column = this.filterStore.column;
      column.filter.condition.type = "custom";
      this.$parent.confirmFilterEvent();
    },
    // 重置当前列筛选
    resetFilter: function resetFilter() {
      this.condition.value = null;
      this.condition.input = "";
      this.condition.empty = null;
      this.condition.value = [];
      this.condition.type = null;
      this.resetInput();
      this.confirmFilter();
    },
    // 清除所有列筛选
    clearFilter: function clearFilter() {
      this.$parent.clearFilter(true);
    },
    filterNull: function filterNull(empty) {
      this.condition.value = [];
      this.condition.input = "";
      this.condition.empty = empty;
      this.confirmFilter("empty");
    },
    filterExtends: function filterExtends(item) {
      this.condition.value = item.value || item.label;
      this.condition.method = item.method;
      this.confirmFilter("extend");
    },
    filterInput: function filterInput() {
      this.condition.value = [];
      this.condition.empty = null;
      this.confirmFilter("input");
    },
    filterDate: function filterDate() {
      var _this$filterStore2 = this.filterStore, startDate = _this$filterStore2.startDate, endDate = _this$filterStore2.endDate;
      this.condition.input = "";
      this.condition.value = [];
      this.condition.empty = null;
      this.condition.dateList = [startDate, endDate];
      if (startDate && !endDate) {
        this.condition.relation = "greaterThan";
      } else if (!startDate && endDate) {
        this.condition.relation = "greaterThan";
      } else if (startDate && endDate) {
        this.condition.relation = "interveningBetween";
      }
      this.confirmFilter("date");
    },
    filterEnum: function filterEnum() {
      this.condition.input = "";
      this.condition.empty = null;
      this.condition.value = this.filterStore.options.filter(function(item) {
        return item.checked;
      }).map(function(check) {
        return check.value;
      });
      this.confirmFilter("enum");
    },
    close: function close() {
      var filterStore = this.filterStore;
      filterStore.visible = false;
    },
    correctRelations: function correctRelations() {
      if (this.filterStore && typeof this.filterStore.inputFilter === "object") {
        var relations = this.filterStore.inputFilter.relations;
        var relation = this.filterStore.inputFilter.relation || "equals";
        if (!relations || Array.isArray(relations) && relations.length === 0) {
          this.filterStore.inputFilter.relations = [{
            label: relation,
            value: relation
          }];
          this.filterStore.inputFilter.relations_addby = "program";
          this.filterStore.inputFilter.relations_backup = relations;
        }
      }
    }
  },
  setup: function setup5() {
    var instance = hooks.getCurrentInstance().proxy;
    hooks.onBeforeUnmount(function() {
      instance.popperJS && instance.popperJS.destroy() && (instance.popperJS = null);
    });
  }
});
function handleFilterConditionCustom(_ref77) {
  var column = _ref77.column, condition2 = _ref77.condition, method = _ref77.method, property = _ref77.property, row2 = _ref77.row;
  var ret = {
    flag: false,
    result: null
  };
  if (method && condition2.type === "custom") {
    ret.result = method({
      property,
      row: row2,
      column
    });
    ret.flag = true;
  }
  return ret;
}
function handleFilterConditionExtend(_ref78) {
  var column = _ref78.column, condition2 = _ref78.condition, property = _ref78.property, row2 = _ref78.row;
  var ret = {
    flag: false,
    result: null
  };
  if (condition2.type === "extend") {
    var extendMethod = condition2.method;
    if (typeof extendMethod !== "function") {
      extendMethod = function extendMethod2() {
        return true;
      };
    }
    ret.result = extendMethod({
      value: get(row2, property),
      row: row2,
      column
    });
    ret.flag = true;
  }
  return ret;
}
function findRelationMethod(relation, relations) {
  if (Array.isArray(relations)) {
    var method;
    for (var i = 0; i < relations.length; i++) {
      if (relations[i] && relations[i].value === relation) {
        method = relations[i].method;
        break;
      }
    }
    return method;
  }
}
function handleFilterRelations(_ref79) {
  var inputFilter = _ref79.inputFilter;
  var relations = [];
  if (typeof inputFilter === "object" && Array.isArray(inputFilter.relations)) {
    relations = inputFilter.relations;
  }
  return relations;
}
function modifyValueCheckStr(value) {
  if (!value && typeof value !== "number") {
    value = "";
  }
  return value;
}
function handleDefaultCheckStr(_ref80) {
  var column = _ref80.column, input = _ref80.input, relation = _ref80.relation, relationMethod = _ref80.relationMethod, relations = _ref80.relations, result = _ref80.result, row2 = _ref80.row, value = _ref80.value;
  if (typeof relationMethod !== "function") {
    relationMethod = findRelationMethod(relation, relations);
  }
  if (typeof relationMethod === "function") {
    result = relationMethod({
      value,
      input,
      row: row2,
      column
    });
  }
  return {
    relationMethod,
    result
  };
}
function handleFilterCheckStr(_ref81) {
  var column = _ref81.column, relationMethod = _ref81.relationMethod, relations = _ref81.relations, row2 = _ref81.row;
  return function(value, input, relation, dateList) {
    var result = false;
    value = modifyValueCheckStr(value);
    switch (relation) {
      case "equals":
        result = value === input;
        break;
      case "unequal":
        result = value !== input;
        break;
      case "greaterThan":
        result = value > input;
        break;
      case "lessThan":
        result = value < input;
        break;
      case "equalToGreaterThan":
        result = value >= input;
        break;
      case "equalToLessThan":
        result = value <= input;
        break;
      case "interveningBetween":
        result = value >= dateList[0] && value <= dateList[1];
        break;
      case "contains":
        result = value.toString().includes(input);
        break;
      case "startwith":
        result = value.toString().indexOf(input) === 0;
        break;
      case "endwith":
        result = value.toString().match(new RegExp(input + "$"));
        break;
      default: {
        var ret = handleDefaultCheckStr({
          column,
          input,
          relation,
          relationMethod,
          relations,
          result,
          row: row2,
          value
        });
        relationMethod = ret.relationMethod;
        result = ret.result;
      }
    }
    return result;
  };
}
function handleFilterCheck(_ref82) {
  var checkStr = _ref82.checkStr, empty = _ref82.empty, input = _ref82.input, property = _ref82.property, relation = _ref82.relation, row2 = _ref82.row, valueList = _ref82.valueList, dateList = _ref82.dateList;
  return function() {
    var value = get(row2, property);
    if (empty === true) {
      return !value;
    }
    if (empty === false) {
      return !!value;
    }
    if (dateList) {
      if (!dateList[0] && !dateList[1]) {
        return true;
      }
      return checkStr(value, dateList[0] || dateList[1], relation, dateList);
    }
    var checkInput = !input && input !== 0 || checkStr(value, input, relation);
    var checkEnum = !valueList.length || valueList.includes(value);
    return checkInput && checkEnum;
  };
}
function getClassName(elem) {
  if (elem && elem.nodeType) {
    if (elem instanceof SVGElement) {
      return elem.className.baseVal;
    }
    if (elem instanceof HTMLElement) {
      return elem.className;
    }
  }
  return "";
}
function closest(elem, parentClassName) {
  if (elem && elem.nodeType) {
    var clsReg = new RegExp("\\b" + parentClassName + "\\b");
    var matches;
    do {
      matches = getClassName(elem).match(clsReg);
      if (matches) {
        return elem;
      }
      if (elem === document.body) {
        break;
      }
      elem = elem.parentNode;
    } while (elem);
  }
  return null;
}
var columnfilters = function columnfilters2(visibleColumn) {
  var filters = {};
  visibleColumn.forEach(function(column) {
    var property = column.property, filter2 = column.filter;
    if (filter2) {
      var _filter$condition = filter2.condition, type = _filter$condition.type, input = _filter$condition.input, relation = _filter$condition.relation, value = _filter$condition.value, empty = _filter$condition.empty, dateList = _filter$condition.dateList;
      if (type === "input") {
        filters[property] = {
          type,
          value: {
            text: input,
            relation
          }
        };
      } else if (type === "enum") {
        filters[property] = {
          type,
          value
        };
      } else if (type === "empty") {
        filters[property] = {
          type,
          value: empty
        };
      } else if (type === "custom") {
        filters[property] = {
          type
        };
      } else if (type === "date") {
        filters[property] = {
          type,
          value: {
            dateList,
            relation
          }
        };
      } else if (type === "extend") {
        filters[property] = {
          type,
          value
        };
      } else if (type === "extend1") {
        filters[property] = {
          type,
          value
        };
      } else if (type === "extend2") {
        filters[property] = {
          type,
          value
        };
      }
      filter2.hasFilter = value.length || input || (dateList == null ? void 0 : dateList.some(Boolean)) || input === 0 || empty !== null || type === "custom";
    }
  });
  return filters;
};
var Methods$f = {
  filter: function filter(field, callback) {
    var column = this.getColumnByField(field);
    var filters = column.filter.options;
    if (callback) {
      var rest = callback(filters);
      if (isArray(rest)) {
        column.filters = getFilters(rest);
      }
    }
    return Promise.resolve(filters);
  },
  // 关闭筛选
  closeFilter: function closeFilter() {
    var filterStore = this.filterStore;
    Object.assign(filterStore, {
      visible: false,
      targetElem: null,
      targetElemParentTr: null
    });
    return this.$nextTick();
  },
  handleLocalFilter: function handleLocalFilter(row2, column) {
    var property = column.property;
    var _column$filter = column.filter, condition2 = _column$filter.condition, method = _column$filter.method, inputFilter = _column$filter.inputFilter;
    var ret = handleFilterConditionCustom({
      column,
      condition: condition2,
      method,
      property,
      row: row2
    });
    if (ret.flag) {
      return ret.result;
    }
    ret = handleFilterConditionExtend({
      column,
      condition: condition2,
      property,
      row: row2
    });
    if (ret.flag) {
      return ret.result;
    }
    var empty = condition2.empty, input = condition2.input, relation = condition2.relation, value = condition2.value, dateList = condition2.dateList;
    var relationMethod = condition2.method;
    var relations = handleFilterRelations({
      inputFilter
    });
    var checkStr = handleFilterCheckStr({
      column,
      relationMethod,
      relations,
      row: row2
    });
    var check = handleFilterCheck({
      checkStr,
      empty,
      input,
      property,
      relation,
      row: row2,
      valueList: value,
      dateList
    });
    return check();
  },
  getOptions: function getOptions(_ref83) {
    var property = _ref83.property, filter2 = _ref83.filter;
    var values = filter2.values, _filter$value = filter2.value, value = _filter$value === void 0 ? "value" : _filter$value, _filter$label = filter2.label, label = _filter$label === void 0 ? "label" : _filter$label, dataset = filter2.dataset;
    if (typeof values === "function") {
      return values({
        property,
        filter: filter2
      });
    } else if (dataset) {
      return getDataset({
        dataset,
        service: this.$service
      });
    } else {
      var newOptions = (values || []).map(function(item) {
        return {
          label: item[label],
          value: item[value],
          checked: !!item.checked
        };
      });
      if (!values) {
        var optionMap = {};
        var tableData = this.getTableData();
        tableData.fullData.forEach(function(row2) {
          var key = row2[property];
          if (!optionMap[key]) {
            newOptions.push({
              value: key,
              label: key,
              checked: false
            });
          }
          optionMap[key] = true;
        });
      }
      return Promise.resolve(newOptions);
    }
  },
  /**
   * 点击筛选事件
   */
  triggerFilterEvent: function triggerFilterEvent(event, column, params) {
    var filterStore = this.filterStore;
    var filter2 = column.filter;
    var inputFilterRelation;
    if (filterStore.id !== column.id && filterStore.visible) {
      this.closeFilter();
    }
    if (filter2 && typeof filter2.inputFilter === "object" && filter2.inputFilter.relation) {
      if (filter2.condition.relation === "equals" && filter2.inputFilter.relation && !column.isInitTriggerFlag) {
        inputFilterRelation = filter2.inputFilter.relation;
        column.isInitTriggerFlag = true;
      }
      filter2.condition.relation = inputFilterRelation || filter2.condition.relation;
    }
    if (filterStore.column === column && filterStore.visible) {
      filterStore.visible = false;
    } else {
      var targetElem = event.target;
      var targetElemParentTr = closest(targetElem, "tiny-grid-header__row");
      this.getOptions(column).then(function(options) {
        var _filter$simpleFilter, _filter$simpleFilter2, _filter$simpleFilter3, _filter$simpleFilter4, _filter$simpleFilter5, _filter$simpleFilter6, _filter$simpleFilter7, _filter$simpleFilter8;
        Object.assign(filterStore, {
          args: params,
          layout: filter2.layout,
          // 布局配置，用户可以自定义想要的筛选项
          enumable: filter2.enumable,
          inputFilter: filter2.inputFilter,
          simpleFilter: filter2.simpleFilter,
          onResetInputFilter: filter2.onResetInputFilter,
          extends: filter2.extends,
          defaultFilter: isBoolean(filter2.defaultFilter) ? filter2.defaultFilter : true,
          options: options.map(function(_ref84) {
            var value = _ref84.value, label = _ref84.label;
            return {
              value,
              label,
              checked: filter2.condition.value.includes(value)
            };
          }),
          condition: _extends({}, filter2.condition),
          multi: isBoolean(filter2.multi) ? filter2.multi : true,
          column,
          visible: true,
          targetElem: hooks.markRaw(targetElem),
          targetElemParentTr: hooks.markRaw(targetElemParentTr),
          id: column.id,
          searchConfig: (_filter$simpleFilter = filter2.simpleFilter) == null ? void 0 : _filter$simpleFilter.searchConfig,
          datetimeConfig: (_filter$simpleFilter2 = filter2.simpleFilter) == null ? void 0 : _filter$simpleFilter2.datetimeConfig,
          searchValue: ((_filter$simpleFilter3 = filter2.simpleFilter) == null ? void 0 : (_filter$simpleFilter4 = _filter$simpleFilter3.searchConfig) == null ? void 0 : _filter$simpleFilter4.searchValue) || "",
          startDate: ((_filter$simpleFilter5 = filter2.simpleFilter) == null ? void 0 : (_filter$simpleFilter6 = _filter$simpleFilter5.datetimeConfig) == null ? void 0 : _filter$simpleFilter6.startDate) || "",
          endDate: ((_filter$simpleFilter7 = filter2.simpleFilter) == null ? void 0 : (_filter$simpleFilter8 = _filter$simpleFilter7.datetimeConfig) == null ? void 0 : _filter$simpleFilter8.endDate) || ""
        });
      });
    }
  },
  // 确认筛选
  confirmFilterEvent: function confirmFilterEvent() {
    var _this7 = this;
    var visibleColumn = this.visibleColumn, filterStore = this.filterStore, scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad, remoteFilter = this.remoteFilter, lastScrollLeft = this.lastScrollLeft;
    filterStore.visible = false;
    if (!remoteFilter) {
      this.handleTableData(true).then(this.refreshStyle);
    }
    var filters = columnfilters(visibleColumn);
    if (remoteFilter) {
      if (this.$grid.pagerConfig) {
        this.$grid.pagerConfig.currentPage = 1;
      }
    }
    _emitEvent(this, "filter-change", [{
      filters,
      $table: this
    }]);
    this.updateFooter();
    var restoreScrollLeft = function restoreScrollLeft2() {
      return _this7.scrollTo(lastScrollLeft);
    };
    if (scrollXLoad || scrollYLoad) {
      scrollXLoad && this.clearScroll();
      if (scrollYLoad) {
        this.updateScrollYSpace();
      }
    }
    this.closeFilter();
    this.clearSelection();
    this.$nextTick().then(this.recalculate).then(restoreScrollLeft);
  },
  clearFilter: function clearFilter2(field) {
    var _this$$grid;
    var column = arguments.length ? this.getColumnByField(field) : null;
    var filterStore = this.filterStore;
    var filterData = ((_this$$grid = this.$grid) == null ? void 0 : _this$$grid.filterData) || {};
    var handleClear = function handleClear2(column2) {
      var filter2 = column2.filter;
      if (filter2) {
        filter2.condition = {
          input: "",
          relation: "equals",
          empty: null,
          value: []
        };
        filter2.hasFilter = false;
        filter2.custom = null;
        delete filterData[column2.property];
      }
    };
    if (column) {
      handleClear(column);
    } else {
      this.visibleColumn.forEach(handleClear);
    }
    if (!column || column !== filterStore.column) {
      Object.assign(filterStore, {
        style: null,
        options: [],
        column: null,
        multi: false,
        visible: false
      });
    }
    if (field === true || column) {
      var filters = columnfilters(this.visibleColumn);
      _emitEvent(this, "filter-change", [{
        filters,
        $table: this
      }]);
    }
    this.clearSelection();
    return this.updateData();
  },
  getAllFilter: function getAllFilter() {
    return columnfilters(this.visibleColumn);
  }
};
Panel$1.install = function(Table2) {
  GridAdapter._filter = 1;
  Object.assign(Table2.methods, Methods$f);
};
var Children = defineComponent({
  name: $prefix + "GridContextMenuChild",
  props: {
    item: Object,
    gIndex: Number,
    index: Number,
    show: Boolean,
    ctxMenuStore: Object,
    tableInstance: Object
  },
  render: function render6() {
    var tableInstance = this.tableInstance, item = this.item, gIndex = this.gIndex, index2 = this.index, show2 = this.show, ctxMenuStore = this.ctxMenuStore;
    var toKebab2 = tableInstance.toKebab, getEventTargetNode2 = tableInstance.getEventTargetNode;
    return h("ul", {
      class: ["tiny-grid-menu__clild-wrapper", {
        show: show2
      }]
    }, item.children.map(function(child, cIndex) {
      return child.visible === false ? [null] : h("li", {
        class: {
          "link__disabled": child.disabled,
          "link__active": child === ctxMenuStore.selectChild
        },
        key: gIndex + "_" + index2 + "_" + cIndex
      }, [h("span", {
        class: "tiny-grid-menu__link " + toKebab2(item.code),
        on: {
          click: function click(event) {
            tableInstance.ctxMenuLinkEvent(event, child);
          },
          mouseover: function mouseover(event) {
            tableInstance.ctxMenuMouseoverEvent(event, item, child);
          },
          mouseout: function mouseout(event) {
            if (!getEventTargetNode2(event, document.body, toKebab2(item.code)).flag) {
              tableInstance.ctxMenuMouseoutEvent(event, item, child);
            }
          }
        }
      }, [child.prefixIcon ? h(child.prefixIcon, {
        class: "tiny-grid-menu__link-prefix"
      }) : [null], h("span", {
        class: "tiny-grid-menu__link-content"
      }, getFuncText(child.name))])]);
    }));
  },
  watch: {
    show: function show(value) {
      var _this8 = this;
      if (value) {
        this.$el.style.top = "0px";
        this.$nextTick(function() {
          var tableInstance = _this8.tableInstance, $el = _this8.$el;
          var _$el$getBoundingClien = $el.getBoundingClientRect(), width = _$el$getBoundingClien.width, height2 = _$el$getBoundingClien.height, bottom = _$el$getBoundingClien.bottom;
          var _getDomNode = getDomNode(), visibleHeight = _getDomNode.visibleHeight, visibleWidth = _getDomNode.visibleWidth;
          var ctxElem = tableInstance.$refs.ctxWrapper.$el;
          var target = tableInstance.ctxMenuStore.target;
          var _ctxElem$getBoundingC = ctxElem.getBoundingClientRect(), ctxWidth = _ctxElem$getBoundingC.width, ctxRight = _ctxElem$getBoundingC.right;
          if (width + ctxRight > visibleWidth - 6) {
            $el.style.left = -6 - width + "px";
          } else {
            $el.style.left = ctxWidth + "px";
          }
          if (bottom > visibleHeight) {
            var offset = target && target.clientHeight || 0;
            $el.style.top = offset - height2 + "px";
          }
        });
      }
    }
  }
});
var onMenuItem = function onMenuItem2(_ref85) {
  var tableInstance = _ref85.tableInstance, item = _ref85.item, getEventTargetNode2 = _ref85.getEventTargetNode, toKebab2 = _ref85.toKebab;
  return {
    click: function click(event) {
      tableInstance.ctxMenuLinkEvent(event, item);
    },
    mouseover: function mouseover(event) {
      tableInstance.ctxMenuMouseoverEvent(event, item);
    },
    mouseout: function mouseout(event) {
      if (!getEventTargetNode2(event, document.body, toKebab2(item.code)).flag) {
        tableInstance.ctxMenuMouseoutEvent(event, item);
      }
    }
  };
};
function createMenuItem(args) {
  var ctxMenuStore = args.ctxMenuStore, gIndex = args.gIndex, getEventTargetNode2 = args.getEventTargetNode, hasChild = args.hasChild;
  var index2 = args.index, item = args.item, show2 = args.show, tableInstance = args.tableInstance, toKebab2 = args.toKebab;
  var res = [null];
  var classMap2 = {
    linkDisabled: "link__disabled",
    linkActive: "link__active"
  };
  if (item.visible !== false) {
    var _class;
    res = h("li", {
      class: (_class = {}, _class[classMap2.linkDisabled] = item.disabled, _class[classMap2.linkActive] = item === ctxMenuStore.selected, _class),
      key: gIndex + "_" + index2
    }, [h("a", {
      class: "tiny-grid-menu__link " + toKebab2(item.code),
      on: onMenuItem({
        tableInstance,
        item,
        getEventTargetNode: getEventTargetNode2,
        toKebab: toKebab2
      })
    }, [item.prefixIcon ? h(item.prefixIcon, {
      class: "tiny-grid-menu__link-prefix"
    }) : [null], h("span", {
      class: "tiny-grid-menu__link-content"
    }, getFuncText(item.name)), h("i", {
      class: ["tiny-grid-menu__link-suffix", hasChild ? item.suffixIcon || "suffix__haschild" : item.suffixIcon]
    })]), hasChild ? h(Children, {
      props: {
        item,
        gIndex,
        index: index2,
        show: show2,
        tableInstance,
        ctxMenuStore
      }
    }) : [null]]);
  }
  return res;
}
function getMenuItemCreator(_ref86) {
  var ctxMenuStore = _ref86.ctxMenuStore, getEventTargetNode2 = _ref86.getEventTargetNode, tableInstance = _ref86.tableInstance, toKebab2 = _ref86.toKebab;
  return function(options, gIndex) {
    return h("ul", {
      class: "tiny-grid-menu__option-wrapper",
      key: gIndex
    }, options.map(function(item, index2) {
      var hasChild = item.children && item.children.length;
      var show2 = item === ctxMenuStore.selected && ctxMenuStore.showChild;
      var args = {
        ctxMenuStore,
        gIndex,
        getEventTargetNode: getEventTargetNode2,
        hasChild
      };
      Object.assign(args, {
        index: index2,
        item,
        show: show2,
        tableInstance,
        toKebab: toKebab2
      });
      return createMenuItem(args);
    }));
  };
}
var Panel = defineComponent({
  name: $prefix + "GridContextMenu",
  props: {
    ctxMenuStore: Object
  },
  render: function render7() {
    var ctxMenuStore = this.ctxMenuStore, tableInstance = this.$parent;
    var toKebab2 = tableInstance.toKebab, getEventTargetNode2 = tableInstance.getEventTargetNode;
    var hasChild = Array.isArray(ctxMenuStore.list) && ctxMenuStore.list.flat().some(function(item) {
      return item.visible !== false;
    });
    return h("div", {
      class: ["tiny-grid__wrapper", "tiny-grid-menu__wrapper", {
        show: ctxMenuStore.visible && hasChild
      }],
      style: ctxMenuStore.style
    }, ctxMenuStore.list.map(getMenuItemCreator({
      ctxMenuStore,
      getEventTargetNode: getEventTargetNode2,
      tableInstance,
      toKebab: toKebab2
    })));
  }
});
var getSelectItem = function getSelectItem2(subList) {
  for (var i = 0; i < subList.length; i++) {
    var menu = subList[i];
    if (menu.visible !== false) {
      return menu;
    }
  }
};
var Methods$e = {
  // 关闭快捷菜单
  _closeMenu: function _closeMenu() {
    Object.assign(this.ctxMenuStore, {
      visible: false,
      selected: null,
      selectChild: null,
      showChild: false
    });
    return this.$nextTick();
  },
  // 处理菜单的移动
  moveCtxMenu: function moveCtxMenu(_ref87) {
    var _this9 = this;
    var event = _ref87.event, keyCode = _ref87.keyCode, ctxMenuStore = _ref87.ctxMenuStore, property = _ref87.property, operKey = _ref87.operKey, operRest = _ref87.operRest, menuList = _ref87.menuList;
    var selectIndex = findIndexOf(menuList, function(item) {
      return ctxMenuStore[property] === item;
    });
    var selectItem;
    var ruleChains = [{
      match: function match() {
        return keyCode === operKey;
      },
      action: function action() {
        if (!operRest || !hasChildrenList(ctxMenuStore.selected)) {
          ctxMenuStore.showChild = false;
          ctxMenuStore.selectChild = null;
        } else {
          ctxMenuStore.showChild = true;
        }
      }
    }, {
      match: function match() {
        return keyCode === 38;
      },
      action: function action() {
        var subList = menuList.slice(0, selectIndex);
        subList = subList.reverse();
        selectItem = getSelectItem(subList);
        ctxMenuStore[property] = selectItem || menuList[menuList.length - 1];
      }
    }, {
      match: function match() {
        return keyCode === 40;
      },
      action: function action() {
        var subList = menuList.slice(selectIndex + 1);
        selectItem = getSelectItem(subList);
        ctxMenuStore[property] = selectItem || menuList[0];
      }
    }, {
      match: function match() {
        return ctxMenuStore[property] && (keyCode === 13 || keyCode === 32);
      },
      action: function action() {
        _this9.ctxMenuLinkEvent(event, ctxMenuStore[property]);
      }
    }];
    for (var i = 0; i < ruleChains.length; i++) {
      var ruleChain = ruleChains[i];
      if (ruleChain.match()) {
        ruleChain.action();
        break;
      }
    }
  },
  // 快捷菜单事件处理
  handleGlobalContextmenuEvent: function handleGlobalContextmenuEvent(event) {
    var ctxMenuOpts2 = this.ctxMenuOpts, ctxMenuStore = this.ctxMenuStore, isCtxMenu2 = this.isCtxMenu;
    var layoutList = ["header", "body", "footer"];
    if (!isCtxMenu2) {
      this.closeMenu();
      this.closeFilter();
      return;
    }
    if (ctxMenuStore.visible && this.$refs.ctxWrapper && this.getEventTargetNode(event, this.$refs.ctxWrapper.$el).flag) {
      event.preventDefault();
      return;
    }
    for (var i = 0; i < layoutList.length; i++) {
      var layout = layoutList[i];
      var eventTargetNode = this.getEventTargetNode(event, this.$el, "tiny-grid-" + layout + "__column");
      var eventParams = {
        $table: this,
        columns: this.visibleColumn.slice(0),
        type: layout
      };
      if (eventTargetNode.flag) {
        var _this$getColumnNode;
        var cell = eventTargetNode.targetElem;
        var column = (_this$getColumnNode = this.getColumnNode(cell)) == null ? void 0 : _this$getColumnNode.item;
        if (!column) {
          return;
        }
        var typePrefix = layout + "-";
        Object.assign(eventParams, {
          cell,
          column,
          columnIndex: this.getColumnIndex(column)
        });
        if (layout === "body") {
          var row2 = this.getRowNode(cell.parentNode).item;
          typePrefix = "";
          Object.assign(eventParams, {
            row: row2,
            rowIndex: this.getRowIndex(row2)
          });
        }
        this.openContextMenu(event, layout, eventParams);
        _emitEvent(this, typePrefix + "cell-context-menu", [eventParams, event]);
        return;
      }
      eventTargetNode = this.getEventTargetNode(event, this.$el, "tiny-grid__" + layout + "-wrapper");
      if (eventTargetNode.flag) {
        if (ctxMenuOpts2.trigger === "cell") {
          event.preventDefault();
        } else {
          this.openContextMenu(event, layout, eventParams);
        }
        return;
      }
    }
    this.closeMenu();
    this.closeFilter();
  },
  // 显示快捷菜单
  openContextMenu: function openContextMenu(event, type, params) {
    var _this10 = this;
    var ctxMenuOpts2 = this.ctxMenuOpts, ctxMenuStore = this.ctxMenuStore;
    var visibleMethod = ctxMenuOpts2.visibleMethod;
    var config2 = ctxMenuOpts2[type];
    if (!config2) {
      this.closeFilter();
      return;
    }
    var disabled = config2.disabled, options = config2.options;
    if (disabled) {
      event.preventDefault();
      this.closeFilter();
      return;
    }
    if (!options || !options.length) {
      this.closeFilter();
      return;
    }
    params.options = options;
    var end = function end2() {
      if (visibleMethod && !visibleMethod(params, event)) {
        _this10.closeMenu();
        return;
      }
      event.preventDefault();
      var _getDomNode2 = getDomNode(), scrollLeft = _getDomNode2.scrollLeft, scrollTop = _getDomNode2.scrollTop, visibleHeight = _getDomNode2.visibleHeight, visibleWidth = _getDomNode2.visibleWidth;
      var clientX = event.clientX, clientY = event.clientY;
      var left = clientX + scrollLeft;
      var top = clientY + scrollTop;
      var style = {
        left: left + "px",
        top: top + "px"
      };
      Object.assign(ctxMenuStore, {
        args: params,
        list: options,
        selected: null,
        selectChild: null,
        showChild: false,
        style,
        visible: true
      });
      var next = function next2() {
        var ctxElem = _this10.$refs.ctxWrapper.$el;
        var clientWidth = ctxElem.clientWidth, clientHeight = ctxElem.clientHeight;
        var offsetLeft = clientX + clientWidth - visibleWidth;
        var offsetTop = clientY + clientHeight - visibleHeight;
        offsetLeft > -10 && (ctxMenuStore.style.left = left - clientWidth + "px");
        offsetTop > -10 && (ctxMenuStore.style.top = top - clientHeight + "px");
      };
      _this10.$nextTick(next);
    };
    this.preventEvent(event, "event.show_menu", params, null, end);
    this.closeFilter();
  },
  ctxMenuMouseoverEvent: function ctxMenuMouseoverEvent(event, item, child) {
    var ctxMenuStore = this.ctxMenuStore;
    event.preventDefault();
    event.stopPropagation();
    Object.assign(ctxMenuStore, {
      selectChild: child,
      selected: item,
      target: event.target
    });
    !child && (ctxMenuStore.showChild = hasChildrenList(item));
  },
  ctxMenuMouseoutEvent: function ctxMenuMouseoutEvent(event, item) {
    var ctxMenuStore = this.ctxMenuStore;
    !item.children && (ctxMenuStore.selected = null);
    Object.assign(ctxMenuStore, {
      selectChild: null,
      showChild: null,
      target: null
    });
  },
  // 快捷菜单点击事件
  ctxMenuLinkEvent: function ctxMenuLinkEvent(event, menu) {
    if (menu.disabled || menu.children && menu.children.length) {
      return;
    }
    var ctxMenuStore = this.ctxMenuStore;
    var ctxMenuMethod = Menus.get(menu.code);
    var params = _extends({
      $table: this,
      menu
    }, ctxMenuStore.args);
    ctxMenuMethod && ctxMenuMethod.call(this, params, event);
    _emitEvent(this, "context-menu-click", [params, event]);
    this.closeMenu();
  },
  toKebab: function toKebab(code) {
    return typeof code === "string" ? code.replace(/\B([A-Z])/g, "-$1").toLowerCase() : "menu-code";
  }
};
Panel.install = function(Table2) {
  GridAdapter._menu = 1;
  Object.assign(Table2.methods, Methods$e);
};
var Loading = defineComponent({
  name: $prefix + "GridLoading",
  directives: {
    loading: Loading$1.directive
  },
  props: _extends({}, $props, {
    visible: Boolean,
    loadingComponent: Object
  }),
  render: function render8() {
    var loadingSpinner = h("div", {
      class: "tiny-grid-loading__wrap tiny-loading__spinner",
      directives: isVue2 ? [{
        name: "loading",
        value: true
      }] : null
    });
    if (!isVue2) {
      loadingSpinner = hooks.withDirectives(loadingSpinner, [[Loading$1.directive, true]]);
    }
    var loadingComponent;
    if (this.loadingComponent) {
      loadingComponent = isVnode(this.loadingComponent) ? this.loadingComponent : h(this.loadingComponent);
    }
    return h("div", {
      class: "tiny-grid-loading",
      style: {
        display: this.visible ? "block" : "none"
      }
    }, [loadingComponent || loadingSpinner]);
  }
});
$install(Loading);
function handleActivedCheckCell(_ref88) {
  var actived = _ref88.actived, column = _ref88.column, editConfig = _ref88.editConfig, row2 = _ref88.row;
  return actived.row !== row2 || (editConfig.mode === "cell" ? actived.column !== column : false);
}
function handleActivedCanActive(_ref89) {
  var editConfig = _ref89.editConfig, params = _ref89.params;
  return !(editConfig != null && editConfig.activeMethod) || editConfig.activeMethod(params);
}
function handleActivedDoActive(_ref90) {
  var _vm = _ref90._vm, actived = _ref90.actived, canActive = _ref90.canActive, cell = _ref90.cell, column = _ref90.column, editConfig = _ref90.editConfig, event = _ref90.event, params = _ref90.params, row2 = _ref90.row, tableColumn3 = _ref90.tableColumn, type = _ref90.type;
  if (canActive) {
    if (_vm.keyboardConfig || _vm.mouseConfig) {
      _vm.clearCopyed(event);
      _vm.clearChecked();
      _vm.clearSelected(event);
    }
    _vm.clostTooltip();
    _vm.clearActived(event);
    type = "edit-actived";
    column.renderHeight = cell.offsetHeight;
    actived.args = params;
    actived.row = row2;
    actived.column = column;
    if (editConfig.mode === "row") {
      tableColumn3.forEach(function(column2) {
        return _vm._getColumnModel(row2, column2);
      });
    } else {
      _vm._getColumnModel(row2, column);
    }
    _vm.$nextTick(function() {
      _vm.handleFocus(params, event);
    });
  }
  return type;
}
function handleActivedClearActive(_ref91) {
  var _vm = _ref91._vm, canActive = _ref91.canActive, event = _ref91.event;
  if (!canActive) {
    _vm.clearActived(event);
  }
}
function handleActivedTryActive(_ref92) {
  var _vm = _ref92._vm, actived = _ref92.actived, cell = _ref92.cell, column = _ref92.column, editor = _ref92.editor, event = _ref92.event, isActiveCell = _ref92.isActiveCell, params = _ref92.params, row2 = _ref92.row;
  if (editor && cell && !isActiveCell) {
    var oldColumn = actived.column;
    if (oldColumn !== column) {
      var oldModel = oldColumn.model;
      if (oldModel.update) {
        setCellValue(row2, oldColumn, oldModel.value);
      }
      _vm.clearValidate();
    }
    column.renderHeight = cell.offsetHeight;
    actived.args = params;
    actived.column = column;
    setTimeout(function() {
      _vm.handleFocus(params, event);
    });
  }
}
var insertedField = GlobalConfig$2.constant.insertedField;
var getCellRender = function getCellRender2(isTreeNode, treeCellRender, treeRender, context) {
  return context[isTreeNode ? treeCellRender : treeRender];
};
function processRenderer(_ref93) {
  var h2 = _ref93.h, params = _ref93.params, renderer = _ref93.renderer, value = _ref93.value;
  var result = {
    flag: false,
    vnodes: null
  };
  if (renderer) {
    if (typeof renderer === "function") {
      result.flag = true;
      result.vnodes = [renderer(h2, params)];
    }
    if (renderer.component) {
      var component = renderer.component, attrs = renderer.attrs;
      result.flag = true;
      result.vnodes = [h2(hooks.toRaw(component), {
        class: "grid-cell",
        attrs: _extends({
          value,
          modelValue: value
        }, typeof attrs === "function" ? attrs(params) : attrs)
      })];
    }
  }
  return result;
}
function processAsyncColumn(_ref94) {
  var $table = _ref94.$table, column = _ref94.column, format2 = _ref94.format, h2 = _ref94.h, params = _ref94.params, row2 = _ref94.row;
  var result = {
    flag: false,
    vnodes: null
  };
  var _ref95 = format2.async || {}, fetch = _ref95.fetch, loadingText = _ref95.loadingText;
  if ($table.isAsyncColumn && row2[insertedField] !== true && typeof fetch === "function") {
    var cellText = row2[$table.getAsyncColumnName(column.property)];
    var loadingRender = loadingText || "loading ...";
    if (typeof cellText === "undefined") {
      cellText = typeof loadingRender === "function" ? loadingRender(h2, params) : loadingRender;
    }
    if (typeof cellText === "undefined" || typeof column.formatText === "undefined") {
      result.flag = true;
      result.vnodes = [cellText];
    }
  }
  return result;
}
function getColumnRuleTypeIndex(_ref96) {
  var _vm = _ref96._vm, isTreeNode = _ref96.isTreeNode, renMaps = _ref96.renMaps, type = _ref96.type;
  return {
    match: function match() {
      return type === "index";
    },
    action: function action() {
      renMaps.renderHeader = _vm.renderIndexHeader;
      renMaps.renderCell = getCellRender(isTreeNode, "renderTreeIndexCell", "renderIndexCell", _vm);
    }
  };
}
function getColumnRuleTypeRadio(_ref97) {
  var _vm = _ref97._vm, isTreeNode = _ref97.isTreeNode, renMaps = _ref97.renMaps, type = _ref97.type;
  return {
    match: function match() {
      return type === "radio";
    },
    action: function action() {
      renMaps.renderHeader = _vm.renderRadioHeader;
      renMaps.renderCell = getCellRender(isTreeNode, "renderTreeRadioCell", "renderRadioCell", _vm);
    }
  };
}
function getColumnRuleTypeSelection(_ref98) {
  var _vm = _ref98._vm, isTreeNode = _ref98.isTreeNode, renMaps = _ref98.renMaps, selectConfig = _ref98.selectConfig, type = _ref98.type;
  return {
    match: function match() {
      return type === "selection";
    },
    action: function action() {
      renMaps.renderHeader = _vm.renderSelectionHeader;
      renMaps.renderCell = getCellRender(isTreeNode, "renderTreeSelectionCell", "renderSelectionCell", _vm);
      if (selectConfig && selectConfig.checkField) {
        renMaps.renderCell = getCellRender(isTreeNode, "renderTreeSelectionCellByProp", "renderSelectionCellByProp", _vm);
      }
    }
  };
}
function getColumnRuleTypeExpand(_ref99) {
  var _vm = _ref99._vm, renMaps = _ref99.renMaps, type = _ref99.type;
  return {
    match: function match() {
      return type === "expand";
    },
    action: function action() {
      renMaps.renderCell = _vm.renderExpandCell;
      renMaps.renderData = _vm.renderExpandData;
    }
  };
}
function getColumnRuleTypeOperation(_ref100) {
  var _vm = _ref100._vm, renMaps = _ref100.renMaps, type = _ref100.type;
  return {
    match: function match() {
      return type === "operation";
    },
    action: function action() {
      renMaps.renderCell = _vm.renderOperationCell;
    }
  };
}
function getColumnRuleTypeOther(_ref101) {
  var $table = _ref101.$table, _vm = _ref101._vm, colProps = _ref101.colProps, editor = _ref101.editor, filter2 = _ref101.filter, isTreeNode = _ref101.isTreeNode, renMaps = _ref101.renMaps, type = _ref101.type;
  return {
    match: function match() {
      return !~["index", "radio", "selection", "expand", "operation"].indexOf(type);
    },
    action: function action() {
      var sortable = colProps.sortable, remoteSort = colProps.remoteSort;
      var isSortable = $table.sortable && (type ? false : sortable);
      var isSortColumn = isSortable || remoteSort;
      if (editor) {
        renMaps.renderHeader = _vm.renderEditHeader;
        renMaps.renderCell = getCellRender(isTreeNode, "renderTreeRadioCell", "renderRowEdit", _vm);
        if ($table.editConfig && $table.editConfig.mode === "row") {
          renMaps.renderCell = getCellRender(isTreeNode, "renderTreeRowEdit", "renderRowEdit", _vm);
        }
        if ($table.editConfig && $table.editConfig.mode === "cell") {
          renMaps.renderCell = getCellRender(isTreeNode, "renderTreeCellEdit", "renderCellEdit", _vm);
        }
      } else if (filter2) {
        renMaps.renderHeader = _vm.renderFilterHeader;
        if (isSortColumn) {
          renMaps.renderHeader = _vm.renderSortAndFilterHeader;
        }
      } else if (isSortColumn) {
        renMaps.renderHeader = _vm.renderSortHeader;
      }
    }
  };
}
var isCheckStrictly = function isCheckStrictly2(selectConfig) {
  return selectConfig && selectConfig.checkStrictly && !selectConfig.showHeader || selectConfig && !selectConfig.checkStrictly && selectConfig.showHeader === false;
};
var runRender = function runRender2(render18) {
  var vnode;
  try {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }
    vnode = render18.apply(void 0, params);
  } catch (e) {
    warn("ui.grid.error.renderParamError");
  } finally {
    if (!vnode || !isVnode(vnode)) {
      try {
        vnode = hooks.h(render18);
      } catch (e) {
        vnode = null;
        warn("ui.grid.error.classComponentError");
      }
    }
  }
  return vnode;
};
var Cell = {
  createColumn: function createColumn($table, colProps) {
    var type = colProps.type, filter2 = colProps.filter, editor = colProps.editor, treeNode = colProps.treeNode;
    var selectConfig = $table.selectConfig, treeConfig = $table.treeConfig;
    var isTreeNode = treeConfig && treeNode;
    var renMaps = {
      renderHeader: this.renderHeader,
      renderCell: getCellRender(isTreeNode, "renderTreeCell", "renderCell", this)
    };
    var _vm = this;
    var ruleChains = [getColumnRuleTypeIndex({
      _vm,
      isTreeNode,
      renMaps,
      type
    }), getColumnRuleTypeRadio({
      _vm,
      isTreeNode,
      renMaps,
      type
    }), getColumnRuleTypeSelection({
      _vm,
      isTreeNode,
      renMaps,
      selectConfig,
      type
    }), getColumnRuleTypeExpand({
      _vm,
      renMaps,
      type
    }), getColumnRuleTypeOperation({
      _vm,
      renMaps,
      type
    }), getColumnRuleTypeOther({
      $table,
      _vm,
      colProps,
      editor,
      filter: filter2,
      isTreeNode,
      renMaps,
      type
    })];
    for (var j = 0; j < ruleChains.length; j++) {
      if (ruleChains[j].match()) {
        ruleChains[j].action();
        break;
      }
    }
    return getColumnConfig(colProps, renMaps, GlobalConfig$2);
  },
  // 单元格
  renderHeader: function renderHeader(h2, params, type) {
    var column = params.column;
    var slots = column.slots, own = column.own, title = column.title;
    if (slots && slots.header) {
      if (type === "card") {
        return [slots.header(params, h2)];
      } else {
        return [h2("div", {
          class: "tiny-grid-cell-text"
        }, [slots.header(params, h2)])];
      }
    }
    if (typeof title === "function") {
      return [title(h2, params)];
    }
    if (type === "card") {
      return [formatText(getFuncText(own.title), 1)];
    }
    return [h2("div", {
      class: "tiny-grid-cell-text"
    }, [formatText(getFuncText(own.title), 1)])];
  },
  renderCell: function renderCell(h2, params) {
    var $table = params.$table, row2 = params.row, column = params.column;
    var slots = column.slots, renderer = column.renderer;
    var format2 = column.format || {};
    if (slots && slots.default) {
      return slots.default(params, h2);
    }
    var value = get(row2, column.property);
    var result = processRenderer({
      h: h2,
      params,
      renderer,
      value
    });
    if (result.flag) {
      return result.vnodes;
    }
    result = processAsyncColumn({
      $table,
      column,
      format: format2,
      h: h2,
      params,
      row: row2
    });
    if (result.flag) {
      return result.vnodes;
    }
    var cellValue = getCellLabel(row2, column, params);
    if (typeof cellValue === "function") {
      return [cellValue(h2, params)];
    }
    return [formatText(cellValue)];
  },
  renderTreeCell: function renderTreeCell(h2, params) {
    return Cell.renderTreeIcon(h2, params).concat(Cell.renderCell.call(this, h2, params));
  },
  // 树节点
  renderTreeIcon: function renderTreeIcon(h2, params) {
    var _ref103, _$table$$grid, _$table$$grid$designC, _$table$$grid$designC2, _ref104;
    var $table = params.$table, level = params.level, row2 = params.row;
    var treeConfig = $table.treeConfig, treeExpandeds = $table.treeExpandeds;
    var children = treeConfig.children, indent = treeConfig.indent, renderIcon = treeConfig.renderIcon, trigger = treeConfig.trigger;
    var isActive = ~treeExpandeds.indexOf(row2);
    var rowChildren = row2[children];
    var listeners = {
      click: function click(event) {
        event.stopPropagation();
        $table.triggerTreeExpandEvent(event, params);
      }
    };
    var icon = GlobalConfig$2.icon;
    var defaultIcon = function defaultIcon2(h22, _ref102) {
      var active = _ref102.active;
      var IconExpand = iconExpand();
      var IconPutAway = iconPutAway();
      return active ? h22(IconExpand) : h22(IconPutAway);
    };
    var customExpandIcon = (_ref103 = renderIcon || ((_$table$$grid = $table.$grid) == null ? void 0 : (_$table$$grid$designC = _$table$$grid.designConfig) == null ? void 0 : (_$table$$grid$designC2 = _$table$$grid$designC.treeConfig) == null ? void 0 : _$table$$grid$designC2.renderIcon)) != null ? _ref103 : defaultIcon;
    if (trigger && trigger !== "default") {
      listeners = {};
    }
    var iconVNode = [];
    if (rowChildren && rowChildren.length) {
      iconVNode = [customExpandIcon ? customExpandIcon(h2, _extends({
        active: isActive
      }, params)) : h2(iconArrowBottom(), {
        class: ["tiny-grid-tree__node-btn", icon.tree, {
          "is__active": isActive
        }]
      })];
    }
    var map = {
      isActive: "is__active"
    };
    return [h2("span", {
      class: "tiny-grid-tree__indent",
      style: {
        width: level * (indent || 16) + "px"
      }
    }), h2("span", {
      class: ["tiny-grid-tree-wrapper", (_ref104 = {}, _ref104[map.isActive] = isActive, _ref104)],
      on: listeners
    }, iconVNode)];
  },
  // 索引
  renderIndexHeader: function renderIndexHeader(h2, params) {
    var column = params.column;
    var slots = column.slots;
    var own = column.own;
    if (slots && slots.header) {
      return slots.header(params, h2);
    }
    var value = getFuncText(own.title || own.label || "");
    return [formatText(value, 1)];
  },
  renderTreeIndexCell: function renderTreeIndexCell(h2, params) {
    return Cell.renderTreeIcon(h2, params).concat(Cell.renderIndexCell(h2, params));
  },
  renderIndexCell: function renderIndexCell(h2, params) {
    var $table = params.$table, column = params.column, row2 = params.row, seq = params.seq, $seq = params.$seq, level = params.level;
    var startIndex = $table.startIndex, treeConfig = $table.treeConfig, scrollYLoad = $table.scrollYLoad, treeOrdered = $table.treeOrdered;
    var indexMethod = column.indexMethod, slots = column.slots;
    var _ref105 = treeConfig || {}, _ref105$temporaryInde = _ref105.temporaryIndex, temporaryIndex = _ref105$temporaryInde === void 0 ? "_$index_" : _ref105$temporaryInde;
    var isTreeOrderedFalse = treeConfig && !treeOrdered;
    var indexValue = startIndex + seq;
    if (isTreeOrderedFalse && level) {
      indexValue = scrollYLoad ? row2[temporaryIndex] : $seq + "." + seq;
    }
    if (slots && slots.default) {
      return slots.default(params, h2);
    }
    return [formatText(indexMethod ? indexMethod(params) : indexValue, 1)];
  },
  // 单选
  renderRadioHeader: function renderRadioHeader(h2, params) {
    var _params$column = params.column, own = _params$column.own, slots = _params$column.slots;
    if (slots && slots.header) {
      return slots.header(params, h2);
    }
    var value = getFuncText(own.title || own.label);
    return [formatText(value, 1)];
  },
  renderRadioCell: function renderRadioCell(h2, params) {
    var _ref106;
    var $table = params.$table, slots = params.column.slots, row2 = params.row;
    var _$table$radioConfig2 = $table.radioConfig, radioConfig = _$table$radioConfig2 === void 0 ? {} : _$table$radioConfig2, selectRow = $table.selectRow, vSize4 = $table.vSize;
    var labelField = radioConfig.labelField, checkMethod = radioConfig.checkMethod;
    var disabled = !!checkMethod;
    var options = {};
    if (slots && slots.default) {
      return slots.default(params, h2);
    }
    options.attrs = {
      name: "tiny-grid-radio__" + $table.id,
      type: "radio"
    };
    if (checkMethod) {
      options.attrs.disabled = disabled = !checkMethod(params);
    }
    options.domProps = {
      checked: row2 === selectRow
    };
    options.on = {
      change: function change(event) {
        $table.triggerRadioRowEvent(event, params);
      }
    };
    return [h2("label", {
      class: ["tiny-grid-radio", (_ref106 = {}, _ref106["size__" + vSize4] = vSize4, _ref106["is__disabled"] = disabled, _ref106)]
    }, [h2("input", options), h2("span", {
      class: "tiny-grid-radio__icon"
    }, [h2(iconRadio(), {
      class: ["tiny-svg-size", "icon-radio"]
    }), h2(iconRadioselected(), {
      class: ["tiny-svg-size", "icon-radio-selected"]
    })]), labelField ? h2("span", {
      class: "tiny-grid-radio__label"
    }, get(row2, labelField)) : null])];
  },
  renderTreeRadioCell: function renderTreeRadioCell(h2, params) {
    return Cell.renderTreeIcon(h2, params).concat(Cell.renderRadioCell(h2, params));
  },
  renderSelectionHeader: function renderSelectionHeader(h2, params) {
    var _ref107;
    var $table = params.$table, column = params.column;
    var slots = column.slots, own = column.own;
    var headerCheckDisabled = $table.headerCheckDisabled, isAllSelected = $table.isAllSelected, isIndeterminate = $table.isIndeterminate, selectConfig = $table.selectConfig, vSize4 = $table.vSize;
    var headerTitle = own.title || own.label;
    var options = {
      attrs: {
        type: "checkbox"
      }
    };
    if (slots && slots.header) {
      return slots.header(params, h2);
    }
    if (isCheckStrictly(selectConfig)) {
      return [];
    }
    options.domProps = {
      disabled: headerCheckDisabled,
      checked: isAllSelected && !headerCheckDisabled
    };
    options.on = {
      change: function change(event) {
        $table.triggerCheckAllEvent(event, event.target.checked);
        $table.showSelectToolbar();
      }
    };
    var vnode = h2("label", {
      class: ["tiny-grid-checkbox tiny-select-header", (_ref107 = {}, _ref107["size__" + vSize4] = vSize4, _ref107["is__disabled"] = headerCheckDisabled, _ref107["is__indeterminate"] = isIndeterminate, _ref107)],
      key: random()
    }, [h2("input", options), h2("span", {
      class: "tiny-grid-checkbox__icon"
    }, [h2(iconCheck(), {
      class: ["tiny-svg-size", "icon-check"]
    }), isAllSelected ? h2(iconCheckedSur(), {
      class: ["tiny-svg-size", "icon-checked-sur"]
    }) : "", isIndeterminate ? h2(iconHalfselect(), {
      class: ["tiny-svg-size", "icon-half-select"]
    }) : ""]), headerTitle ? h2("span", {
      class: "tiny-grid-checkbox__label"
    }, getFuncText(headerTitle)) : null]);
    var dropdownVnode = null;
    if (slots && slots.dropdown) {
      dropdownVnode = h2("div", {
        class: "selection-dropdown-wrapper"
      }, [slots.dropdown(params, h2)]);
    }
    return [vnode, dropdownVnode];
  },
  renderSelectionCell: function renderSelectionCell(h2, params) {
    var _ref109;
    var $table = params.$table, column = params.column, row2 = params.row;
    var slots = column.slots;
    var _$table$selectConfig2 = $table.selectConfig, selectConfig = _$table$selectConfig2 === void 0 ? {} : _$table$selectConfig2, treeConfig = $table.treeConfig, treeIndeterminates = $table.treeIndeterminates, vSize4 = $table.vSize;
    var labelField = selectConfig.labelField, checkMethod = selectConfig.checkMethod;
    var _ref108 = {}, _ref108$indeterminate = _ref108.indeterminate, indeterminate = _ref108$indeterminate === void 0 ? false : _ref108$indeterminate, _ref108$isDisabled = _ref108.isDisabled, isDisabled = _ref108$isDisabled === void 0 ? !!checkMethod : _ref108$isDisabled;
    var options = {
      attrs: {
        type: "checkbox"
      }
    };
    if (slots && slots.default) {
      return slots.default(params, h2);
    }
    checkMethod && (options.attrs.disabled = isDisabled = !checkMethod(params));
    treeConfig && (indeterminate = ~treeIndeterminates.indexOf(row2));
    options.domProps = {
      checked: ~$table.selection.indexOf(row2)
    };
    var twcls = params.twcls;
    var labelCls = ["tiny-grid-checkbox tiny-select-cell", (_ref109 = {}, _ref109["size__" + vSize4] = vSize4, _ref109["is__indeterminate"] = indeterminate, _ref109["is__disabled"] = isDisabled, _ref109)];
    var inputCls = null;
    var spanCls = "tiny-grid-checkbox__icon";
    var svgCls = "tiny-svg-size icon-checked-sur";
    if (twcls) {
      labelCls = twcls.label || labelCls;
      inputCls = twcls.input || inputCls;
      spanCls = twcls.span || spanCls;
      svgCls = twcls.svg || svgCls;
      options.class = inputCls;
    }
    var checkboxEvent = {
      click: function click(event) {
        var _event$target;
        if ((event == null ? void 0 : (_event$target = event.target) == null ? void 0 : _event$target.tagName.toLowerCase()) === "input") {
          return;
        }
        var isChecked = $table.selection.includes(row2);
        setTimeout(function() {
          $table.triggerCheckRowEvent(event, params, !isChecked);
          $table.showSelectToolbar();
        }, 0);
      }
    };
    var vnode = h2("label", {
      class: labelCls,
      key: random(),
      on: checkboxEvent
    }, [h2("input", options), h2("span", {
      class: spanCls
    }, [h2(iconCheck(), {
      class: ["tiny-svg-size", "icon-check"]
    }), h2(iconCheckedSur(), {
      class: svgCls
    }), indeterminate ? h2(iconHalfselect(), {
      class: "tiny-svg-size icon-half-select"
    }) : ""]), labelField ? h2("span", {
      class: "tiny-grid-checkbox__label"
    }, get(row2, labelField)) : null]);
    return [vnode];
  },
  renderTreeSelectionCell: function renderTreeSelectionCell(h2, params) {
    return Cell.renderTreeIcon(h2, params).concat(Cell.renderSelectionCell(h2, params));
  },
  // TODO: 与renderSelectionCell代码方法高度相似，待提取公共逻辑。
  renderSelectionCellByProp: function renderSelectionCellByProp(h2, params) {
    var _ref111;
    var $table = params.$table, column = params.column, row2 = params.row;
    var slots = column.slots;
    var _$table$selectConfig3 = $table.selectConfig, selectConfig = _$table$selectConfig3 === void 0 ? {} : _$table$selectConfig3, treeConfig = $table.treeConfig, treeIndeterminates = $table.treeIndeterminates, vSize4 = $table.vSize;
    var property = selectConfig.checkField, checkMethod = selectConfig.checkMethod, labelField = selectConfig.labelField;
    var _ref110 = {}, _ref110$indeterminate = _ref110.indeterminate, indeterminate = _ref110$indeterminate === void 0 ? false : _ref110$indeterminate, _ref110$isDisabled = _ref110.isDisabled, isDisabled = _ref110$isDisabled === void 0 ? !!checkMethod : _ref110$isDisabled;
    var options = {
      attrs: {
        type: "checkbox"
      }
    };
    if (slots && slots.default) {
      return slots.default(params, h2);
    }
    checkMethod && (options.attrs.disabled = isDisabled = !checkMethod(params));
    treeConfig && (indeterminate = ~treeIndeterminates.indexOf(row2));
    options.domProps = {
      checked: get(row2, property)
    };
    options.on = {
      change: function change(event) {
        $table.triggerCheckRowEvent(event, params, event.target.checked);
      }
    };
    var vnode = h2("label", {
      key: random(),
      class: ["tiny-grid-checkbox", (_ref111 = {}, _ref111["size__" + vSize4] = vSize4, _ref111["is__indeterminate"] = indeterminate, _ref111["is__disabled"] = isDisabled, _ref111)]
    }, [h2("input", options), h2("span", {
      class: "tiny-grid-checkbox__icon"
    }, [h2(iconCheck(), {
      class: ["tiny-svg-size", "icon-check"]
    }), !indeterminate ? "" : h2(iconHalfselect(), {
      class: ["tiny-svg-size", "icon-half-select"]
    }), h2(iconCheckedSur(), {
      class: ["tiny-svg-size", "icon-checked-sur"]
    })]), labelField ? h2("span", {
      class: "tiny-grid-checkbox__label"
    }, get(row2, labelField)) : null]);
    return [vnode];
  },
  renderTreeSelectionCellByProp: function renderTreeSelectionCellByProp(h2, params) {
    return Cell.renderTreeIcon(h2, params).concat(Cell.renderSelectionCellByProp(h2, params));
  },
  // 展开行
  renderExpandCell: function renderExpandCell(h2, params) {
    var _ref112;
    var $table = params.$table, row2 = params.row;
    var _$table$expandConfig3 = $table.expandConfig, expandConfig = _$table$expandConfig3 === void 0 ? {} : _$table$expandConfig3;
    var _expandConfig$showIco = expandConfig.showIcon, showIcon = _expandConfig$showIco === void 0 ? true : _expandConfig$showIco, expandMethod = expandConfig.activeMethod;
    var hideExpand = typeof expandMethod === "function" ? expandMethod(row2) : true;
    var expandActive = $table.expandeds.includes(params.row);
    if (!showIcon)
      return null;
    var map = {
      expandActive: "expand__active"
    };
    return [h2("span", {
      class: ["tiny-grid__expanded", (_ref112 = {}, _ref112[map.expandActive] = expandActive, _ref112)],
      on: {
        click: function click(event) {
          if (!hideExpand) {
            return;
          }
          $table.triggerRowExpandEvent(event, params);
        }
      }
    }, [hideExpand && h2("i", {
      class: "tiny-grid__expand-icon"
    })])];
  },
  renderExpandData: function renderExpandData(h2, params) {
    var slots = params.column.slots;
    if (slots && slots.default) {
      return slots.default(params, h2);
    }
    return [];
  },
  // 排序和筛选
  renderSortAndFilterHeader: function renderSortAndFilterHeader(h2, params) {
    var suffixCls = Cell.getSuffixCls(params);
    return Cell.renderHeader(h2, params).concat(Cell.renderFilterIcon(h2, params, suffixCls[0])).concat(Cell.renderSortIcon(h2, params, suffixCls[1]));
  },
  // 排序
  renderSortHeader: function renderSortHeader(h2, params) {
    var suffixCls = Cell.getSuffixCls(params);
    return Cell.renderHeader(h2, params).concat(Cell.renderSortIcon(h2, params, suffixCls[1]));
  },
  renderSortIcon: function renderSortIcon(h2, params, cls) {
    if (cls === void 0) {
      cls = "";
    }
    var icon = GlobalConfig$2.icon;
    var $table = params.$table, column = params.column;
    var isColGroup = column.children && column.children.length;
    return [h2("span", {
      class: "tiny-grid-sort-wrapper " + cls
    }, isColGroup ? [] : [column.order === "desc" || !icon.sortDefault ? h2(icon.sortAsc, {
      class: ["tiny-grid-sort__btn", {
        "sort__active": column.order === (!icon.sortDefault ? "asc" : "desc")
      }],
      on: {
        click: function click(event) {
          $table.triggerSortEvent(event, column, !icon.sortDefault ? "asc" : "");
        }
      }
    }) : "", column.order === "asc" || !icon.sortDefault ? h2(icon.sortDesc, {
      class: ["tiny-grid-sort__btn", {
        "sort__active": column.order === (!icon.sortDefault ? "desc" : "asc")
      }],
      on: {
        click: function click(event) {
          $table.triggerSortEvent(event, column, "desc");
        }
      }
    }) : "", !column.order && icon.sortDefault ? h2(icon.sortDefault, {
      class: ["tiny-grid-sort__btn"],
      on: {
        click: function click(event) {
          $table.triggerSortEvent(event, column, "asc");
        }
      }
    }) : ""])];
  },
  // 筛选
  renderFilterHeader: function renderFilterHeader(h2, params) {
    var suffixCls = Cell.getSuffixCls(params);
    return Cell.renderHeader(h2, params).concat(Cell.renderFilterIcon(h2, params, suffixCls[1]));
  },
  renderFilterIcon: function renderFilterIcon(h2, params, cls) {
    var _ref113, _ref114;
    if (cls === void 0) {
      cls = "";
    }
    var $table = params.$table, column = params.column;
    var filterStore = $table.filterStore;
    var icon = GlobalConfig$2.icon;
    var map = {
      isActive: "is__active",
      hasFilter: "has__Filter"
    };
    return [h2("span", {
      class: ["tiny-grid-filter-wrapper " + cls, (_ref113 = {}, _ref113[map.isActive] = filterStore.visible && filterStore.column === column, _ref113)]
    }, [h2(icon.filter, {
      class: ["tiny-svg-size tiny-grid-filter__btn " + column.id, (_ref114 = {}, _ref114[map.hasFilter] = column.filter && column.filter.hasFilter, _ref114)],
      on: {
        click: function click(event) {
          $table.triggerFilterEvent(event, params.column, params);
        }
      }
    })])];
  },
  // 可编辑
  renderEditHeader: function renderEditHeader(h2, params) {
    var $table = params.$table, column = params.column;
    var editConfig = $table.editConfig, editRules = $table.editRules, validOpts2 = $table.validOpts;
    var filter2 = column.filter, remoteSort = column.remoteSort, sortable = column.sortable, type = column.type, own = column.own;
    var icon = GlobalConfig$2.icon;
    var isRequired;
    sortable = $table.sortable && !type && sortable;
    var suffixCls = Cell.getSuffixCls(params);
    var isRenderSortIcon = sortable || remoteSort;
    var columnRules;
    if (editRules) {
      columnRules = get(editRules, params.column.property);
    }
    if (editRules && columnRules && !Array.isArray(columnRules)) {
      columnRules = [columnRules];
    }
    if (editRules && columnRules) {
      isRequired = columnRules.some(function(rule) {
        return rule.required;
      });
    }
    var showAsterisk = typeof validOpts2.asteriskMethod !== "function" || validOpts2.asteriskMethod(params);
    var vNodes = [isRequired && showAsterisk ? h2("i", {
      class: "tiny-icon " + icon.required
    }) : null, !editConfig || !own.showIcon ? null : h2(icon.edit, {
      class: "tiny-grid-edit-icon tiny-svg-size"
    })];
    vNodes = vNodes.concat(Cell.renderHeader(h2, params));
    vNodes = vNodes.concat(filter2 ? Cell.renderFilterIcon(h2, params, isRenderSortIcon ? suffixCls[0] : suffixCls[1]) : []);
    vNodes = vNodes.concat(isRenderSortIcon ? Cell.renderSortIcon(h2, params, suffixCls[1]) : []);
    return vNodes;
  },
  renderTreeRowEdit: function renderTreeRowEdit(h2, params) {
    return Cell.renderTreeIcon(h2, params).concat(Cell.renderRowEdit(h2, params));
  },
  // 行格编辑模式
  renderRowEdit: function renderRowEdit(h2, params) {
    var actived = params.$table.editStore.actived;
    var editConfig = params.$table.editConfig;
    var isActiveCell = function isActiveCell2() {
      return editConfig != null && editConfig.activeStrictly ? handleActivedCanActive({
        editConfig,
        params
      }) : true;
    };
    return Cell.runRenderer(h2, params, this, (actived == null ? void 0 : actived.row) === params.row && isActiveCell());
  },
  renderTreeCellEdit: function renderTreeCellEdit(h2, params) {
    return Cell.renderTreeIcon(h2, params).concat(Cell.renderCellEdit(h2, params));
  },
  // 单元格编辑模式
  renderCellEdit: function renderCellEdit(h2, params) {
    var actived = params.$table.editStore.actived;
    return Cell.runRenderer(h2, params, this, actived && actived.row === params.row && actived.column === params.column);
  },
  runRenderer: function runRenderer(h2, params, _vm, isEdit) {
    var $table = params.$table, column = params.column, row2 = params.row;
    var formatText2 = column.formatText, own = column.own, slots = column.slots;
    var editor = own.editor;
    var compConf = Renderer$1.get(editor.component);
    var showEdit = $table.editConfig && editor.type === "visible" || isEdit;
    if (showEdit && slots && slots.edit) {
      return slots.edit(params, h2);
    }
    if (showEdit && typeof editor === "function") {
      return [editor(h2, params)];
    }
    if (showEdit && compConf && compConf.renderEdit) {
      return compConf.renderEdit.call($table, h2, editor, params, {
        $type: "edit",
        $excel: $table.$parent,
        $table,
        $column: column
      });
    }
    if (showEdit) {
      return [];
    }
    if (slots && slots.default) {
      return slots.default(params, h2);
    }
    if (formatText2) {
      var cellValue = getCellLabel(row2, column, params);
      if (typeof cellValue === "function") {
        return [cellValue(h2)];
      }
      return [cellValue];
    }
    return Cell.renderCell.call(_vm, h2, params);
  },
  getSuffixCls: function getSuffixCls(params) {
    return params.$table.headerSuffixIconAbsolute ? ["suffix-icon-1", "suffix-icon-0"] : ["", ""];
  },
  renderOperationCell: function renderOperationCell(h2, params) {
    var column = params.column, $table = params.$table, row2 = params.row;
    var _column$operationConf = column.operationConfig, operationConfig = _column$operationConf === void 0 ? {} : _column$operationConf, slots = column.slots;
    if (slots && slots.default) {
      return slots.default(params, h2);
    }
    var _operationConfig$butt = operationConfig.buttons, buttons = _operationConfig$butt === void 0 ? [] : _operationConfig$butt, render18 = operationConfig.render, _operationConfig$max = operationConfig.max, max = _operationConfig$max === void 0 ? 3 : _operationConfig$max, _operationConfig$disa = operationConfig.disabledClass, disabledClass = _operationConfig$disa === void 0 ? "" : _operationConfig$disa;
    var viewClass = $table.viewCls("operButton");
    if (render18) {
      return render18({
        h: h2,
        buttons,
        params
      });
    }
    var renderBase2 = function renderBase3(buttonConfig, flag, classes, attrs) {
      var mergeParams = _extends({
        buttonConfig
      }, params);
      var on2 = {
        click: function click(e) {
          if (!isDisabled(buttonConfig) && isFunction(buttonConfig.click)) {
            buttonConfig.click(e, mergeParams);
          }
        }
      };
      classes = classes.join(" ");
      var clazz = isDisabled(buttonConfig) ? [classes, "tiny-grid__oper-col-button--disabled", disabledClass] : classes;
      var childNodes = isFunction(buttonConfig.icon) ? [runRender(buttonConfig.icon, h2, mergeParams)] : [h2(buttonConfig.icon)];
      return flag ? h2("span", {
        class: clazz,
        attrs,
        on: on2
      }, childNodes) : null;
    };
    var renderBig = function renderBig2(buttonConfig, cls) {
      if (cls === void 0) {
        cls = "";
      }
      var classes = ["tiny-grid__oper-col-button", buttonConfig.class || "", cls];
      var attrs = {
        title: buttonConfig.name || ""
      };
      return renderBase2(buttonConfig, buttonConfig.icon, classes, attrs);
    };
    var isDisabled = function isDisabled2(buttonConfig) {
      var _buttonConfig$disable = buttonConfig.disabled, disabled = _buttonConfig$disable === void 0 ? false : _buttonConfig$disable;
      return typeof disabled === "boolean" && disabled || typeof disabled === "function" && disabled(row2);
    };
    var isHidden = function isHidden2(buttonConfig) {
      var _buttonConfig$hidden = buttonConfig.hidden, hidden = _buttonConfig$hidden === void 0 ? false : _buttonConfig$hidden;
      return typeof hidden === "boolean" && hidden || typeof hidden === "function" && hidden(row2);
    };
    var handleItemClick = function handleItemClick2(itemData) {
      var realName = (itemData == null ? void 0 : itemData.name) || itemData;
      var buttonConfig = visibleButtons.find(function(_ref115) {
        var buttonName = _ref115.name;
        return buttonName === realName;
      });
      buttonConfig.click(window.event || {}, _extends({
        buttonConfig
      }, params));
    };
    var visibleButtons = [];
    buttons.forEach(function(buttonConfig) {
      return !isHidden(buttonConfig) && visibleButtons.push(buttonConfig);
    });
    var groupBig;
    if (visibleButtons.length > max) {
      var end = max - 1;
      var dropdownProps = {
        trigger: "hover",
        showIcon: false
      };
      groupBig = visibleButtons.slice(0, end).map(function(buttonConfig) {
        return renderBig(buttonConfig, viewClass);
      });
      var scopedSlots = {
        default: function _default25() {
          return h2(iconEllipsis(), {
            class: "tiny-grid__oper-col-elps"
          });
        },
        dropdown: function dropdown() {
          return h2(DropdownMenu, {
            slot: "dropdown"
          }, visibleButtons.slice(end).map(function(buttonConfig) {
            var _class2;
            return h2(DropdownItem, {
              class: (_class2 = {}, _class2[disabledClass || ""] = isDisabled(buttonConfig), _class2),
              props: {
                itemData: buttonConfig,
                disabled: isDisabled(buttonConfig)
              }
            }, buttonConfig.name);
          }));
        }
      };
      groupBig.push(h2(Dropdown, {
        on: {
          "item-click": handleItemClick
        },
        props: dropdownProps,
        scopedSlots
      }));
    } else {
      groupBig = visibleButtons.map(function(buttonConfig) {
        return renderBig(buttonConfig, viewClass);
      });
    }
    return [h2("span", {
      class: "tiny-grid__oper-col-wrapper",
      attrs: {
        "data-tag": "operation-cell-buttons"
      }
    }, groupBig)];
  }
};
var CellDefault = Cell;
function setTableElemWidth(_ref116) {
  var scrollbarWidth = _ref116.scrollbarWidth, tWidth = _ref116.tWidth, tableElem = _ref116.tableElem;
  if (tableElem && tWidth === null) {
    tableElem.style.width = tWidth;
  }
  if (tableElem && tWidth !== null) {
    tableElem.style.width = tWidth + scrollbarWidth + "px";
  }
}
function getTableWidth(_ref117) {
  var scrollXLoad = _ref117.scrollXLoad, tWidth = _ref117.tWidth, tableColumn3 = _ref117.tableColumn;
  if (scrollXLoad) {
    tWidth = tableColumn3.reduce(function(previous, column) {
      return previous + column.renderWidth;
    }, 0);
  }
  return {
    tableColumn: tableColumn3,
    tWidth
  };
}
function layoutFooter(_ref118) {
  var customHeight = _ref118.customHeight, footerHeight = _ref118.footerHeight, headerHeight = _ref118.headerHeight, scrollXLoad = _ref118.scrollXLoad, scrollbarWidth = _ref118.scrollbarWidth, tableElem = _ref118.tableElem, scrollbarHeight = _ref118.scrollbarHeight, tableColumn3 = _ref118.tableColumn, tableHeight = _ref118.tableHeight, tableWidth = _ref118.tableWidth, wrapperElem = _ref118.wrapperElem, fixedWrapperElem = _ref118.fixedWrapperElem;
  var tWidth = tableWidth;
  var ret = getTableWidth({
    scrollXLoad,
    tWidth,
    tableColumn: tableColumn3
  });
  tableColumn3 = ret.tableColumn;
  tWidth = ret.tWidth;
  if (wrapperElem && fixedWrapperElem) {
    wrapperElem.style.top = (customHeight ? customHeight - footerHeight : tableHeight + headerHeight) + "px";
  }
  if (wrapperElem) {
    wrapperElem.style.marginTop = -scrollbarHeight - 1 + "px";
  }
  setTableElemWidth({
    scrollbarWidth,
    tWidth,
    tableElem
  });
  return tableColumn3;
}
function layoutColgroup(_ref119) {
  var elemStore = _ref119.elemStore, fullColumnIdData = _ref119.fullColumnIdData, layout = _ref119.layout, scrollbarWidth = _ref119.scrollbarWidth;
  var colgroupElem = elemStore["main-" + layout + "-colgroup"];
  var colElemHandler = function colElemHandler2(colElem) {
    var colid = colElem.getAttribute("name");
    if (colid === "col_gutter") {
      colElem.width = "" + (scrollbarWidth || "");
    }
    if (fullColumnIdData[colid]) {
      var column = fullColumnIdData[colid].column;
      colElem.width = "" + (column.renderWidth || "");
    }
  };
  if (colgroupElem) {
    arrayEach$1(colgroupElem.children, colElemHandler);
  }
}
function layoutHeader(_ref120) {
  var elemStore = _ref120.elemStore, layout = _ref120.layout, scrollXLoad = _ref120.scrollXLoad, scrollbarWidth = _ref120.scrollbarWidth, tableColumn3 = _ref120.tableColumn, tableElem = _ref120.tableElem, tableWidth = _ref120.tableWidth;
  var tWidth = tableWidth;
  var repairElem = elemStore["main-" + layout + "-repair"];
  if (scrollXLoad) {
    tWidth = tableColumn3.reduce(function(previous, column) {
      return previous + column.renderWidth;
    }, 0);
  }
  setTableElemWidth({
    scrollbarWidth,
    tWidth,
    tableElem
  });
  if (repairElem) {
    repairElem.style.width = tableWidth + "px";
  }
  return tableColumn3;
}
function layoutTable(_ref121) {
  var tWidth = _ref121.tWidth, tableElem = _ref121.tableElem;
  if (tableElem) {
    tableElem.style.width = tWidth ? tWidth + "px" : tWidth;
  }
}
function layoutBodyWrapper(_ref122) {
  var footerHeight = _ref122.footerHeight, customHeight = _ref122.customHeight, headerHeight = _ref122.headerHeight, maxHeight = _ref122.maxHeight, minHeight = _ref122.minHeight, parentHeight2 = _ref122.parentHeight, wrapperElem = _ref122.wrapperElem, scrollbarWidth = _ref122.scrollbarWidth;
  if (wrapperElem) {
    if (customHeight > 0) {
      var contentHeight = customHeight - headerHeight - footerHeight;
      wrapperElem.style.height = contentHeight + "px";
    }
    if (maxHeight) {
      maxHeight = isScale(maxHeight) ? Math.floor(parseInt(maxHeight) / 100 * parentHeight2) : toNumber(maxHeight);
      var _contentHeight = maxHeight - headerHeight - footerHeight;
      wrapperElem.style.maxHeight = _contentHeight + "px";
    }
    if (minHeight) {
      minHeight = isScale(minHeight) ? Math.floor(parseInt(minHeight) / 100 * parentHeight2) : toNumber(minHeight);
      wrapperElem.style.minHeight = minHeight - headerHeight - footerHeight + "px";
    }
  }
  return {
    maxHeight,
    minHeight
  };
}
function layoutEmptyBlock(_ref123) {
  var emptyBlockElem = _ref123.emptyBlockElem, tWidth = _ref123.tWidth;
  if (emptyBlockElem) {
    emptyBlockElem.style.width = tWidth ? tWidth + "px" : tWidth || "";
  }
}
function layoutBody(options) {
  var customHeight = options.customHeight, elemStore = options.elemStore, footerHeight = options.footerHeight, headerHeight = options.headerHeight, layout = options.layout;
  var maxHeight = options.maxHeight, minHeight = options.minHeight, parentHeight2 = options.parentHeight, scrollXLoad = options.scrollXLoad;
  var scrollbarWidth = options.scrollbarWidth, tableColumn3 = options.tableColumn, tableElem = options.tableElem, tableWidth = options.tableWidth, wrapperElem = options.wrapperElem;
  var emptyBlockElem = elemStore["main-" + layout + "-emptyBlock"];
  var ret = layoutBodyWrapper({
    customHeight,
    footerHeight,
    headerHeight,
    maxHeight,
    minHeight,
    parentHeight: parentHeight2,
    scrollbarWidth,
    wrapperElem
  });
  maxHeight = ret.maxHeight;
  minHeight = ret.minHeight;
  var tWidth = tableWidth;
  ret = getTableWidth({
    scrollXLoad,
    tWidth,
    tableColumn: tableColumn3
  });
  tableColumn3 = ret.tableColumn;
  tWidth = ret.tWidth;
  layoutTable({
    tWidth,
    tableElem
  });
  layoutEmptyBlock({
    emptyBlockElem,
    tWidth
  });
  return {
    maxHeight,
    minHeight,
    tableColumn: tableColumn3
  };
}
function handleLayout(params) {
  var _vm = params._vm, columnStore = params.columnStore, customHeight = params.customHeight, fixedColumn = params.fixedColumn, fixedWrapperElem = params.fixedWrapperElem, layout = params.layout, maxHeight = params.maxHeight, minHeight = params.minHeight, parentHeight2 = params.parentHeight, tableColumn3 = params.tableColumn;
  var elemStore = _vm.elemStore, footerHeight = _vm.footerHeight, fullColumnIdData = _vm.fullColumnIdData, headerHeight = _vm.headerHeight, showFooter = _vm.showFooter;
  var overflowX = _vm.overflowX, overflowY = _vm.overflowY, scrollXLoad = _vm.scrollXLoad, scrollbarHeight = _vm.scrollbarHeight, scrollbarWidth = _vm.scrollbarWidth;
  var allColumnOverflow = _vm.showOverflow, tableHeight = _vm.tableHeight, tableWidth = _vm.tableWidth;
  var wrapperElem = elemStore["main-" + layout + "-wrapper"];
  var tableElem = elemStore["main-" + layout + "-table"];
  if (layout === "header") {
    tableColumn3 = layoutHeader({
      elemStore,
      layout,
      scrollXLoad,
      scrollbarWidth,
      tableColumn: tableColumn3,
      tableElem,
      tableWidth
    });
  } else if (layout === "body") {
    var ret = layoutBody(_extends({}, {
      allColumnOverflow,
      columnStore,
      customHeight,
      elemStore,
      fixedColumn,
      fixedWrapperElem
    }, {
      footerHeight,
      headerHeight,
      layout,
      maxHeight,
      minHeight,
      overflowX,
      overflowY
    }, {
      parentHeight: parentHeight2,
      scrollXLoad,
      scrollbarHeight,
      scrollbarWidth,
      showFooter,
      tableColumn: tableColumn3,
      tableElem,
      tableHeight,
      tableWidth,
      wrapperElem
    }));
    maxHeight = ret.maxHeight;
    minHeight = ret.minHeight;
    tableColumn3 = ret.tableColumn;
  } else if (layout === "footer") {
    tableColumn3 = layoutFooter({
      customHeight,
      fixedWrapperElem,
      footerHeight,
      headerHeight,
      scrollXLoad,
      scrollbarHeight,
      scrollbarWidth,
      tableColumn: tableColumn3,
      tableElem,
      tableHeight,
      tableWidth,
      wrapperElem
    });
  }
  layoutColgroup({
    elemStore,
    fullColumnIdData,
    layout,
    scrollbarWidth
  });
  return {
    tableColumn: tableColumn3,
    maxHeight,
    minHeight
  };
}
function isTargetRadioOrCheckbox(event, column, colType, targetType) {
  var target = event.target;
  return target && column.type === colType && target.tagName.toLowerCase() === "input" && target.type === (targetType || colType);
}
function onClickExpandColumn(_ref124) {
  var $el = _ref124.$el, _vm = _ref124._vm, column = _ref124.column, event = _ref124.event, expandConfig = _ref124.expandConfig, params = _ref124.params;
  if ((expandConfig.trigger === "row" || column.type === "expand" && expandConfig.trigger === "cell") && !_vm.getEventTargetNode(event, $el, "tiny-grid__expanded").flag) {
    _vm.triggerRowExpandEvent(event, params);
  }
}
function onClickTreeNodeColumn(_ref125) {
  var _vm = _ref125._vm, column = _ref125.column, event = _ref125.event, params = _ref125.params, treeConfig = _ref125.treeConfig;
  if (treeConfig.trigger === "row" || column.treeNode && treeConfig.trigger === "cell") {
    _vm.triggerTreeExpandEvent(event, params);
  }
}
function onHighlightCurrentRow(_ref126) {
  var $el = _ref126.$el, _vm = _ref126._vm, event = _ref126.event, highlightCurrentRow = _ref126.highlightCurrentRow, params = _ref126.params, radioConfig = _ref126.radioConfig;
  if (highlightCurrentRow) {
    if (radioConfig.trigger === "row" || !_vm.getEventTargetNode(event, $el, "tiny-grid-checkbox").flag && !_vm.getEventTargetNode(event, $el, "tiny-grid-radio").flag) {
      _vm.triggerCurrentRowEvent(event, params);
    }
  }
}
function onClickRadioColumn(_ref127) {
  var $el = _ref127.$el, _vm = _ref127._vm, column = _ref127.column, event = _ref127.event, params = _ref127.params, radioConfig = _ref127.radioConfig;
  if ((radioConfig.trigger === "row" || column.type === "radio" && radioConfig.trigger === "cell") && !_vm.getEventTargetNode(event, $el, "tiny-grid-radio").flag) {
    _vm.triggerRadioRowEvent(event, params);
  }
}
function onClickSelectColumn(_ref128) {
  var _vm = _ref128._vm, column = _ref128.column, event = _ref128.event, params = _ref128.params, selectConfig = _ref128.selectConfig;
  if ((selectConfig.trigger === "row" || column.type === "selection" && selectConfig.trigger === "cell") && !_vm.getEventTargetNode(event, params.cell, "tiny-grid-checkbox").flag) {
    _vm.handleToggleCheckRowEvent(params, event);
  }
}
function onClickCellSelect(_ref129) {
  var _vm = _ref129._vm, actived = _ref129.actived, cell = _ref129.cell, column = _ref129.column, editConfig = _ref129.editConfig, event = _ref129.event, mouseConfig = _ref129.mouseConfig, params = _ref129.params, row2 = _ref129.row;
  if (!mouseConfig.checked && editConfig) {
    if (editConfig.trigger === "manual") {
      if (actived.args && actived.row === row2 && column !== actived.column) {
        _vm.handleChangeCell(event, params);
      }
    } else if (!actived.args || cell !== actived.args.cell) {
      if (editConfig.trigger === "click") {
        _vm.handleChangeCell(event, params);
      } else if (editConfig.trigger === "dblclick") {
        if (editConfig.mode === "row" && actived.row === params.row) {
          _vm.handleChangeCell(event, params);
        } else {
          _vm.handleSelected(params, event);
        }
      }
    }
  }
}
function onGroupHeader(_ref130) {
  var _vm = _ref130._vm, isGroup2 = _ref130.isGroup, headerProps2 = _ref130.headerProps;
  if (isGroup2) {
    eachTree(_vm.collectColumn, function(column) {
      if (column.children && column.children.length) {
        column.visible = !!findTree(column.children, function(subColumn) {
          return subColumn.children && subColumn.children.length ? 0 : subColumn.visible;
        }, headerProps2);
      }
    }, headerProps2);
  }
}
function reassignNotFixed(_ref131) {
  var centerList = _ref131.centerList, column = _ref131.column;
  if (!column.fixed) {
    centerList.push(column);
  }
}
function reassignFixedRight(_ref132) {
  var column = _ref132.column, columnIndex = _ref132.columnIndex, isColspan = _ref132.isColspan, rightEndIndex = _ref132.rightEndIndex, rightList = _ref132.rightList;
  if (column.fixed === "right") {
    if (!isColspan) {
      if (rightEndIndex === null) {
        rightEndIndex = columnIndex;
      }
      if (columnIndex - rightEndIndex !== 0) {
        isColspan = true;
      } else {
        rightEndIndex++;
      }
    }
    rightList.push(column);
  }
  return {
    isColspan,
    rightEndIndex
  };
}
function reassignFixedLeft(_ref133) {
  var column = _ref133.column, columnIndex = _ref133.columnIndex, isColspan = _ref133.isColspan, leftList = _ref133.leftList, leftStartIndex = _ref133.leftStartIndex, letIndex = _ref133.letIndex;
  if (column.fixed === "left") {
    if (leftStartIndex === null) {
      leftStartIndex = letIndex;
    }
    if (!isColspan) {
      if (columnIndex - letIndex !== 0) {
        isColspan = true;
      } else {
        letIndex++;
      }
    }
    leftList.push(column);
  }
  return {
    leftStartIndex,
    letIndex,
    isColspan
  };
}
function showGroupFixedError(_ref134) {
  var isColspan = _ref134.isColspan, isGroup2 = _ref134.isGroup, leftStartIndex = _ref134.leftStartIndex, rightEndIndex = _ref134.rightEndIndex, visibleColumn = _ref134.visibleColumn;
  if (isGroup2 && (isColspan || leftStartIndex || rightEndIndex !== null && rightEndIndex !== visibleColumn.length)) {
    error("ui.grid.error.groupFixed");
  }
}
function onScrollXLoad(_ref135) {
  var _vm = _ref135._vm, scrollX = _ref135.scrollX, scrollXLoad = _ref135.scrollXLoad, scrollXStore = _ref135.scrollXStore, tableColumn3 = _ref135.tableColumn, visibleColumn = _ref135.visibleColumn;
  if (scrollXLoad) {
    if (_vm.resizable || visibleColumn.some(function(column) {
      return column.resizable;
    })) {
      warn("ui.grid.error.notResizable");
    }
    Object.assign(scrollXStore, {
      startIndex: 0,
      visibleIndex: 0,
      renderSize: toNumber(scrollX.rSize),
      offsetSize: toNumber(scrollX.oSize)
    });
    tableColumn3 = visibleColumn.slice(scrollXStore.startIndex, scrollXStore.startIndex + scrollXStore.renderSize);
  }
  return tableColumn3;
}
function mapFetchColumnPromise(_ref136) {
  var _vm = _ref136._vm, fetchColumns = _ref136.fetchColumns, tableColumn3 = _ref136.tableColumn;
  return fetchColumns.map(function(_ref137) {
    var format2 = _ref137.format, columnValues = _ref137.columnValues;
    return format2.async.fetch({
      columns: tableColumn3,
      columnValues,
      $table: _vm
    });
  });
}
function preprocessDataObjectFormat(_ref138) {
  var columnCount = _ref138.columnCount, columnValues = _ref138.columnValues, columnValuesMap = _ref138.columnValuesMap, fields = _ref138.fields;
  if (columnCount) {
    columnValues.forEach(function(col) {
      if (typeof col === "object") {
        var label = get(col, fields.text || "label");
        var value = get(col, fields.value || "value");
        col.label = label;
        columnValuesMap[value] = col;
      }
    });
  }
}
function preventDupRender(_ref139) {
  var asyncColumnName = _ref139.asyncColumnName, cellTexts = _ref139.cellTexts, cellValuesCount = _ref139.cellValuesCount, columnData = _ref139.columnData, columnValuesMap = _ref139.columnValuesMap, isRender = _ref139.isRender, property = _ref139.property, renderCount = _ref139.renderCount, row2 = _ref139.row, splitConfig = _ref139.splitConfig;
  var cellEachIndex = 0;
  if (!isRender && cellValuesCount) {
    var cellLabel;
    var cellValues = [row2[property]];
    if (splitConfig.enabled === true) {
      cellValues = (row2[property] || "").split(splitConfig.valueSplit || ",");
    }
    while (cellEachIndex < cellValuesCount) {
      var activeValue = cellValues[cellEachIndex];
      var currentRow = columnValuesMap[activeValue];
      cellLabel = typeof currentRow === "object" ? currentRow.label : currentRow;
      cellTexts.push(cellLabel);
      columnData.push({
        label: cellLabel,
        value: cellValues[cellEachIndex],
        row: currentRow
      });
      cellEachIndex++;
      renderCount++;
    }
    row2[asyncColumnName] = cellTexts.join(splitConfig.textSplit || ",");
  }
  return renderCount;
}
function handleResolveColumnComplete(_ref140) {
  var _vm = _ref140._vm, columnData = _ref140.columnData, complete = _ref140.complete;
  if (typeof complete === "function") {
    complete({
      columnData,
      $table: _vm
    });
  }
}
var isWebkit = browser["-webkit"];
function computeScrollYLoad(_ref141) {
  var _vm = _ref141._vm, scrollLoad = _ref141.scrollLoad, scrollY = _ref141.scrollY, scrollYLoad = _ref141.scrollYLoad, scrollYStore = _ref141.scrollYStore, tableBodyElem = _ref141.tableBodyElem;
  if (scrollYLoad || scrollLoad) {
    scrollYStore.rowHeight = _vm.getRowHeight();
  }
  if (scrollYLoad) {
    var _tableBodyElem$style, _tableBodyElem$style2;
    var bodyHeight = toNumber(((_tableBodyElem$style = tableBodyElem.style) == null ? void 0 : _tableBodyElem$style.height) || ((_tableBodyElem$style2 = tableBodyElem.style) == null ? void 0 : _tableBodyElem$style2.maxHeight) || tableBodyElem.clientHeight);
    var visibleYSize = toNumber(scrollY.vSize || Math.ceil(bodyHeight / scrollYStore.rowHeight));
    scrollYStore.visibleSize = visibleYSize;
    if (!scrollY.oSize) {
      scrollYStore.offsetSize = visibleYSize;
    }
    if (!scrollY.rSize) {
      scrollYStore.renderSize = visibleYSize + (isWebkit ? 2 : visibleYSize);
    }
    _vm.updateScrollYData();
  } else {
    _vm.updateScrollYSpace();
  }
}
function computeScrollXLoad(_ref142) {
  var _vm = _ref142._vm, scrollX = _ref142.scrollX, scrollXLoad = _ref142.scrollXLoad, scrollXStore = _ref142.scrollXStore, tableBodyElem = _ref142.tableBodyElem, visibleColumn = _ref142.visibleColumn;
  if (scrollXLoad) {
    var clientWidth = tableBodyElem.clientWidth;
    var width = 0;
    var visibleXSize = 0;
    var len = visibleColumn.length;
    var colsWidth = (visibleColumn == null ? void 0 : visibleColumn.map(function(i2) {
      return i2.renderWidth;
    }).sort(function(a, b) {
      return a - b;
    })) || [];
    for (var i = 0; i < len; i++) {
      width += colsWidth[i];
      if (width > clientWidth || i === len - 1) {
        visibleXSize = i + 1;
        break;
      }
    }
    visibleXSize = toNumber(scrollX.vSize || visibleXSize);
    scrollXStore.visibleSize = visibleXSize;
    if (!scrollX.oSize) {
      scrollXStore.offsetSize = visibleXSize;
    }
    if (!scrollX.rSize) {
      scrollXStore.renderSize = visibleXSize + 2;
    }
    _vm.updateScrollXData();
  } else {
    _vm.updateScrollXSpace();
  }
}
var adaptive = function adaptive2(_ref143) {
  var autoArr = _ref143.autoArr, meanWidth = _ref143.meanWidth, minCellWidth = _ref143.minCellWidth, tableWidth = _ref143.tableWidth, fit = _ref143.fit, bodyWidth = _ref143.bodyWidth;
  autoArr.forEach(function(column, index2) {
    var width = Math.max(meanWidth, minCellWidth);
    column.renderWidth = width;
    tableWidth += width;
    if (fit && index2 === autoArr.length - 1) {
      var odiffer = bodyWidth - tableWidth;
      if (odiffer > 0) {
        column.renderWidth += odiffer;
        tableWidth = bodyWidth;
      }
    }
  });
  return tableWidth;
};
var initTableWidth = function initTableWidth2(_ref144) {
  var remainWidth = _ref144.remainWidth, columnStore = _ref144.columnStore;
  var tableWidth = 0;
  var resizeArr = columnStore.resizeList, pxMinArr = columnStore.pxMinList, pxArr = columnStore.pxList;
  var scaleArr = columnStore.scaleList, scaleMinArr = columnStore.scaleMinList;
  pxMinArr.forEach(function(column) {
    var minWidth = parseInt(column.minWidth);
    tableWidth += minWidth;
    column.renderWidth = minWidth;
  });
  var meanWidth = remainWidth / 100;
  scaleMinArr.forEach(function(column) {
    var scaleWidth = Math.floor(parseInt(column.minWidth) * meanWidth);
    tableWidth += scaleWidth;
    column.renderWidth = scaleWidth;
  });
  scaleArr.forEach(function(column) {
    var scaleWidth = Math.floor(parseInt(column.width) * meanWidth);
    tableWidth += scaleWidth;
    column.renderWidth = scaleWidth;
  });
  pxArr.forEach(function(column) {
    var width = parseInt(column.width);
    tableWidth += width;
    column.renderWidth = width;
  });
  resizeArr.forEach(function(column) {
    var width = parseInt(column.resizeWidth);
    tableWidth += width;
    column.renderWidth = width;
  });
  return {
    tableWidth,
    meanWidth
  };
};
var calcTableWidth = function calcTableWidth2(_ref145) {
  var bodyWidth = _ref145.bodyWidth, columnStore = _ref145.columnStore, fit = _ref145.fit, minCellWidth = _ref145.minCellWidth, remainWidth = _ref145.remainWidth;
  var _initTableWidth = initTableWidth({
    remainWidth,
    columnStore
  }), tableWidth = _initTableWidth.tableWidth, meanWidth = _initTableWidth.meanWidth;
  var pxMinArr = columnStore.pxMinList, scaleMinArr = columnStore.scaleMinList, autoArr = columnStore.autoList;
  remainWidth -= tableWidth;
  meanWidth = remainWidth > 0 ? Math.floor(remainWidth / (scaleMinArr.length + pxMinArr.length + autoArr.length)) : 0;
  if (fit) {
    if (remainWidth > 0) {
      scaleMinArr.concat(pxMinArr).forEach(function(column) {
        tableWidth += meanWidth;
        column.renderWidth += meanWidth;
      });
    }
  } else {
    meanWidth = minCellWidth;
  }
  tableWidth = adaptive({
    autoArr,
    meanWidth,
    minCellWidth,
    tableWidth,
    fit,
    bodyWidth
  });
  var remainingSpace = bodyWidth - tableWidth;
  if (fit && remainingSpace > 0) {
    scaleMinArr.concat(pxMinArr).slice(0, remainingSpace).forEach(function(column) {
      tableWidth += 1;
      column.renderWidth += 1;
    });
  }
  return tableWidth;
};
var setLeftOrRightPosition = function setLeftOrRightPosition2(_ref146) {
  var columnList = _ref146.columnList, direction = _ref146.direction, headerEl = _ref146.headerEl, bodyEl = _ref146.bodyEl, scrollbarWidth = _ref146.scrollbarWidth;
  var colList = columnList.slice();
  if (direction === "right") {
    colList.reverse();
  }
  colList.reduce(function(pos, column) {
    var ths = (headerEl == null ? void 0 : headerEl.querySelectorAll("[data-colid=" + column.id + "]")) || [];
    var tds = bodyEl.querySelectorAll("[data-colid=" + column.id + "]");
    var allFixed = [].concat(Array.from(ths), Array.from(tds));
    allFixed.forEach(function(td) {
      var compensatingWidth = 0;
      if (direction === "right" && scrollbarWidth && td.className.includes("header__column")) {
        compensatingWidth = scrollbarWidth;
      }
      td.style[direction] = pos + compensatingWidth + "px";
    });
    column.style = column.style || {};
    column.style[direction] = pos;
    pos += column.renderWidth;
    return pos;
  }, 0);
};
var setGroupHeaderPosition = function setGroupHeaderPosition2(_ref147) {
  var columnChart = _ref147.columnChart, direction = _ref147.direction;
  var colChart = columnChart.slice();
  if (direction === "right") {
    colChart.reverse();
  }
  colChart.forEach(function(columns2) {
    var _leafColumn$style$dir, _leafColumn$style;
    var len = columns2.length;
    if (len === 1) {
      return;
    }
    var leafColumn = columns2[len - 1];
    var leafDirectionPos = (_leafColumn$style$dir = leafColumn == null ? void 0 : (_leafColumn$style = leafColumn.style) == null ? void 0 : _leafColumn$style[direction]) != null ? _leafColumn$style$dir : null;
    if (leafDirectionPos !== null) {
      columns2.forEach(function(column) {
        var _column$style$directi;
        column.style = column.style || {};
        var pos = (_column$style$directi = column.style[direction]) != null ? _column$style$directi : null;
        if (pos === null) {
          column.style[direction] = leafDirectionPos;
        }
      });
    }
  });
};
var setGroupHeaderLastOrFirst = function setGroupHeaderLastOrFirst2(_ref148) {
  var columnChart = _ref148.columnChart, leftList = _ref148.leftList, rightList = _ref148.rightList;
  columnChart.forEach(function(columns2) {
    var len = columns2.length;
    var leafColumn = columns2[len - 1];
    var isFixedLeftLast = leftList[leftList.length - 1] === leafColumn;
    var isFixedRightFirst = rightList[0] === leafColumn;
    columns2.forEach(function(column) {
      column.isFixedLeftLast = column.isFixedLeftLast || isFixedLeftLast;
      column.isFixedRightFirst = column.isFixedRightFirst || isFixedRightFirst;
    });
  });
};
var calcFixedStickyPosition = function calcFixedStickyPosition2(_ref149) {
  var headerEl = _ref149.headerEl, bodyEl = _ref149.bodyEl, columnStore = _ref149.columnStore, scrollbarWidth = _ref149.scrollbarWidth, columnChart = _ref149.columnChart, isGroup2 = _ref149.isGroup;
  var leftList = columnStore.leftList, rightList = columnStore.rightList;
  setLeftOrRightPosition({
    columnList: leftList,
    direction: "left",
    headerEl,
    bodyEl,
    scrollbarWidth
  });
  setLeftOrRightPosition({
    columnList: rightList,
    direction: "right",
    headerEl,
    bodyEl,
    scrollbarWidth
  });
  if (isGroup2) {
    setGroupHeaderPosition({
      columnChart,
      direction: "left"
    });
    setGroupHeaderPosition({
      columnChart,
      direction: "right"
    });
    setGroupHeaderLastOrFirst({
      columnChart,
      leftList,
      rightList
    });
  }
};
var funcs = ["closeMenu", "getMouseSelecteds", "getMouseCheckeds", "clearCopyed", "clearChecked", "clearHeaderChecked", "clearIndexChecked", "clearSelected", "insert", "insertAt", "remove", "removeSelecteds", "revert", "revertData", "getRecordset", "getInsertRecords", "getRemoveRecords", "getUpdateRecords", "clearActived", "getActiveRow", "hasActiveRow", "setActiveRow", "setActiveCell", "setSelectCell", "clearValidate", "fullValidate", "validate", "exportCsv", "exportExcel"];
var headerProps = {
  children: "children"
};
var handleAllColumnPromises = function handleAllColumnPromises2(opt, ctx) {
  var startIndex = opt.startIndex, fetchColumns = opt.fetchColumns, tableData = opt.tableData, asyncRenderMap = opt.asyncRenderMap, isScrollLoad = opt.isScrollLoad;
  return function(data8) {
    if (data8.length) {
      ctx._isUpdateData = true;
      data8.forEach(function(item, i) {
        var columnValues = [];
        var columnValuesMap = {};
        var k = startIndex;
        var renderCount = 0;
        var columnCount = 0;
        var columnData = [];
        var _fetchColumns$i = fetchColumns[i], _fetchColumns$i$forma = _fetchColumns$i.format, format2 = _fetchColumns$i$forma === void 0 ? {} : _fetchColumns$i$forma, property = _fetchColumns$i.property;
        var _ref150 = format2.async || {}, _ref150$splitConfig = _ref150.splitConfig, splitConfig = _ref150$splitConfig === void 0 ? {} : _ref150$splitConfig, _ref150$fields = _ref150.fields, fields = _ref150$fields === void 0 ? {} : _ref150$fields, complete = _ref150.complete;
        columnValues = isArray(item) ? item : get(item, fields.data || "values");
        columnCount = columnValues.length;
        preprocessDataObjectFormat({
          columnCount,
          columnValues,
          columnValuesMap,
          fields
        });
        for (var len = tableData.length; k < len; k++) {
          var row2 = tableData[k];
          var cellTexts = [];
          var uniqueKey = ctx.getAsyncColumnUniqueKey(property, row2);
          var cellValuesCount = asyncRenderMap[uniqueKey];
          var asyncColumnName = ctx.getAsyncColumnName(property);
          var isRender = !!row2[asyncColumnName];
          var args = {
            asyncColumnName,
            cellTexts,
            cellValuesCount,
            columnData
          };
          Object.assign(args, {
            columnValuesMap,
            isRender,
            property,
            renderCount,
            row: row2,
            splitConfig
          });
          renderCount = preventDupRender(args);
          if (isScrollLoad && renderCount >= columnCount) {
            break;
          }
        }
        format2.data = columnData;
        handleResolveColumnComplete({
          _vm: ctx,
          columnData,
          complete
        });
      });
      ctx.tableData = ctx.tableData.slice(0);
      ctx.$nextTick(function() {
        ctx._isUpdateData = false;
      });
    } else {
      warn("Unknown error：the query data is empty.");
    }
  };
};
function handleGlobalMousedownOnFilterWrapper(_ref151) {
  var $el = _ref151.$el, _vm = _ref151._vm, event = _ref151.event, filterStore = _ref151.filterStore, filterWrapper = _ref151.filterWrapper;
  if (filterWrapper) {
    if (_vm.getEventTargetNode(event, $el, "tiny-grid-filter-wrapper").flag)
      ;
    else if (_vm.getEventTargetNode(event, filterWrapper.$el).flag)
      ;
    else if (_vm.getEventTargetNode(event, document.body, "tiny-popper").flag)
      ;
    else {
      _vm.closeFilter();
      _vm.preventEvent(event, "event.clear_filter", filterStore.args, _vm.closeFilter);
    }
  }
}
function handleGlobalMousedownOnCtxMenu(_ref152) {
  var _vm = _ref152._vm, ctxMenuStore = _ref152.ctxMenuStore, event = _ref152.event;
  if (ctxMenuStore.visible && _vm.$refs.ctxWrapper && !_vm.getEventTargetNode(event, _vm.$refs.ctxWrapper.$el).flag) {
    _vm.closeMenu();
  }
}
function handleGlobalBlurOutside(_ref153) {
  var _vm = _ref153._vm, actived = _ref153.actived, event = _ref153.event;
  var custblur = _vm.blurOutside(actived, event);
  if (typeof custblur === "boolean") {
    custblur || setTimeout(function() {
      return _vm.clearActived(event);
    });
    return true;
  }
  return false;
}
function handleGlobalIsClear(_ref154) {
  var $el = _ref154.$el, _vm = _ref154._vm, actived = _ref154.actived, editConfig = _ref154.editConfig, event = _ref154.event, isClear = _ref154.isClear, isReadonlyCol = _ref154.isReadonlyCol;
  if (editConfig.mode === "row") {
    var rowNode = _vm.getEventTargetNode(event, $el, "tiny-grid-body__row");
    var isOtherRow = rowNode.flag ? rowNode.targetElem !== actived.args.cell.parentNode : 0;
    if (editConfig.trigger === "manual") {
      isClear = !_vm.getEventTargetNode(event, $el, "row__actived").flag && isOtherRow;
    } else {
      isClear = isOtherRow && isReadonlyCol;
    }
  } else {
    isClear = isReadonlyCol;
  }
  return isClear;
}
function handleGlobalClearActived(_ref155) {
  var _vm$$refs$tableBody;
  var $el = _ref155.$el, _vm = _ref155._vm, event = _ref155.event, isClear = _ref155.isClear;
  var tableContent = (_vm$$refs$tableBody = _vm.$refs.tableBody) == null ? void 0 : _vm$$refs$tableBody.$refs.table;
  if (isClear || !_vm.getEventTargetNode(event, $el).flag || _vm.$refs.tableHeader && _vm.$refs.tableHeader.$el.contains(event.target) || tableContent && !tableContent.contains(event.target)) {
    setTimeout(function() {
      return _vm.clearActived(event);
    });
  }
}
function checkOtherKey(keyCode) {
  return keyCode >= 48 && keyCode <= 57 || keyCode >= 65 && keyCode <= 90 || keyCode >= 96 && keyCode <= 111 || keyCode >= 186 && keyCode <= 192 || keyCode >= 219 && keyCode <= 222 || keyCode === 32;
}
function rule1(_ref156) {
  var isKeyEsc = _ref156.isKeyEsc, _vm = _ref156._vm, event = _ref156.event, actived = _ref156.actived, mouseConfig = _ref156.mouseConfig;
  return {
    match: function match() {
      return isKeyEsc;
    },
    action: function action() {
      return _vm.handleEscKeyDown({
        event,
        actived,
        mouseConfig
      });
    }
  };
}
function rule2(_ref157) {
  var isKeySpacebar = _ref157.isKeySpacebar, keyboardConfig = _ref157.keyboardConfig, selected = _ref157.selected, _vm = _ref157._vm, event = _ref157.event;
  return {
    match: function match() {
      return isKeySpacebar && (keyboardConfig.isArrow || keyboardConfig.isTab) && selected.row && selected.column && (selected.column.type === "selection" || selected.column.type === "radio");
    },
    action: function action() {
      return _vm.handleSpaceKeyDown({
        event,
        keyboardConfig,
        selected
      });
    }
  };
}
function rule3(args) {
  var isKeyEnter = args.isKeyEnter, keyboardConfig = args.keyboardConfig, selected = args.selected, actived = args.actived;
  var treeConfig = args.treeConfig, highlightCurrentRow = args.highlightCurrentRow, currentRow = args.currentRow, _vm = args._vm, event = args.event;
  return {
    match: function match() {
      return isKeyEnter && (keyboardConfig.isArrow || keyboardConfig.isTab) && (selected.row || actived.row || treeConfig && highlightCurrentRow && currentRow);
    },
    action: function action() {
      return _vm.handleEnterKeyDown({
        event,
        selected,
        actived
      });
    }
  };
}
function rule4(_ref158) {
  var isOperCtxMenu = _ref158.isOperCtxMenu, _vm = _ref158._vm, event = _ref158.event;
  return {
    match: function match() {
      return isOperCtxMenu;
    },
    action: function action() {
      return _vm.handleCtxMenu({
        event
      });
    }
  };
}
function rule5(_ref159) {
  var isKeyF2 = _ref159.isKeyF2, _vm = _ref159._vm, event = _ref159.event, selected = _ref159.selected;
  return {
    match: function match() {
      return isKeyF2;
    },
    action: function action() {
      return _vm.handleF2KeyDown({
        event,
        selected
      });
    }
  };
}
function rule6(_ref160) {
  var isOperArrowKeys = _ref160.isOperArrowKeys, keyboardConfig = _ref160.keyboardConfig, _vm = _ref160._vm, event = _ref160.event, selected = _ref160.selected;
  return {
    match: function match() {
      return isOperArrowKeys && keyboardConfig.isArrow;
    },
    action: function action() {
      return _vm.handleArrowKeyDown({
        event,
        selected
      });
    }
  };
}
function rule7(_ref161) {
  var isKeyTab = _ref161.isKeyTab, keyboardConfig = _ref161.keyboardConfig, _vm = _ref161._vm, event = _ref161.event, selected = _ref161.selected, actived = _ref161.actived;
  return {
    match: function match() {
      return isKeyTab && keyboardConfig.isTab;
    },
    action: function action() {
      return _vm.handleTabKeyDown({
        event,
        selected,
        actived
      });
    }
  };
}
function rule8(args) {
  var isKeyDel = args.isKeyDel, treeConfig = args.treeConfig, highlightCurrentRow = args.highlightCurrentRow, currentRow = args.currentRow;
  var isKeyBack = args.isKeyBack, keyboardConfig = args.keyboardConfig, _vm = args._vm, event = args.event, selected = args.selected;
  return {
    match: function match() {
      return isKeyDel || (treeConfig && highlightCurrentRow && currentRow ? isKeyBack && keyboardConfig.isArrow : isKeyBack);
    },
    action: function action() {
      return _vm.handleDelKeyDown({
        event,
        selected
      });
    }
  };
}
function rule9(_ref162) {
  var keyboardConfig = _ref162.keyboardConfig, isKeyWithCtrl = _ref162.isKeyWithCtrl, isKeyA = _ref162.isKeyA, isKeyX = _ref162.isKeyX, isKeyC = _ref162.isKeyC, isKeyV = _ref162.isKeyV, _vm = _ref162._vm, event = _ref162.event;
  return {
    match: function match() {
      return keyboardConfig.isCut && isKeyWithCtrl && (isKeyA || isKeyX || isKeyC || isKeyV);
    },
    action: function action() {
      return _vm.handleCopyKeyDown({
        event
      });
    }
  };
}
function rule10(_ref163) {
  var keyboardConfig = _ref163.keyboardConfig, isKeyWithCtrl = _ref163.isKeyWithCtrl, _vm = _ref163._vm, event = _ref163.event, selected = _ref163.selected;
  return {
    match: function match() {
      return keyboardConfig.isEdit && !isKeyWithCtrl;
    },
    action: function action() {
      return _vm.handleOtherKeyDown({
        event,
        selected
      });
    }
  };
}
function onGlobalKeydown(event, _vm) {
  var isCtxMenu2 = _vm.isCtxMenu, ctxMenuStore = _vm.ctxMenuStore, _vm$mouseConfig = _vm.mouseConfig, mouseConfig = _vm$mouseConfig === void 0 ? {} : _vm$mouseConfig, _vm$keyboardConfig = _vm.keyboardConfig, keyboardConfig = _vm$keyboardConfig === void 0 ? {} : _vm$keyboardConfig;
  var treeConfig = _vm.treeConfig, highlightCurrentRow = _vm.highlightCurrentRow, currentRow = _vm.currentRow;
  var _vm$editStore = _vm.editStore, selected = _vm$editStore.selected, actived = _vm$editStore.actived;
  var eventKeyCode = event.keyCode;
  var isKeyWithCtrl = event.ctrlKey;
  var isKeyF2 = eventKeyCode === 113;
  var isKeyX = eventKeyCode === 88;
  var isKeyV = eventKeyCode === 86;
  var isKeyC = eventKeyCode === 67;
  var isKeyA = eventKeyCode === 65;
  var isKeyDel = eventKeyCode === 46;
  var isKeyDwArrow = eventKeyCode === 40;
  var isKeyRightArrow = eventKeyCode === 39;
  var isKeyUpArrow = eventKeyCode === 38;
  var isKeyLeftArrow = eventKeyCode === 37;
  var isKeySpacebar = eventKeyCode === 32;
  var isKeyEsc = eventKeyCode === 27;
  var isKeyEnter = eventKeyCode === 13;
  var isKeyTab = eventKeyCode === 9;
  var isKeyBack = eventKeyCode === 8;
  var isOperArrowKeys = isKeyLeftArrow || isKeyUpArrow || isKeyRightArrow || isKeyDwArrow;
  var isOperCtxMenu = isCtxMenu2 && ctxMenuStore.visible && (isKeyEnter || isKeySpacebar || isOperArrowKeys);
  var rules = [
    rule1({
      isKeyEsc,
      _vm,
      event,
      actived,
      mouseConfig
    }),
    // 空格键支持选中复选列
    rule2({
      isKeySpacebar,
      keyboardConfig,
      selected,
      _vm,
      event
    }),
    // 如果是激活状态，退则出到下一行
    rule3({
      isKeyEnter,
      keyboardConfig,
      selected,
      actived,
      treeConfig,
      highlightCurrentRow,
      currentRow,
      _vm,
      event
    }),
    // 如果配置了右键菜单; 支持方向键操作、回车
    rule4({
      isOperCtxMenu,
      _vm,
      event
    }),
    // 如果按下了 F2 键
    rule5({
      isKeyF2,
      _vm,
      event,
      selected
    }),
    // 如果按下了方向键
    rule6({
      isOperArrowKeys,
      keyboardConfig,
      _vm,
      event,
      selected
    }),
    // 如果按下了 Tab 键切换
    rule7({
      isKeyTab,
      keyboardConfig,
      _vm,
      event,
      selected,
      actived
    }),
    // 如果是删除键
    rule8({
      isKeyDel,
      treeConfig,
      highlightCurrentRow,
      currentRow,
      isKeyBack,
      keyboardConfig,
      _vm,
      event,
      selected
    }),
    rule9({
      keyboardConfig,
      isKeyWithCtrl,
      isKeyA,
      isKeyX,
      isKeyC,
      isKeyV,
      _vm,
      event
    }),
    // 如果是按下非功能键之外允许直接编辑
    rule10({
      keyboardConfig,
      isKeyWithCtrl,
      _vm,
      event,
      selected
    })
  ];
  for (var i = 0; i < rules.length; i++) {
    if (rules[i].match()) {
      return rules[i].action();
    }
  }
}
function handleGlobalMousedownEvent(event) {
  var _this11 = this;
  var $el = this.$el, ctxMenuStore = this.ctxMenuStore, _this$editConfig = this.editConfig, editConfig = _this$editConfig === void 0 ? {} : _this$editConfig, filterStore = this.filterStore;
  var _this$$refs = this.$refs, filterWrapper = _this$$refs.filterWrapper, validTip = _this$$refs.validTip;
  var actived = this.editStore.actived;
  handleGlobalMousedownOnFilterWrapper({
    $el,
    _vm: this,
    event,
    filterStore,
    filterWrapper
  });
  if (actived.row && !(editConfig.autoClear === false)) {
    if (handleGlobalBlurOutside({
      _vm: this,
      actived,
      event
    })) {
      return;
    }
    if (validTip && this.getEventTargetNode(event, validTip.$el).flag)
      ;
    else if (!this.lastCallTime || this.lastCallTime + 50 < Date.now()) {
      this.preventEvent(event, "event.clear_actived", actived.args, function() {
        var isClear;
        var isReadonlyCol = !_this11.getEventTargetNode(event, $el, "col__edit").flag;
        isClear = handleGlobalIsClear({
          $el,
          _vm: _this11,
          actived,
          editConfig,
          event,
          isClear,
          isReadonlyCol
        });
        handleGlobalClearActived({
          $el,
          _vm: _this11,
          event,
          isClear
        });
      });
    }
  }
  handleGlobalMousedownOnCtxMenu({
    _vm: this,
    ctxMenuStore,
    event
  });
}
function handleGlobalMousedownCaptureEvent(event) {
  this.handleClearMouseChecked(event);
}
function handleGlobalBlurEvent() {
  this.closeFilter();
  this.closeMenu();
}
function handleGlobalMousewheelEvent(event) {
  this.updateScrollLoadBar(event);
  this.clostTooltip();
  this.closeMenu();
}
function handleEscKeyDown(_ref164) {
  var _this12 = this;
  var event = _ref164.event, actived = _ref164.actived, mouseConfig = _ref164.mouseConfig;
  this.closeMenu();
  this.closeFilter();
  if (actived.row) {
    this.clearActived(event);
    if (mouseConfig.selected) {
      this.$nextTick(function() {
        return _this12.handleSelected(actived.args, event);
      });
    }
  }
}
function handleEnterKeyDown(_ref165) {
  var _this13 = this;
  var event = _ref165.event, selected = _ref165.selected, actived = _ref165.actived;
  var highlightCurrentRow = this.highlightCurrentRow, currentRow = this.currentRow, treeConfig = this.treeConfig;
  var isLeftArrow = event.keyCode === 37;
  var isUpArrow = event.keyCode === 38;
  var isRightArrow = event.keyCode === 39;
  if (selected.row || actived.row) {
    this.moveSelected({
      args: selected.row ? selected.args : actived.args,
      isLeftArrow,
      isUpArrow,
      isRightArrow,
      isDwArrow: true,
      event
    });
  } else if (treeConfig && highlightCurrentRow && currentRow) {
    var childrens = currentRow[treeConfig.children];
    if (childrens && childrens.length) {
      event.preventDefault();
      var targetRow = childrens[0];
      this.setTreeExpansion(currentRow, true).then(function() {
        return _this13.scrollToRow(targetRow);
      }).then(function() {
        return _this13.triggerCurrentRowEvent(event, {
          $table: _this13,
          row: targetRow
        });
      });
    }
  }
}
function handleCtxMenu(_ref166) {
  var event = _ref166.event;
  var ctxMenuStore = this.ctxMenuStore;
  event.preventDefault();
  if (ctxMenuStore.showChild && hasChildrenList(ctxMenuStore.selected)) {
    this.moveCtxMenu({
      event,
      keyCode: event.keyCode,
      ctxMenuStore,
      property: "selectChild",
      operKey: 37,
      operRest: false,
      menuList: ctxMenuStore.selected.children
    });
  } else {
    this.moveCtxMenu({
      event,
      keyCode: event.keyCode,
      ctxMenuStore,
      property: "selected",
      operKey: 39,
      operRest: true,
      menuList: this.ctxMenuList
    });
  }
}
function handleArrowKeyDown(_ref167) {
  var event = _ref167.event, selected = _ref167.selected;
  var highlightCurrentRow = this.highlightCurrentRow, currentRow = this.currentRow;
  var isLeftArrow = event.keyCode === 37;
  var isUpArrow = event.keyCode === 38;
  var isRightArrow = event.keyCode === 39;
  var isDownArrow = event.keyCode === 40;
  if (selected.row && selected.column) {
    this.moveSelected({
      args: selected.args,
      isLeftArrow,
      isUpArrow,
      isRightArrow,
      isDownArrow,
      event
    });
  } else if ((isUpArrow || isDownArrow) && highlightCurrentRow && currentRow) {
    this.moveCurrentRow(isUpArrow, isDownArrow, event);
  }
}
function handleDelKeyDown(_ref168) {
  var _this14 = this;
  var event = _ref168.event, selected = _ref168.selected;
  var _this$keyboardConfig = this.keyboardConfig, keyboardConfig = _this$keyboardConfig === void 0 ? {} : _this$keyboardConfig, treeConfig = this.treeConfig, highlightCurrentRow = this.highlightCurrentRow, currentRow = this.currentRow;
  var isBack = event.keyCode === 8;
  if (keyboardConfig.isDel && (selected.row || selected.column)) {
    setCellValue(selected.row, selected.column, null);
    if (isBack) {
      this.handleActived(selected.args, event);
    }
  } else if (isBack && keyboardConfig.isArrow && treeConfig && highlightCurrentRow && currentRow) {
    var _findTree = findTree(this.afterFullData, function(item) {
      return item === currentRow;
    }, treeConfig), parentRow = _findTree.parent;
    if (parentRow) {
      event.preventDefault();
      this.setTreeExpansion(parentRow, false).then(function() {
        return _this14.scrollToRow(parentRow);
      }).then(function() {
        return _this14.triggerCurrentRowEvent(event, {
          $table: _this14,
          row: parentRow
        });
      });
    }
  }
}
function handleSpaceKeyDown(_ref169) {
  var event = _ref169.event, selected = _ref169.selected;
  event.preventDefault();
  if (selected.column.type === "selection") {
    this.handleToggleCheckRowEvent(selected.args, event);
  } else {
    this.triggerRadioRowEvent(event, selected.args);
  }
}
function handleTabKeyDown(_ref170) {
  var event = _ref170.event, selected = _ref170.selected, actived = _ref170.actived;
  var isShiftKey = event.shiftKey;
  var useTab = this.editConfig.useTab;
  if (selected.row || selected.column) {
    this.moveTabSelected(selected.args, isShiftKey, event, useTab);
  } else if (actived.row || actived.column) {
    this.moveTabSelected(actived.args, isShiftKey, event, useTab);
  }
}
function handleCopyKeyDown(_ref171) {
  var event = _ref171.event;
  if (event.keyCode === 65) {
    this.handleAllChecked(event);
  } else if (event.keyCode === 88 || event.keyCode === 67) {
    this.handleCopyed(event.keyCode === 88, event);
  } else {
    this.handlePaste(event);
  }
}
function handleF2KeyDown(_ref172) {
  var event = _ref172.event, selected = _ref172.selected;
  if (selected.row && selected.column) {
    event.preventDefault();
    this.handleActived(selected.args, event);
  }
}
function handleOtherKeyDown(_ref173) {
  var event = _ref173.event, selected = _ref173.selected;
  var _this$keyboardConfig2 = this.keyboardConfig, keyboardConfig = _this$keyboardConfig2 === void 0 ? {} : _this$keyboardConfig2;
  var keyCode = event.keyCode;
  var isOtherKey = checkOtherKey(keyCode);
  if (isOtherKey && selected.column && selected.row && selected.column.editor && (!keyboardConfig.editMethod || !(keyboardConfig.editMethod(selected.args, event) === false))) {
    setCellValue(selected.row, selected.column, null);
    this.handleActived(selected.args, event);
  }
}
function handleGlobalKeydownEvent(event) {
  var _this15 = this;
  this.preventEvent(event, "event.keydown", {
    $table: this
  }, function() {
    onGlobalKeydown(event, _this15);
  });
}
function handleGlobalResizeEvent() {
  this.updateParentHeight();
  this.recalculate();
}
var run = function run2(names, $table) {
  return names.forEach(function(name) {
    return $table[name].apply($table);
  });
};
var debounceScrollLoadDuration = 200;
var AsyncCollectTimeout = 100;
var sortMultiple = function sortMultiple2(rows, columns2, _vm) {
  var greaterThan = function greaterThan2(valueP, valueQ) {
    var typeP = typeof valueP;
    var typeQ = typeof valueQ;
    if (typeP === typeQ && ["number", "string", "boolean"].includes(typeP)) {
      return valueP > valueQ;
    } else {
      return String(valueP) > String(valueQ);
    }
  };
  var multipleColumnSort = _vm.sortOpts.multipleColumnSort;
  if (typeof multipleColumnSort === "function") {
    rows = multipleColumnSort({
      $table: _vm,
      tableData: rows,
      sortColumns: columns2
    });
  } else {
    rows = rows.sort(function(p, q) {
      for (var i = 0; i < columns2.length; i++) {
        var _columns$i = columns2[i], property = _columns$i.property, order = _columns$i.order;
        var flag = order === "asc" ? 1 : -1;
        var valueP = p[property];
        var valueQ = q[property];
        if (!Object.is(valueP, valueQ)) {
          return greaterThan(valueP, valueQ) ? flag : -flag;
        }
      }
      return 0;
    });
  }
  return rows;
};
var buildCache = function buildCache2(tableData, _ref174) {
  var treeConfig = _ref174.treeConfig, treeOrdered = _ref174.treeOrdered;
  var backupMap = /* @__PURE__ */ new WeakMap();
  var _ref175 = treeConfig || {}, children = _ref175.children, _ref175$temporaryInde = _ref175.temporaryIndex, temporaryIndex = _ref175$temporaryInde === void 0 ? "_$index_" : _ref175$temporaryInde;
  var isTreeOrderedFalse = treeConfig && !treeOrdered;
  var _traverse = function traverse(arr, rowLevel, parentIndex) {
    var backup = [];
    if (Array.isArray(arr) && arr.length > 0) {
      arr.forEach(function(row2, rowIndex) {
        var _extends4;
        if (isTreeOrderedFalse) {
          row2[temporaryIndex] = (parentIndex ? parentIndex + "." : "") + (rowIndex + 1);
        }
        var backupRow = clone(_extends({}, row2, (_extends4 = {}, _extends4[children] = null, _extends4)), true);
        backup.push(backupRow);
        backupMap.set(row2, backupRow);
        if (row2[children]) {
          backupRow[children] = _traverse(row2[children], rowLevel + 1, isTreeOrderedFalse ? row2[temporaryIndex] : "");
        }
      });
    }
    return backup;
  };
  var backupData = _traverse(tableData, 0, "");
  return {
    backupData,
    backupMap
  };
};
var Methods$d = {
  getParentElem: function getParentElem() {
    var $el = this.$grid ? this.$grid.$el : this.$el;
    return $el.parentNode;
  },
  updateParentHeight: function updateParentHeight() {
    if (this.$grid) {
      this.$grid.updateParentHeight();
    } else {
      this.parentHeight = this.getParentElem().clientHeight;
    }
  },
  getParentHeight: function getParentHeight() {
    return this.parentHeight;
  },
  clearAll: function clearAll(silent) {
    var _this$$grid$fetchOpti = this.$grid.fetchOption, fetchOption = _this$$grid$fetchOpti === void 0 ? {} : _this$$grid$fetchOpti;
    var isReloadFilter = fetchOption.isReloadFilter, _fetchOption$isReload = fetchOption.isReloadScroll, isReloadScroll = _fetchOption$isReload === void 0 ? false : _fetchOption$isReload;
    var functionNames = ["clearScroll", "clearSort", "clearCurrentRow", "clearCurrentColumn", "clearSelection", "clearRowExpand", "clearTreeExpand"];
    if (isReloadScroll) {
      functionNames = functionNames.filter(function(i) {
        return i !== "clearScroll";
      });
    }
    run(functionNames, this);
    if (typeof isReloadFilter === "undefined" ? GridAdapter._filter : !isReloadFilter) {
      this.clearFilter(silent);
    }
    if (this.keyboardConfig || this.mouseConfig) {
      run(["clearIndexChecked", "clearHeaderChecked", "clearChecked", "clearSelected", "clearCopyed"], this);
    }
    return this.clearActived();
  },
  refreshData: function refreshData(data8) {
    var _this16 = this;
    var next = function next2() {
      _this16.tableData = [];
      return _this16.loadTableData(data8 || _this16.tableFullData);
    };
    return this.$nextTick().then(next);
  },
  refreshStyle: function refreshStyle() {
    var $el = this.$el, rowSpan = this.rowSpan, spanMethod = this.spanMethod;
    if ($el && (rowSpan || spanMethod)) {
      var transform = $el.style.transform;
      var restore = function restore2() {
        return setTimeout(function() {
          $el.style.transform = transform;
        });
      };
      $el.style.transform = "scale(0.99999)";
      return this.$nextTick().then(restore);
    }
    return this.$nextTick();
  },
  updateData: function updateData() {
    var _this17 = this;
    return this.handleTableData(true).then(function() {
      return _this17.updateFooter();
    }).then(function() {
      return _this17.recalculate();
    });
  },
  // 处理表格数据（过滤，排序，虚拟滚动需要渲染数据的条数）
  handleTableData: function handleTableData(force) {
    force && this.updateAfterFullData();
    this.tableData = sliceFullData(this);
    this.updateScrollStatus();
    return this.$nextTick();
  },
  // 全量加载表格数据
  loadTableData: function loadTableData(datas, notRefresh) {
    var _this18 = this;
    var $grid = this.$grid, $refs = this.$refs, editStore = this.editStore, height2 = this.height, maxHeight = this.maxHeight, treeConfig = this.treeConfig, lastScrollLeft = this.lastScrollLeft, lastScrollTop = this.lastScrollTop, optimizeOpts2 = this.optimizeOpts;
    var _$grid$fetchOption = $grid.fetchOption, fetchOption = _$grid$fetchOption === void 0 ? {} : _$grid$fetchOption;
    var _fetchOption$isReload2 = fetchOption.isReloadScroll, isReloadScroll = _fetchOption$isReload2 === void 0 ? false : _fetchOption$isReload2;
    var scrollY = optimizeOpts2.scrollY;
    var tableFullData = isArray(datas) ? datas.slice(0) : [];
    var scrollYLoad = scrollY && scrollY.gt > 0 && scrollY.gt <= tableFullData.length;
    editStore.insertList = [];
    editStore.removeList = [];
    Object.assign(this, {
      tableFullData
    });
    this.updateCache(true);
    var _buildCache = buildCache(tableFullData, this), backupData = _buildCache.backupData, backupMap = _buildCache.backupMap;
    Object.assign(this, {
      tableSynchData: datas,
      tableSourceData: backupData,
      backupMap,
      scrollYLoad
    });
    if (scrollYLoad && !(height2 || maxHeight)) {
      error("ui.grid.error.scrollYHeight");
    }
    if (!notRefresh && !isReloadScroll) {
      this.clearScroll();
    }
    this.handleTableData(true);
    run(["reserveCheckSelection", "checkSelectionStatus"], this);
    var first = function first2() {
      return !notRefresh && _this18.recalculate();
    };
    var second = function second2() {
      if (lastScrollLeft || lastScrollTop) {
        return _this18.attemptRestoreScoll({
          lastScrollLeft,
          lastScrollTop
        });
      } else {
        var headerElem = $refs.tableHeader ? $refs.tableHeader.$el : null;
        headerElem && (headerElem.scrollLeft = 0);
      }
    };
    return this.$nextTick().then(first).then(second);
  },
  // 重新加载数据
  reloadData: function reloadData(datas) {
    var _this19 = this;
    return this.clearAll().then(function() {
      return _this19.loadTableData(datas);
    }).then(function() {
      return _this19.handleDefault();
    });
  },
  // 加载全量数据
  loadData: function loadData(datas) {
    var _this20 = this;
    return new Promise(function(resolve) {
      _this20.loadTableData(datas);
      resolve();
    }).then(this.recalculate);
  },
  reloadRow: function reloadRow(row2, record, field) {
    var tableData = this.tableData, tableSourceData = this.tableSourceData;
    var rowIndex = this.getRowIndex(row2);
    var originRow = tableSourceData[rowIndex];
    var hasSrc = originRow && row2;
    var hasSrcNoField = hasSrc && !field;
    if (hasSrc && field) {
      set(originRow, field, get(record || row2, field));
    }
    if (hasSrcNoField && record) {
      tableSourceData[rowIndex] = record;
      clear(row2, void 0);
      Object.assign(row2, this.defineField(_extends({}, record)));
      this.updateCache(true);
    }
    if (hasSrcNoField && !record) {
      destructuring(originRow, clone(row2, true));
    }
    this.tableData = tableData.slice(0);
    return this.$nextTick();
  },
  // 从新加载列配置
  reloadColumn: function reloadColumn(columns2) {
    var _this21 = this;
    return this.clearAll().then(function() {
      return _this21.loadColumn(columns2);
    });
  },
  loadColumn: function loadColumn(columns2) {
    var _this22 = this;
    return new Promise(function(resolve) {
      _this22.collectColumn = mapTree(columns2, function(column) {
        return CellDefault.createColumn(_this22, column);
      }, headerProps);
      resolve();
    }).then(function() {
      return _this22.$nextTick();
    });
  },
  // 更新数据的 Map
  updateCache: function updateCache(source) {
    var _this23 = this;
    var fullAllDataRowIdData = this.fullAllDataRowIdData, fullAllDataRowMap = this.fullAllDataRowMap, fullDataRowIdData = this.fullDataRowIdData, fullDataRowMap = this.fullDataRowMap, tableFullData = this.tableFullData, treeConfig = this.treeConfig;
    var rowKey = getTableRowKey(this);
    var buildRowCache = function buildRowCache2(row2, index2) {
      var rowId = getRowid(_this23, row2);
      if (isNull(rowId) || rowId === "") {
        rowId = getRowUniqueId();
        set(row2, rowKey, rowId);
      }
      var rowCache = {
        row: row2,
        rowid: rowId,
        index: index2
      };
      if (source) {
        fullDataRowIdData[rowId] = rowCache;
        fullDataRowMap.set(row2, rowCache);
      }
      fullAllDataRowIdData[rowId] = rowCache;
      fullAllDataRowMap.set(row2, rowCache);
    };
    var clearCache = function clearCache2() {
      fullAllDataRowIdData = {};
      _this23.fullAllDataRowIdData = fullAllDataRowIdData;
      fullAllDataRowMap.clear();
      if (source) {
        fullDataRowIdData = {};
        _this23.fullDataRowIdData = fullDataRowIdData;
        fullDataRowMap.clear();
      }
    };
    clearCache();
    if (treeConfig) {
      eachTree(tableFullData, buildRowCache, treeConfig);
    } else {
      tableFullData.forEach(buildRowCache);
    }
  },
  // 更新列的 Map
  cacheColumnMap: function cacheColumnMap() {
    var fullColumnMap = this.fullColumnMap, fullColumn = this.tableFullColumn;
    var fullColumnIdData = {};
    this.fullColumnIdData = fullColumnIdData;
    Map.prototype.clear.apply(fullColumnMap);
    fullColumn.forEach(function(column, index2) {
      var colCache = {
        colid: column.id,
        column,
        index: index2
      };
      fullColumnIdData[column.id] = colCache;
      fullColumnMap.set(column, colCache);
    });
  },
  // 通过tr的dom元素获取行数据等相关信息
  getRowNode: function getRowNode(tr) {
    var _this24 = this;
    if (!tr) {
      return null;
    }
    var fullAllDataRowIdData = this.fullAllDataRowIdData, tableFullData = this.tableFullData, treeConfig = this.treeConfig;
    var dataRowid = tr.getAttribute("data-rowid");
    if (treeConfig) {
      var matches = findTree(tableFullData, function(row2) {
        return getRowid(_this24, row2) === dataRowid;
      }, treeConfig);
      if (matches) {
        return matches;
      }
    } else {
      if (fullAllDataRowIdData[dataRowid]) {
        var rowCache = fullAllDataRowIdData[dataRowid];
        return {
          item: rowCache.row,
          index: rowCache.index,
          items: tableFullData
        };
      }
    }
    return null;
  },
  getColumnNode: function getColumnNode(cell) {
    if (!cell) {
      return null;
    }
    var isGroup2 = this.isGroup, fullColumnIdData = this.fullColumnIdData, tableFullColumn = this.tableFullColumn;
    var dataColid = cell.getAttribute("data-colid");
    var colCache = fullColumnIdData == null ? void 0 : fullColumnIdData[dataColid];
    if (isGroup2) {
      var matches = findTree(tableFullColumn, function(column) {
        return column.id === dataColid;
      }, headerProps);
      if (matches) {
        return matches;
      }
    } else if (colCache) {
      return {
        index: colCache.index,
        item: colCache.column,
        items: tableFullColumn
      };
    }
    return null;
  },
  getRowIndex: function getRowIndex(row2) {
    var fullDataRowMap = this.fullDataRowMap;
    return fullDataRowMap.has(row2) ? fullDataRowMap.get(row2).index : -1;
  },
  getColumnIndex: function getColumnIndex(column) {
    var fullColumnMap = this.fullColumnMap;
    return fullColumnMap.has(column) ? fullColumnMap.get(column).index : -1;
  },
  hasIndexColumn: function hasIndexColumn(column) {
    return column && column.type === "index";
  },
  defineField: function defineField(row2, copy) {
    if (!row2 || typeof row2 !== "object") {
      return row2;
    }
    if (copy) {
      row2 = clone(row2, true);
    }
    var visibleColumn = this.visibleColumn;
    var rowKey = getTableRowKey(this);
    visibleColumn.forEach(function(_ref176) {
      var property = _ref176.property, editor = _ref176.editor;
      var propNotExist = property && !has(row2, property);
      var propDefaultValue = editor && !isUndefined(editor.defaultValue) ? editor.defaultValue : null;
      if (propNotExist) {
        set(row2, property, propDefaultValue);
      }
    });
    var rowId = get(row2, rowKey);
    if (isNull(rowId) || rowId === "") {
      set(row2, rowKey, getRowUniqueId());
    }
    return row2;
  },
  isTemporaryRow: function isTemporaryRow(row2) {
    var _this25 = this;
    var rowid2 = getRowid(this, row2);
    return find(this.temporaryRows, function(r) {
      return rowid2 === getRowid(_this25, r);
    });
  },
  createData: function createData(records, copy) {
    var _this26 = this;
    var isArr = isArray(records);
    if (!isArr) {
      records = [records];
    }
    var tmp = records.map(function(record) {
      return _this26.defineField(record, copy);
    });
    return new Promise(function(resolve) {
      resolve(isArr ? tmp : tmp[0]);
    });
  },
  createRow: function createRow(records) {
    return this.createData(records, true);
  },
  /*
   * 清空单元格内容：
   * 如果不传参数，则清空整个表格内容；
   * 如果传row，则清空一行内容；
   * 如果传rows，则清空多行内容；
   * 如果还额外传了field，则清空指定单元格内容；
   */
  clearData: function clearData(rows, field) {
    var _this27 = this;
    rows = !arguments.length ? this.tableFullData : rows && !isArray(rows) ? [rows] : rows;
    rows.forEach(function(row2) {
      if (field) {
        set(row2, field, null);
      } else {
        _this27.visibleColumn.forEach(function(column) {
          column.property && setCellValue(row2, column, null);
        });
      }
    });
    return this.$nextTick();
  },
  hasRowInsert: function hasRowInsert(row2) {
    return ~this.editStore.insertList.indexOf(row2);
  },
  compareRow: function compareRow(row2, originalRow, field) {
    var value = get(row2, field);
    var originalValue = get(originalRow, field);
    var column = this.getColumnByField(field);
    var equals = column.equals || this.equals;
    var result;
    if (equals) {
      result = equals({
        value,
        originalValue,
        field,
        row: row2,
        originalRow,
        column,
        $table: this
      });
    }
    if (typeof result !== "boolean") {
      result = isEqual$1(originalValue, value);
    }
    return result;
  },
  hasRowChange: function hasRowChange(row2, field) {
    var _this28 = this;
    var tableSourceData = this.tableSourceData, treeConfig = this.treeConfig, visibleColumn = this.visibleColumn, backupMap = this.backupMap, _this$editConfig2 = this.editConfig, editConfig = _this$editConfig2 === void 0 ? {} : _this$editConfig2;
    var _editConfig$insertCha = editConfig.insertChanged, insertChanged = _editConfig$insertCha === void 0 ? false : _editConfig$insertCha;
    var argsLength = arguments.length;
    var rowId = getRowid(this, row2);
    var originRow;
    if (this.isTemporaryRow(row2)) {
      return insertChanged;
    }
    if (treeConfig) {
      var _extends5;
      var children = treeConfig.children;
      var cacheRow = backupMap.get(row2);
      row2 = _extends({}, row2, (_extends5 = {}, _extends5[children] = null, _extends5));
      if (cacheRow) {
        var _extends6;
        originRow = _extends({}, cacheRow, (_extends6 = {}, _extends6[children] = null, _extends6));
      }
    } else {
      originRow = find(tableSourceData, function(item) {
        return rowId === getRowid(_this28, item);
      });
    }
    if (originRow) {
      if (argsLength > 1) {
        return !this.compareRow(row2, originRow, field);
      }
      for (var i = 0; i < visibleColumn.length; i++) {
        var property = visibleColumn[i].property;
        if (property && !this.compareRow(row2, originRow, property)) {
          return true;
        }
      }
    }
    return false;
  },
  // 获取表格所有列
  getColumns: function getColumns(columnIndex) {
    var columns2 = this.visibleColumn;
    var argsLength = arguments.length;
    return argsLength ? columns2[columnIndex] : columns2.slice(0);
  },
  getColumnById: function getColumnById(colid) {
    var fullColumnIdData = this.fullColumnIdData;
    var colCache = fullColumnIdData[colid];
    return colCache ? colCache.column : null;
  },
  getColumnByField: function getColumnByField(field) {
    var columns2 = this.visibleColumn;
    return typeof field === "string" && field ? find(columns2, function(column) {
      return column.property === field;
    }) : null;
  },
  // 获取当前表格的列（完整的全量表头列、处理条件之后的全量表头列、当前渲染中的表头列）
  getTableColumn: function getTableColumn() {
    var collectColumn2 = this.collectColumn, tableColumn3 = this.tableColumn, tableFullColumn = this.tableFullColumn, visibleColumn = this.visibleColumn;
    return {
      fullColumn: tableFullColumn.slice(0),
      visibleColumn: visibleColumn.slice(0),
      tableColumn: tableColumn3.slice(0),
      collectColumn: collectColumn2.slice(0)
    };
  },
  // 获取表格所有数据
  getData: function getData(rowIndex) {
    var tableSynchData = this.data || this.tableSynchData;
    if (!tableSynchData) {
      return tableSynchData;
    }
    if (!arguments.length) {
      return tableSynchData.slice(0);
    }
    if (typeof rowIndex === "number" && rowIndex > -1) {
      return tableSynchData[rowIndex];
    }
    return void 0;
  },
  // 获取选中数据。notCopy为true不返回数据副本，表格内部要继续处理其返回值时设置为true
  getSelectRecords: function getSelectRecords(notCopy) {
    var _this$selectConfig = this.selectConfig, selectConfig = _this$selectConfig === void 0 ? {} : _this$selectConfig, selection = this.selection;
    var tableFullData = this.tableFullData, treeConfig = this.treeConfig;
    var checkField = selectConfig.checkField;
    var _ref177 = {}, _ref177$rowList = _ref177.rowList, rowList = _ref177$rowList === void 0 ? [] : _ref177$rowList;
    if (checkField && treeConfig) {
      rowList = filterTree(tableFullData, function(row2) {
        return get(row2, checkField);
      }, treeConfig);
    }
    if (checkField && !treeConfig) {
      rowList = tableFullData.filter(function(row2) {
        return get(row2, checkField);
      });
    }
    if (!checkField && treeConfig) {
      rowList = filterTree(tableFullData, function(row2) {
        return ~selection.indexOf(row2);
      }, treeConfig);
    }
    if (!checkField && !treeConfig) {
      rowList = tableFullData.filter(function(row2) {
        return ~selection.indexOf(row2);
      });
    }
    return notCopy ? rowList : clone(rowList, true);
  },
  // 对数据进行筛选和排序，获取处理后数据。服务端筛选和排序，在接口调用时已传入参数
  updateAfterFullData: function updateAfterFullData() {
    var _this29 = this;
    var remoteFilter = this.remoteFilter, remoteSort = this.remoteSort, tableFullData = this.tableFullData, visibleColumn = this.visibleColumn, sortOpts2 = this.sortOpts;
    var tableData = tableFullData;
    var sortColumn = find(visibleColumn, function(column) {
      return column.order;
    });
    var filterColumn = visibleColumn.filter(function(_ref178) {
      var filter2 = _ref178.filter;
      return !!filter2;
    });
    var doTableSort = function doTableSort2() {
      var order = sortColumn.order, property = sortColumn.property;
      var params = {
        $table: _this29,
        column: sortColumn,
        data: tableData,
        order,
        property
      };
      tableData = _this29.sortMethod(params) || tableData;
    };
    var doColumnSort = function doColumnSort2() {
      var sortedFlag = false;
      if (sortOpts2.multipleColumnSort) {
        var sortColumns = visibleColumn.filter(function(_ref179) {
          var order = _ref179.order;
          return !!order;
        });
        if (sortColumns.length > 1) {
          tableData = sortMultiple(tableData, sortColumns, _this29);
          sortedFlag = true;
        }
      }
      if (!sortedFlag) {
        var columnSortMethod = sortColumn.sortMethod;
        var sorted = columnSortMethod ? tableData.sort(columnSortMethod) : sortBy(tableData, sortColumn.sortBy ? sortColumn.sortBy : sortColumn.property);
        tableData = sortColumn.order === "desc" ? sorted.reverse() : sorted;
      }
    };
    tableData = tableData.filter(function(row2) {
      return filterColumn.every(function(column) {
        return remoteFilter ? true : _this29.handleLocalFilter(row2, column);
      });
    });
    if (sortColumn && sortColumn.order) {
      var isRemote = isBoolean(sortColumn.remoteSort) ? sortColumn.remoteSort : remoteSort;
      !isRemote && this.sortMethod && doTableSort();
      !isRemote && !this.sortMethod && doColumnSort();
    }
    this.afterFullData = tableData;
    setTreeScrollYCache(this);
    buildRowGroupFullData(tableData, this);
    return tableData;
  },
  getRowById: function getRowById(rowid2) {
    var fullDataRowIdData = this.fullDataRowIdData;
    var rowCache = fullDataRowIdData[rowid2];
    return rowCache ? rowCache.row : null;
  },
  // 获取处理后的表格数据
  getTableData: function getTableData() {
    var afterFullData = this.afterFullData, footerData = this.footerData, tableData = this.tableData, tableFullData = this.tableFullData;
    return {
      visibleData: afterFullData.slice(0),
      footerData: footerData.slice(0),
      tableData: tableData.slice(0),
      fullData: tableFullData.slice(0)
    };
  },
  handleDefault: function handleDefault() {
    var _this30 = this;
    this.handleAsyncColumn(this.tableData);
    this.selectConfig && this.handleSelectionDefChecked();
    this.radioConfig && this.handleRadioDefChecked();
    this.expandConfig && this.handleDefaultRowExpand();
    this.treeConfig && this.handleDefaultTreeExpand();
    this.updateFooter();
    this.$nextTick(function() {
      return setTimeout(_this30.recalculate);
    });
  },
  // 动态列处理
  mergeCustomColumn: function mergeCustomColumn(customColumns, sort2, colWidth) {
    var isGroup2 = this.isGroup, fullColumn = this.tableFullColumn;
    var mergeWidth = function mergeWidth2(col) {
      return colWidth && Object.assign(col, colWidth[col.property]);
    };
    var getCustomCol = function getCustomCol2(col) {
      return findTree(customColumns, function(item) {
        return col.property && item.property === col.property;
      });
    };
    var hasCustomsOrColWidth = customColumns.length || colWidth;
    var isGroupOrNonSort = isGroup2 || !sort2;
    var matches;
    this.isUpdateCustoms = true;
    if (hasCustomsOrColWidth && isGroupOrNonSort) {
      fullColumn.forEach(function(column) {
        mergeWidth(column);
        matches = getCustomCol(column);
        matches && Object.assign(column, matches.item);
      });
    }
    if (hasCustomsOrColWidth && !isGroupOrNonSort) {
      var _ref180 = {}, _ref180$collectColumn = _ref180.collectColumn, collectColumn2 = _ref180$collectColumn === void 0 ? [] : _ref180$collectColumn, _ref180$customMap = _ref180.customMap, customMap = _ref180$customMap === void 0 ? {} : _ref180$customMap, _ref180$orderColumn = _ref180.orderColumn, orderColumn = _ref180$orderColumn === void 0 ? [] : _ref180$orderColumn;
      mapTree(customColumns, function(customCol) {
        var targetCol = find(fullColumn, function(item) {
          return customCol.property && item.property === customCol.property;
        });
        if (targetCol) {
          Object.assign(targetCol, customCol);
          customMap[customCol.property] = targetCol;
          orderColumn.push(targetCol);
        }
      });
      fullColumn.forEach(function(col) {
        var newColumn = customMap[col.property] ? orderColumn.shift() : col;
        if (newColumn) {
          mergeWidth(newColumn);
          collectColumn2.push(newColumn);
        }
      });
      this.collectColumn = collectColumn2;
    }
    var toolbarVm = this.getVm("toolbar");
    if (toolbarVm) {
      toolbarVm.updateColumn(fullColumn);
    }
    this.$emit("update:customs", fullColumn);
  },
  resetAll: function resetAll() {
    run(["resetCustoms", "resetResizable"], this);
  },
  hideColumn: function hideColumn(tableColumn3) {
    return this.handleVisibleColumn(tableColumn3, false);
  },
  showColumn: function showColumn(tableColumn3) {
    return this.handleVisibleColumn(tableColumn3, true);
  },
  resetCustoms: function resetCustoms() {
    return this.handleVisibleColumn();
  },
  handleVisibleColumn: function handleVisibleColumn(tableColumn3, visible3) {
    var _arguments = arguments;
    var tableFullColumn = this.tableFullColumn;
    var toolbarVm = this.getVm("toolbar");
    var columns2 = arguments.length ? [tableColumn3] : tableFullColumn;
    columns2.forEach(function(column) {
      column.visible = _arguments.length ? visible3 : true;
    });
    if (toolbarVm) {
      toolbarVm.updateSetting();
    }
    return this.$nextTick();
  },
  // 初始化加载动态列：customColumns 列信息，sort 是否按顺序加载
  reloadCustoms: function reloadCustoms(customColumns, sort2, colWidth) {
    var _this31 = this;
    var first = function first2() {
      _this31.mergeCustomColumn(customColumns, sort2, colWidth);
    };
    var second = function second2() {
      _this31.handleTableData(true);
    };
    var third = function third2() {
      return _this31.refreshColumn().then(function() {
        return _this31.tableFullColumn.slice(0);
      });
    };
    return this.$nextTick().then(first).then(second).then(third);
  },
  watchColumn: function watchColumn(value) {
    var customs2 = this.customs, treeConfig = this.treeConfig;
    var toolbarVm = this.getVm("toolbar");
    var fullColumn = getColumnList(value);
    setSliceColumnTree(this);
    this.tableFullColumn = fullColumn;
    this.cacheColumnMap();
    if (!this.isColumnInitReady) {
      this.isColumnInitReady = true;
      customs2 && this.mergeCustomColumn(customs2);
      this.$emit("column-init-ready");
    }
    this.refreshColumn();
    if (this.remoteFilter) {
      this.$grid.filterData = this.getAllFilter();
    }
    if (!this.isColumnReady) {
      this.isColumnReady = true;
      this.$emit("column-ready");
    }
    this.handleTableData(true);
    if (toolbarVm) {
      toolbarVm.updateColumn(fullColumn);
    }
    if (treeConfig && fullColumn.some(function(column) {
      return column.fixed;
    }) && fullColumn.some(function(column) {
      return column.type === "expand";
    })) {
      warn("ui.grid.error.treeFixedExpand");
    }
  },
  /*
   * 刷新列信息
   * 将固定的列左边、右边分别靠边
   * 如果使用了分组表头，固定列必须在左侧或者右侧
   */
  refreshColumn: function refreshColumn() {
    var _this32 = this;
    var leftList = [], centerList = [], rightList = [];
    var letIndex = 0, leftStartIndex = null, rightEndIndex = null, isColspan = void 0;
    var columnStore = this.columnStore, isGroup2 = this.isGroup;
    var scrollXStore = this.scrollXStore, tableFullColumn = this.tableFullColumn;
    var scrollX = this.optimizeOpts.scrollX;
    onGroupHeader({
      _vm: this,
      isGroup: isGroup2,
      headerProps
    });
    tableFullColumn.filter(function(column) {
      return column.visible;
    }).forEach(function(column, columnIndex) {
      var ret = reassignFixedLeft({
        column,
        columnIndex,
        isColspan,
        leftList,
        leftStartIndex,
        letIndex
      });
      leftStartIndex = ret.leftStartIndex;
      letIndex = ret.letIndex;
      isColspan = ret.isColspan;
      ret = reassignFixedRight({
        column,
        columnIndex,
        isColspan,
        rightEndIndex,
        rightList
      });
      isColspan = ret.isColspan;
      rightEndIndex = ret.rightEndIndex;
      reassignNotFixed({
        centerList,
        column
      });
    });
    var visibleColumn = leftList.concat(centerList).concat(rightList);
    var scrollXLoad = scrollX && scrollX.gt && scrollX.gt < tableFullColumn.length;
    var tableColumn3 = visibleColumn;
    Object.assign(columnStore, {
      leftList,
      centerList,
      rightList
    });
    showGroupFixedError({
      isColspan,
      isGroup: isGroup2,
      leftStartIndex,
      rightEndIndex,
      visibleColumn
    });
    tableColumn3 = onScrollXLoad({
      _vm: this,
      scrollX,
      scrollXLoad,
      scrollXStore,
      tableColumn: tableColumn3,
      visibleColumn
    });
    this.scrollXLoad = scrollXLoad;
    this.tableColumn = tableColumn3;
    this.visibleColumn = visibleColumn;
    this.visibleColumnChanged = true;
    this.columnAnchor && this.$grid.buildColumnAnchorParams();
    return this.$nextTick().then(function() {
      _this32.updateFooter();
      _this32.recalculate();
    }).then(function() {
      _this32.$emit("after-refresh-column");
      if (_this32.isColumnReady) {
        _this32.attemptRestoreScoll();
      }
    });
  },
  // 指定列宽的列进行拆分
  analyColumnWidth: function analyColumnWidth() {
    var columnMinWidth = this.columnMinWidth, columnStore = this.columnStore, columnWidth = this.columnWidth, tableFullColumn = this.tableFullColumn;
    var autoList = [], pxList = [], pxMinList = [], resizeList = [], scaleList = [], scaleMinList = [];
    var ruleChains = [{
      match: function match(col) {
        return col.resizeWidth;
      },
      action: function action(col) {
        return resizeList.push(col);
      }
    }, {
      match: function match(col) {
        return isPx(col.width);
      },
      action: function action(col) {
        return pxList.push(col);
      }
    }, {
      match: function match(col) {
        return isScale(col.width);
      },
      action: function action(col) {
        return scaleList.push(col);
      }
    }, {
      match: function match(col) {
        return isPx(col.minWidth);
      },
      action: function action(col) {
        return pxMinList.push(col);
      }
    }, {
      match: function match(col) {
        return isScale(col.minWidth);
      },
      action: function action(col) {
        return scaleMinList.push(col);
      }
    }, {
      match: function match() {
        return true;
      },
      action: function action(col) {
        return autoList.push(col);
      }
    }];
    for (var i = 0; i < tableFullColumn.length; i++) {
      var column = tableFullColumn[i];
      columnWidth && !column.width && (column.width = columnWidth);
      columnMinWidth && !column.minWidth && (column.minWidth = columnMinWidth);
      if (column.visible) {
        for (var j = 0; j < ruleChains.length; j++) {
          var ruleChain = ruleChains[j];
          if (ruleChain.match(column)) {
            ruleChain.action(column);
            break;
          }
        }
      }
    }
    Object.assign(columnStore, {
      autoList,
      pxList,
      pxMinList,
      resizeList,
      scaleList,
      scaleMinList
    });
  },
  /**
   * 计算单元格列宽，动态分配可用剩余空间
   * 支持（width=?、width=?px、width=?%、min-width=?、min-width=?px、min-width=?%）
   */
  recalculate: function recalculate() {
    var _this33 = this;
    var mainBody = this.elemStore["main-body-wrapper"];
    if (isDisplayNone(mainBody)) {
      return;
    }
    var scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad, scrollLoad = this.scrollLoad;
    var _this$$refs2 = this.$refs, tableBody = _this$$refs2.tableBody, tableFooter = _this$$refs2.tableFooter, tableHeader = _this$$refs2.tableHeader;
    var getElem = function getElem2(ref) {
      return ref ? ref.$el : null;
    };
    var headerElem = getElem(tableHeader);
    var bodyElem = getElem(tableBody);
    var footerElem = getElem(tableFooter);
    if (!bodyElem) {
      return this.computeScrollLoad();
    }
    this.autoCellWidth(headerElem, bodyElem, footerElem);
    if (scrollXLoad || scrollYLoad || scrollLoad) {
      return this.computeScrollLoad().then(function() {
        _this33.autoCellWidth(headerElem, bodyElem, footerElem);
      });
    }
    return this.computeScrollLoad();
  },
  // 列宽计算
  autoCellWidth: function autoCellWidth(headerEl, bodyEl, footerEl) {
    var _this$$grid2, _this$$grid2$designCo;
    var minCellWidth = ((_this$$grid2 = this.$grid) == null ? void 0 : (_this$$grid2$designCo = _this$$grid2.designConfig) == null ? void 0 : _this$$grid2$designCo.minWidth) || 72;
    var fit = this.fit, columnStore = this.columnStore, columnChart = this.columnChart, isGroup2 = this.isGroup;
    var tableHeight = bodyEl.offsetHeight;
    var overflowY = bodyEl.scrollHeight > bodyEl.clientHeight;
    var bodyW = bodyEl.clientWidth;
    var leftList = columnStore.leftList, rightList = columnStore.rightList;
    var tableWidth = calcTableWidth({
      bodyWidth: bodyW,
      columnStore,
      fit,
      minCellWidth,
      remainWidth: bodyW
    });
    var scrollbarWidth = overflowY ? bodyEl.offsetWidth - bodyW : 0;
    var parentHeight2 = this.parentHeight;
    calcFixedStickyPosition({
      headerEl,
      bodyEl,
      columnStore,
      scrollbarWidth,
      columnChart,
      isGroup: isGroup2
    });
    Object.assign(this, {
      overflowY,
      parentHeight: parentHeight2,
      scrollbarWidth,
      tableHeight,
      tableWidth
    });
    if (headerEl) {
      this.headerHeight = headerEl.offsetHeight;
    }
    if (footerEl) {
      var footerHeight = footerEl.offsetHeight;
      this.scrollbarHeight = Math.max(footerHeight - footerEl.clientHeight, 0);
      this.overflowX = tableWidth > footerEl.clientWidth;
      this.footerHeight = footerHeight;
    } else {
      this.scrollbarHeight = Math.max(tableHeight - bodyEl.clientHeight, 0);
      this.overflowX = tableWidth > bodyW;
    }
    if (leftList.length || rightList.length) {
      generateFixedClassName({
        $table: this,
        bodyElem: bodyEl,
        leftList,
        rightList
      });
    }
  },
  // 同步headerHeight
  syncHeaderHeight: function syncHeaderHeight() {
    var _this$$refs$tableHead;
    var headerEl = (_this$$refs$tableHead = this.$refs.tableHeader) == null ? void 0 : _this$$refs$tableHead.$el;
    if (headerEl)
      this.headerHeight = headerEl.offsetHeight;
  },
  resetResizable: function resetResizable() {
    var toolbarVm = this.getVm("toolbar");
    this.visibleColumn.forEach(function(col) {
      return col.resizeWidth = 0;
    });
    if (toolbarVm) {
      toolbarVm.resetResizable();
    }
    this.analyColumnWidth();
    return this.recalculate();
  },
  updateStyle: function updateStyle() {
    var _this34 = this;
    var columnStore = this.columnStore, currentRow = this.currentRow, height2 = this.height, maxHeight = this.maxHeight, minHeight = this.minHeight, parentHeight2 = this.parentHeight, tableColumn3 = this.tableColumn, scrollbarWidth = this.scrollbarWidth;
    var scrollYLoad = this.scrollYLoad, scrollXLoad = this.scrollXLoad, scrollLoad = this.scrollLoad;
    var layoutList = ["header", "body", "footer"];
    var _ref181 = {}, customHeight = _ref181.customHeight, scaleToPx = _ref181.scaleToPx;
    var _this$$refs3 = this.$refs, tableBody = _this$$refs3.tableBody, tableHeader = _this$$refs3.tableHeader;
    var getElem = function getElem2(ref) {
      return ref ? ref.$el : null;
    };
    var headerEl = getElem(tableHeader);
    var bodyEl = getElem(tableBody);
    if (height2 === "auto") {
      customHeight = parentHeight2;
    } else {
      scaleToPx = Math.floor(parseInt(height2) / 100 * parentHeight2);
      customHeight = isScale(height2) ? scaleToPx : toNumber(height2);
    }
    layoutList.forEach(function(layout) {
      var args1 = {
        _vm: _this34,
        columnStore,
        customHeight
      };
      var args2 = {
        layout,
        maxHeight,
        minHeight,
        parentHeight: parentHeight2,
        tableColumn: tableColumn3
      };
      var ret = handleLayout(Object.assign(args1, args2));
      tableColumn3 = ret.tableColumn;
      maxHeight = ret.maxHeight;
      minHeight = ret.minHeight;
    });
    currentRow && this.setCurrentRow(currentRow);
    this.syncHeaderHeight();
    return this.$nextTick(function() {
      var leftList = columnStore.leftList, rightList = columnStore.rightList;
      if ((leftList.length || rightList.length) && (scrollYLoad || scrollXLoad || scrollLoad)) {
        calcFixedStickyPosition({
          headerEl,
          bodyEl,
          columnStore,
          scrollbarWidth
        });
      }
      return true;
    });
  },
  preventEvent: function preventEvent(event, type, args, next, end) {
    var _this35 = this;
    var eventList = Interceptor.get(type);
    if (!eventList.some(function(listener) {
      return listener(args, event, _this35) === false;
    })) {
      next && next();
    }
    end && end();
  },
  blurOutside: function blurOutside(_ref182, event) {
    var row2 = _ref182.row, args = _ref182.args, column = _ref182.column;
    var editConfig = this.editConfig, getEventTargetNode2 = this.getEventTargetNode, $el = this.$el;
    if (column && row2) {
      var editor = column.editor;
      if (typeof editor.blurOutside === "function") {
        return Boolean(editor.blurOutside({
          cell: args.cell,
          event
        }));
      }
      var blurClassConfig = editor.blurClass || editConfig.blurClass;
      if (blurClassConfig) {
        var blurClass = [];
        if (typeof blurClassConfig === "string") {
          blurClass.push(blurClassConfig);
        } else if (isArray(blurClassConfig)) {
          blurClass = blurClassConfig.slice(0);
        }
        if (args != null && args.cell.contains(event.target)) {
          return true;
        }
        if (editConfig.mode === "row" && getEventTargetNode2(event, $el, "tiny-grid-body__column").flag) {
          return true;
        }
        return blurClass.every(function(cls) {
          return !getEventTargetNode2(event, document.body, cls).flag;
        });
      }
    }
  },
  handleGlobalMousedownEvent,
  handleGlobalBlurEvent,
  handleGlobalMousewheelEvent,
  handleEscKeyDown,
  handleEnterKeyDown,
  handleCtxMenu,
  handleArrowKeyDown,
  handleDelKeyDown,
  handleSpaceKeyDown,
  handleTabKeyDown,
  handleCopyKeyDown,
  handleF2KeyDown,
  handleOtherKeyDown,
  handleGlobalKeydownEvent,
  handleGlobalResizeEvent,
  handleGlobalMousedownCaptureEvent,
  // 处理单选框默认勾选
  handleRadioDefChecked: function handleRadioDefChecked() {
    var fullDataRowIdData = this.fullDataRowIdData;
    var _ref183 = this.radioConfig || {}, checkRowKey = _ref183.checkRowKey;
    var rowid2 = checkRowKey && encodeURIComponent(checkRowKey);
    var rowCache = fullDataRowIdData[rowid2];
    if (rowid2 && rowCache) {
      this.setRadioRow(rowCache.row);
    }
  },
  // 单选，行选中事件
  triggerRadioRowEvent: function triggerRadioRowEvent(event, params) {
    var selectRow = this.selectRow;
    var _ref184 = this.radioConfig || {}, checkMethod = _ref184.checkMethod;
    if (checkMethod && !checkMethod(params)) {
      return;
    }
    this.setRadioRow(params.row);
    this.setCurrentRow(params.row);
    if (selectRow !== params.row) {
      _emitEvent(this, "radio-change", [params, event]);
    }
  },
  triggerCurrentRowEvent: function triggerCurrentRowEvent(event, params) {
    var currentRow = this.currentRow;
    this.setCurrentRow(params.row);
    if (currentRow !== params.row) {
      _emitEvent(this, "current-change", [params, event]);
    }
  },
  // 高亮行，设置某一行为高亮状态，如果调不加参数，则会取消目前高亮行的选中状态
  setCurrentRow: function setCurrentRow(row2) {
    run(["clearCurrentRow", "clearCurrentColumn"], this);
    this.currentRow = row2;
    if (this.highlightCurrentRow) {
      var rowElems = this.$el.querySelectorAll('[data-rowid="' + getRowid(this, row2) + '"]');
      arrayEach$1(rowElems, function(elem) {
        return addClass(elem, "row__current");
      });
    }
    return this.$nextTick();
  },
  setRadioRow: function setRadioRow(row2) {
    row2 !== this.selectRow && this.clearRadioRow();
    this.selectRow = row2;
    return this.$nextTick();
  },
  clearCurrentRow: function clearCurrentRow() {
    Object.assign(this, {
      currentRow: null,
      hoverRow: null
    });
    var rowElems = this.$el.querySelectorAll(".row__current");
    arrayEach$1(rowElems, function(elem) {
      return removeClass(elem, "row__current");
    });
    return this.$nextTick();
  },
  clearRadioRow: function clearRadioRow() {
    var radioRow = this.selectRow;
    radioRow && (this.selectRow = null);
    return this.$nextTick();
  },
  getCurrentRow: function getCurrentRow() {
    var currentRow = this.currentRow;
    return currentRow;
  },
  getRadioRow: function getRadioRow() {
    var radioRow = this.selectRow;
    return radioRow;
  },
  triggerHeaderCellClickEvent: function triggerHeaderCellClickEvent(event, params) {
    var lastTime = this._lastResizeTime, highlightCurrentColumn = this.highlightCurrentColumn;
    var cell = params.cell, column = params.column;
    var trigger = this.sortOpts.trigger;
    var isResizable2 = lastTime && lastTime > Date.now() - 300;
    var isSort = this.getEventTargetNode(event, cell, "tiny-grid-sort-wrapper").flag;
    var isFilter = this.getEventTargetNode(event, cell, "tiny-grid-filter-wrapper").flag;
    if (trigger === "cell" && !(isResizable2 || isSort || isFilter)) {
      var nextOrder = this.toggleColumnOrder(column);
      this.triggerSortEvent(event, column, nextOrder);
    }
    var eventParams = _extends({
      triggerResizable: isResizable2,
      triggerSort: isSort,
      triggerFilter: isFilter
    }, params);
    _emitEvent(this, "header-cell-click", [eventParams, event]);
    if (highlightCurrentColumn) {
      return this.setCurrentColumn(column, true);
    }
    return this.$nextTick();
  },
  setCurrentColumn: function setCurrentColumn(column) {
    run(["clearCurrentRow", "clearCurrentColumn"], this);
    this.currentColumn = column;
    var colElems = this.$el.querySelectorAll("." + column.id);
    arrayEach$1(colElems, function(elem) {
      return addClass(elem, "col__current");
    });
    return this.$nextTick();
  },
  clearCurrentColumn: function clearCurrentColumn() {
    this.currentColumn = null;
    var colElems = this.$el.querySelectorAll(".col__current");
    arrayEach$1(colElems, function(elem) {
      return removeClass(elem, "col__current");
    });
    return this.$nextTick();
  },
  // 当单元格发生改变时，如果存在规则，则校验
  handleChangeCell: function handleChangeCell(event, params) {
    var _this36 = this;
    this.triggerValidate("blur").catch(function(e) {
      return e;
    }).then(function() {
      _this36.handleActived(params, event).then(function() {
        return _this36.triggerValidate("change");
      }).catch(function(e) {
        return e;
      });
    });
  },
  // 列点击事件：如果是单击模式，则激活为编辑状态；如果是双击模式，则单击后选中状态
  triggerCellClickEvent: function triggerCellClickEvent(event, params) {
    var $el = this.$el, highlightCurrentRow = this.highlightCurrentRow, editStore = this.editStore;
    var _this$radioConfig = this.radioConfig, radioConfig = _this$radioConfig === void 0 ? {} : _this$radioConfig, _this$selectConfig2 = this.selectConfig, selectConfig = _this$selectConfig2 === void 0 ? {} : _this$selectConfig2, _this$expandConfig = this.expandConfig, expandConfig = _this$expandConfig === void 0 ? {} : _this$expandConfig;
    var _this$treeConfig = this.treeConfig, treeConfig = _this$treeConfig === void 0 ? {} : _this$treeConfig, editConfig = this.editConfig, _this$mouseConfig = this.mouseConfig, mouseConfig = _this$mouseConfig === void 0 ? {} : _this$mouseConfig;
    var actived = editStore.actived;
    var row2 = params.row, column = params.column, cell = params.cell;
    if (isTargetRadioOrCheckbox(event, column, "radio") || isTargetRadioOrCheckbox(event, column, "selection", "checkbox")) {
      return;
    }
    onClickExpandColumn({
      $el,
      _vm: this,
      column,
      event,
      expandConfig,
      params
    });
    onClickTreeNodeColumn({
      _vm: this,
      column,
      event,
      params,
      treeConfig
    });
    if ((!column.treeNode || !this.getEventTargetNode(event, $el, "tiny-grid-tree-wrapper").flag) && (column.type !== "expand" || !this.getEventTargetNode(event, $el, "tiny-grid__expanded").flag)) {
      onHighlightCurrentRow({
        $el,
        _vm: this,
        event,
        highlightCurrentRow,
        params,
        radioConfig
      });
      onClickRadioColumn({
        $el,
        _vm: this,
        column,
        event,
        params,
        radioConfig
      });
      onClickSelectColumn({
        _vm: this,
        column,
        event,
        params,
        selectConfig
      });
      onClickCellSelect({
        _vm: this,
        actived,
        cell,
        column,
        editConfig,
        event,
        mouseConfig,
        params,
        row: row2
      });
    }
    _emitEvent(this, "cell-click", [params, event]);
  },
  // 列双击点击事件：如果是双击模式，则激活为编辑状态
  triggerCellDBLClickEvent: function triggerCellDBLClickEvent(event, params) {
    var _this37 = this;
    var editStore = this.editStore, editConfig = this.editConfig;
    var actived = editStore.actived;
    var isActiveNewCell = !actived.args || event.currentTarget !== actived.args.cell;
    var isDblclickNewCell = editConfig && editConfig.trigger === "dblclick" && isActiveNewCell;
    if (isDblclickNewCell && editConfig.mode === "row") {
      this.triggerValidate("blur").catch(function(e) {
        return e;
      }).then(function() {
        _this37.handleActived(params, event).then(function() {
          return _this37.triggerValidate("change");
        }).catch(function(e) {
          return e;
        });
      });
    }
    if (isDblclickNewCell && editConfig.mode === "cell") {
      this.handleActived(params, event).then(function() {
        return _this37.triggerValidate("change");
      }).catch(function(e) {
        return e;
      });
    }
    _emitEvent(this, "cell-dblclick", [params, event]);
  },
  // 点击排序事件
  triggerSortEvent: function triggerSortEvent(event, column, order) {
    var property = column.property;
    var isColumnSortable = column.type ? false : column.sortable || column.remoteSort;
    if (this.sortable && isColumnSortable) {
      var evntParams = {
        $table: this,
        column,
        order,
        property
      };
      evntParams.prop = property;
      evntParams.field = evntParams.prop;
      if (order === column.order) {
        evntParams.order = null;
        this.clearSort(column.property);
      } else {
        this.sort(property, order);
      }
      _emitEvent(this, "sort-change", [evntParams, event]);
    }
  },
  sort: function sort(field, order) {
    var remoteSort = this.remoteSort, tableFullColumn = this.tableFullColumn, visibleColumn = this.visibleColumn;
    var column = find(visibleColumn, function(item) {
      return item.property === field;
    });
    var isRemote = isBoolean(column.remoteSort) ? column.remoteSort : remoteSort;
    var isColumnSortable = column.type ? false : column.sortable || column.remoteSort;
    if (this.sortable && isColumnSortable) {
      if (column.order !== order) {
        tableFullColumn.forEach(function(column2) {
          return column2.order = null;
        });
        column.order = order;
        !isRemote && this.handleTableData(true).then(this.refreshStyle);
      }
      return this.$nextTick().then(this.updateStyle);
    }
    return this.$nextTick();
  },
  clearSort: function clearSort() {
    arrayEach$1(this.tableFullColumn, function(column) {
      return column.order = null;
    });
    this.$grid && (this.$grid.sortData = {});
    return this.handleTableData(true).then(this.refreshStyle);
  },
  toggleGroupExpansion: function toggleGroupExpansion(row2) {
    this.groupExpandeds.push(row2);
  },
  // 展开行事件
  triggerRowExpandEvent: function triggerRowExpandEvent(event, _ref185) {
    var row2 = _ref185.row;
    var rest = this.toggleRowExpansion(row2);
    var eventParams = {
      $table: this,
      row: row2,
      rowIndex: this.getRowIndex(row2)
    };
    _emitEvent(this, "toggle-expand-change", [eventParams, event]);
    return rest;
  },
  // 切换展开行
  toggleRowExpansion: function toggleRowExpansion(row2) {
    return this.setRowExpansion(row2);
  },
  // 处理默认展开行
  handleDefaultRowExpand: function handleDefaultRowExpand() {
    var fullDataRowIdData = this.fullDataRowIdData, tableFullData = this.tableFullData;
    var _ref186 = this.expandConfig || {}, expandAll = _ref186.expandAll, expandRowKeys = _ref186.expandRowKeys;
    if (expandAll) {
      this.expandeds = tableFullData.slice(0);
      return;
    }
    if (expandRowKeys) {
      var defExpandeds = [];
      expandRowKeys.forEach(function(rowid2) {
        var rowCache = fullDataRowIdData[rowid2];
        rowCache && defExpandeds.push(rowCache.row);
      });
      this.expandeds = defExpandeds;
    }
  },
  setAllRowExpansion: function setAllRowExpansion(expanded) {
    this.expandeds = !expanded ? [] : this.tableFullData.slice(0);
    return this.$nextTick().then(this.recalculate);
  },
  // 设置展开行，二个参数设置这一行展开与否；支持单行；支持多行
  setRowExpansion: function setRowExpansion(rows, expanded) {
    var expandeds = this.expandeds;
    var _ref187 = this.expandConfig || {}, accordion = _ref187.accordion;
    var isToggle = arguments.length === 1;
    var isAccordionCloseAll = false;
    if (!rows) {
      return this.$nextTick().then(this.recalculate);
    }
    if (!isArray(rows)) {
      rows = [rows];
    }
    if (accordion) {
      rows = rows.slice(rows.length - 1, rows.length);
      if (rows.length && isToggle) {
        isAccordionCloseAll = expandeds.includes(rows[0]);
      }
      expandeds.length = 0;
    }
    rows.forEach(function(row2) {
      var index2 = expandeds.indexOf(row2);
      if (isToggle && ~index2 || !isToggle && !expanded && ~index2) {
        expandeds.splice(index2, 1);
        return;
      }
      if (isToggle && !isAccordionCloseAll && !~index2 || !isToggle && expanded && !~index2) {
        expandeds.push(row2);
      }
    });
    return this.$nextTick().then(this.recalculate);
  },
  hasRowExpand: function hasRowExpand(row2) {
    return ~this.expandeds.indexOf(row2);
  },
  clearRowExpand: function clearRowExpand() {
    var _this38 = this;
    var hasExpand = this.expandeds.length;
    this.expandeds = [];
    return this.$nextTick().then(function() {
      return hasExpand ? _this38.recalculate() : 0;
    });
  },
  // 获取虚拟滚动状态
  getVirtualScroller: function getVirtualScroller() {
    var scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad;
    var _this$$refs$tableBody = this.$refs.tableBody.$el, scrollLeft = _this$$refs$tableBody.scrollLeft, scrollTop = _this$$refs$tableBody.scrollTop;
    return {
      scrollX: scrollXLoad,
      scrollY: scrollYLoad,
      scrollLeft,
      scrollTop
    };
  },
  // 横向 X 可视渲染事件处理
  triggerScrollXEvent: function triggerScrollXEvent(event) {
    this.loadScrollXData(event);
  },
  debounceScrollX: function debounceScrollX(event) {
    var _this39 = this;
    if (!this.tasks.debounceScrollX) {
      this.tasks.debounceScrollXHandler = null;
      this.tasks.debounceScrollX = function() {
        return requestAnimationFrame(function() {
          _this39.tasks.debounceScrollXHandler = null;
          _this39.loadScrollXData(event);
        });
      };
    }
    if (this.tasks.debounceScrollXHandler) {
      cancelAnimationFrame(this.tasks.debounceScrollXHandler);
      this.tasks.debounceScrollXHandler = null;
    }
    this.tasks.debounceScrollXHandler = this.tasks.debounceScrollX();
  },
  // 处理x轴滚动时，虚拟滚动数据计算
  loadScrollXData: function loadScrollXData() {
    var scrollXStore = this.scrollXStore, visibleColumn = this.visibleColumn;
    var offsetSize = scrollXStore.offsetSize, renderSize = scrollXStore.renderSize, startIndex = scrollXStore.startIndex, visibleIndex = scrollXStore.visibleIndex, visibleSize = scrollXStore.visibleSize;
    var scrollLeft = this.$refs.tableBody.$el.scrollLeft;
    var _ref188 = {}, _ref188$preload = _ref188.preload, preload = _ref188$preload === void 0 ? false : _ref188$preload, _ref188$toVisibleInde = _ref188.toVisibleIndex, toVisibleIndex = _ref188$toVisibleInde === void 0 ? 0 : _ref188$toVisibleInde, _ref188$width = _ref188.width, width = _ref188$width === void 0 ? 0 : _ref188$width;
    for (var i = 0; i < visibleColumn.length; i++) {
      width += visibleColumn[i].renderWidth;
      if (scrollLeft < width) {
        toVisibleIndex = i;
        break;
      }
    }
    if (visibleIndex === toVisibleIndex) {
      this.clostTooltip();
      return;
    }
    var marginSize = Math.min(Math.floor((renderSize - visibleSize) / 2), visibleSize);
    marginSize = Math.max(0, marginSize);
    if (visibleIndex > toVisibleIndex) {
      preload = startIndex >= toVisibleIndex - offsetSize;
      if (preload) {
        scrollXStore.startIndex = Math.max(0, toVisibleIndex - Math.max(marginSize, renderSize - visibleSize));
        this.updateScrollXData();
      }
    } else {
      preload = startIndex + renderSize <= toVisibleIndex + visibleSize + offsetSize;
      if (preload) {
        scrollXStore.startIndex = Math.max(0, Math.min(visibleColumn.length - renderSize, toVisibleIndex - marginSize));
        this.updateScrollXData();
      }
    }
    scrollXStore.visibleIndex = toVisibleIndex;
    this.clostTooltip();
  },
  // 纵向 Y 可视渲染事件处理
  triggerScrollYEvent: function triggerScrollYEvent(event) {
    this.loadScrollYData(event);
  },
  // 处理滚动分页相关逻辑
  debounceScrollLoad: function debounceScrollLoad(event) {
    var _this40 = this;
    if (!this.tasks.debounceScrollLoad) {
      this.tasks.debounceScrollLoad = debounce(debounceScrollLoadDuration, function() {
        var _this40$scrollLoadSto = _this40.scrollLoadStore, scrollHeight = _this40$scrollLoadSto.scrollHeight, bodyHeight = _this40$scrollLoadSto.bodyHeight;
        var _this40$$grid$tablePa = _this40.$grid.tablePage, currentPage = _this40$$grid$tablePa.currentPage, pageSize = _this40$$grid$tablePa.pageSize;
        var max = scrollHeight - bodyHeight;
        var scrollTop = event.target.scrollTop;
        if (scrollTop > max) {
          scrollTop = max;
        }
        var rowHeight = _this40.scrollYStore.rowHeight;
        var visibleIndex = Math.ceil(scrollTop / rowHeight);
        var page = Math.ceil(visibleIndex / pageSize) + 1;
        if (currentPage !== page) {
          _this40.$grid.pageCurrentChange(page);
        }
      });
    }
    this.tasks.debounceScrollLoad();
  },
  // 纵向 Y 可视渲染处理
  loadScrollYData: function loadScrollYData(event) {
    var _this41 = this;
    var scrollYStore = this.scrollYStore;
    var startIndex = scrollYStore.startIndex, renderSize = scrollYStore.renderSize, offsetSize = scrollYStore.offsetSize, visibleIndex = scrollYStore.visibleIndex, visibleSize = scrollYStore.visibleSize, rowHeight = scrollYStore.rowHeight;
    var scrollTop = event.target.scrollTop;
    var toVisibleIndex = Math.ceil(scrollTop / rowHeight);
    var preload = false;
    if (visibleIndex === toVisibleIndex) {
      return;
    }
    var marginSize = Math.min(Math.floor((renderSize - visibleSize) / 2), visibleSize);
    if (toVisibleIndex < visibleIndex) {
      preload = startIndex >= toVisibleIndex - offsetSize;
      if (preload) {
        scrollYStore.startIndex = Math.max(0, toVisibleIndex - Math.max(marginSize, renderSize - visibleSize));
        this.updateScrollYData();
      }
    } else {
      preload = startIndex + renderSize <= toVisibleIndex + visibleSize + offsetSize;
      if (preload) {
        var totalRows = getTotalRows(this);
        scrollYStore.startIndex = Math.max(0, Math.min(totalRows - renderSize, toVisibleIndex - marginSize));
        this.updateScrollYData();
      }
    }
    scrollYStore.visibleIndex = toVisibleIndex;
    this.$nextTick(function() {
      _this41.updateSelectedCls(true);
    });
  },
  getRowHeight: function getRowHeight() {
    var $refs = this.$refs, vSize4 = this.vSize;
    var scrollY = this.optimizeOpts.scrollY;
    var tableBody = $refs.tableBody, tableHeader = $refs.tableHeader;
    var rHeight = scrollY.rHeight;
    if (!rHeight) {
      var firstTrElem = tableBody && tableBody.$el.querySelector("tbody>tr") || tableHeader && tableHeader.$el.querySelector("thead>tr") || null;
      if (firstTrElem) {
        rHeight = firstTrElem.clientHeight;
      }
    }
    if (!rHeight) {
      var vSizeList = ["medium", "small", "mini"];
      var defSizeList = [44, 40, 36];
      var i = vSizeList.indexOf(vSize4);
      rHeight = ~i ? defSizeList[i] : 48;
    }
    return rHeight;
  },
  // 计算可视渲染相关数据
  computeScrollLoad: function computeScrollLoad() {
    var _this42 = this;
    return this.$nextTick().then(function() {
      var $refs = _this42.$refs, optimizeOpts2 = _this42.optimizeOpts, visibleColumn = _this42.visibleColumn;
      var scrollLoad = _this42.scrollLoad, scrollXLoad = _this42.scrollXLoad, scrollXStore = _this42.scrollXStore, scrollYLoad = _this42.scrollYLoad, scrollYStore = _this42.scrollYStore;
      var scrollX = optimizeOpts2.scrollX, scrollY = optimizeOpts2.scrollY;
      var tableBody = $refs.tableBody;
      var bodyElem = tableBody ? tableBody.$el : null;
      if (bodyElem) {
        computeScrollXLoad({
          _vm: _this42,
          scrollX,
          scrollXLoad,
          scrollXStore,
          tableBodyElem: bodyElem,
          visibleColumn
        });
        computeScrollYLoad({
          _vm: _this42,
          scrollLoad,
          scrollY,
          scrollYLoad,
          scrollYStore,
          tableBodyElem: bodyElem
        });
      }
      _this42.$nextTick(_this42.updateStyle);
    });
  },
  // 处理x轴方向虚拟滚动列数据加载
  updateScrollXData: function updateScrollXData() {
    var _this43 = this;
    var scrollXLoad = this.scrollXLoad, scrollXStore = this.scrollXStore, tableColumn3 = this.tableColumn, treeConfig = this.treeConfig, visibleColumn = this.visibleColumn, visibleColumnChanged = this.visibleColumnChanged, columnStore = this.columnStore;
    var _scrollXStore$lastSta = scrollXStore.lastStartIndex, lastStartIndex = _scrollXStore$lastSta === void 0 ? -1 : _scrollXStore$lastSta, renderSize = scrollXStore.renderSize, startIndex = scrollXStore.startIndex;
    var args = {
      lastStartIndex,
      renderSize,
      scrollXLoad,
      startIndex,
      tableColumn: tableColumn3,
      columnStore
    };
    Object.assign(args, {
      treeConfig,
      visibleColumn,
      visibleColumnChanged
    });
    var ret = sliceVisibleColumn(args);
    if (ret.sliced) {
      this.updateScrollXSpace();
      this.updateScrollStatus();
    }
    this.debounceRaf("updateScrollXDataHandler", function() {
      scrollXStore.lastStartIndex = ret.lastStartIndex;
      _this43.tableColumn = ret.tableColumn;
      _this43.visibleColumnChanged = ret.visibleColumnChanged;
      _this43.$nextTick(_this43.updateStyle);
    });
  },
  // 更新横向 X 可视渲染上下剩余空间大小
  updateScrollXSpace: function updateScrollXSpace() {
    var elemStore = this.elemStore, scrollXLoad = this.scrollXLoad, scrollXStore = this.scrollXStore, scrollbarWidth = this.scrollbarWidth, tableWidth = this.tableWidth, visibleColumn = this.visibleColumn;
    var startIndex = scrollXStore.startIndex;
    var _ref189 = {}, bodyElem = _ref189.bodyElem, footerElem = _ref189.footerElem, headerElem = _ref189.headerElem, leftSpaceWidth = _ref189.leftSpaceWidth, marginLeft = _ref189.marginLeft;
    headerElem = elemStore["main-header-table"];
    bodyElem = elemStore["main-body-table"];
    footerElem = elemStore["main-footer-table"];
    leftSpaceWidth = visibleColumn.slice(0, startIndex).reduce(function(previous, column) {
      if (column.fixed === "left")
        return previous;
      return previous + column.renderWidth;
    }, 0);
    marginLeft = scrollXLoad ? leftSpaceWidth + "px" : "";
    headerElem && (headerElem.style.marginLeft = marginLeft);
    bodyElem.style.marginLeft = marginLeft;
    footerElem && (footerElem.style.marginLeft = marginLeft);
    var layouts = ["header", "body", "footer"];
    layouts.forEach(function(layout) {
      var xSpaceElem = elemStore["main-" + layout + "-xSpace"];
      var extra = layout === "header" ? scrollbarWidth : 0;
      if (xSpaceElem) {
        xSpaceElem.style.width = scrollXLoad ? tableWidth + extra + "px" : "";
      }
    });
    this.$nextTick(this.updateStyle);
  },
  debounceRaf: function debounceRaf(handlerKey, callback) {
    var _this44 = this;
    if (this[handlerKey]) {
      cancelAnimationFrame(this[handlerKey]);
    }
    this[handlerKey] = requestAnimationFrame(function() {
      _this44[handlerKey] = null;
      callback();
    });
  },
  // 处理虚拟滚动加载数据，并更新YSpace位置
  updateScrollYData: function updateScrollYData() {
    var _this45 = this;
    this.updateScrollYSpace();
    this.debounceRaf("updateScrollYDataHandler", function() {
      _this45.handleTableData().then(function() {
        return _this45.$nextTick(_this45.updateStyle);
      });
    });
  },
  // 更新纵向虚拟滚动 Y 可视渲染上下剩余空间大小（使用tiny-grid-body__y-space元素撑开足够空间）
  updateScrollYSpace: function updateScrollYSpace() {
    var $grid = this.$grid, elemStore = this.elemStore, scrollLoad = this.scrollLoad, scrollLoadStore = this.scrollLoadStore, scrollYLoad = this.scrollYLoad;
    var _this$scrollYStore = this.scrollYStore, rowHeight = _this$scrollYStore.rowHeight, startIndex = _this$scrollYStore.startIndex;
    var totalRows = getTotalRows(this);
    var bodyHeight = totalRows * rowHeight;
    var scrollHeight = $grid.pagerConfig ? $grid.pagerConfig.total * rowHeight : 0;
    var isVScrollOrLoad = scrollYLoad || scrollLoad;
    var _ref190 = {}, marginTop = _ref190.marginTop, ySpaceHeight = _ref190.ySpaceHeight;
    marginTop = isVScrollOrLoad && scrollYLoad ? Math.max(startIndex * rowHeight, 0) + "px" : "";
    ySpaceHeight = isVScrollOrLoad ? bodyHeight + "px" : "";
    scrollLoadStore.bodyHeight = bodyHeight;
    scrollLoadStore.scrollHeight = scrollHeight;
    var tableElem = elemStore["main-body-table"];
    if (tableElem) {
      tableElem.style.transform = marginTop ? "translateY(" + marginTop + ")" : "";
    }
    var ySpaceElem = elemStore["main-body-ySpace"];
    ySpaceElem && (ySpaceElem.style.height = ySpaceHeight);
    if (ySpaceElem && scrollLoad && $grid) {
      Object.assign(scrollLoadStore, {
        bodyHeight,
        scrollHeight
      });
      ySpaceElem.firstChild.style.height = scrollHeight + "px";
      ySpaceElem.onscroll = this.debounceScrollLoad;
    }
  },
  updateScrollLoadBar: function updateScrollLoadBar(event) {
    var $el = this.$el, elemStore = this.elemStore, scrollLoad = this.scrollLoad, scrollLoadStore = this.scrollLoadStore;
    if (scrollLoad && $el.contains(event.target)) {
      var wheelDelta = event.wheelDelta ? event.wheelDelta : -event.detail * 40;
      var scrollElm = elemStore["main-body-ySpace"];
      var scrollHeight = scrollLoadStore.scrollHeight, bodyHeight = scrollLoadStore.bodyHeight;
      var max = scrollHeight - bodyHeight;
      var top = scrollElm.scrollTop - wheelDelta;
      top = max < top ? max : top;
      top = top < 0 ? 0 : top;
      scrollElm.scrollTop = top;
    }
  },
  scrollTo: function scrollTo(scrollLeft, scrollTop) {
    var elemStore = this.elemStore;
    var tableBodyElem = elemStore["main-body-wrapper"];
    var tableHeaderElem = elemStore["main-header-wrapper"];
    var tableFooterElem = elemStore["main-footer-wrapper"];
    if (isNumber$1(scrollLeft)) {
      tableBodyElem && (tableBodyElem.scrollLeft = scrollLeft);
      tableFooterElem && (tableFooterElem.scrollLeft = scrollLeft);
      tableHeaderElem && (tableHeaderElem.scrollLeft = scrollLeft);
    }
    if (isNumber$1(scrollTop)) {
      tableBodyElem && (tableBodyElem.scrollTop = scrollTop);
    }
    return this.$nextTick();
  },
  scrollToRow: function scrollToRow(row2, column, isDelay, move) {
    var hasRowCache = this.fullAllDataRowMap.has(row2);
    var isDelayArg = isDelay || isBoolean(column);
    row2 && hasRowCache && rowToVisible(this, row2);
    return this.scrollToColumn(column, isDelayArg, move);
  },
  scrollToTreeRow: function scrollToTreeRow(row2) {
    var _this46 = this;
    var tableFullData = this.tableFullData, treeConfig = this.treeConfig, treeOpts = this.treeOpts;
    if (!treeConfig) {
      return this.$nextTick();
    }
    var matchObj = findTree(tableFullData, function(item) {
      return item === row2;
    }, treeOpts);
    if (!matchObj) {
      return this.$nextTick();
    }
    var nodes = matchObj.nodes;
    nodes.forEach(function(row22, index2) {
      if (index2 === nodes.length - 1 || _this46.hasTreeExpand(row22)) {
        return;
      }
      _this46.setTreeExpansion(row22, true);
    });
    return this.$nextTick();
  },
  scrollToColumn: function scrollToColumn(column, isDelay, move) {
    var _this47 = this;
    var hasColCache = this.fullColumnMap.has(column);
    column && hasColCache && colToVisible(this, column, move);
    return isDelay && (this.scrollXLoad || this.scrollYLoad) ? new Promise(function(resolve) {
      return setTimeout(function() {
        return resolve(_this47.$nextTick());
      }, 50);
    }) : this.$nextTick();
  },
  resetScrollTop: function resetScrollTop() {
    this.lastScrollTop = 0;
  },
  clearScroll: function clearScroll() {
    var _this48 = this;
    var scrollXStore = this.scrollXStore, scrollYStore = this.scrollYStore, elemStore = this.elemStore;
    Object.assign(this, {
      lastScrollLeft: 0,
      lastScrollTop: 0
    });
    Object.assign(scrollXStore, {
      startIndex: 0,
      visibleIndex: 0
    });
    Object.assign(scrollYStore, {
      startIndex: 0,
      visibleIndex: 0
    });
    this.$nextTick(function() {
      var tableBodyElem = elemStore["main-body-wrapper"];
      var tableHeaderElem = elemStore["main-header-wrapper"];
      var tableFooterElem = elemStore["main-footer-wrapper"];
      if (_this48.afterMounted) {
        tableBodyElem && Object.assign(tableBodyElem, {
          scrollLeft: 0,
          scrollTop: 0
        });
        tableFooterElem && Object.assign(tableFooterElem, {
          scrollLeft: 0
        });
        tableHeaderElem && Object.assign(tableHeaderElem, {
          scrollLeft: 0
        });
      }
    });
    return this.$nextTick();
  },
  // 更新表尾合计
  updateFooter: function updateFooter() {
    var _this49 = this;
    var afterFullData = this.afterFullData, footerMethod = this.footerMethod, showFooter = this.showFooter, summaryConfig = this.summaryConfig, tableColumn3 = this.tableColumn;
    if (footerMethod && showFooter) {
      var data8 = footerMethod({
        columns: tableColumn3,
        data: afterFullData
      });
      if (data8.length && data8.some(function(value) {
        return !isArray(value);
      })) {
        data8 = [data8];
      }
      this.footerData = tableColumn3.length ? data8 : [];
    }
    if (summaryConfig) {
      var fields = summaryConfig.fields, fraction = summaryConfig.fraction, text = summaryConfig.text, _truncate = summaryConfig.truncate;
      var summary = tableColumn3.map(function(column, columnIndex) {
        if (columnIndex === 0) {
          return text || "";
        }
        if (~fields.indexOf(column.property)) {
          return toDecimal(sum(_this49.afterFullData, column.property), fraction, _truncate);
        }
        return null;
      });
      this.footerData = [summary];
    }
    return this.$nextTick();
  },
  // 更新列状态：如果组件值v-model发生change，调用该函数更新列的编辑状态。如果单元格配置了校验规则，则进行校验
  updateStatus: function updateStatus(scope, cellValue, renderOpts) {
    var _this50 = this;
    var customValue = !isUndefined(cellValue);
    return this.$nextTick().then(function() {
      var $refs = _this50.$refs, editRules = _this50.editRules, tableData = _this50.tableData, validStore = _this50.validStore;
      var tableBody = $refs.tableBody;
      if (!scope || !tableBody || !editRules) {
        return;
      }
      if (renderOpts && renderOpts.isValidAlways) {
        validStore.visible = true;
      }
      var column = scope.column, row2 = scope.row;
      var type = "change";
      if (!_this50.hasCellRules(type, row2, column)) {
        return;
      }
      var rowIndex = tableData.indexOf(row2);
      getCell(_this50, {
        row: row2,
        rowIndex,
        column
      }).then(function(cell) {
        if (!cell) {
          return;
        }
        return _this50.validCellRules(type, row2, column, cellValue).then(function() {
          customValue && validStore.visible && setCellValue(row2, column, cellValue);
          _this50.clearValidate();
        }).catch(function(_ref191) {
          var rule = _ref191.rule;
          customValue && setCellValue(row2, column, cellValue);
          _this50.showValidTooltip({
            rule,
            row: row2,
            column,
            cell
          });
        });
      });
    });
  },
  /* X/Y 方向滚动 */
  updateScrollStatus: function updateScrollStatus() {
    var _this51 = this;
    if (!this.tasks.updateScrollStatus) {
      this.tasks.updateScrollStatus = debounce(AsyncCollectTimeout, function() {
        var scrollXLoad = _this51.scrollXLoad, scrollYLoad = _this51.scrollYLoad, isAsyncColumn = _this51.isAsyncColumn;
        if (isAsyncColumn && (scrollXLoad || scrollYLoad)) {
          var tableData = _this51.tableData, scrollXStore = _this51.scrollXStore, scrollYStore = _this51.scrollYStore, tableFullData = _this51.tableFullData, _this51$scrollDirecti = _this51.scrollDirection, scrollDirection = _this51$scrollDirecti === void 0 ? "N" : _this51$scrollDirecti;
          var isInit = scrollXLoad && scrollXStore.visibleIndex === 0 || scrollYLoad && scrollYStore.visibleIndex === 0;
          if (isInit || scrollDirection !== "N") {
            _this51.handleResolveColumn(tableFullData, _this51.collectAsyncColumn(tableData));
          }
        }
      });
    }
    this.tasks.updateScrollStatus();
  },
  // 获取异步列唯一ID
  getAsyncColumnUniqueKey: function getAsyncColumnUniqueKey(property, row2) {
    return property + "_" + row2[this.rowId];
  },
  // 获取异步列名称
  getAsyncColumnName: function getAsyncColumnName(property) {
    return GlobalConfig$2.constant.asyncPrefix + property;
  },
  // 收集异步列
  collectAsyncColumn: function collectAsyncColumn(tableData) {
    var _this52 = this;
    var fetchColumns = [];
    var rowId = this.rowId, asyncRenderMap = this.asyncRenderMap, tableColumn3 = this.tableColumn;
    if (!rowId) {
      warn("The (grid-props:rowId) is required for the asynchronous column.");
      return fetchColumns;
    }
    tableColumn3.forEach(function(col) {
      var _ref192 = col.format || {}, async = _ref192.async;
      var _ref193 = async || {}, fetch = _ref193.fetch, _ref193$splitConfig = _ref193.splitConfig, splitConfig = _ref193$splitConfig === void 0 ? {} : _ref193$splitConfig;
      if (typeof fetch === "function") {
        var columnValues = [];
        tableData.forEach(function(row2) {
          var cellValue = row2[col.property];
          if (typeof cellValue !== "string" || typeof cellValue === "string" && !cellValue) {
            cellValue = " ";
          }
          var cellValuesCount = 1;
          var cellValues = [cellValue];
          var uniqueKey = _this52.getAsyncColumnUniqueKey(col.property, row2);
          if (splitConfig.enabled === true) {
            cellValues = cellValue.split(splitConfig.valueSplit || ",");
            cellValuesCount = cellValues.length;
          }
          if (!asyncRenderMap[uniqueKey]) {
            asyncRenderMap[uniqueKey] = cellValuesCount;
            cellValues.forEach(function(value) {
              return columnValues.push(value);
            });
          }
        });
        if (columnValues.length) {
          fetchColumns.push(_extends({}, col, {
            columnValues
          }));
        }
      }
    });
    return fetchColumns;
  },
  // fetchData 执行
  handleAsyncColumn: function handleAsyncColumn(tableData) {
    if (this.isAsyncColumn && tableData.length) {
      this.asyncRenderMap = {};
      this.handleResolveColumn(tableData, this.collectAsyncColumn(tableData));
    }
  },
  // 查询异步列
  handleResolveColumn: function handleResolveColumn(tableData, fetchColumns) {
    var tableColumn3 = this.tableColumn, scrollYStore = this.scrollYStore, asyncRenderMap = this.asyncRenderMap, scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad;
    var startIndex = scrollYStore.startIndex;
    var isScrollLoad = scrollXLoad || scrollYLoad;
    if (fetchColumns.length === 0) {
      return;
    }
    var promises = mapFetchColumnPromise({
      _vm: this,
      fetchColumns,
      tableColumn: tableColumn3
    });
    Promise.all(promises).then(handleAllColumnPromises({
      startIndex,
      fetchColumns,
      tableData,
      asyncRenderMap,
      isScrollLoad
    }, this));
  },
  // Publish methods 与工具栏对接
  connect: function connect(_ref194) {
    var toolbar = _ref194.toolbar;
    this.$toolbar = toolbar;
  },
  // 检查触发源是否属于目标节点
  getEventTargetNode,
  // 可见性改变事件处理
  handleVisibilityChange: function handleVisibilityChange(visible3, entry) {
    if (visible3) {
      this.updateParentHeight();
      this.updateTableBodyHeight();
      this.recalculate();
    }
    _emitEvent(this, "visible-change", [{
      $table: this,
      visible: visible3,
      entry
    }]);
  },
  // 更新表体高度
  updateTableBodyHeight: function updateTableBodyHeight() {
    var _this53 = this;
    if (!this.tasks.updateTableBodyHeight) {
      this.tasks.updateTableBodyHeight = function() {
        fastdom.measure(function() {
          var tableBodyElem = _this53.elemStore["main-body-wrapper"];
          _this53.tableBodyHeight = tableBodyElem ? tableBodyElem.clientHeight : 0;
        });
      };
    }
    this.tasks.updateTableBodyHeight();
  },
  // 按顺序切换列的排序状态（null --> asc --> desc --> null --> ...）
  toggleColumnOrder: function toggleColumnOrder(column) {
    return column.order ? column.order === "asc" ? "desc" : null : "asc";
  },
  watchDataForVue3: function watchDataForVue3() {
    var _this54 = this;
    if (isVue2)
      return;
    var stopWatch = hooks.watch([function() {
      return _this54.data;
    }, function() {
      return _this54.data && _this54.data.length;
    }], function(_ref195, _ref196) {
      var newData = _ref195[0], newLength = _ref195[1];
      var oldData = _ref196[0], oldLength = _ref196[1];
      if (Array.isArray(_this54.data) && newData === oldData && newLength !== oldLength) {
        _this54.handleDataChange();
      }
    });
    hooks.onBeforeUnmount(function() {
      return stopWatch();
    });
  },
  getVm: function getVm(name) {
    return this.$grid.getVm(name);
  },
  assembleColumns: function assembleColumns() {
    if (!this.isTagUsageSence)
      return;
    assemColumn(this);
  },
  isValidCustomColumn: function isValidCustomColumn(columnName) {
    return columnName && this.columnNames.includes(columnName);
  },
  computeCollectKey: function computeCollectKey() {
    var columnIds = [];
    var _traverse2 = function traverse(columns2) {
      if (Array.isArray(columns2) && columns2.length > 0) {
        columns2.forEach(function(column) {
          columnIds.push(column.columnConfig.id);
          _traverse2(column.childColumns);
        });
      }
    };
    _traverse2(this.childColumns);
    return columnIds.join(",");
  },
  // 获取所有多选数据状态
  getAllSelection: function getAllSelection() {
    return this.selection;
  },
  // 尝试恢复滚动位置，规范了最大滚动位置的取值
  attemptRestoreScoll: function attemptRestoreScoll(options) {
    var _this55 = this;
    var _ref197 = options || this, lastScrollTop = _ref197.lastScrollTop, lastScrollLeft = _ref197.lastScrollLeft;
    var scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad, elemStore = this.elemStore;
    var tableBodyElem = elemStore["main-body-wrapper"];
    if ((lastScrollTop || lastScrollLeft) && tableBodyElem) {
      fastdom.measure(function() {
        var maxScrollTop = tableBodyElem.scrollHeight - tableBodyElem.offsetHeight;
        var maxScrollLeft = tableBodyElem.scrollWidth - tableBodyElem.offsetWidth;
        lastScrollTop = Math.min(lastScrollTop, maxScrollTop);
        lastScrollLeft = Math.min(lastScrollLeft, maxScrollLeft);
        fastdom.mutate(function() {
          _this55.scrollTo(lastScrollLeft, lastScrollTop);
          scrollXLoad && _this55.triggerScrollXEvent();
          scrollYLoad && _this55.triggerScrollYEvent({
            target: {
              scrollTop: lastScrollTop
            }
          });
        });
      });
    }
    return this.$nextTick();
  }
};
funcs.forEach(function(name) {
  Methods$d[name] = function() {
    return this["_" + name] ? this["_" + name].apply(this, arguments) : null;
  };
});
var methods = Methods$d;
var fnField = function fnField2(field) {
  return typeof field === "string" ? field : field[0];
};
var fnFields = function fnFields2(fields) {
  return fields.map(fnField);
};
var fnFieldConfig = function fnFieldConfig2(field) {
  return Array.isArray(field) && field.length > 1 ? field[1] : {};
};
var _sfc_main$8 = defineComponent({
  props: _extends({}, $props, {
    datas: Object,
    row: Object
  }),
  render: function render9() {
    var datas = this.datas, row2 = this.row;
    var selectionColumn = datas.selectionColumn, genParams2 = datas.genParams, config2 = datas.config;
    var params = genParams2(selectionColumn, row2);
    var tableVm = config2.tableVm;
    if (~tableVm.selection.indexOf(row2))
      ;
    var _tableVm$selectConfig = tableVm.selectConfig, selectConfig = _tableVm$selectConfig === void 0 ? {} : _tableVm$selectConfig;
    var checkMethod = selectConfig.checkMethod;
    if (typeof checkMethod === "function" && !checkMethod(params))
      ;
    return h("div", {
      attrs: {
        "data-tag": "tiny-table-column-type"
      },
      class: "py-px"
    }, selectionColumn.renderCell(h, params));
  }
});
var _sfc_main$7 = defineComponent({
  inject: ["$mftable"],
  props: _extends({}, $props, {
    datas: Object,
    row: Object
  }),
  render: function render10() {
    var _this56 = this;
    var datas = this.datas, row2 = this.row;
    var primaryColumn = datas.primaryColumn, contentColumns = datas.contentColumns, genParams2 = datas.genParams, config2 = datas.config, cardView2 = datas.cardView;
    var _config$cardConfig = config2.cardConfig, cardConfig = _config$cardConfig === void 0 ? {} : _config$cardConfig;
    var props = {
      attrs: {
        "data-tag": "tiny-table-column-content"
      },
      class: "my-0.5 truncate space-y-2 sm:space-y-1 [&_[data-tag=tiny-input]]:leading-7 [&_[data-tag=tiny-input-textarea]>span]:pt-0"
    };
    var ons = function ons2() {
      return {
        mouseenter: _this56.handleMouseenter,
        mouseleave: _this56.handleMouseleave
      };
    };
    if (!primaryColumn || !primaryColumn.renderCell) {
      return h("div", props, []);
    }
    var primaryVnode = null;
    var contentVnodes = [];
    if (cardView2) {
      var hasLogo = typeof cardConfig.logoField !== "undefined";
      var hasTag = false;
      var tagVnodes = [];
      var logoField = "";
      var logoFieldConfig = {};
      var logoVnode = null;
      if (cardConfig.tagFields && cardConfig.tagFields.length) {
        var tagFields = cardConfig.tagFields;
        hasTag = true;
        tagVnodes = fnFields(tagFields).map(function(field, i) {
          if (!row2[field] || typeof row2[field] !== "string") {
            return null;
          }
          var fieldConfig = fnFieldConfig(tagFields[i]);
          var colorField = "";
          if (cardConfig.tagColorFields && cardConfig.tagColorFields.length && cardConfig.tagColorFields[i]) {
            colorField = fnField(cardConfig.tagColorFields[i]);
          }
          var type = row2[colorField] || "";
          var tagProps = {
            props: {
              size: "mini",
              customClass: "inline-block truncate max-w-[theme(spacing.28)] h-4.5"
            }
          };
          if (type) {
            Object.assign(tagProps.props, {
              type
            });
          }
          if (fieldConfig.render) {
            return fieldConfig.render({
              h,
              row: row2,
              field,
              config: fieldConfig,
              value: row2[field],
              color: type
            });
          }
          return h(Tag, tagProps, row2[field] || "");
        });
      }
      if (cardConfig.logoField) {
        logoField = fnField(cardConfig.logoField);
        logoFieldConfig = fnFieldConfig(cardConfig.logoField);
      }
      var gridCls = ["grid mb-3", hasLogo ? "grid-cols-[theme(spacing.11)_auto]" : "grid-cols-[auto]"];
      var logoCls = "w-11 h-11 overflow-hidden rounded";
      var primCls = ["text-base sm:text-sm text-color-text-primary font-medium leading-5", "overflow-hidden text-ellipsis whitespace-normal line-clamp-2 sm:line-clamp-1", {
        "ml-3": hasLogo
      }];
      var tagCls = ["truncate h-4.5", {
        "ml-3": hasLogo
      }];
      if (logoFieldConfig.render) {
        var params = {
          h,
          row: row2,
          field: logoField,
          config: logoFieldConfig,
          value: row2[logoField]
        };
        logoVnode = logoFieldConfig.render(params);
      } else {
        logoVnode = h("img", {
          class: "w-full h-full",
          attrs: {
            src: row2[logoField] || ""
          }
        });
      }
      primaryVnode = h("div", {
        class: gridCls
      }, [hasLogo ? h("div", {
        class: logoCls
      }, [logoVnode]) : null, h("div", {
        class: "truncate space-y-1 relative -top-0.5"
      }, [h("div", {
        class: primCls,
        on: ons()
      }, [primaryColumn.renderCell(h, genParams2(primaryColumn, row2))]), hasTag ? h("div", {
        class: tagCls
      }, tagVnodes) : null])]);
    } else {
      var cls = ["w-full text-base sm:text-sm text-color-text-primary font-medium leading-5", "overflow-hidden text-ellipsis whitespace-normal line-clamp-2 sm:line-clamp-1"];
      primaryVnode = h("div", {
        class: cls,
        on: ons()
      }, [primaryColumn.renderCell(h, genParams2(primaryColumn, row2))]);
    }
    contentVnodes = contentColumns.map(function(contentColumn) {
      var params2 = genParams2(contentColumn, row2);
      var cls2 = ["w-full text-sm sm:text-xs text-color-fill-9 font-normal sm:font-normal leading-5 sm:leading-5", "overflow-hidden text-ellipsis whitespace-normal "];
      var cellNode = CellDefault.renderCell(h, params2);
      var cellIsVnode = false;
      if (Array.isArray(cellNode)) {
        cellIsVnode = isVnode(cellNode[0]);
      }
      var VnodeCls = cellIsVnode ? "inline-block flex-grow [&_span]:leading-5 [&_div[data-tag=tiny-input]]:leading-5 ml-1" : "text-color-text-primary break-all";
      var divCls = cellIsVnode ? "flex" : "line-clamp-2 sm:line-clamp-1";
      return h("div", {
        class: cls2 + divCls,
        on: ons()
      }, [
        // 这里需要兼容AUI与TinyVue表头实现方式的差异，此处勿同步
        h("span", {
          class: "shrink-0"
        }, [CellDefault.renderHeader(h, params2, "card")]),
        h("span", {}, cardConfig.split || ": "),
        h("span", {
          class: VnodeCls
        }, [cellNode])
      ]);
    });
    return h("div", props, [primaryVnode].concat(contentVnodes));
  },
  methods: {
    handleMouseenter: function handleMouseenter(e) {
      var $mftable = this.$mftable;
      $mftable.showTooltip(e);
    },
    handleMouseleave: function handleMouseleave() {
      var $mftable = this.$mftable;
      $mftable.hideTooltip();
    }
  }
});
var _sfc_main$6 = defineComponent({
  props: _extends({}, $props, {
    datas: Object,
    row: Object
  }),
  render: function render11() {
    var datas = this.datas, row2 = this.row;
    var slotLink = datas.slotLink, operationColumn = datas.operationColumn, hasOperation = datas.hasOperation, genParams2 = datas.genParams;
    var params = genParams2(operationColumn, row2);
    var vnode;
    if (hasOperation) {
      var _operationColumn$oper = operationColumn.operationConfig, operationConfig = _operationColumn$oper === void 0 ? {} : _operationColumn$oper;
      var _operationConfig$butt2 = operationConfig.buttons, buttons = _operationConfig$butt2 === void 0 ? [] : _operationConfig$butt2, _operationConfig$disa2 = operationConfig.disabledClass, disabledClass = _operationConfig$disa2 === void 0 ? "" : _operationConfig$disa2;
      var visibleButtons = [];
      var isDisabled = function isDisabled2(buttonConfig) {
        var _buttonConfig$disable2 = buttonConfig.disabled, disabled = _buttonConfig$disable2 === void 0 ? false : _buttonConfig$disable2;
        return typeof disabled === "boolean" && disabled || typeof disabled === "function" && disabled(row2);
      };
      var isHidden = function isHidden2(buttonConfig) {
        var _buttonConfig$hidden2 = buttonConfig.hidden, hidden = _buttonConfig$hidden2 === void 0 ? false : _buttonConfig$hidden2;
        return typeof hidden === "boolean" && hidden || typeof hidden === "function" && hidden(row2);
      };
      var handleItemClick = function handleItemClick2(name) {
        var buttonConfig = visibleButtons.find(function(_ref198) {
          var buttonName = _ref198.name;
          return buttonName === name;
        });
        buttonConfig.click(window.event || {}, _extends({
          buttonConfig
        }, params));
      };
      buttons.forEach(function(buttonConfig) {
        return !isHidden(buttonConfig) && visibleButtons.push(buttonConfig);
      });
      if (visibleButtons.length === 0) {
        vnode = null;
      } else if (visibleButtons.length === 1) {
        vnode = h("div", {
          "class": "w-5 h-5 sm:w-4 sm:w-4 " + (isDisabled(visibleButtons[0]) ? "fill-color-icon-disabled" : "fill-color-icon-secondary") + " "
        }, [h(visibleButtons[0].icon, {
          on: {
            click: function click(event) {
              if (!isDisabled(visibleButtons[0])) {
                handleItemClick(visibleButtons[0].name);
              }
              event.stopPropagation();
            }
          },
          "attrs": {
            "custom-class": "w-5 h-5 sm:w-4 sm:w-4"
          }
        })]);
      } else {
        var scopedSlots = {
          default: function _default25() {
            return h(IconEllipsis(), {
              class: "mf-table-more outline-none text-base cursor-pointer"
            });
          },
          dropdown: function dropdown() {
            return h(DropdownMenu, {
              slot: "dropdown"
            }, visibleButtons.map(function(buttonConfig) {
              var _class3;
              return h(DropdownItem, {
                class: (_class3 = {}, _class3[disabledClass || ""] = isDisabled(buttonConfig), _class3),
                props: {
                  itemData: buttonConfig.name,
                  disabled: isDisabled(buttonConfig)
                }
              }, buttonConfig.name);
            }));
          }
        };
        vnode = h(Dropdown, {
          on: {
            "item-click": handleItemClick
          },
          props: {
            trigger: "hover",
            showSelfIcon: true,
            tiny_mode: "mobile-first",
            tiny_mode_root: true
          },
          scopedSlots
        });
      }
    } else {
      vnode = slotLink({
        row: row2,
        h
      });
    }
    return h("div", {
      attrs: {
        "data-tag": "tiny-table-column-link"
      },
      class: "flex flex-col items-end mt-px sm:mt-0"
    }, [vnode]);
  }
});
var _sfc_main$5 = defineComponent({
  props: _extends({}, $props, {
    datas: Object,
    row: Object
  }),
  components: {
    ColumnType: _sfc_main$8,
    ColumnContent: _sfc_main$7,
    ColumnLink: _sfc_main$6
  },
  computed: {
    showLink: function showLink() {
      var datas = this.datas;
      return datas.hasLink || datas.hasOperation;
    }
  }
});
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};
function _sfc_render$2(_ctx, _cache, $props2, $setup, $data, $options) {
  var _component_column_type = resolveComponent("column-type");
  var _component_column_content = resolveComponent("column-content");
  var _component_column_link = resolveComponent("column-link");
  return openBlock(), createElementBlock(
    "div",
    {
      ref: "layout",
      "data-tag": "tiny-table-column-layout",
      class: normalizeClass(["grid", [_ctx.datas.hasType && _ctx.showLink ? "grid-cols-[theme(spacing.7)_auto_theme(spacing.7)]" : "", _ctx.datas.hasType && !_ctx.showLink ? "grid-cols-[theme(spacing.7)_auto]" : "", !_ctx.datas.hasType && _ctx.showLink ? "grid-cols-[auto_theme(spacing.7)]" : "", !_ctx.datas.hasType && !_ctx.showLink ? "grid-cols-[auto]" : ""]])
    },
    [_ctx.datas.hasType ? (openBlock(), createBlock(_component_column_type, {
      key: 0,
      ref: "type",
      datas: _ctx.datas,
      row: _ctx.row
    }, null, 8, ["datas", "row"])) : createCommentVNode("v-if", true), createVNode(_component_column_content, {
      datas: _ctx.datas,
      row: _ctx.row
    }, null, 8, ["datas", "row"]), _ctx.showLink ? (openBlock(), createBlock(_component_column_link, {
      key: 1,
      ref: "link",
      datas: _ctx.datas,
      row: _ctx.row
    }, null, 8, ["datas", "row"])) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  );
}
var ColumnLayout = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$2]]);
var _sfc_main$4 = defineComponent({
  components: {
    ColumnLayout
  },
  props: _extends({}, $props, {
    datas: Object,
    currentRowId: String
  }),
  emits: ["card-click"],
  data: function data3() {
    return {
      mergeClass
    };
  },
  computed: {
    row: function row() {
      var datas = this.datas;
      return datas.row;
    },
    rowid: function rowid() {
      var datas = this.datas;
      var config2 = datas.config, row2 = datas.row;
      var tableVm = config2.tableVm;
      return getRowid(tableVm, row2);
    },
    isCardType: function isCardType() {
      var _config$tableVm;
      var datas = this.datas;
      var config2 = datas.config;
      var _config$tableVm$$grid = config2 == null ? void 0 : (_config$tableVm = config2.tableVm) == null ? void 0 : _config$tableVm.$grid, viewType2 = _config$tableVm$$grid.viewType;
      return viewType2 === "card";
    }
  },
  methods: {
    handleClick: function handleClick(e) {
      if (!getEventTargetNode(e, this.$el, "tiny-grid-checkbox").flag && !getEventTargetNode(e, this.$el, "mf-table-more").flag) {
        this.$emit("card-click", this.row, e);
      }
    }
  }
});
var _hoisted_1 = ["data-rowid"];
function _sfc_render$1(_ctx, _cache, $props2, $setup, $data, $options) {
  var _component_column_layout = resolveComponent("column-layout");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.mergeClass(_ctx.datas.rowClass, _ctx.currentRowId === _ctx.rowid && _ctx.isCardType ? "border sm:border-2 sm:border-color-brand" : "")),
    "data-tag": "tiny-table-row",
    "data-rowid": _ctx.rowid,
    onClick: _cache[0] || (_cache[0] = function() {
      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
    })
  }, [createVNode(_component_column_layout, {
    datas: _ctx.datas,
    row: _ctx.row
  }, null, 8, ["datas", "row"])], 10, _hoisted_1);
}
var TableRow = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$1]]);
var _sfc_main$3 = defineComponent({
  inject: ["$mftable"],
  props: _extends({}, $props),
  render: function render12() {
    var $mftable = this.$mftable;
    var params = {
      $table: $mftable.config.tableVm,
      $mftable,
      config: $mftable.listConfig,
      rows: $mftable.tableData,
      columns: $mftable.config.tableVm.tableColumn,
      h
    };
    return typeof $mftable.slotList === "function" ? $mftable.slotList(params) : null;
  }
});
var _sfc_main$2 = defineComponent({
  inject: ["$mftable"],
  props: _extends({}, $props),
  render: function render13() {
    var $mftable = this.$mftable;
    var params = {
      $table: $mftable.config.tableVm,
      $mftable,
      config: $mftable.ganttConfig,
      rows: $mftable.tableData,
      columns: $mftable.config.tableVm.tableColumn,
      h
    };
    return typeof $mftable.slotGantt === "function" ? $mftable.slotGantt(params) : null;
  }
});
var _sfc_main$1 = defineComponent({
  inject: ["$mftable"],
  props: _extends({}, $props),
  render: function render14() {
    var $mftable = this.$mftable;
    var params = {
      $table: $mftable.config.tableVm,
      $mftable,
      config: $mftable.customConfig,
      rows: $mftable.tableData,
      columns: $mftable.config.tableVm.tableColumn,
      h
    };
    return typeof $mftable.slotCustom === "function" ? $mftable.slotCustom(params) : null;
  }
});
var _sfc_main = defineComponent({
  components: {
    TableRow,
    Tooltip: Tooltip$1,
    Exception,
    ListView: _sfc_main$3,
    GanttView: _sfc_main$2,
    CustomView: _sfc_main$1
  },
  provide: function provide() {
    return {
      $mftable: this
    };
  },
  props: _extends({}, $props, {
    tableData: Array,
    cardConfig: Object,
    listConfig: Object,
    ganttConfig: Object,
    customConfig: Object
  }),
  data: function data4() {
    return {
      primaryColumn: null,
      contentColumns: null,
      operationColumn: null,
      selectionColumn: null,
      slotLink: null,
      rowKey: 0,
      wrapperHeight: 0,
      tooltipVisible: false,
      tooltipContent: "",
      currentRow: null,
      currentRowId: ""
    };
  },
  computed: {
    config: function config() {
      var vm = this.$parent, cardConfig = this.cardConfig, listConfig = this.listConfig;
      return {
        tableVm: hooks.markRaw(vm),
        cardConfig,
        listConfig
      };
    },
    cardView: function cardView() {
      var _config$tableVm2;
      var config2 = this.config;
      var _config$tableVm$$grid2 = config2 == null ? void 0 : (_config$tableVm2 = config2.tableVm) == null ? void 0 : _config$tableVm2.$grid, viewType2 = _config$tableVm$$grid2.viewType, mfShow = _config$tableVm$$grid2.mfShow;
      var _GlobalConfig$2$viewC = GlobalConfig$2.viewConfig, CARD = _GlobalConfig$2$viewC.CARD, MF = _GlobalConfig$2$viewC.MF, MF_SHOW_CARD = _GlobalConfig$2$viewC.MF_SHOW_CARD;
      return viewType2 === CARD || viewType2 === MF && mfShow === MF_SHOW_CARD;
    },
    listView: function listView() {
      var _config$tableVm3;
      var config2 = this.config;
      var _config$tableVm$$grid3 = config2 == null ? void 0 : (_config$tableVm3 = config2.tableVm) == null ? void 0 : _config$tableVm3.$grid, viewType2 = _config$tableVm$$grid3.viewType;
      var LIST = GlobalConfig$2.viewConfig.LIST;
      return viewType2 === LIST;
    },
    ganttView: function ganttView() {
      var _config$tableVm4;
      var config2 = this.config;
      var _config$tableVm$$grid4 = config2 == null ? void 0 : (_config$tableVm4 = config2.tableVm) == null ? void 0 : _config$tableVm4.$grid, viewType2 = _config$tableVm$$grid4.viewType;
      var GANTT = GlobalConfig$2.viewConfig.GANTT;
      return viewType2 === GANTT;
    },
    customView: function customView() {
      var _config$tableVm5;
      var config2 = this.config;
      var _config$tableVm$$grid5 = config2 == null ? void 0 : (_config$tableVm5 = config2.tableVm) == null ? void 0 : _config$tableVm5.$grid, viewType2 = _config$tableVm$$grid5.viewType;
      var CUSTOM = GlobalConfig$2.viewConfig.CUSTOM;
      return viewType2 === CUSTOM;
    },
    wrapperClass: function wrapperClass() {
      var _config$tableVm6;
      var config2 = this.config;
      return mergeClass("w-full h-full overflow-y-auto", config2 == null ? void 0 : (_config$tableVm6 = config2.tableVm) == null ? void 0 : _config$tableVm6.viewCls("mfTable"), this.exceptionVisible ? "sm:border sm:border-solid sm:border-color-border-separator rounded-sm" : "");
    },
    tableClass: function tableClass() {
      var cardView2 = this.cardView;
      var tableCls = "w-full px-3.5 sm:px-0";
      return cardView2 ? mergeClass(tableCls, "grid gap-3") : tableCls;
    },
    cardClass: function cardClass() {
      var listView2 = this.listView, ganttView2 = this.ganttView, cardConfig = this.cardConfig, customView2 = this.customView;
      var smallCls = "grid-cols-[repeat(auto-fill,minmax(theme(spacing.64),1fr))]";
      var defaultCls = "grid-cols-[repeat(auto-fill,minmax(theme(spacing.80),1fr))]";
      return listView2 || ganttView2 || customView2 ? "" : (cardConfig == null ? void 0 : cardConfig.cardSize) === "small" ? smallCls : defaultCls;
    },
    rowClass: function rowClass() {
      var cardView2 = this.cardView, cardConfig = this.cardConfig;
      var rowCls = "border-b-0.5 sm:border-b border-solid border-color-border-separator last:border-color-bg-1 py-3";
      if (cardView2) {
        rowCls = "border-0 sm:border border-solid border-color-border-separator p-3 rounded hover:shadow-lg bg-color-bg-1";
        rowCls += (cardConfig == null ? void 0 : cardConfig.cardSize) === "small" ? " min-w-[theme(spacing.64)]" : " min-w-[theme(spacing.80)]";
      }
      return rowCls;
    },
    wrapperStyle: function wrapperStyle() {
      var _config$tableVm7, _config$tableVm7$$gri, _config$tableVm8, _config$tableVm8$$gri;
      var config2 = this.config, wrapperHeight = this.wrapperHeight;
      var defaultView = (config2 == null ? void 0 : (_config$tableVm7 = config2.tableVm) == null ? void 0 : (_config$tableVm7$$gri = _config$tableVm7.$grid) == null ? void 0 : _config$tableVm7$$gri.viewType) === GlobalConfig$2.viewConfig.DEFAULT;
      var displayStyle = defaultView ? "display:none;" : "";
      var heightStyle = wrapperHeight ? "height:" + wrapperHeight + "px;" : "";
      var maxHeight = config2 == null ? void 0 : (_config$tableVm8 = config2.tableVm) == null ? void 0 : (_config$tableVm8$$gri = _config$tableVm8.$grid) == null ? void 0 : _config$tableVm8$$gri.maxHeight;
      var maxHeightStyle;
      if (isScale(maxHeight)) {
        maxHeightStyle = "max-height:" + maxHeight + ";";
      } else if (toNumber$1(maxHeight)) {
        maxHeightStyle = "max-height:" + toNumber$1(maxHeight) + "px;";
      } else {
        maxHeightStyle = "";
      }
      return "" + displayStyle + heightStyle + maxHeightStyle;
    },
    exceptionVisible: function exceptionVisible() {
      var _config$tableVm9;
      var config2 = this.config, tableData = this.tableData;
      var _config$tableVm$$grid6 = config2 == null ? void 0 : (_config$tableVm9 = config2.tableVm) == null ? void 0 : _config$tableVm9.$grid, viewType2 = _config$tableVm$$grid6.viewType;
      var _GlobalConfig$2$viewC2 = GlobalConfig$2.viewConfig, CARD = _GlobalConfig$2$viewC2.CARD, LIST = _GlobalConfig$2$viewC2.LIST, MF = _GlobalConfig$2$viewC2.MF;
      var isException = tableData.length === 0;
      return isException && (viewType2 === CARD || viewType2 === LIST || viewType2 === MF);
    }
  },
  watch: {
    "config.tableVm.tableColumn": {
      handler: function handler() {
        this.mapColumns();
      },
      immediate: true
    },
    "config.tableVm.viewType": {
      handler: function handler2() {
        this.rowKey++;
      },
      immediate: true
    },
    "config.tableVm.height": {
      handler: function handler3() {
        this.getWrapperHeight();
      },
      immediate: true
    },
    "config.tableVm.parentHeight": {
      handler: function handler4() {
        this.getWrapperHeight();
      },
      immediate: true
    },
    "config.tableVm.currentRow": {
      handler: function handler5(value) {
        this.currentRow = value;
        this.setCurrentRowId();
      },
      immediate: true
    }
  },
  mounted: function mounted4() {
    this.$nextTick(this.getWrapperHeight);
  },
  methods: {
    mapColumns: function mapColumns() {
      var _config$tableVm10, _config$tableVm11, _config$tableVm11$$gr, _config$tableVm11$$gr2, _config$tableVm12, _config$tableVm12$$gr, _config$tableVm12$$gr2, _config$tableVm13, _config$tableVm13$$gr, _config$tableVm13$$gr2, _config$tableVm14, _config$tableVm14$$gr, _config$tableVm14$$gr2;
      var config2 = this.config, typeColumns2 = this.typeColumns, firstFewPropertyColumn2 = this.firstFewPropertyColumn;
      var _this$cardConfig = this.cardConfig, cardConfig = _this$cardConfig === void 0 ? {} : _this$cardConfig, _this$listConfig = this.listConfig, listConfig = _this$listConfig === void 0 ? {} : _this$listConfig, _this$ganttConfig = this.ganttConfig, ganttConfig = _this$ganttConfig === void 0 ? {} : _this$ganttConfig, _this$customConfig = this.customConfig, customConfig = _this$customConfig === void 0 ? {} : _this$customConfig;
      var tableColumn3 = config2 == null ? void 0 : (_config$tableVm10 = config2.tableVm) == null ? void 0 : _config$tableVm10.tableColumn;
      var primaryField = cardConfig.primaryField, contentFields = cardConfig.contentFields, selectable = cardConfig.selectable, renderLink = cardConfig.renderLink, operable = cardConfig.operable, _cardConfig$few = cardConfig.few, few = _cardConfig$few === void 0 ? 4 : _cardConfig$few;
      var renderList2 = listConfig.renderList;
      var renderGantt = ganttConfig.renderGantt;
      var renderCustom = customConfig.renderCustom;
      var fieldName = "";
      var fieldNames = [];
      var propCols = firstFewPropertyColumn2(tableColumn3, few);
      var primaryColumn;
      var contentColumns;
      var operationColumn;
      var selectionColumn;
      var slotLink;
      var slotList;
      var slotGantt;
      var slotCustom;
      if (primaryField) {
        fieldName = fnField(primaryField);
        primaryColumn = typeColumns2(tableColumn3, [fieldName]).find(function(column) {
          return column.property === fieldName;
        });
      } else {
        primaryColumn = propCols && propCols.length > 0 ? propCols[0] : void 0;
      }
      if (contentFields && contentFields.length) {
        fieldNames = fnFields(contentFields);
        contentColumns = typeColumns2(tableColumn3, fieldNames);
      } else {
        contentColumns = propCols && propCols.length > 1 ? propCols.slice(1) : [];
      }
      if (typeof operable === "undefined" || operable) {
        operationColumn = typeColumns2(tableColumn3, ["operation"], "type").find(function(column) {
          return column.type === "operation";
        });
      }
      if (typeof selectable === "undefined" || selectable) {
        selectionColumn = typeColumns2(tableColumn3, ["selection"], "type").find(function(column) {
          return column.type === "selection";
        });
      }
      slotLink = (config2 == null ? void 0 : (_config$tableVm11 = config2.tableVm) == null ? void 0 : (_config$tableVm11$$gr = _config$tableVm11.$grid) == null ? void 0 : (_config$tableVm11$$gr2 = _config$tableVm11$$gr.slots) == null ? void 0 : _config$tableVm11$$gr2.link) || renderLink;
      slotList = (config2 == null ? void 0 : (_config$tableVm12 = config2.tableVm) == null ? void 0 : (_config$tableVm12$$gr = _config$tableVm12.$grid) == null ? void 0 : (_config$tableVm12$$gr2 = _config$tableVm12$$gr.slots) == null ? void 0 : _config$tableVm12$$gr2.list) || renderList2;
      slotGantt = (config2 == null ? void 0 : (_config$tableVm13 = config2.tableVm) == null ? void 0 : (_config$tableVm13$$gr = _config$tableVm13.$grid) == null ? void 0 : (_config$tableVm13$$gr2 = _config$tableVm13$$gr.slots) == null ? void 0 : _config$tableVm13$$gr2.gantt) || renderGantt;
      slotCustom = (config2 == null ? void 0 : (_config$tableVm14 = config2.tableVm) == null ? void 0 : (_config$tableVm14$$gr = _config$tableVm14.$grid) == null ? void 0 : (_config$tableVm14$$gr2 = _config$tableVm14$$gr.slots) == null ? void 0 : _config$tableVm14$$gr2.custom) || renderCustom;
      Object.assign(this, {
        primaryColumn,
        contentColumns,
        operationColumn,
        selectionColumn
      });
      Object.assign(this, {
        slotLink,
        slotList,
        slotGantt,
        slotCustom
      });
    },
    typeColumns: function typeColumns(columns2, types, field) {
      var cols = types.map(function(type) {
        return columns2.find(function(column) {
          return column.visible && column[field || "property"] === type;
        });
      });
      var res = [];
      cols.forEach(function(col) {
        return col && res.push(col);
      });
      return res;
    },
    firstFewPropertyColumn: function firstFewPropertyColumn(columns2, few) {
      return columns2.filter(function(column) {
        return column.visible && !column.type && column.property;
      }).slice(0, few);
    },
    genParams: function genParams(column, row2) {
      var config2 = this.config, tableData = this.tableData;
      var $table = config2.tableVm;
      var tableColumn3 = $table.tableColumn;
      var $columnIndex = tableColumn3.indexOf(column);
      var columnIndex = $table.getColumnIndex(column);
      var p = {
        column,
        $table,
        $columnIndex,
        columnIndex,
        data: tableData
      };
      if (row2) {
        var $rowIndex = tableData.indexOf(row2);
        var rowIndex = $table.getRowIndex(row2);
        var seq = $rowIndex + 1;
        Object.assign(p, {
          row: row2,
          $rowIndex,
          rowIndex,
          $seq: "",
          seq
        });
      }
      return p;
    },
    emitEvent: function emitEvent(type, args) {
      var config2 = this.config;
      _emitEvent(config2 == null ? void 0 : config2.tableVm, type, args);
    },
    handleCardClick: function handleCardClick(row2, e) {
      var config2 = this.config, emitEvent2 = this.emitEvent;
      var _config$tableVm15 = config2 == null ? void 0 : config2.tableVm, highlightCurrentRow = _config$tableVm15.highlightCurrentRow;
      if (highlightCurrentRow) {
        var _config$tableVm16;
        this.currentRow = row2;
        this.setCurrentRowId();
        config2 == null ? void 0 : (_config$tableVm16 = config2.tableVm) == null ? void 0 : _config$tableVm16.triggerCurrentRowEvent(e, {
          $table: config2 == null ? void 0 : config2.tableVm,
          row: row2
        });
      }
      emitEvent2.call(this, "card-click", [row2, e]);
    },
    scrollEvent: function scrollEvent3(event) {
      var _this$config;
      var _this$$refs$warpperEl = this.$refs.warpperElem, scrolLeft = _this$$refs$warpperEl.scrolLeft, scrollTop = _this$$refs$warpperEl.scrollTop;
      this.emitEvent("scroll", [{
        type: "body",
        $table: (_this$config = this.config) == null ? void 0 : _this$config.tableVm,
        scrolLeft,
        scrollTop
      }, event]);
    },
    cfg: function cfg(row2) {
      var config2 = this.config, cardView2 = this.cardView, selectionColumn = this.selectionColumn, slotLink = this.slotLink, primaryColumn = this.primaryColumn;
      var operationColumn = this.operationColumn, contentColumns = this.contentColumns, genParams2 = this.genParams, rowClass2 = this.rowClass;
      var hasType = !!selectionColumn;
      var hasLink = !!slotLink;
      var hasOperation = !!operationColumn;
      var res = {
        row: row2,
        config: config2,
        cardView: cardView2,
        selectionColumn,
        slotLink,
        primaryColumn,
        operationColumn,
        contentColumns,
        genParams: genParams2,
        hasType,
        hasOperation,
        hasLink,
        rowClass: rowClass2
      };
      return res;
    },
    getWrapperHeight: function getWrapperHeight() {
      var _config$tableVm17, _config$tableVm18;
      var config2 = this.config;
      var $grid = config2 == null ? void 0 : (_config$tableVm17 = config2.tableVm) == null ? void 0 : _config$tableVm17.$grid;
      var height2 = ($grid == null ? void 0 : $grid.height) === "auto" ? "100%" : $grid == null ? void 0 : $grid.height;
      var parentHeight2 = config2 == null ? void 0 : (_config$tableVm18 = config2.tableVm) == null ? void 0 : _config$tableVm18.parentHeight;
      this.wrapperHeight = isScale(height2) ? Math.floor(parseInt(height2) / 100 * parentHeight2) : toNumber$1(height2);
    },
    showTooltip: function showTooltip(e) {
      var $refs = this.$refs, _this$cardConfig2 = this.cardConfig, cardConfig = _this$cardConfig2 === void 0 ? {} : _this$cardConfig2;
      var showTip = cardConfig.showTip;
      if (!showTip)
        return;
      var tooltip = $refs.tooltip;
      var dom = e.target;
      var text = dom.textContent;
      var rect = dom.getBoundingClientRect();
      var range = document.createRange();
      range.setStart(dom, 0);
      range.setEnd(dom, dom.childNodes.length);
      var rangeRect = range.getBoundingClientRect();
      if (rangeRect.x + rangeRect.width < rect.x || rangeRect.x + rangeRect.width > rect.x + rect.width || rangeRect.y + rangeRect.height < rect.y || rangeRect.y + rangeRect.height > rect.y + rect.height) {
        tooltip.state.referenceElm = dom;
        tooltip.state.popperElm && (tooltip.state.popperElm.style.display = "none");
        tooltip.doDestroy();
        this.tooltipContent = text;
        this.tooltipVisible = true;
        setTimeout(tooltip.updatePopper, 20);
      }
    },
    hideTooltip: function hideTooltip() {
      this.tooltipVisible = false;
      this.tooltipContent = "";
    },
    setCurrentRowId: function setCurrentRowId() {
      var config2 = this.config, currentRow = this.currentRow;
      if (currentRow) {
        this.currentRowId = getRowid(config2.tableVm, currentRow);
      }
    }
  }
});
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  var _component_exception = resolveComponent("exception");
  var _component_list_view = resolveComponent("list-view");
  var _component_gantt_view = resolveComponent("gantt-view");
  var _component_custom_view = resolveComponent("custom-view");
  var _component_table_row = resolveComponent("table-row");
  var _component_tooltip = resolveComponent("tooltip");
  return openBlock(), createElementBlock(
    "div",
    {
      ref: "warpperElem",
      "data-tag": "tiny-table-wrapper",
      class: normalizeClass(["scrollbar-size-0", _ctx.wrapperClass]),
      style: normalizeStyle(_ctx.wrapperStyle),
      onScroll: _cache[1] || (_cache[1] = function() {
        return _ctx.scrollEvent && _ctx.scrollEvent.apply(_ctx, arguments);
      })
    },
    [_ctx.exceptionVisible ? (openBlock(), createBlock(_component_exception, {
      key: 0,
      tiny_mode: "mobile-first",
      tiny_mode_root: "",
      class: "min-h-[theme(spacing.72)]",
      "component-page": "",
      type: "nodata"
    })) : createCommentVNode("v-if", true), createElementVNode(
      "div",
      {
        "data-tag": "tiny-table",
        class: normalizeClass([_ctx.tableClass, _ctx.cardClass]),
        ref: "table"
      },
      [_ctx.listView ? (openBlock(), createBlock(_component_list_view, {
        key: 0
      })) : _ctx.ganttView ? (openBlock(), createBlock(_component_gantt_view, {
        key: 1
      })) : _ctx.customView ? (openBlock(), createBlock(_component_custom_view, {
        key: 2
      })) : (openBlock(true), createElementBlock(
        Fragment,
        {
          key: 3
        },
        renderList(_ctx.tableData, function(row2, i) {
          return openBlock(), createBlock(_component_table_row, {
            key: "" + _ctx.rowKey + i,
            datas: _ctx.cfg(row2),
            "current-row-id": _ctx.currentRowId,
            onCardClick: _ctx.handleCardClick
          }, null, 8, ["datas", "current-row-id", "onCardClick"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))],
      2
      /* CLASS */
    ), createVNode(_component_tooltip, {
      ref: "tooltip",
      modelValue: _ctx.tooltipVisible,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
        return _ctx.tooltipVisible = $event;
      }),
      content: _ctx.tooltipContent,
      manual: ""
    }, null, 8, ["modelValue", "content"])],
    38
    /* CLASS, STYLE, NEED_HYDRATION */
  );
}
var MfTable = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var initDrag = function initDrag2(dndProxyElement, dndElements, config2) {
  if (config2 === void 0) {
    config2 = {};
  }
  if (dndElements instanceof NodeList) {
    dndElements = Array.from(dndElements);
  }
  var onDragStart = function onDragStart2(e) {
    if (canDrag(e)) {
      e.dataTransfer.effectAllowed = "move";
      startDrag(e, config2.dragStart);
    }
  };
  var onDragOver = function onDragOver2(e) {
    return preventDefault(e);
  };
  var onDragEnter = function onDragEnter2(e) {
    if (canDrop(e)) {
      addDropClass(e);
    }
  };
  var onDragEnd = function onDragEnd2() {
    removeDropClass();
  };
  var onDrop = function onDrop2(e) {
    if (canDrop(e)) {
      startDrop(e, config2.drop);
    }
  };
  var groupNames = [];
  var elGroups = [];
  var elNodes = [];
  var parentMap = /* @__PURE__ */ new WeakMap();
  var childrenMap = /* @__PURE__ */ new WeakMap();
  if (dndProxyElement) {
    if (Array.isArray(dndElements) && dndElements.length > 0) {
      dndElements.forEach(function(el) {
        if (dndProxyElement.contains(el)) {
          var draggable = el.getAttribute("draggable") === "true";
          var groupName = el.dataset && el.dataset[config2.groupKey || "dndGroup"] || "";
          var dndId = el.dataset && el.dataset[config2.idKey || "dndId"];
          var dndPid = el.dataset && el.dataset[config2.pidKey || "dndPid"];
          if (draggable) {
            var _index3 = groupNames.indexOf(groupName);
            if (_index3 === -1) {
              groupNames.push(groupName);
              elGroups.push([el]);
            } else {
              elGroups[_index3].push(el);
            }
            elNodes.push({
              dndId,
              dndPid,
              el
            });
            childrenMap.set(el, []);
          }
        }
      });
      elNodes.forEach(function(_ref199) {
        var dndId = _ref199.dndId, dndPid = _ref199.dndPid, el = _ref199.el;
        if (dndPid) {
          var parent = elNodes.find(function(elNode) {
            return elNode.dndId === dndPid;
          }).el;
          parentMap.set(el, parent);
          childrenMap.get(parent).push(el);
        } else {
          parentMap.set(el, null);
        }
      });
      elNodes.splice(0, elNodes.length);
    }
    on(dndProxyElement, "dragstart", onDragStart);
    on(dndProxyElement, "dragover", onDragOver);
    on(dndProxyElement, "dragenter", onDragEnter);
    on(dndProxyElement, "dragend", onDragEnd);
    on(dndProxyElement, "drop", onDrop);
  }
  var dragTarget;
  var dndGroup2;
  var dropTarget;
  var isParent = function isParent2(el1, el2) {
    var parents = [];
    var p = parentMap.get(el2);
    if (p) {
      parents.push(p);
      while (true) {
        p = parentMap.get(p);
        if (p) {
          parents.push(p);
        } else {
          break;
        }
      }
    }
    return parents.includes(el1);
  };
  var isChild = function isChild2(el1, el2) {
    return isParent(el2, el1);
  };
  var isSibling = function isSibling2(el1, el2) {
    var p1 = parentMap.get(el1);
    var p2 = parentMap.get(el2);
    return !p1 && !p2 || p1 && p2 && p1 === p2;
  };
  var isOther = function isOther2(el1, el2) {
    return !isParent(el1, el2) && !isChild(el1, el2) && !isSibling(el1, el2);
  };
  var getClosestEl = function getClosestEl2(el) {
    for (var i = 0; i < elGroups.length; i++) {
      for (var j = 0; j < elGroups[i].length; j++) {
        var target = elGroups[i][j];
        if (target === el || target.contains(el)) {
          return target;
        }
      }
    }
    return el;
  };
  var canDrag = function canDrag2(e) {
    var found = false;
    var dragTarget2 = getClosestEl(e.target);
    for (var i = 0; i < elGroups.length; i++) {
      if (elGroups[i].includes(dragTarget2)) {
        found = true;
        break;
      }
    }
    return found;
  };
  var startDrag = function startDrag2(e, callback) {
    dragTarget = getClosestEl(e.target);
    for (var i = 0; i < elGroups.length; i++) {
      if (elGroups[i].includes(dragTarget)) {
        dndGroup2 = elGroups[i];
        break;
      }
    }
    if (typeof callback === "function") {
      callback(dragTarget, dndGroup2, e);
    }
  };
  var canDrop = function canDrop2(e) {
    if (!dragTarget || !dndGroup2) {
      return false;
    }
    var dropTarget2 = getClosestEl(e.target);
    return dragTarget && dropTarget2 && dragTarget !== dropTarget2 && // 必须在同一个组内
    dndGroup2.includes(dropTarget2) && // 不允许从父级向子级拖拽
    !isParent(dragTarget, dropTarget2);
  };
  var startDrop = function startDrop2(e, callback) {
    dropTarget = getClosestEl(e.target);
    if (typeof callback === "function") {
      var type = "";
      if (isChild(dragTarget, dropTarget)) {
        type = "child";
      } else if (isSibling(dragTarget, dropTarget)) {
        type = "sibling";
      } else if (isOther(dragTarget, dropTarget)) {
        type = "other";
      }
      callback(type, dragTarget, dropTarget, e);
    }
    dragTarget = dropTarget = dndGroup2 = null;
  };
  var enterTarget;
  var addDropClass = function addDropClass2(e) {
    if (!config2.dropClass)
      return;
    removeDropClass();
    enterTarget = getClosestEl(e.target);
    if (enterTarget) {
      enterTarget.classList.add(config2.dropClass);
    }
  };
  var removeDropClass = function removeDropClass2() {
    if (!config2.dropClass)
      return;
    if (enterTarget) {
      enterTarget.classList.remove(config2.dropClass);
      enterTarget = null;
    }
  };
  var destroy = function destroy2() {
    if (dndProxyElement) {
      off(dndProxyElement, "dragstart", onDragStart);
      off(dndProxyElement, "dragover", onDragOver);
      off(dndProxyElement, "dragenter", onDragEnter);
      off(dndProxyElement, "dragend", onDragEnd);
      off(dndProxyElement, "drop", onDrop);
    }
    removeDropClass();
    dndProxyElement = dndElements = null;
    groupNames = elGroups = null;
    parentMap = childrenMap = null;
  };
  return {
    destroy
  };
};
var headerTh = "th.tiny-grid-header__column:not(.col__gutter):not(.fixed__hidden)";
var groupKey = "dndGroup";
var idKey = "colid";
var pidKey = "pColid";
var dndGroup = 0;
var setDndAttribute = function setDndAttribute2(ths, colidMap, isColumnGroupLevel) {
  var pColidArr = [];
  var groupArr = [];
  ths.forEach(function(th) {
    var pColid = colidMap.get(th.dataset.colid).pColid || "";
    th.setAttribute("draggable", true);
    th.setAttribute("data-p-colid", pColid);
    var index2 = pColidArr.indexOf(pColid);
    if (index2 === -1) {
      pColidArr.push(pColid);
      groupArr.push([th]);
    } else {
      groupArr[index2].push(th);
    }
  });
  var groupId;
  if (!isColumnGroupLevel) {
    groupId = ++dndGroup;
  }
  groupArr.forEach(function(group) {
    if (isColumnGroupLevel) {
      groupId = ++dndGroup;
    }
    group.forEach(function(th) {
      return th.setAttribute("data-dnd-group", groupId);
    });
  });
};
var getColidMap = function getColidMap2(treeArray) {
  var result = /* @__PURE__ */ new Map();
  var parentMap = /* @__PURE__ */ new WeakMap();
  var colidMap = /* @__PURE__ */ new Map();
  var _traverse3 = function traverse(children, parent) {
    if (Array.isArray(children) && children.length > 0) {
      children.forEach(function(child) {
        parentMap.set(child, parent);
        colidMap.set(child.id, child);
        _traverse3(child.children, child);
      });
    }
  };
  _traverse3(treeArray, null);
  for (var _iterator2 = _createForOfIteratorHelperLoose(colidMap), _step2; !(_step2 = _iterator2()).done; ) {
    var _step2$value = _step2.value, colid = _step2$value[0], column = _step2$value[1];
    var pCol = parentMap.get(column);
    var pColid = pCol ? pCol.id : "";
    result.set(colid, {
      pColid,
      pCol,
      column
    });
  }
  return result;
};
var createDragHander = function createDragHander2(state, $table) {
  var dragStart = function dragStart2(dragTarget) {
    var dragColid = dragTarget.dataset.colid;
    var dragParentColumn = state.colidMap.get(dragColid).pCol;
    var dragParentChildren = dragParentColumn ? dragParentColumn.children : state.collectColumn;
    var dragColumn = state.colidMap.get(dragColid).column;
    var dragIndex = dragParentChildren.indexOf(dragColumn);
    $table.$emit("column-drag-start", {
      dragParentChildren,
      dragColumn,
      dragIndex
    });
  };
  var drop = function drop2(_, dragTarget, dropTarget) {
    var dragColid = dragTarget.dataset.colid;
    var dropColid = dropTarget.dataset.colid;
    var dragParentColumn = state.colidMap.get(dragColid).pCol;
    var dragParentChildren = dragParentColumn ? dragParentColumn.children : state.collectColumn;
    var dragColumn = state.colidMap.get(dragColid).column;
    var dragIndex = dragParentChildren.indexOf(dragColumn);
    var dropParentColumn = state.colidMap.get(dropColid).pCol;
    var dropParentChildren = dropParentColumn ? dropParentColumn.children : state.collectColumn;
    var dropColumn = state.colidMap.get(dropColid).column;
    var dropIndex = dropParentChildren.indexOf(dropColumn);
    var args = {
      dragParentChildren,
      dragColumn,
      dragIndex,
      dropParentChildren,
      dropColumn,
      dropIndex
    };
    callInterceptor(state.dropConfig.columnBeforeDrop, {
      args: [args],
      done: function done() {
        dragParentChildren.splice(dragIndex, 1);
        dropParentChildren.splice(dropIndex, 0, dragColumn);
        var lastScrollLeft = $table.lastScrollLeft, lastScrollTop = $table.lastScrollTop, scrollXLoad = $table.scrollXLoad, scrollYLoad = $table.scrollYLoad;
        $table.loadColumn(state.collectColumn);
        $table.$emit("column-drop", args);
        setTimeout(function() {
          if (lastScrollLeft || lastScrollTop) {
            $table.scrollTo(lastScrollLeft, lastScrollTop);
            scrollXLoad && $table.triggerScrollXEvent();
            scrollYLoad && $table.triggerScrollYEvent({
              target: {
                scrollTop: lastScrollTop
              }
            });
          }
        });
      }
    });
  };
  return {
    dragStart,
    drop
  };
};
var createTableColumnWatch = function createTableColumnWatch2($table, state, isColumnGroupLevel, stopHandlerMap) {
  return debounce(100, function() {
    var headers = ["table", "left", "right"];
    headers.forEach(function(key) {
      var headerVm = $table.$refs[key + "Header"];
      if (headerVm) {
        var dndProxy = headerVm.$el;
        if (dndProxy) {
          var dndThs = Array.from(dndProxy.querySelectorAll(headerTh));
          setDndAttribute(dndThs, state.colidMap, isColumnGroupLevel);
          if (stopHandlerMap.has(dndProxy)) {
            stopHandlerMap.get(dndProxy).destroy();
            stopHandlerMap.delete(dndProxy);
          }
          var _createDragHander = createDragHander(state, $table), dragStart = _createDragHander.dragStart, drop = _createDragHander.drop;
          var dropClass = state.dropConfig.columnDropClass || "";
          stopHandlerMap.set(dndProxy, initDrag(dndProxy, dndThs, {
            dragStart,
            drop,
            dropClass,
            groupKey,
            idKey,
            pidKey
          }));
        }
      }
    });
  });
};
var createUseDrag = function createUseDrag2(_ref200) {
  var reactive = _ref200.reactive, watch = _ref200.watch, getCurrentInstance = _ref200.getCurrentInstance, onBeforeUnmount = _ref200.onBeforeUnmount;
  return function(_ref201) {
    var dropConfig = _ref201.dropConfig, collectColumn2 = _ref201.collectColumn, tableColumn3 = _ref201.tableColumn;
    var state = reactive({
      dropConfig,
      collectColumn: collectColumn2,
      tableColumn: tableColumn3,
      colidMap: null
    });
    if (!state.dropConfig || state.dropConfig && state.dropConfig.scheme !== "v2")
      return;
    var $table = getCurrentInstance().proxy;
    if (state.dropConfig.column) {
      var isColumnGroupLevel = !state.dropConfig.columnGroup || state.dropConfig.columnGroup === "level";
      var stopHandlerMap = /* @__PURE__ */ new Map();
      var tableColumnWatch = createTableColumnWatch($table, state, isColumnGroupLevel, stopHandlerMap);
      watch(collectColumn2, function() {
        state.colidMap = getColidMap(state.collectColumn);
      });
      watch(tableColumn3, function() {
        return tableColumnWatch();
      });
      onBeforeUnmount(function() {
        if (stopHandlerMap.size > 0) {
          var dndProxyList = [];
          for (var _iterator3 = _createForOfIteratorHelperLoose(stopHandlerMap), _step3; !(_step3 = _iterator3()).done; ) {
            var _step3$value = _step3.value, dndProxy = _step3$value[0], stopHander = _step3$value[1];
            dndProxyList.push(dndProxy);
            stopHander.destroy();
          }
          dndProxyList.forEach(function(dndProxy2) {
            return stopHandlerMap.delete(dndProxy2);
          });
        }
      });
    }
  };
};
var useDrag = createUseDrag(hooks);
var createUseRowGroup = function createUseRowGroup2(_ref202) {
  var reactive = _ref202.reactive, watch = _ref202.watch, getCurrentInstance = _ref202.getCurrentInstance, onBeforeUnmount = _ref202.onBeforeUnmount;
  return function(_ref203) {
    var rowGroup = _ref203.rowGroup, visibleColumn = _ref203.visibleColumn, tableFullColumn = _ref203.tableFullColumn, tableColumn3 = _ref203.tableColumn;
    var state = reactive({
      rowGroup,
      visibleColumn,
      tableFullColumn,
      tableColumn: tableColumn3
    });
    if (!state.rowGroup)
      return;
    var $table = getCurrentInstance().proxy;
    watch([visibleColumn, tableColumn3], function() {
      var targetColumn = find$1(state.visibleColumn, function(col) {
        return col.property === state.rowGroup.field;
      });
      if (!targetColumn) {
        targetColumn = find$1(state.visibleColumn, function(col) {
          return !!col.property;
        });
      }
      if (targetColumn) {
        $table._rowGroupTargetColumn = targetColumn;
        var _index4 = state.tableColumn.indexOf(targetColumn);
        var length = state.tableColumn.length;
        var targetColumnColspan = state.rowGroup.colspan || 1;
        targetColumnColspan = Math.max(targetColumnColspan, 1);
        if (targetColumnColspan > 1) {
          targetColumnColspan = Math.min(targetColumnColspan, length - _index4);
        }
        for (var i = 0; i < length; i++) {
          var vCol = state.tableColumn[i];
          if (vCol === targetColumn) {
            vCol._rowGroupColspan = targetColumnColspan;
          } else {
            vCol._rowGroupColspan = i > _index4 && i < _index4 + targetColumnColspan ? 0 : 1;
          }
        }
      }
    });
    onBeforeUnmount(function() {
      delete $table._rowGroupTargetColumn;
      state.tableFullColumn.forEach(function(column) {
        delete column._rowGroupColspan;
      });
    });
  };
};
var useRowGroup = createUseRowGroup(hooks);
var themes$1 = GlobalConfig$2.themes, viewConfig$1 = GlobalConfig$2.viewConfig, columnLevelKey$1 = GlobalConfig$2.columnLevelKey, defaultColumnName$1 = GlobalConfig$2.defaultColumnName;
var T_TINY = themes$1.TINY, T_SAAS$1 = themes$1.SAAS;
var V_DEFAULT$1 = viewConfig$1.DEFAULT, V_MF$1 = viewConfig$1.MF, V_CARD$1 = viewConfig$1.CARD, V_LIST = viewConfig$1.LIST;
var V_MF_LIST = viewConfig$1.MF_SHOW_LIST;
var hiddenContainerClass = "tiny-grid-hidden-column";
function verifyConfig(_vm) {
  if (!getRowkey(_vm)) {
    error("ui.grid.error.rowIdEmpty");
  }
  if (!GridAdapter._edit && _vm.editConfig) {
    throw new Error(template(error("ui.grid.error.reqModule"), {
      name: "Edit"
    }));
  }
  if (!GridAdapter._valid && _vm.editRules) {
    throw new Error(template(error("ui.grid.error.reqModule"), {
      name: "Validator"
    }));
  }
  if (!GridAdapter._keyboard && (_vm.keyboardConfig || _vm.mouseConfig)) {
    throw new Error(template(error("ui.grid.error.reqModule"), {
      name: "Keyboard"
    }));
  }
  if (!GridAdapter._resize && _vm.autoResize) {
    throw new Error(template(error("ui.grid.error.reqModule"), {
      name: "Resize"
    }));
  }
}
function mergeScrollDirStore(scrollDir, scrollDirStore) {
  if (scrollDir) {
    Object.assign(scrollDirStore, {
      startIndex: 0,
      visibleIndex: 0,
      adaptive: isBoolean(scrollDir.adaptive) ? scrollDir.adaptive : true,
      renderSize: toNumber(scrollDir.rSize),
      offsetSize: toNumber(scrollDir.oSize)
    });
  }
}
function loadStatic(data8, _vm) {
  if (data8 && data8.length > 0) {
    _vm.loadTableData(data8, true).then(function() {
      _vm.handleDefault();
      _vm.updateStyle();
    });
  }
}
function mergeTreeConfig(_vm) {
  if (_vm.treeConfig) {
    var ordered = _vm.treeConfig.ordered;
    _vm.treeOrdered = isNull(ordered) ? true : Boolean(ordered);
  }
}
var renderEmptyPartFn = function renderEmptyPartFn2(opt) {
  var _vm = opt._vm, tableData = opt.tableData;
  var _vm$$grid = _vm.$grid, $grid = _vm$$grid === void 0 ? {} : _vm$$grid, renderEmpty = _vm.renderEmpty;
  var slots = $grid.slots;
  return function() {
    var emptyPartVnode = null;
    var computerTableBodyHeight2 = _vm.computerTableBodyHeight;
    if (_vm.isCenterEmpty && !tableData.length) {
      var emptyVnodes;
      var noEmptyClass = _vm.viewType === V_CARD$1 || _vm.viewType === V_LIST;
      if (slots.empty) {
        emptyVnodes = slots.empty.call(_vm, h);
      } else if (renderEmpty) {
        emptyVnodes = [renderEmpty(h, _vm)];
      } else {
        emptyVnodes = [h("p", {
          class: "tiny-grid__empty-img"
        }), h("span", {
          class: "tiny-grid__empty-text"
        }, GlobalConfig$2.i18n("ui.grid.emptyText"))];
      }
      emptyPartVnode = h("div", {
        class: [{
          "empty-center-block": !noEmptyClass
        }, _vm.viewCls("emptyData")],
        style: {
          height: computerTableBodyHeight2
        }
      }, emptyVnodes);
    }
    return emptyPartVnode;
  };
};
var renderFooterFn = function renderFooterFn2(opt) {
  var _vm = opt._vm, showFooter = opt.showFooter, footerData = opt.footerData, footerMethod = opt.footerMethod, tableColumn3 = opt.tableColumn, visibleColumn = opt.visibleColumn, vSize4 = opt.vSize;
  return function() {
    var tableFooterVnode = [null];
    if (showFooter) {
      tableFooterVnode = h(Footer, {
        props: {
          footerData,
          footerMethod,
          tableColumn: tableColumn3,
          visibleColumn,
          size: vSize4
        },
        ref: "tableFooter",
        class: _vm.viewCls("tableFooter")
      });
    }
    return tableFooterVnode;
  };
};
var renderResizeBarFn = function renderResizeBarFn2(opt) {
  var _vm = opt._vm, isResizable2 = opt.isResizable, overflowX = opt.overflowX, scrollbarHeight = opt.scrollbarHeight;
  return function() {
    var resizeBarVnode = [null];
    if (isResizable2) {
      resizeBarVnode = h("div", {
        class: ["tiny-grid__resizable-bar", _vm.viewCls("resizeBar")],
        style: overflowX ? {
          "padding-bottom": scrollbarHeight + "px"
        } : null,
        ref: "resizeBar",
        key: "tinyGridResizeBar"
      });
    }
    return resizeBarVnode;
  };
};
var renderPluginWrapperFn = function renderPluginWrapperFn2(opt) {
  var hasFilter2 = opt.hasFilter, optimizeOpts2 = opt.optimizeOpts, filterStore = opt.filterStore, isCtxMenu2 = opt.isCtxMenu, ctxMenuStore = opt.ctxMenuStore, hasTip2 = opt.hasTip, tooltipContentOpts2 = opt.tooltipContentOpts;
  var editRules = opt.editRules, validOpts2 = opt.validOpts, height2 = opt.height, tableData = opt.tableData, vaildTipOpts2 = opt.vaildTipOpts, id3 = opt.id, _vm = opt._vm;
  return function() {
    var filterVnode = [null];
    var ctxMenuVnode = [null];
    var tooltipVnode = [null];
    var errorTooltipVnode = [null];
    var isMessageDefault = validOpts2.isMessageDefault, isMessageTooltip = validOpts2.isMessageTooltip;
    if (hasFilter2) {
      filterVnode = h(Panel$1, {
        props: {
          optimizeOpts: optimizeOpts2,
          filterStore
        },
        ref: "filterWrapper"
      });
    }
    if (isCtxMenu2) {
      ctxMenuVnode = h(Panel, {
        props: {
          ctxMenuStore
        },
        ref: "ctxWrapper"
      });
    }
    if (hasTip2) {
      tooltipVnode = h(Tooltip$1, {
        ref: "tooltip",
        props: tooltipContentOpts2
      });
    }
    if (hasTip2 && editRules && (isMessageDefault ? !height2 : isMessageTooltip)) {
      errorTooltipVnode = h(Tooltip$1, {
        class: "tiny-grid__valid-error",
        props: isMessageTooltip || tableData.length === 1 ? vaildTipOpts2 : null,
        ref: "validTip"
      });
    }
    return h("div", {
      class: "tiny-grid" + id3 + "-wrapper " + (_vm.$attrs.staticClass || ""),
      ref: "tableWrapper"
    }, [
      // 筛选
      filterVnode,
      // 快捷菜单
      ctxMenuVnode,
      // Ellipsis tooltip
      tooltipVnode,
      // valid error tooltip
      errorTooltipVnode
    ]);
  };
};
var renderSelectToolbarFn = function renderSelectToolbarFn2(opt) {
  var selectToolbar = opt.selectToolbar, selectToolbarStore = opt.selectToolbarStore, renderedToolbar = opt.renderedToolbar;
  return function() {
    var selectToolbarVnode = [null];
    if (selectToolbar) {
      selectToolbarVnode = h("div", {
        ref: "selectToolbar",
        class: "tiny-grid__select-toolbar",
        style: [selectToolbarStore.layout, {
          visibility: selectToolbarStore.visible ? "visible" : "hidden"
        }]
      }, renderedToolbar || [null]);
    }
    return selectToolbarVnode;
  };
};
function getRenderer(opt) {
  var $slots = opt.$slots, _vm = opt._vm, optimizeOpts2 = opt.optimizeOpts, overflowX = opt.overflowX, props = opt.props, showFooter = opt.showFooter, showHeader = opt.showHeader, tableColumn3 = opt.tableColumn, tableData = opt.tableData, vSize4 = opt.vSize, visibleColumn = opt.visibleColumn;
  var $grid = _vm.$grid, ctxMenuStore = _vm.ctxMenuStore, editRules = _vm.editRules, filterStore = _vm.filterStore, footerData = _vm.footerData, footerMethod = _vm.footerMethod, hasFilter2 = _vm.hasFilter, hasTip2 = _vm.hasTip, height2 = _vm.height, id3 = _vm.id;
  var isCtxMenu2 = _vm.isCtxMenu, isResizable2 = _vm.isResizable, scrollbarHeight = _vm.scrollbarHeight, selectToolbarStore = _vm.selectToolbarStore, tooltipContentOpts2 = _vm.tooltipContentOpts, vaildTipOpts2 = _vm.vaildTipOpts, validOpts2 = _vm.validOpts;
  var selectToolbar = $grid.selectToolbar, renderedToolbar = $grid.renderedToolbar;
  var renderHeader2 = function renderHeader3() {
    return showHeader ? h(Header, {
      ref: "tableHeader",
      props,
      class: _vm.viewCls("tableHeader")
    }) : [null];
  };
  var renderEmptyPart = renderEmptyPartFn({
    _vm,
    tableData
  });
  var renderFooter = renderFooterFn({
    _vm,
    showFooter,
    footerData,
    footerMethod,
    tableColumn: tableColumn3,
    visibleColumn,
    vSize: vSize4
  });
  var renderResizeBar = renderResizeBarFn({
    _vm,
    isResizable: isResizable2,
    overflowX,
    scrollbarHeight
  });
  var arg1 = {
    hasFilter: hasFilter2,
    optimizeOpts: optimizeOpts2,
    filterStore,
    isCtxMenu: isCtxMenu2,
    ctxMenuStore,
    hasTip: hasTip2,
    tooltipContentOpts: tooltipContentOpts2
  };
  var arg2 = {
    editRules,
    validOpts: validOpts2,
    height: height2,
    tableData,
    vaildTipOpts: vaildTipOpts2,
    id: id3,
    _vm
  };
  var renderPluginWrapper = renderPluginWrapperFn(Object.assign(arg1, arg2));
  var renderSelectToolbar = renderSelectToolbarFn({
    selectToolbar,
    selectToolbarStore,
    renderedToolbar
  });
  return {
    renderHeader: renderHeader2,
    renderEmptyPart,
    renderFooter,
    renderResizeBar,
    renderPluginWrapper,
    renderSelectToolbar
  };
}
var renderFooterBorder = function renderFooterBorder2(_vm) {
  var showFooterBorder = _vm.showFooterBorder, footerBorderBottom = _vm.footerBorderBottom;
  var cls = ["tiny-grid__footer-border-line", _vm.viewCls("footerBorder")];
  var style = "bottom:" + footerBorderBottom + "px;";
  return showFooterBorder ? h("div", {
    ref: "footerBorder",
    class: cls,
    style
  }) : null;
};
function getTableAttrs(tableVm) {
  var _class4;
  var isShapeTable2 = tableVm.isShapeTable, vSize4 = tableVm.vSize, editConfig = tableVm.editConfig, showHeader = tableVm.showHeader, showFooter = tableVm.showFooter, overflowY = tableVm.overflowY, overflowX = tableVm.overflowX, showOverflow = tableVm.showOverflow;
  var showHeaderOverflow = tableVm.showHeaderOverflow, highlightCell = tableVm.highlightCell, optimizeOpts2 = tableVm.optimizeOpts, stripe = tableVm.stripe, border = tableVm.border, isGroup2 = tableVm.isGroup;
  var maxHeight = tableVm.maxHeight, loading = tableVm.loading, highlightHoverRow = tableVm.highlightHoverRow, highlightHoverColumn = tableVm.highlightHoverColumn, validOpts2 = tableVm.validOpts;
  var stripeSaas = tableVm.stripeSaas, borderSaas = tableVm.borderSaas, borderVertical = tableVm.borderVertical, isThemeSaas3 = tableVm.isThemeSaas, rowSpan = tableVm.rowSpan;
  var dropConfig = tableVm.dropConfig || {};
  var mouseConfig = tableVm.mouseConfig || {};
  var map = {
    showHeader: "show__head",
    showFooter: "show__foot",
    overflowY: "scroll__y",
    overflowX: "scroll__x",
    loading: "is__loading",
    highlightHoverRow: "row__highlight",
    highlightHoverColumn: "column__highlight"
  };
  var style = {};
  if (isShapeTable2 && maxHeight) {
    style.maxHeight = Number(maxHeight) ? maxHeight + "px" : maxHeight;
  }
  return {
    class: (_class4 = {
      "tiny-grid h-full sm:h-auto !bg-transparent sm:!bg-color-bg-1 after:border-none sm:after:border-solid": true
    }, _class4["row__valid-" + validOpts2.message] = true, _class4["size__" + vSize4] = vSize4, _class4["tiny-grid-editable"] = editConfig, _class4[map.showHeader] = showHeader, _class4[map.showFooter] = showFooter, _class4[map.overflowY] = overflowY, _class4[map.overflowX] = overflowX, _class4["all-overflow"] = showOverflow, _class4["all-head-overflow"] = showHeaderOverflow, _class4["tiny-grid-cell__highlight"] = highlightCell, _class4["tiny-grid__animat"] = optimizeOpts2.animat, _class4["tiny-grid__stripe"] = !isThemeSaas3 && stripe, _class4["tiny-grid__stripe-saas"] = isThemeSaas3 && stripeSaas, _class4["tiny-grid__border"] = border || isGroup2, _class4["tiny-grid__border-saas"] = isThemeSaas3 && borderSaas, _class4["tiny-grid__group-saas"] = isThemeSaas3 && isGroup2, _class4["tiny-grid__border-vertical"] = borderVertical, _class4["tiny-grid__checked"] = mouseConfig.checked, _class4["mark-insert"] = editConfig && editConfig.markInsert, _class4["edit__no-border"] = editConfig && editConfig.showBorder === false, _class4[map.loading] = loading, _class4[map.highlightHoverRow] = highlightHoverRow, _class4[map.highlightHoverColumn] = highlightHoverColumn, _class4["is__row-span"] = rowSpan && rowSpan.length > 0, _class4["row__drop-handle--index"] = dropConfig.rowHandle === "index", _class4),
    style
  };
}
var gridData = {
  // 存储异步加载过的行\列数据
  asyncRenderMap: {},
  // 存放列相关的信息
  columnStore: {
    // 自适应的列表集合
    autoList: [],
    centerList: [],
    // 左侧冻结列表集合
    leftList: [],
    // 右侧冻结列表集合
    rightList: [],
    // 固定像素宽度列表集合
    pxList: [],
    // 设置了最小宽度列表集合
    pxMinList: [],
    // 可调整列宽列表集合
    resizeList: [],
    // 百分比宽度列表集合
    scaleList: [],
    // 百分比最小宽度列表集合
    scaleMinList: []
  },
  // 存放快捷菜单的信息
  ctxMenuStore: {
    list: [],
    selectChild: null,
    selected: null,
    showChild: false,
    style: null,
    visible: false
  },
  // 当前行
  currentRow: null,
  // 存放可编辑相关信息
  editStore: {
    editorAutoRefreshKey: 0,
    // 激活
    actived: {
      column: null,
      row: null
    },
    // 所有选中
    checked: {
      columns: [],
      rows: [],
      tColumns: [],
      tRows: []
    },
    // 已复制源
    copyed: {
      columns: [],
      cut: false,
      rows: []
    },
    indexs: {
      columns: []
    },
    insertList: [],
    removeList: [],
    // 选中源
    selected: {
      column: null,
      row: null
    },
    titles: {
      columns: []
    }
  },
  // 已展开的行
  expandeds: [],
  // 当前选中的筛选列
  filterStore: {
    column: null,
    condition: {
      input: "",
      relation: "equals"
    },
    id: "",
    multi: false,
    options: [],
    visible: false
  },
  // 表尾合计数据
  footerData: [],
  // 所有列已禁用
  headerCheckDisabled: false,
  // 是否全选
  isAllSelected: false,
  // 多选属性，有选中且非全选状态
  isIndeterminate: false,
  // 是否存在横向滚动条
  overflowX: false,
  // 是否存在纵向滚动条
  overflowY: true,
  // 存储滚动加载，上次滚动的位置
  scrollLoadStore: {
    bodyHeight: 0,
    scrollHeight: 0
  },
  // 是否启用了横向 X 可视渲染方式加载
  scrollXLoad: false,
  // 是否启用了纵向 Y 可视渲染方式加载
  scrollYLoad: false,
  // 横向滚动条的高度
  scrollbarHeight: 0,
  // 纵向滚动条的宽度
  scrollbarWidth: 0,
  // 单选属性，选中行
  selectRow: null,
  // 存放多选工具栏相关信息
  selectToolbarStore: {
    layout: {
      height: 0,
      left: 0,
      top: 0,
      width: 0,
      zIndex: 1
    },
    visible: false
  },
  // 多选属性，已选中的列
  selection: [],
  // 渲染中的数据
  tableData: [],
  // tooltip提示内容
  tooltipContent: "",
  // tooltip提示内容是否处理换行字符
  tooltipContentPre: false,
  // 已展开树节点
  treeExpandeds: [],
  // 树节点不确定状态的列表
  treeIndeterminates: [],
  // 存放数据校验相关信息
  validStore: {
    column: null,
    content: "",
    isArrow: false,
    row: null,
    rule: null,
    visible: false
  },
  // 校验tip提示内容
  validTipContent: "",
  // 在编辑模式下 单元格在失去焦点验证的状态
  validatedMap: {},
  // 表尾边框线是否显示和位置
  showFooterBorder: false,
  footerBorderBottom: 0,
  tableBodyHeight: 0,
  // 表格父容器的高度
  parentHeight: 0
};
var getTableData2 = function getTableData3() {
  var tableData = {
    // 条件处理后数据
    afterFullData: [],
    // 分组表场景全量数据（包含虚拟行）
    groupFullData: [],
    elemStore: {},
    // 表尾高度
    footerHeight: 0,
    // 缓存数据集 rowid --> { row, rowid: rowId, index }
    fullAllDataRowIdData: {},
    // 缓存数据集 row --> { row, rowid: rowId, index }
    fullAllDataRowMap: /* @__PURE__ */ new Map(),
    // 缓存数据集 columnId --> { colid: column.id, column, index }
    fullColumnIdData: {},
    // 缓存数据集 column --> { colid: column.id, column, index }
    fullColumnMap: /* @__PURE__ */ new Map(),
    fullDataRowIdData: {},
    fullDataRowMap: /* @__PURE__ */ new Map(),
    // 缓存树形表格行数据以及其父级行数据的映射关系
    parentRowMap: /* @__PURE__ */ new Map(),
    // 临时插入数据集
    temporaryRows: [],
    // 表头高度
    headerHeight: 0,
    // 最后滚动位置
    lastScrollLeft: 0,
    lastScrollTop: 0,
    // 表格父容器的高度
    parentHeight: 0,
    scrollDirection: "N",
    // N,X,Y （滚动方向）
    // 存放横向 X 虚拟滚动相关的信息
    scrollXStore: {},
    // 存放纵向 Y 虚拟滚动相关信息
    scrollYStore: {},
    // 完整数据
    tableFullData: [],
    // 表格高度
    tableHeight: 0,
    // 表格宽度
    tableWidth: 0,
    // 存放 tooltip 相关信息
    tooltipStore: {},
    // 表格已挂载完成
    afterMounted: false,
    // 临时任务
    tasks: {},
    // 列初始就绪
    isColumnInitReady: false,
    // 列就绪
    isColumnReady: false,
    // 分组表场景是否具有虚拟行
    hasVirtualRow: false,
    // 是否是标签式用法场景
    isTagUsageSence: false,
    // 收集列信息（列数量和列顺序）
    columnCollectKey: "",
    // treeConfig.ordered的取值处理
    treeOrdered: true
  };
  return tableData;
};
var bindEvent = function bindEvent2(ctx) {
  GlobalEvent.on(ctx, "mousedown", ctx.handleGlobalMousedownEvent);
  GlobalEvent.on(ctx, "mousedown", ctx.handleGlobalMousedownCaptureEvent, true);
  GlobalEvent.on(ctx, "blur", ctx.handleGlobalBlurEvent);
  GlobalEvent.on(ctx, "mousewheel", ctx.handleGlobalMousewheelEvent);
  GlobalEvent.on(ctx, "keydown", ctx.handleGlobalKeydownEvent);
  GlobalEvent.on(ctx, "resize", ctx.handleGlobalResizeEvent);
  GlobalEvent.on(ctx, "contextmenu", ctx.handleGlobalContextmenuEvent);
};
var unbindEvent = function unbindEvent2(table) {
  GlobalEvent.off(table, "mousedown");
  GlobalEvent.off(table, "mousedown", true);
  GlobalEvent.off(table, "blur");
  GlobalEvent.off(table, "mousewheel");
  GlobalEvent.off(table, "keydown");
  GlobalEvent.off(table, "resize");
  GlobalEvent.off(table, "contextmenu");
};
var Table = defineComponent({
  name: $prefix + "GridTable",
  props: {
    // 所有的列对齐方式
    align: {
      type: String,
      default: function _default() {
        return GlobalConfig$2.align;
      }
    },
    // 是否自动监听父容器变化去更新响应式表格宽高
    autoResize: Boolean,
    // 是否带有纵向边框
    border: {
      type: Boolean,
      default: function _default2() {
        return GlobalConfig$2.border;
      }
    },
    // 给单元格附加 className
    cellClassName: [String, Function],
    // 主键配置
    columnKey: Boolean,
    // 所有列最小宽度，把剩余宽度按比例分配
    columnMinWidth: [Number, String],
    // 所有列宽度
    columnWidth: [Number, String],
    // 快捷菜单配置项
    contextMenu: Object,
    // 初始化绑定动态列
    customs: Array,
    // 数据
    data: [Array, Object],
    // 行拖拽和列拖拽的配置
    dropConfig: Object,
    // 编辑配置项
    editConfig: [Object, Boolean],
    // 校验规则配置项
    editRules: Object,
    // 展开行配置项
    expandConfig: Object,
    // 列的宽度是否自撑开
    fit: {
      type: Boolean,
      default: function _default3() {
        return GlobalConfig$2.fit;
      }
    },
    // 所有的表尾列的对齐方式
    footerAlign: {
      type: String,
      default: function _default4() {
        return GlobalConfig$2.footerAlign;
      }
    },
    // 给表尾的单元格附加 className
    footerCellClassName: [String, Function],
    // 表尾合计的计算方法
    footerMethod: Function,
    // 给表尾的行附加 className
    footerRowClassName: [String, Function],
    // 表尾合并行或列
    footerSpanMethod: Function,
    // 所有的表头列的对齐方式
    headerAlign: {
      type: String,
      default: function _default5() {
        return GlobalConfig$2.headerAlign;
      }
    },
    // 给表头的单元格附加 className
    headerCellClassName: [String, Function],
    // 给表头的行附加 className
    headerRowClassName: [String, Function],
    // 表头后置图标是否绝对定位
    headerSuffixIconAbsolute: Boolean,
    // 表格的高度
    height: [Number, String],
    // 激活单元格编辑时是否高亮显示
    highlightCell: Boolean,
    // 是否要高亮当前选中列
    highlightCurrentColumn: {
      type: Boolean,
      default: function _default6() {
        return GlobalConfig$2.highlightCurrentColumn;
      }
    },
    // 是否要高亮当前选中行
    highlightCurrentRow: {
      type: Boolean,
      default: function _default7() {
        return GlobalConfig$2.highlightCurrentRow;
      }
    },
    // 鼠标移到列是否要高亮显示
    highlightHoverColumn: {
      type: Boolean,
      default: function _default8() {
        return GlobalConfig$2.highlightHoverColumn;
      }
    },
    // 鼠标移到行是否要高亮显示
    highlightHoverRow: {
      type: Boolean,
      default: function _default9() {
        return GlobalConfig$2.highlightHoverRow;
      }
    },
    // 是否开启异步列功能
    isAsyncColumn: Boolean,
    isCenterEmpty: Boolean,
    // 是否拖拽表头调整列顺序
    isDragHeaderSorting: Boolean,
    // 按键配置项
    keyboardConfig: Object,
    // 表格是否加载中
    loading: Boolean,
    loadingComponent: Object,
    // 表格的最大高度
    maxHeight: [Number, String],
    // 表格的最小高度
    minHeight: [Number, String],
    // 鼠标配置项
    mouseConfig: Object,
    // 优化配置项
    optimization: Object,
    // 额外的参数
    params: Object,
    // 单选配置
    radioConfig: Object,
    // 是否所有服务端筛选
    remoteFilter: Boolean,
    // 是否所有服务端排序
    remoteSort: Boolean,
    // 空数据渲染
    renderEmpty: Function,
    // 自定义表格行渲染后的逻辑
    renderRowAfter: Function,
    // 所有列是否允许拖动列宽调整大小
    resizable: {
      type: Boolean,
      default: function _default10() {
        return GlobalConfig$2.resizable;
      }
    },
    // 可调整列宽的配置
    resizableConfig: Object,
    // 给行附加 className
    rowClassName: [String, Function],
    // 行分组配置映射表
    rowGroup: Object,
    rowId: {
      type: String,
      default: function _default11() {
        return GlobalConfig$2.rowId;
      }
    },
    rowKey: Boolean,
    // 行合并
    rowSpan: Array,
    // 滚动加载(滚动分页加载)
    scrollLoad: Object,
    // 多选配置项
    selectConfig: Object,
    // 是否显示表尾合计
    showFooter: Boolean,
    // 是否显示表头
    showHeader: {
      type: Boolean,
      default: function _default12() {
        return GlobalConfig$2.showHeader;
      }
    },
    // 设置表头所有内容过长时显示为省略号
    showHeaderOverflow: {
      type: [Boolean, String],
      default: function _default13() {
        return GlobalConfig$2.showHeaderOverflow;
      }
    },
    // 设置所有内容过长时显示为省略号
    showOverflow: {
      type: [Boolean, String],
      default: function _default14() {
        return GlobalConfig$2.showOverflow;
      }
    },
    // 表格的尺寸
    size: {
      type: String,
      default: function _default15() {
        return GlobalConfig$2.size;
      }
    },
    // 排序配置项
    sortConfig: Object,
    // 自定义所有列的排序方法
    sortMethod: Function,
    // 全局开关控制所有的列是否可以排列
    sortable: {
      type: Boolean,
      default: true
    },
    // 合并行或列
    spanMethod: Function,
    // 只对 type=index 时有效，自定义序号的起始值
    startIndex: {
      type: Number,
      default: 0
    },
    // 是否带有斑马纹
    stripe: {
      type: Boolean,
      default: function _default16() {
        return GlobalConfig$2.stripe;
      }
    },
    // saas下是否带有斑马纹
    stripeSaas: {
      type: Boolean,
      default: function _default17() {
        return GlobalConfig$2.stripeSaas;
      }
    },
    // saas下是否带有下边框线
    borderSaas: {
      type: Boolean,
      default: function _default18() {
        return GlobalConfig$2.borderSaas;
      }
    },
    // saas下配置竖线
    borderVertical: {
      type: Boolean,
      default: function _default19() {
        return GlobalConfig$2.borderVertical;
      }
    },
    // 默认统计配置
    summaryConfig: Object,
    // 是否自动根据状态属性去更新响应式表格宽高
    syncResize: Boolean,
    tableLayout: String,
    // tooltip 配置项
    tooltipConfig: {
      type: Object,
      default: function _default20() {
        return {};
      }
    },
    // 树形结构配置项
    treeConfig: Object,
    // 校验配置项
    validConfig: Object,
    // 多端卡片配置
    cardConfig: Object,
    // 视图类型
    viewType: {
      type: String,
      default: function _default21() {
        return V_DEFAULT$1;
      }
    },
    // 移动优先视图下展示类型
    mfShow: {
      type: String,
      default: function _default22() {
        return V_MF_LIST;
      }
    },
    // 列锚点
    columnAnchor: Array,
    // 表尾自定义渲染
    renderFooter: Function,
    // 多端列表配置
    listConfig: Object,
    // 多端甘特配置
    ganttConfig: Object,
    // 多端custom配置
    customConfig: Object,
    // 数据预取配置
    prefetch: [Boolean, Array],
    // 相交配置
    intersectionOption: Object,
    // 值比较方法
    equals: Function,
    // 操作列（type为index或radio或selection的列）是否可拖动列宽
    operationColumnResizable: {
      type: Boolean,
      default: function _default23() {
        return GlobalConfig$2.operationColumnResizable;
      }
    },
    // 自动清空鼠标选中
    autoClearMouseChecked: {
      type: Boolean,
      default: true
    },
    // 自动清空键盘复制
    autoClearKeyboardCopy: {
      type: Boolean,
      default: false
    },
    // 自定义列组件名称（列表）
    customColumnNames: {
      type: [String, Array],
      default: GlobalConfig$2.defaultColumnName
    }
  },
  provide: function provide2() {
    return {
      $table: this,
      // 嵌套表格屏蔽父表格列
      $column: null
    };
  },
  inject: {
    $grid: {
      default: null
    }
  },
  data: function data5() {
    return extend(true, {}, gridData);
  },
  computed: {
    bodyCtxMenu: function bodyCtxMenu() {
      return this.ctxMenuOpts.body && this.ctxMenuOpts.body.options ? this.ctxMenuOpts.body.options : [];
    },
    ctxMenuList: function ctxMenuList() {
      var rest = [];
      this.ctxMenuStore.list.forEach(function(list) {
        return list.forEach(function(item) {
          return rest.push(item);
        });
      });
      return rest;
    },
    ctxMenuOpts: function ctxMenuOpts() {
      return extend(true, {}, GlobalConfig$2.menu, this.contextMenu);
    },
    hasFilter: function hasFilter() {
      return this.tableColumn.some(function(column) {
        return isObject$1(column.filter) && !isEmptyObject(column.filter);
      });
    },
    hasTip: function hasTip() {
      return GridAdapter._tooltip;
    },
    headerCtxMenu: function headerCtxMenu() {
      return this.ctxMenuOpts.header && this.ctxMenuOpts.header.options ? this.ctxMenuOpts.header.options : [];
    },
    isCtxMenu: function isCtxMenu() {
      return this.headerCtxMenu.length || this.bodyCtxMenu.length;
    },
    // 是否使用了分组表头
    isGroup: function isGroup() {
      return this.collectColumn.some(function(column) {
        return hasChildrenList(column);
      });
    },
    isResizable: function isResizable() {
      return this.resizable || this.tableFullColumn.some(function(column) {
        return column.resizable;
      });
    },
    optimizeOpts: function optimizeOpts() {
      return extend(true, {}, GlobalConfig$2.optimization, this.optimization);
    },
    sortOpts: function sortOpts() {
      return extend(true, {}, GlobalConfig$2.sortConfig, this.sortConfig);
    },
    tooltipContentOpts: function tooltipContentOpts() {
      return extend(true, {
        content: this.tooltipContent,
        pre: this.tooltipContentPre,
        //  pre 元素可定义预格式化的文本
        placement: "right",
        type: this.tooltipConfig.effect ? void 0 : "normal"
      }, this.tooltipConfig);
    },
    // 表格尺寸（medium|small|mini）
    vSize: function vSize2() {
      return this.size || this.$parent && this.$parent.size || this.$parent && this.$parent.vSize;
    },
    vaildTipOpts: function vaildTipOpts() {
      return extend(true, {
        isArrow: false,
        placement: "top",
        type: "error",
        content: this.validTipContent
      }, this.tooltipConfig);
    },
    validOpts: function validOpts() {
      var _this$$grid3, _this$$grid3$designCo;
      var config2 = Object.assign({
        message: "tooltip"
      }, GlobalConfig$2.validConfig, (_this$$grid3 = this.$grid) == null ? void 0 : (_this$$grid3$designCo = _this$$grid3.designConfig) == null ? void 0 : _this$$grid3$designCo.validConfig, this.validConfig);
      config2.isMessageTooltip = config2.message === "tooltip";
      config2.isMessageDefault = config2.message === "default";
      config2.isMessageInline = config2.message === "inline";
      return config2;
    },
    computerTableBodyHeight: function computerTableBodyHeight() {
      return this.tableBodyHeight === 0 ? "calc(100% - 36px)" : this.tableBodyHeight + "px";
    },
    isThemeTiny: function isThemeTiny() {
      return this.tinyTheme === T_TINY;
    },
    isThemeSaas: function isThemeSaas() {
      return this.tinyTheme === T_SAAS$1;
    },
    isViewDefault: function isViewDefault() {
      return this.viewType === V_DEFAULT$1;
    },
    isShapeTable: function isShapeTable() {
      return this.isViewDefault || this.viewType === V_MF$1 && this.$grid.currentBreakpoint !== "default";
    },
    columnNames: function columnNames() {
      var customColumnNames = this.customColumnNames;
      var columnNames2 = [defaultColumnName$1];
      var pushIfNot = function pushIfNot2(columnName) {
        if (typeof columnName === "string" && !columnNames2.includes(columnName)) {
          columnNames2.push(columnName);
        }
      };
      if (Array.isArray(customColumnNames) && customColumnNames.length > 0) {
        customColumnNames.forEach(pushIfNot);
      } else if (typeof customColumnNames === "string") {
        pushIfNot(customColumnNames);
      }
      return columnNames2;
    }
  },
  watch: {
    collectColumn: function collectColumn(value) {
      this.watchColumn(value);
    },
    customs: function customs(value) {
      !this.isUpdateCustoms && this.mergeCustomColumn(value);
      this.isUpdateCustoms = false;
    },
    height: function height() {
      this.$nextTick(this.recalculate);
    },
    data: function data6() {
      this.handleDataChange();
    },
    // 此属性暂时没有找到应用的demo，从语义上来说，觉得可以删除，官网有对应api但是没有对应的示例
    syncResize: function syncResize(value) {
      value && this.$nextTick(this.recalculate);
    },
    tableColumn: function tableColumn2() {
      this.analyColumnWidth();
      this.handleSelectionHeader();
    },
    parentHeight: function parentHeight() {
      this.$nextTick(this.recalculate);
    }
  },
  created: function created2() {
    var _Object$assign = Object.assign(this, getTableData2()), scrollXStore = _Object$assign.scrollXStore, scrollYStore = _Object$assign.scrollYStore, optimizeOpts2 = _Object$assign.optimizeOpts, data8 = _Object$assign.data;
    var scrollX = optimizeOpts2.scrollX, scrollY = optimizeOpts2.scrollY;
    verifyConfig(this);
    mergeScrollDirStore(scrollX, scrollXStore);
    mergeScrollDirStore(scrollY, scrollYStore);
    mergeTreeConfig(this);
    loadStatic(data8, this);
    bindEvent(this);
    this.watchDataForVue3();
    this.$grid.connect({
      name: "table",
      vm: this
    });
  },
  mounted: function mounted5() {
    var _this57 = this;
    if (this.$refs.tableWrapper) {
      document.body.appendChild(this.$refs.tableWrapper);
    }
    this.$nextTick().then(function() {
      _this57.afterMounted = true;
      if (_this57.autoResize && GridAdapter._resize) {
        _this57.bindResize();
      }
    });
    setTimeout(function() {
      var tableFooter = _this57.$refs.tableFooter;
      _this57.showFooterBorder = !!tableFooter;
      _this57.footerBorderBottom = tableFooter ? tableFooter.$el.getBoundingClientRect().height : 0;
    });
  },
  activated: function activated() {
    var lastScrollLeft = this.lastScrollLeft, lastScrollTop = this.lastScrollTop, scrollXLoad = this.scrollXLoad, scrollYLoad = this.scrollYLoad;
    if (lastScrollLeft || lastScrollTop) {
      this.scrollTo(lastScrollLeft, lastScrollTop);
      scrollXLoad && this.triggerScrollXEvent();
      scrollYLoad && this.triggerScrollYEvent({
        target: {
          scrollTop: lastScrollTop
        }
      });
    }
    bindEvent(this);
  },
  setup: function setup6(props, context) {
    var slots = context.slots, attrs = context.attrs, listeners = context.listeners;
    var id3 = hooks.ref(uniqueId());
    var collectColumn2 = hooks.ref([]);
    var tableFullColumn = hooks.ref([]);
    var visibleColumn = hooks.ref([]);
    var tableColumn3 = hooks.ref([]);
    var tinyTheme = hooks.ref(resolveTheme(props, context));
    var $table = hooks.getCurrentInstance().proxy;
    useInstanceSlots();
    useRelation({
      relationKey: columnLevelKey$1 + "-" + id3.value,
      childrenKey: "childColumns",
      relationContainer: function relationContainer() {
        return $table.$el.querySelector("." + hiddenContainerClass);
      },
      onChange: function onChange() {
        var collectKey = $table.computeCollectKey();
        if (collectKey !== $table.columnCollectKey) {
          $table.columnCollectKey = collectKey;
          $table.assembleColumns();
        }
      }
    });
    useDrag({
      dropConfig: hooks.toRef(props, "dropConfig"),
      collectColumn: collectColumn2,
      tableColumn: tableColumn3
    });
    useRowGroup({
      rowGroup: hooks.toRef(props, "rowGroup"),
      visibleColumn,
      tableFullColumn,
      tableColumn: tableColumn3
    });
    hooks.onBeforeUnmount(function() {
      var elemStore = $table.elemStore, $refs = $table.$refs;
      var containerList = ["main", "left", "right"];
      var tableWrapper = $refs.tableWrapper;
      if (tableWrapper && tableWrapper.parentNode) {
        tableWrapper.parentNode.removeChild(tableWrapper);
      }
      if (GridAdapter._resize) {
        $table.unbindResize();
      }
      $table.closeFilter();
      $table.closeMenu();
      containerList.forEach(function(layout) {
        var ySpaceElem = elemStore[layout + "-body-ySpace"];
        if (ySpaceElem) {
          ySpaceElem.onscroll = null;
        }
      });
      unbindEvent($table);
      clearOnTableUnmount($table);
    });
    hooks.onDeactivated(function() {
      unbindEvent($table);
    });
    var tableListeners = getListeners(attrs, listeners);
    return {
      slots,
      tableListeners,
      tinyTheme,
      id: id3,
      collectColumn: collectColumn2,
      tableFullColumn,
      visibleColumn,
      tableColumn: tableColumn3
    };
  },
  render: function render15() {
    var border = this.border, collectColumn2 = this.collectColumn, columnStore = this.columnStore, editConfig = this.editConfig, highlightCell = this.highlightCell, highlightHoverColumn = this.highlightHoverColumn, instanceSlots = this.instanceSlots;
    var highlightHoverRow = this.highlightHoverRow, isGroup2 = this.isGroup, loading = this.loading, loadingComponent = this.loadingComponent, _this$mouseConfig2 = this.mouseConfig, mouseConfig = _this$mouseConfig2 === void 0 ? {} : _this$mouseConfig2, optimizeOpts2 = this.optimizeOpts;
    var overflowX = this.overflowX, overflowY = this.overflowY, showFooter = this.showFooter, showHeader = this.showHeader, showHeaderOverflow = this.showHeaderOverflow, showOverflow = this.showOverflow, _this$dropConfig = this.dropConfig, dropConfig = _this$dropConfig === void 0 ? {} : _this$dropConfig, isThemeSaas3 = this.isThemeSaas;
    var stripe = this.stripe, tableColumn3 = this.tableColumn, tableData = this.tableData, validOpts2 = this.validOpts, vSize4 = this.vSize, visibleColumn = this.visibleColumn, slots = this.slots, stripeSaas = this.stripeSaas, borderSaas = this.borderSaas, isShapeTable2 = this.isShapeTable, resizableConfig = this.resizableConfig, rowSpan = this.rowSpan;
    var borderVertical = this.borderVertical, cardConfig = this.cardConfig, listConfig = this.listConfig, ganttConfig = this.ganttConfig, customConfig = this.customConfig;
    var leftList = columnStore.leftList, rightList = columnStore.rightList;
    var props = {
      tableData,
      tableColumn: tableColumn3,
      visibleColumn,
      collectColumn: collectColumn2,
      size: vSize4,
      isGroup: isGroup2,
      resizableConfig
    };
    Object.assign(props, {
      cardConfig,
      listConfig,
      ganttConfig,
      customConfig
    });
    var args = {
      $slots: slots,
      _vm: this,
      leftList,
      optimizeOpts: optimizeOpts2,
      overflowX,
      props,
      rightList
    };
    Object.assign(args, {
      showFooter,
      showHeader,
      tableColumn: tableColumn3,
      tableData,
      vSize: vSize4,
      visibleColumn
    });
    var renders = getRenderer(args);
    var renderHeader2 = renders.renderHeader, renderEmptyPart = renders.renderEmptyPart, renderFooter = renders.renderFooter;
    var renderResizeBar = renders.renderResizeBar, renderPluginWrapper = renders.renderPluginWrapper, renderSelectToolbar = renders.renderSelectToolbar;
    return h("div", getTableAttrs(this), [
      // 隐藏列
      h("div", {
        class: "tiny-grid-hidden-column",
        ref: "hideColumn"
      }, instanceSlots.default && instanceSlots.default()),
      // 主头部
      renderHeader2(),
      // 居中显示空数据
      renderEmptyPart(),
      // 主内容
      h(Body, {
        ref: "tableBody",
        props,
        class: this.viewCls("tableBody")
      }),
      // 底部汇总
      renderFooter(),
      // 边框线
      h("div", {
        class: ["tiny-grid__border-line", this.viewCls("borderLine")],
        key: "tinyGridBorderLine"
      }),
      // 列拖拽参考线
      renderResizeBar(),
      // 加载中
      h(Loading, {
        props: {
          visible: loading,
          loadingComponent
        },
        class: this.viewCls("gridLoading")
      }),
      // 筛选、快捷菜单、Tip提示、校验提示
      renderPluginWrapper(),
      // 多选工具栏
      renderSelectToolbar(),
      // 多端表格（默认主题或默认视图/mf大屏下，不渲染）
      !isShapeTable2 ? h(MfTable, {
        ref: "mfTable",
        props
      }) : null,
      // 表尾边框线
      renderFooterBorder(this)
    ]);
  },
  methods: _extends({}, methods, {
    handleDataChange: function handleDataChange() {
      if (Array.isArray(this.data)) {
        !this._isUpdateData && this.loadTableData(this.data, true).then(this.handleDefault).then(this.handleSelectionHeader);
        this._isUpdateData = false;
      }
    },
    viewCls: function viewCls(module) {
      return this.$grid.viewCls(module);
    }
  })
});
Table.install = function(Vue) {
  GridAdapter.Vue = Vue;
  GridAdapter.Table = Table;
  Vue.component(Table.name, Table);
};
var columnLevelKey = GlobalConfig$2.columnLevelKey, defaultColumnName = GlobalConfig$2.defaultColumnName;
var Column = defineComponent({
  name: defaultColumnName,
  componentName: "GridColumn",
  props: _extends({}, $props, {
    // 列对齐方式
    align: String,
    // 给单元格附加 className
    className: [String, Function],
    // 单元格编辑渲染配置项
    editor: [Object, Function],
    // 列属性
    field: String,
    filter: {},
    // 自定义筛选方法
    filterMethod: Function,
    // 筛选是否允许多选
    filterMultiple: {
      type: Boolean,
      default: true
    },
    // 筛选模板配置项
    filterRender: Object,
    // 配置筛选条件数组
    filters: Array,
    // 将列固定在左侧或者右侧
    fixed: String,
    // 表尾列的对齐方式
    footerAlign: String,
    // 给表尾单元格附加 className
    footerClassName: [String, Function],
    // 格式化配置
    formatConfig: {
      type: Object,
      default: function _default24() {
        return {
          data: []
        };
      }
    },
    // 格式化显示内容
    formatText: [Function, String],
    // 格式化单元格编辑器组件的传入值
    formatValue: Function,
    group: {
      type: Boolean,
      default: false
    },
    // 表头对齐方式
    headerAlign: String,
    // 给表头单元格附加 className
    headerClassName: [String, Function],
    // 自定义索引方法
    indexMethod: Function,
    // 在 v3.0 中废弃 label
    label: String,
    // 列最小宽度，把剩余宽度按比例分配
    minWidth: [Number, String],
    // 额外的参数
    params: Object,
    // 在 v3.0 中废弃 prop
    prop: String,
    // 是否服务端排序
    remoteSort: {
      type: Boolean,
      default: null
    },
    // 单元格渲染配置项
    renderer: [Object, Function],
    // 是否必填，如不设置，则会根据校验规则自动生成
    required: {
      type: Boolean,
      default: false
    },
    // 是否允许拖动列宽调整大小
    resizable: {
      type: Boolean,
      default: null
    },
    // 表单的验证功能
    rules: Object,
    // 当表头内容过长时显示为省略号
    showHeaderOverflow: {
      type: [Boolean, String],
      default: null
    },
    // 显示列头提示
    showHeaderTip: {
      type: Boolean,
      default: null
    },
    // 是否显示列头编辑图标
    showIcon: {
      type: Boolean,
      default: true
    },
    // 当内容过长时显示为省略号
    showOverflow: {
      type: [Boolean, String],
      default: null
    },
    // 显示列内容提示
    showTip: {
      type: Boolean,
      default: null
    },
    // 自定义排序的属性
    sortBy: [String, Array],
    // 自定义排序方法
    sortMethod: Function,
    // 是否允许排序
    sortable: {
      type: Boolean,
      default: false
    },
    // 列标题
    title: [String, Function],
    // 指定为树节点
    treeNode: Boolean,
    // 渲染类型: index,radio,selection,expand,operation,默认值空串
    type: String,
    // 列宽度
    width: [Number, String],
    // 操作列配置
    operationConfig: Object,
    // 值比较方法
    equals: Function
  }),
  provide: function provide3() {
    return {
      $column: this
    };
  },
  inject: {
    $table: {
      default: null
    }
  },
  setup: function setup7(props, _ref204) {
    var slots = _ref204.slots;
    var reactive = hooks.reactive, inject = hooks.inject, getCurrentInstance = hooks.getCurrentInstance, onUpdated = hooks.onUpdated, watch = hooks.watch, nextTick = hooks.nextTick;
    var currentInstance = getCurrentInstance();
    var instance = currentInstance.proxy;
    var $grid = inject("$grid");
    var $table = inject("$table");
    var slotsCache = {};
    !$table.isTagUsageSence && ($table.isTagUsageSence = true);
    useInstanceSlots();
    useRelation({
      relationKey: columnLevelKey + "-" + $table.id
    });
    var state = reactive({
      // 创建表格列实例化对象
      columnConfig: CellDefault.createColumn($table, props),
      slots,
      // 如果是静态数据源，就拿第一行数据
      firstRow: !$grid.fetchOption && $grid.data && $grid.data.length ? $grid.data[0] : {}
    });
    watch(function() {
      return props.formatConfig;
    }, function() {
      return setColumnFormat(state.columnConfig, props);
    });
    onUpdated(function() {
      var noProxySlots = instance.$scopedSlots || instance.slots;
      var slotsChange = Object.keys(noProxySlots || {}).some(function(key) {
        var _slotsCache;
        return !(((_slotsCache = slotsCache) == null ? void 0 : _slotsCache[key]) === noProxySlots[key]);
      });
      if (slotsChange) {
        slotsCache = _extends({}, noProxySlots);
        state.columnConfig.slots = slotsCache;
      }
    });
    nextTick(function() {
      return state.columnConfig.slots = instance.instanceSlots;
    });
    return state;
  },
  render: function render16() {
    var $table = this.$table, firstRow = this.firstRow, columnConfig = this.columnConfig, instanceSlots = this.instanceSlots;
    var slotVnode;
    try {
      slotVnode = instanceSlots.default && instanceSlots.default({
        row: firstRow,
        column: columnConfig,
        skip: true
      });
    } catch (e) {
      slotVnode = null;
      warn("ui.grid.error.chainCallError");
    }
    var hasSubColumn = findTree$1(slotVnode, function(node) {
      var _ref205 = node || {}, componentOptions = _ref205.componentOptions, type = _ref205.type;
      var componentName = type && type.name || componentOptions && componentOptions.Ctor.extendOptions.name;
      return $table.isValidCustomColumn(componentName);
    }, null, null);
    var columnProps = {
      key: columnConfig.id,
      attrs: {
        "data-colid": columnConfig.id
      }
    };
    return h("div", columnProps, hasSubColumn && slotVnode);
  },
  methods: CellDefault
});
Column.install = function(Vue) {
  Vue.component(Column.name, Column);
};
var themes = GlobalConfig$2.themes, viewConfig = GlobalConfig$2.viewConfig;
var T_SAAS = themes.SAAS;
var V_GANTT = viewConfig.GANTT, V_MF = viewConfig.MF, V_CARD = viewConfig.CARD, V_DEFAULT = viewConfig.DEFAULT, V_CUSTOM = viewConfig.CUSTOM;
var propKeys = Object.keys(Table.props);
function createRender(opt) {
  var _class5;
  var h2 = opt.h, _vm = opt._vm, vSize4 = opt.vSize, props = opt.props, selectToolbar = opt.selectToolbar, slots = opt.slots, $slots = opt.$slots, tableOns = opt.tableOns, renderedToolbar = opt.renderedToolbar, loading = opt.loading, pagerConfig = opt.pagerConfig, pager = opt.pager, tableLoading = opt.tableLoading, viewType2 = opt.viewType, columnAnchorParams2 = opt.columnAnchorParams, columnAnchor = opt.columnAnchor, fullScreenClass = opt.fullScreenClass;
  return h2("div", {
    class: (_class5 = {}, _class5["tiny-grid__wrapper tiny-grid view_" + viewType2] = true, _class5["!bg-transparent sm:!bg-color-bg-1"] = viewType2 === V_MF || viewType2 === V_CARD, _class5["size__" + vSize4] = vSize4, _class5["tiny-grid__animat"] = props.optimization.animat, _class5[fullScreenClass] = true, _class5)
  }, [
    selectToolbar ? null : renderedToolbar,
    columnAnchor ? _vm.renderColumnAnchor(columnAnchorParams2, _vm) : null,
    // 这里会渲染tiny-grid-column插槽内容，从而获取列配置
    h2(Table, {
      props,
      on: tableOns,
      ref: "tinyTable"
    }, slots.default && slots.default()),
    _vm.renderPager({
      $slots,
      _vm,
      loading,
      pager,
      pagerConfig,
      tableLoading,
      vSize: vSize4
    })
  ]);
}
var Grid = defineComponent({
  name: $prefix + "Grid",
  provide: function provide4() {
    return {
      $grid: this
    };
  },
  props: _extends({}, $props, {
    columns: Array,
    proxyConfig: Object,
    fetchData: Object,
    saveData: Object,
    deleteData: Object,
    toolbar: Object,
    pager: Object,
    dataset: Object,
    autoLoad: {
      type: Boolean,
      default: true
    },
    seqSerial: {
      type: Boolean,
      default: false
    },
    events: Object
  }, Table.props, {
    isBeforePageChange: Boolean,
    showSaveMsg: {
      type: Boolean,
      default: false
    },
    isMultipleHistory: Boolean,
    selectToolbar: [Boolean, Object]
  }),
  data: function data7() {
    return {
      emitter: emitter(),
      fetchOption: null,
      filterData: [],
      listeners: {},
      pagerConfig: null,
      // 存放标记为删除的行数据
      pendingRecords: [],
      sortData: {},
      tableCustoms: [],
      tableData: [],
      tableLoading: false,
      tablePage: {
        total: 0,
        pageSize: 10,
        currentPage: 1
      },
      tablePageLoading: false,
      realTimeTablePage: {
        total: 0,
        pageSize: 10,
        currentPage: 1
      },
      columnAnchorParams: {},
      columnAnchorKey: "",
      tasks: {},
      fullScreenClass: "",
      isInitialLoading: true
      // 是否首次加载数据
    };
  },
  computed: {
    // 工具栏按钮保存和删除时是否弹出提示信息
    isMsg: function isMsg() {
      return this.proxyOpts.message !== false;
    },
    tableProps: function tableProps() {
      var _this58 = this;
      var rest = {};
      propKeys.forEach(function(key) {
        return rest[key] = _this58[key];
      });
      return rest;
    },
    proxyOpts: function proxyOpts() {
      return extend(true, {}, GlobalConfig$2.grid.proxyConfig, this.proxyConfig);
    },
    vSize: function vSize3() {
      return this.size || this.$parent && this.$parent.size || this.$parent && this.$parent.vSize;
    },
    seqIndex: function seqIndex() {
      var seqSerial = this.seqSerial, scrollLoad = this.scrollLoad, oldPage = this.pagerConfig, startIndex = this.startIndex, tablePageLoading = this.tablePageLoading, realTimeTablePage = this.realTimeTablePage;
      var seqIndexValue = startIndex;
      var pagerConfig = tablePageLoading ? realTimeTablePage : oldPage;
      if ((seqSerial || scrollLoad) && pagerConfig) {
        seqIndexValue = (pagerConfig.currentPage - 1) * pagerConfig.pageSize + startIndex;
      }
      return seqIndexValue;
    },
    isThemeSaas: function isThemeSaas2() {
      return this.tinyTheme === T_SAAS;
    },
    isModeMobileFirst: function isModeMobileFirst() {
      return this.tinyMode === "mobile-first";
    },
    isViewGantt: function isViewGantt() {
      return this.viewType === V_GANTT;
    },
    isViewCustom: function isViewCustom() {
      return this.viewType === V_CUSTOM;
    }
  },
  watch: {
    // 监听配置式columns数组
    columns: function columns(cols) {
      this.loadColumn(cols);
    },
    tableCustoms: function tableCustoms() {
      this.toolbar && this.$refs.toolbar && this.$refs.toolbar.loadStorage();
    },
    columnAnchorParams: function columnAnchorParams() {
      var _this59 = this;
      setTimeout(function() {
        return _this59.emitter.emit("active-anchor");
      }, this.columnAnchorParams.activeAnchor.delay);
    },
    viewType: function viewType(value) {
      var _this60 = this;
      if (value === V_MF && this.fullScreenClass) {
        this.$nextTick(function() {
          return _this60.recalculate(true);
        });
      }
    }
  },
  created: function created3() {
    this.vmStore = /* @__PURE__ */ Object.create(null);
    this.fetchOption = this.initFetchOption();
    this.pagerConfig = this.initPagerConfig();
    var customs2 = this.customs, events = this.events, prefetch = this.prefetch, fetchOption = this.fetchOption, autoLoad = this.autoLoad;
    if (customs2) {
      this.tableCustoms = customs2;
    }
    if (events) {
      var listeners = {};
      for (var event in events) {
        if (Object.prototype.hasOwnProperty.call(events, event)) {
          var evkey = event.replace(/\B([A-Z])/g, "-$1").toLowerCase();
          listeners[evkey] = events[event];
          if (~["pageChange", "sortChange", "filterChange", "toolbarButtonClick"].indexOf(event)) {
            this.emitter.on(evkey, events[event]);
          }
        }
      }
      this.listeners = listeners;
    }
    if (prefetch && fetchOption && autoLoad !== false) {
      if (Array.isArray(prefetch)) {
        this.commitProxy("prefetch", prefetch);
      } else {
        this.commitProxy("prefetch");
      }
    }
  },
  mounted: function mounted6() {
    var columns2 = this.columns, fetchOption = this.fetchOption, autoLoad = this.autoLoad, pagerSlot = this.pagerSlot, prefetch = this.prefetch;
    if (pagerSlot) {
      var _pagerSlot$componentO = pagerSlot.componentOptions.listeners, listeners = _pagerSlot$componentO === void 0 ? {} : _pagerSlot$componentO, componentInstance = pagerSlot.componentInstance;
      if (!listeners["size-change"]) {
        componentInstance.$on("size-change", this.pageSizeChange);
      }
      if (!listeners["current-change"]) {
        componentInstance.$on("current-change", this.pageCurrentChange);
      }
    }
    if (columns2 && columns2.length) {
      this.loadColumn(this.columns);
    }
    if (!prefetch && fetchOption) {
      if (this._pageSizeChangeCallback) {
        this._pageSizeChangeCallback();
        this._pageSizeChangeCallback = null;
      } else if (autoLoad) {
        var toolbarVm = this.getVm("toolbar");
        this.commitProxy("query", toolbarVm && toolbarVm.orderSetting());
      }
    }
    if (this.isMultipleHistory) {
      this.initMultipleHistory();
    }
    this.addIntersectionObserver();
  },
  setup: function setup8(props, context) {
    var listeners = context.listeners, attrs = context.attrs;
    var tableListeners = getListeners(attrs, listeners);
    var tinyTheme = hooks.ref(resolveTheme(props, context));
    var tinyMode = hooks.ref(resolveMode(props, context));
    var breakpoint = useBreakpoint();
    var renderless = function renderless2(props2, hooks2, _ref206) {
      var _ref206$designConfig = _ref206.designConfig, designConfig = _ref206$designConfig === void 0 ? null : _ref206$designConfig;
      return {
        tableListeners,
        designConfig,
        tinyTheme,
        tinyMode,
        currentBreakpoint: breakpoint.current
      };
    };
    hooks.onBeforeUnmount(function() {
      var gridVm = hooks.getCurrentInstance().proxy;
      gridVm.removeIntersectionObserver();
      gridVm.vmStore = null;
    });
    return setup$1({
      props,
      context,
      renderless,
      api: ["designConfig", "tableListeners", "tinyTheme", "tinyMode", "currentBreakpoint"]
    });
  },
  render: function render17() {
    var _this61 = this;
    var editConfig = this.editConfig, fetchOption = this.fetchOption, listeners = this.listeners, loading = this.loading, optimization = this.optimization, pager = this.pager, pagerConfig = this.pagerConfig, remoteFilter = this.remoteFilter, remoteSort = this.remoteSort, selectToolbar = this.selectToolbar;
    var seqIndex2 = this.seqIndex, $slots = this.slots, tableCustoms2 = this.tableCustoms, tableData = this.tableData, tableListeners = this.tableListeners, tableLoading = this.tableLoading, tableProps2 = this.tableProps, toolbar = this.toolbar, vSize4 = this.vSize, designConfig = this.designConfig, viewType2 = this.viewType;
    var columnAnchor = this.columnAnchor, columnAnchorParams2 = this.columnAnchorParams, fullScreenClass = this.fullScreenClass;
    if (designConfig != null && designConfig.icons) {
      Object.assign(GlobalConfig$2.icon, designConfig.icons);
    }
    var optimizOpt = _extends({}, GlobalConfig$2.optimization, optimization);
    var props = _extends({}, tableProps2, {
      optimization: optimizOpt,
      startIndex: seqIndex2
    });
    if ((designConfig == null ? void 0 : designConfig.stripe) !== void 0 && !props.stripe) {
      props.stripe = designConfig == null ? void 0 : designConfig.stripe;
    }
    var tableOns = _extends({}, listeners, tableListeners);
    var rowClassName = this.handleRowClassName, sortChangeEvent2 = this.sortChangeEvent, filterChangeEvent2 = this.filterChangeEvent;
    if (fetchOption) {
      Object.assign(props, {
        loading: loading || tableLoading,
        data: tableData,
        rowClassName
      });
      remoteSort && (tableOns["sort-change"] = sortChangeEvent2);
      remoteFilter && (tableOns["filter-change"] = filterChangeEvent2);
    }
    toolbar && !(toolbar.setting && toolbar.setting.storage) && (props.customs = tableCustoms2);
    toolbar && (tableOns["update:customs"] = function(value) {
      return _this61.tableCustoms = value;
    });
    tableOns["column-init-ready"] = this.handleColumnInitReady;
    if (editConfig) {
      props.editConfig = _extends({
        trigger: "click",
        mode: "cell",
        showStatus: true
      }, editConfig, {
        activeMethod: this.handleActiveMethod
      });
    }
    var renderedToolbar = this.getRenderedToolbar({
      $slots,
      _vm: this,
      loading,
      tableLoading,
      toolbar
    });
    return createRender({
      h,
      _vm: this,
      vSize: vSize4,
      props,
      selectToolbar,
      renderedToolbar,
      tableOns,
      slots: this.slots,
      $slots,
      loading,
      pager,
      pagerConfig,
      tableLoading,
      viewType: viewType2,
      columnAnchorParams: columnAnchorParams2,
      columnAnchor,
      fullScreenClass
    });
  },
  methods: {
    // 配置高度减去（表格锚点+工具栏+分页）计算得出表格高度
    updateParentHeight: function updateParentHeight2() {
      var _this62 = this;
      if (!this.tasks.updateParentHeight) {
        this.tasks.updateParentHeight = debounce(10, function() {
          var $el = _this62.$el, $refs = _this62.$refs;
          var tinyTable = $refs.tinyTable, tinyGridColumnAnchor = $refs.tinyGridColumnAnchor;
          var toolbarVm = _this62.getVm("toolbar");
          if (tinyTable) {
            var columnAnchorHeight = 0;
            if (tinyGridColumnAnchor) {
              var _getComputedStyle = getComputedStyle(tinyGridColumnAnchor), height2 = _getComputedStyle.height, marginTop = _getComputedStyle.marginTop, marginBottom = _getComputedStyle.marginBottom;
              columnAnchorHeight = toNumber(height2) + toNumber(marginTop) + toNumber(marginBottom);
            }
            tinyTable.parentHeight = $el.parentNode.clientHeight - (toolbarVm ? toolbarVm.$el.clientHeight : 0) - columnAnchorHeight - ($refs.pager ? $refs.pager.$el.clientHeight : 0);
          }
        });
      }
      this.tasks.updateParentHeight();
    },
    // 向缓存添加实例
    connect: function connect2(_ref207) {
      var name = _ref207.name, vm = _ref207.vm;
      if (name && typeof name === "string" && vm) {
        this.vmStore[name] = vm;
      }
    },
    createJob: function createJob(type, callback) {
      if (type === "pageSizeChangeCallback") {
        this._pageSizeChangeCallback = callback;
      } else if (type === "updateCustomsCallback") {
        this._updateCustomsCallback = this._updateCustomsCallback || [];
        this._updateCustomsCallback.push(callback);
      }
    },
    // 从缓存获取实例
    getVm: function getVm2(name) {
      if (name && typeof name === "string" && this.vmStore) {
        return this.vmStore[name];
      }
    },
    // 列就绪时的处理
    handleColumnInitReady: function handleColumnInitReady() {
      if (this._updateCustomsCallback) {
        this._updateCustomsCallback.forEach(function(fn) {
          fn();
        });
        this._updateCustomsCallback = [];
      }
    },
    handleRowClassName: function handleRowClassName(params) {
      var rowClassName = this.rowClassName;
      var clss = [];
      if (this.pendingRecords.includes(params.row)) {
        clss.push("row__pending");
      }
      return clss.concat(rowClassName ? rowClassName(params) : []);
    },
    handleActiveMethod: function handleActiveMethod(params) {
      return !~this.pendingRecords.indexOf(params.row) && (!this.editConfig.activeMethod || this.editConfig.activeMethod(params));
    },
    sortChangeEvent: function sortChangeEvent(params) {
      var remoteSort = this.remoteSort;
      var column = params.column;
      var eventParams = extend(false, {
        $grid: this
      }, params);
      if (isBoolean(column.remoteSort) ? column.remoteSort : remoteSort) {
        this.sortData = params;
        this.tablePage.currentPage = 1;
        this.commitProxy("query");
      }
      _emitEvent(this, "sort-change", eventParams);
      this.emitter.emit("sort-change", eventParams);
    },
    viewCls: function viewCls2(module) {
      return GlobalConfig$2.viewConfig[module][this.viewType] || "";
    },
    // 监听某个元素是否出现在视口中
    addIntersectionObserver: function addIntersectionObserver() {
      var _this63 = this;
      if (this.intersectionOption && this.intersectionOption.disabled)
        return;
      this.intersectionObserver = new IntersectionObserver(function(entries) {
        var entry = entries[0];
        if (entries.length > 1) {
          var intersectingEntry = entries.find(function(entry2) {
            return entry2.isIntersecting;
          });
          if (intersectingEntry) {
            entry = intersectingEntry;
          }
        }
        _this63.handleVisibilityChange(entry.isIntersecting, entry);
      }, this.intersectionOption);
      this.intersectionObserver.observe(this.$el);
    },
    removeIntersectionObserver: function removeIntersectionObserver() {
      if (this.intersectionObserver) {
        this.intersectionObserver.unobserve(this.$el);
        this.intersectionObserver.disconnect();
        this.intersectionObserver = null;
      }
    },
    filterChangeEvent: function filterChangeEvent(params) {
      var eventParams = extend(false, {
        $grid: this
      }, params);
      if (this.remoteFilter) {
        this.filterData = params.filters;
        this.commitProxy("query");
      }
      _emitEvent(this, "filter-change", eventParams);
      this.emitter.emit("filter-change", eventParams);
    }
  }
});
Grid.install = function(Vue) {
  Vue.component(Grid.name, Grid);
};
function operArrs(_ref208) {
  var _vm = _ref208._vm, editStore = _ref208.editStore, newRecords = _ref208.newRecords, newRecordsCopy = _ref208.newRecordsCopy, nowData = _ref208.nowData, row2 = _ref208.row, tableFullData = _ref208.tableFullData, tableSourceData = _ref208.tableSourceData;
  if (row2 === -1) {
    Array.prototype.push.apply(nowData, newRecords);
    Array.prototype.push.apply(tableFullData, newRecords);
    Array.prototype.push.apply(tableSourceData, newRecordsCopy);
  }
  if (row2 && row2 !== -1) {
    var targetIndex = nowData.indexOf(row2);
    if (targetIndex === -1) {
      throw new Error(error("ui.grid.error.unableInsert"));
    }
    var insertIndex = tableFullData.indexOf(row2);
    Array.prototype.splice.apply(nowData, [targetIndex, 0].concat(newRecords));
    Array.prototype.splice.apply(tableFullData, [insertIndex, 0].concat(newRecords));
    Array.prototype.splice.apply(tableSourceData, [insertIndex, 0].concat(newRecordsCopy));
  }
  if (!row2) {
    Array.prototype.unshift.apply(nowData, newRecords);
    Array.prototype.unshift.apply(tableFullData, newRecords);
    Array.prototype.unshift.apply(tableSourceData, newRecordsCopy);
  }
  Array.prototype.unshift.apply(editStore.insertList, newRecords);
  Array.prototype.push.apply(_vm.temporaryRows, newRecordsCopy);
}
var _setActiveCell = function _setActiveCell2(row2, field) {
  var _this64 = this;
  var next1 = function next12() {
    if (!row2 || !field) {
      return _this64.$nextTick();
    }
    var column = find(_this64.visibleColumn, function(column2) {
      return column2.property === field;
    });
    if (!column || !column.editor) {
      return _this64.$nextTick();
    }
    var next2 = function next22(cell) {
      if (!cell) {
        return;
      }
      var rowIndex = _this64.getRowIndex(row2);
      var columnIndex = _this64.getColumnIndex(column);
      _this64.handleActived({
        row: row2,
        rowIndex,
        column,
        columnIndex,
        cell,
        $table: _this64
      });
      _this64.lastCallTime = Date.now();
    };
    getCell(_this64, {
      row: row2,
      column
    }).then(next2);
    return _this64.$nextTick();
  };
  return this.scrollToRow(row2, true).then(next1);
};
var Methods$c = {
  _insert: function _insert(records) {
    return this.insertAt(records);
  },
  // 根据位置从指定行添加数据
  _insertAt: function _insertAt(records, row2) {
    var _this65 = this;
    var afterFullData = this.afterFullData, editStore = this.editStore, isAsyncColumn = this.isAsyncColumn, scrollYLoad = this.scrollYLoad, tableFullData = this.tableFullData, _this$tableSourceData = this.tableSourceData, tableSourceData = _this$tableSourceData === void 0 ? [] : _this$tableSourceData, treeConfig = this.treeConfig;
    if (treeConfig) {
      throw new Error(error("ui.grid.error.treeInsert"));
    }
    if (isAsyncColumn) {
      var columnSet = this.getColumns();
      columnSet.forEach(function(column) {
        if (column.format && column.format.async && column.format.async.fetch) {
          records[GlobalConfig$2.constant.insertedField] = true;
        }
      });
    }
    if (!isArray(records)) {
      records = [records];
    }
    var nowData = afterFullData;
    var newRecords = records.map(function(record) {
      return hooks.reactive(_this65.defineField(_extends({}, record)));
    });
    var newRecordsCopy = clone(newRecords, true);
    operArrs({
      _vm: this,
      editStore,
      newRecords,
      newRecordsCopy,
      nowData,
      row: row2,
      tableFullData,
      tableSourceData
    });
    this.updateCache(true);
    this.handleTableData(true);
    this.checkSelectionStatus();
    this.updateFooter();
    if (scrollYLoad) {
      this.updateScrollYSpace();
    }
    var res = {
      row: newRecords.length ? newRecords[newRecords.length - 1] : null,
      rows: newRecords
    };
    return this.$nextTick().then(function() {
      _this65.recalculate();
      return res;
    });
  },
  /**
   * 删除指定行数据
   * 如果传 row 则删除一行
   * 如果传 rows 则删除多行
   */
  _remove: function _remove(rows) {
    var _this66 = this;
    var afterFullData = this.afterFullData, scrollYLoad = this.scrollYLoad, _this$selectConfig3 = this.selectConfig, selectConfig = _this$selectConfig3 === void 0 ? {} : _this$selectConfig3;
    var selection = this.selection, tableFullData = this.tableFullData, treeConfig = this.treeConfig, _this$tableSourceData2 = this.tableSourceData, tableSourceData = _this$tableSourceData2 === void 0 ? [] : _this$tableSourceData2;
    var _this$editStore = this.editStore, insertList = _this$editStore.insertList, removeList = _this$editStore.removeList;
    var checkField = selectConfig.checkField;
    var nowData = afterFullData;
    var rest = [];
    var rowsOld = rows;
    var inArr = function inArr2(row3, rows2) {
      return ~rows2.indexOf(row3);
    };
    if (treeConfig) {
      throw new Error(error("ui.grid.error.treeRemove"));
    }
    if (!rowsOld) {
      rows = tableFullData;
    }
    if (rowsOld && !isArray(rowsOld)) {
      rows = [rowsOld];
    }
    for (var i = 0; i < rows.length; i++) {
      var row2 = rows[i];
      if (this.hasRowInsert(row2))
        continue;
      removeList.push(row2);
    }
    if (!checkField) {
      remove(selection, function(row3) {
        return inArr(row3, rows);
      });
    }
    if (tableFullData === rows) {
      rows = tableFullData.slice(0);
      tableFullData.length = 0;
      nowData.length = 0;
    } else {
      rest = remove(tableFullData, function(row3) {
        return inArr(row3, rows);
      });
      remove(nowData, function(row3) {
        return inArr(row3, rows);
      });
    }
    remove(tableSourceData, function(row3) {
      return find(insertList, function(r) {
        return getRowid(_this66, r) === getRowid(_this66, row3);
      }) && find(rows, function(r) {
        return getRowid(_this66, r) === getRowid(_this66, row3);
      });
    });
    remove(insertList, function(row3) {
      return inArr(row3, rows);
    });
    this.updateCache(true);
    this.handleTableData(true);
    this.checkSelectionStatus();
    this.updateFooter();
    if (scrollYLoad) {
      this.updateScrollYSpace();
    }
    var res = {
      row: rows && rows.length ? rows[rows.length - 1] : null,
      rows: rest
    };
    return this.$nextTick().then(function() {
      _this66.recalculate();
      return res;
    });
  },
  /**
   * 删除选中数据
   */
  _removeSelecteds: function _removeSelecteds() {
    var _this67 = this;
    var selectRecords = this.getSelectRecords(true);
    var callback = function callback2(params) {
      _this67.clearSelection();
      return params;
    };
    return this.remove(selectRecords).then(callback);
  },
  _revert: function _revert() {
    warn("ui.grid.error.delRevert");
    return this.revertData.apply(this, arguments);
  },
  /**
   * 对数据进行还原
   * 如果不传任何参数，则还原整个表格；
   * 如果传row则还原一行；
   * 如果传rows则还原多行；
   * 如果还额外传了field则还原指定单元格。
   */
  _revertData: function _revertData(rows, field) {
    var _this68 = this;
    var tableSourceData = this.tableSourceData, tableSynchData = this.tableSynchData;
    if (arguments.length && rows && !isArray(rows)) {
      rows = [rows];
    }
    if (!arguments.length) {
      rows = tableSynchData || [];
    }
    var _loop2 = function _loop22() {
      var row2 = rows[i];
      var oRow = find(tableSourceData, function(item) {
        return getRowid(_this68, row2) === getRowid(_this68, item);
      });
      if (oRow && row2) {
        if (field) {
          set(row2, field, get(oRow, field));
        } else {
          destructuring(row2, oRow);
        }
      }
    };
    for (var i = 0; i < rows.length; i++) {
      _loop2();
    }
    if (arguments.length) {
      return this.$nextTick();
    }
    return this.reloadData(tableSynchData);
  },
  /**
   * 获取表格操作数据集
   */
  _getRecordset: function _getRecordset() {
    var res = {};
    res.insertRecords = this.getInsertRecords();
    res.removeRecords = this.getRemoveRecords();
    res.updateRecords = this.getUpdateRecords();
    return res;
  },
  /**
   * 获取删除数据列表
   */
  _getRemoveRecords: function _getRemoveRecords() {
    return this.editStore.removeList;
  },
  /**
   * 获取新增数据列表
   */
  _getInsertRecords: function _getInsertRecords() {
    return this.editStore.insertList;
  },
  /**
   * 获取更新数据列表
   * 只精准匹配row的更改。如果是树表格，子节点更改状态不会影响父节点的更新状态
   */
  _getUpdateRecords: function _getUpdateRecords() {
    var _this69 = this;
    var tableFullData = this.tableFullData, treeConfig = this.treeConfig;
    var handler6 = function handler7(row2) {
      return !_this69.isTemporaryRow(row2) && _this69.hasRowChange(row2);
    };
    var updateRecords = treeConfig ? filterTree(tableFullData, handler6, treeConfig) : tableFullData.filter(handler6);
    return updateRecords;
  },
  /**
   * 处理激活编辑
   */
  handleActived: function handleActived(params, event) {
    var _this70 = this;
    return _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee() {
      var editConfig, editStore, tableColumn3, cell, column, row2, editor, actived, isActiveCell, type, canActive, args;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              editConfig = _this70.editConfig, editStore = _this70.editStore, tableColumn3 = _this70.tableColumn;
              cell = params.cell, column = params.column, row2 = params.row;
              editor = column.editor;
              actived = editStore.actived;
              isActiveCell = handleActivedCheckCell({
                actived,
                column,
                editConfig,
                row: row2
              });
              if (!(editor && cell && isActiveCell)) {
                _context.next = 15;
                break;
              }
              type = "edit-disabled";
              _context.next = 9;
              return handleActivedCanActive({
                editConfig,
                params
              });
            case 9:
              canActive = _context.sent;
              args = {
                _vm: _this70,
                actived,
                canActive,
                cell,
                column,
                editConfig
              };
              Object.assign(args, {
                event,
                params,
                row: row2,
                tableColumn: tableColumn3,
                type
              });
              type = handleActivedDoActive(args);
              handleActivedClearActive({
                _vm: _this70,
                canActive,
                event
              });
              _emitEvent(_this70, type, [params, event]);
            case 15:
              handleActivedTryActive({
                _vm: _this70,
                actived,
                cell,
                column,
                editor,
                event,
                isActiveCell,
                params,
                row: row2
              });
              return _context.abrupt("return", _this70.$nextTick());
            case 17:
            case "end":
              return _context.stop();
          }
      }, _callee);
    }))();
  },
  _getColumnModel: function _getColumnModel(row2, column) {
    var model = column.model, editor = column.editor;
    if (editor) {
      model.value = getCellValue(row2, column);
      model.update = false;
    }
  },
  _setColumnModel: function _setColumnModel(row2, column) {
    var model = column.model, editor = column.editor;
    if (editor && model.update) {
      setCellValue(row2, column, model.value);
      model.update = false;
      model.value = null;
    }
  },
  _getActiveRow: function _getActiveRow() {
    var $el = this.$el, editStore = this.editStore, tableData = this.tableData;
    var actived = editStore.actived;
    var args = actived.args, row2 = actived.row;
    var length = $el.querySelectorAll(".tiny-grid-body__column.col__actived").length;
    return args && ~tableData.indexOf(row2) && length ? _extends({}, args) : null;
  },
  /**
   * 清除已激活的编辑
   */
  _clearActived: function _clearActived(event) {
    var _this71 = this;
    var _this$editConfig3 = this.editConfig, editConfig = _this$editConfig3 === void 0 ? {} : _this$editConfig3, editStore = this.editStore, tableColumn3 = this.tableColumn;
    var actived = editStore.actived;
    var args = actived.args, column = actived.column, row2 = actived.row;
    var isActived = row2 || column;
    if (isActived && editConfig.mode === "row") {
      tableColumn3.forEach(function(column22) {
        return _this71._setColumnModel(row2, column22);
      });
    }
    if (isActived && editConfig.mode !== "row") {
      this._setColumnModel(row2, column);
    }
    if (isActived) {
      var _editor$attrs;
      this.updateFooter();
      var row22 = args.row, column2 = args.column;
      var _ref209 = column2 || {}, editor = _ref209.editor;
      if ((editor == null ? void 0 : editor.component) === "input" && (editor == null ? void 0 : (_editor$attrs = editor.attrs) == null ? void 0 : _editor$attrs.type) === "number") {
        row22[column2.property] = +row22[column2.property];
      }
      _emitEvent(this, "edit-closed", [args, event]);
    }
    actived.args = null;
    actived.column = null;
    actived.row = null;
    return this.clearValidate().then(this.recalculate);
  },
  _hasActiveRow: function _hasActiveRow(row2) {
    return this.editStore.actived.row === row2;
  },
  /**
   * 处理聚焦
   */
  handleFocus: function handleFocus(params) {
    var cell = params.cell, column = params.column;
    var editor = column.editor;
    if (!editor) {
      return;
    }
    var inputElem;
    var compRender = Renderer$1.get(editor.component);
    var autofocus = editor.autofocus, autoselect = editor.autoselect, focusDelay = editor.focusDelay;
    var handler6 = function handler7() {
      if (autofocus) {
        inputElem = cell.querySelector(autofocus);
      }
      var isAutofocus = compRender && compRender.autofocus;
      if (isAutofocus && !inputElem) {
        inputElem = cell.querySelector(isAutofocus);
      }
      if (!inputElem) {
        return;
      }
      var type = inputElem.type;
      inputElem.type = "text";
      inputElem.selectionEnd = inputElem.value.length;
      inputElem.selectionStart = inputElem.selectionEnd;
      inputElem.type = type;
      inputElem[autoselect ? "select" : "focus"]();
      if (browser.name !== "ie") {
        return;
      }
      var textRange = inputElem.createTextRange();
      textRange.collapse(false);
      textRange.select();
    };
    setTimeout(handler6, focusDelay || 50);
  },
  /**
   * 激活单元格编辑
   */
  _setActiveCell,
  /**
   * 激活行编辑
   */
  _setActiveRow: function _setActiveRow(row2) {
    var editColumn = find(this.visibleColumn, function(column) {
      return column.editor;
    });
    return this.setActiveCell(row2, editColumn.property);
  },
  /**
   * 只对trigger为dblclick有效，选中单元格
   */
  _setSelectCell: function _setSelectCell(row2, field) {
    var _this72 = this;
    var editConfig = this.editConfig, tableData = this.tableData, visibleColumn = this.visibleColumn;
    if (!row2 || !field || editConfig.trigger === "manual") {
      return this.$nextTick();
    }
    var column = find(visibleColumn, function(column2) {
      return column2.property === field;
    });
    var rowIndex = tableData.indexOf(row2);
    if (!~rowIndex || !column) {
      return this.$nextTick();
    }
    var next = function next2(cell) {
      var columnIndex = visibleColumn.indexOf(column);
      var params = {
        row: row2,
        rowIndex,
        column,
        columnIndex,
        cell
      };
      _this72.handleSelected(params, {});
    };
    getCell(this, {
      row: row2,
      rowIndex,
      column
    }).then(next);
    return this.$nextTick();
  },
  updateSelectedCls: function updateSelectedCls(clear2) {
    var editStore = this.editStore, elemStore = this.elemStore, _this$mouseConfig3 = this.mouseConfig, mouseConfig = _this$mouseConfig3 === void 0 ? {} : _this$mouseConfig3;
    var _editStore$selected = editStore.selected, column = _editStore$selected.column, row2 = _editStore$selected.row;
    clear2 && this.clearSelected(true);
    if (!mouseConfig.selected || !row2 || !column) {
      return;
    }
    var listElem = elemStore["main-body-list"];
    var rowid2 = getRowid(this, row2);
    var trElem = listElem.querySelector('[data-rowid="' + rowid2 + '"]');
    if (!trElem) {
      return;
    }
    addClass(trElem.querySelector("." + column.id), "col__selected");
  },
  /**
   * 处理选中源
   */
  handleSelected: function handleSelected(params, event) {
    var _this73 = this;
    var editConfig = this.editConfig, editStore = this.editStore, elemStore = this.elemStore, _this$mouseConfig4 = this.mouseConfig, mouseConfig = _this$mouseConfig4 === void 0 ? {} : _this$mouseConfig4;
    var actived = editStore.actived, selected = editStore.selected;
    var _ref210 = params || {}, cell = _ref210.cell, column = _ref210.column, row2 = _ref210.row;
    var selectMethod = function selectMethod2() {
      if (selected.row === row2 && selected.column === column || actived.row === row2 && (editConfig.mode !== "cell" || actived.column === column)) {
        return _this73.$nextTick();
      }
      if (_this73.keyboardConfig || _this73.mouseConfig) {
        _this73.clearChecked(event);
        _this73.clearIndexChecked();
        _this73.clearHeaderChecked();
        _this73.clearSelected(event);
      }
      _this73.clearActived(event);
      selected.args = params;
      selected.row = row2;
      selected.column = column;
      _this73.updateSelectedCls();
      if (!mouseConfig.checked) {
        return _this73.$nextTick();
      }
      var headerElem = elemStore["main-header-list"];
      _this73.handleChecked([[cell]]);
      if (!headerElem) {
        return _this73.$nextTick();
      }
      _this73.handleHeaderChecked([[headerElem.querySelector("." + (column && column.id))]]);
      _this73.handleIndexChecked([[cell && cell.parentNode && cell.parentNode.querySelector(".col__index")]]);
      return _this73.$nextTick();
    };
    selectMethod = debounce(20, selectMethod);
    return selectMethod();
  }
};
var Edit = {
  install: function install(Table2) {
    GridAdapter._edit = 1;
    Object.assign(Table2.methods, Methods$c);
  }
};
var Export = {
  install: function install2(Table2) {
    GridAdapter._export = 1;
    Object.assign(Table2.methods, Methods$g);
  }
};
function findLeft(params) {
  var checkColumn = params.checkColumn, columnIndex = params.columnIndex, isLeft = params.isLeft, rowIndex = params.rowIndex, tableData = params.tableData;
  var targetColumn = params.targetColumn, targetColumnIndex = params.targetColumnIndex, targetRow = params.targetRow, targetRowIndex = params.targetRowIndex, visibleColumn = params.visibleColumn;
  if (!isLeft) {
    return {
      targetColumn,
      targetColumnIndex,
      targetRow,
      targetRowIndex
    };
  }
  for (var _index5 = columnIndex - 1; _index5 >= 0; _index5--) {
    if (checkColumn(visibleColumn[_index5])) {
      targetColumnIndex = _index5;
      targetColumn = visibleColumn[_index5];
      break;
    }
  }
  if (targetColumn || rowIndex <= 0) {
    return {
      targetColumn,
      targetColumnIndex,
      targetRow,
      targetRowIndex
    };
  }
  targetRowIndex = rowIndex - 1;
  targetRow = tableData[targetRowIndex];
  for (var _index6 = visibleColumn.length - 1; _index6 >= 0; _index6--) {
    if (checkColumn(visibleColumn[_index6])) {
      targetColumnIndex = _index6;
      targetColumn = visibleColumn[_index6];
      break;
    }
  }
  return {
    targetColumn,
    targetColumnIndex,
    targetRow,
    targetRowIndex
  };
}
function findRight(params) {
  var checkColumn = params.checkColumn, columnIndex = params.columnIndex, isLeft = params.isLeft, rowIndex = params.rowIndex, tableData = params.tableData;
  var targetColumn = params.targetColumn, targetColumnIndex = params.targetColumnIndex, targetRow = params.targetRow, targetRowIndex = params.targetRowIndex, visibleColumn = params.visibleColumn;
  if (isLeft) {
    return {
      targetColumn,
      targetColumnIndex,
      targetRow,
      targetRowIndex
    };
  }
  for (var _index7 = columnIndex + 1; _index7 < visibleColumn.length; _index7++) {
    if (checkColumn(visibleColumn[_index7])) {
      targetColumnIndex = _index7;
      targetColumn = visibleColumn[_index7];
      break;
    }
  }
  if (targetColumn || rowIndex >= tableData.length - 1) {
    return {
      targetColumn,
      targetColumnIndex,
      targetRow,
      targetRowIndex
    };
  }
  targetRowIndex = rowIndex + 1;
  targetRow = tableData[targetRowIndex];
  for (var _index8 = 0; _index8 < visibleColumn.length; _index8++) {
    if (checkColumn(visibleColumn[_index8])) {
      targetColumnIndex = _index8;
      targetColumn = visibleColumn[_index8];
      break;
    }
  }
  return {
    targetColumn,
    targetColumnIndex,
    targetRow,
    targetRowIndex
  };
}
function processTarget(args1) {
  var _vm = args1._vm, args = args1.args, edit = args1.edit, editConfig = args1.editConfig, event = args1.event, isLeft = args1.isLeft, params = args1.params, rowIndex = args1.rowIndex;
  var targetColumn = args1.targetColumn, targetColumnIndex = args1.targetColumnIndex, targetRow = args1.targetRow, targetRowIndex = args1.targetRowIndex;
  if (targetColumn) {
    if (targetRow) {
      params.rowIndex = targetRowIndex;
      params.row = targetRow;
    } else {
      params.rowIndex = rowIndex;
    }
    params.columnIndex = targetColumnIndex;
    params.column = targetColumn;
    getCell(_vm, params).then(function(resCell) {
      params.cell = resCell;
      if (editConfig) {
        if (editConfig.trigger === "click" || editConfig.trigger === "dblclick") {
          if (editConfig.mode === "row" || edit) {
            _vm.handleActived(params, event);
          } else {
            _vm.handleSelected(params, event);
            _vm.scrollToRow(params.row, params.column, false, {
              isLeftArrow: isLeft,
              isRightArrow: !isLeft,
              from: args.column
            });
          }
        }
      }
    });
  }
}
function onCellMousedownGridEl(args) {
  var _vm = args._vm, bodyList = args.bodyList, cell = args.cell, cellFirstElementChild = args.cellFirstElementChild, cellLastElementChild = args.cellLastElementChild, flag = args.flag, headStart = args.headStart, headerList = args.headerList, isIndex = args.isIndex, startCellNode = args.startCellNode, targetElem = args.targetElem;
  if (flag) {
    if (isIndex) {
      var firstCell = targetElem.parentNode.firstElementChild;
      _vm.handleChecked(getRowNodes(bodyList, getCellNodeIndex(firstCell.nextElementSibling), getCellNodeIndex(cellLastElementChild)));
      _vm.handleIndexChecked(getRowNodes(bodyList, getCellNodeIndex(firstCell), getCellNodeIndex(cell)));
    } else if (!hasClass(targetElem, "col__index")) {
      var _firstCell = targetElem.parentNode.firstElementChild;
      var colIndex = [].indexOf.call(targetElem.parentNode.children, targetElem);
      var head = headerList[0].children[colIndex];
      _vm.handleHeaderChecked(getRowNodes(headerList, getCellNodeIndex(head), getCellNodeIndex(headStart)));
      _vm.handleIndexChecked(getRowNodes(bodyList, getCellNodeIndex(_firstCell), getCellNodeIndex(cellFirstElementChild)));
      _vm.handleChecked(getRowNodes(bodyList, startCellNode, getCellNodeIndex(targetElem)));
    }
  }
}
function handleCellMousedownEvent(args1) {
  var $el = args1.$el, _vm = args1._vm, bodyList = args1.bodyList, cell = args1.cell, cellFirstElementChild = args1.cellFirstElementChild;
  var cellLastElementChild = args1.cellLastElementChild, headStart = args1.headStart, headerList = args1.headerList, isIndex = args1.isIndex, startCellNode = args1.startCellNode;
  var _vm$mouseConfig2 = _vm.mouseConfig, mouseConfig = _vm$mouseConfig2 === void 0 ? {} : _vm$mouseConfig2;
  var _ref211 = mouseConfig || {}, _ref211$updateInterva = _ref211.updateInterval, updateInterval = _ref211$updateInterva === void 0 ? 10 : _ref211$updateInterva;
  var oldMousemove = document.onmousemove;
  var oldMouseup = document.onmouseup;
  var updateEvent = function updateEvent2(event) {
    event.preventDefault();
    var _getEventTargetNode = getEventTargetNode(event, $el, "tiny-grid-body__column"), flag = _getEventTargetNode.flag, targetElem = _getEventTargetNode.targetElem;
    var args = {
      _vm,
      bodyList,
      cell,
      cellFirstElementChild,
      cellLastElementChild,
      flag
    };
    Object.assign(args, {
      headStart,
      headerList,
      isIndex,
      startCellNode,
      targetElem
    });
    onCellMousedownGridEl(args);
  };
  var updateEventThrot = throttle(updateInterval, false, updateEvent, true);
  document.onmousemove = updateEventThrot;
  document.onmouseup = function() {
    document.onmousemove = oldMousemove;
    document.onmouseup = oldMouseup;
  };
}
function onCellMousedownSelectEditable(args) {
  var _vm = args._vm, actived = args.actived, cell = args.cell, checked = args.checked, column = args.column, editConfig = args.editConfig;
  var event = args.event, isLeftBtn = args.isLeftBtn, mouseConfig = args.mouseConfig, params = args.params, row2 = args.row;
  if (editConfig && (actived.row !== row2 || !(editConfig.mode === "cell" && actived.column === column)) && !(isLeftBtn && mouseConfig.checked) && mouseConfig.selected && editConfig.trigger === "dblclick" && (!checked.rowNodes || !checked.rowNodes.some(function(list) {
    return ~list.indexOf(cell);
  }))) {
    _vm.handleSelected(params, event);
  }
}
function onCellMousedownSelect(_ref212) {
  var _vm = _ref212._vm, editConfig = _ref212.editConfig, event = _ref212.event, mouseConfig = _ref212.mouseConfig, params = _ref212.params;
  if (!editConfig && mouseConfig.selected) {
    _vm.handleSelected(params, event);
  }
}
function onCellMousedownIndexColumn(args) {
  var _vm = args._vm, bodyList = args.bodyList, cell = args.cell, cellLastElementChild = args.cellLastElementChild, event = args.event;
  var headerList = args.headerList, isIndex = args.isIndex, params = args.params, visibleColumn = args.visibleColumn;
  if (isIndex) {
    var firstCell = cell.parentNode.firstElementChild;
    params.columnIndex++;
    params.column = visibleColumn[params.columnIndex];
    params.cell = cell.nextElementSibling;
    _vm.handleSelected(params, event);
    _vm.handleChecked(getRowNodes(bodyList, getCellNodeIndex(firstCell.nextElementSibling), getCellNodeIndex(cellLastElementChild)));
    _vm.handleHeaderChecked([headerList[0].querySelectorAll(".tiny-grid-header__column:not(.col__index)")]);
    _vm.handleIndexChecked(getRowNodes(bodyList, getCellNodeIndex(firstCell), getCellNodeIndex(cell)));
  }
}
function onCellMousedownNotIndexColumn(_ref213) {
  var _vm = _ref213._vm, cell = _ref213.cell, column = _ref213.column, event = _ref213.event, headerList = _ref213.headerList, isIndex = _ref213.isIndex, params = _ref213.params;
  if (!isIndex) {
    var firstCell = cell.parentNode.firstElementChild;
    _vm.handleSelected(params, event);
    _vm.handleHeaderChecked([[headerList[0].querySelector("." + column.id)]]);
    _vm.handleIndexChecked([[firstCell]]);
  }
}
function handleHeaderCellMousedownEvent(_ref214) {
  var $el = _ref214.$el, _vm = _ref214._vm, bodyList = _ref214.bodyList, cell = _ref214.cell, headerList = _ref214.headerList, startCell = _ref214.startCell;
  var oldMousemove = document.onmousemove;
  var oldMouseup = document.onmouseup;
  var updateEvent = function updateEvent2(event) {
    event.preventDefault();
    var _getEventTargetNode2 = getEventTargetNode(event, $el, "tiny-grid-header__column"), flag = _getEventTargetNode2.flag, targetElem = _getEventTargetNode2.targetElem;
    if (!flag) {
      var tmp = getEventTargetNode(event, $el, "tiny-grid-body__column");
      flag = tmp.flag;
      targetElem = tmp.targetElem;
    }
    if (flag && !hasClass(targetElem, "col__index")) {
      var colIndex = [].concat(targetElem.parentNode.children).indexOf(targetElem);
      var lastCell = bodyList[bodyList.length - 1].children[colIndex];
      var headCell = headerList[0].children[colIndex];
      _vm.handleHeaderChecked(getRowNodes(headerList, getCellNodeIndex(headCell), getCellNodeIndex(cell)));
      _vm.handleChecked(getRowNodes(bodyList, getCellNodeIndex(startCell), getCellNodeIndex(lastCell)));
    }
  };
  var updateEventThrot = throttle(80, false, updateEvent, true);
  addClass($el, "tiny-grid-cell__checked");
  document.onmousemove = updateEventThrot;
  document.onmouseup = function() {
    removeClass($el, "tiny-grid-cell__checked");
    document.onmousemove = oldMousemove;
    document.onmouseup = oldMouseup;
  };
}
var removeCellClass = function removeCellClass2(bodyRef, clazz) {
  return arrayEach$1(bodyRef.$el.querySelectorAll("." + clazz), function(elem) {
    return removeClass(elem, clazz);
  });
};
var getCellIndex = function getCellIndex2(_ref215) {
  var cell = _ref215.cell, bodyList = _ref215.bodyList;
  var trElem = cell.parentNode;
  var cIndex = arrayIndexOf(trElem.children, cell);
  var rIndex = arrayIndexOf(bodyList, trElem);
  return {
    rIndex,
    cIndex
  };
};
var getModify = function getModify2(_ref216) {
  var offsetTop = _ref216.offsetTop, offsetLeft = _ref216.offsetLeft, cWidth = _ref216.cWidth, cHeight = _ref216.cHeight;
  var modifyDomStyle = function modifyDomStyle2(dom, styleOptions) {
    return dom && Object.assign(dom.style, styleOptions);
  };
  return function(top, right, bottom, left) {
    modifyDomStyle(top, {
      top: offsetTop + "px",
      left: offsetLeft + "px",
      width: cWidth + "px"
    });
    modifyDomStyle(right, {
      top: offsetTop + "px",
      left: offsetLeft + cWidth + "px",
      height: cHeight + "px"
    });
    modifyDomStyle(bottom, {
      top: offsetTop + cHeight + "px",
      left: offsetLeft + "px",
      width: cWidth + "px"
    });
    modifyDomStyle(left, {
      top: offsetTop + "px",
      left: offsetLeft + "px",
      height: cHeight + "px"
    });
  };
};
var writeClipboardText = function writeClipboardText2(_ref217) {
  var $table = _ref217.$table, columns2 = _ref217.columns, rows = _ref217.rows;
  var _$table$keyboardConfi2 = $table.keyboardConfig, keyboardConfig = _$table$keyboardConfi2 === void 0 ? {} : _$table$keyboardConfi2, isAsyncColumn = $table.isAsyncColumn;
  var _keyboardConfig$clipb = keyboardConfig.clipboard, clipboard = _keyboardConfig$clipb === void 0 ? {} : _keyboardConfig$clipb;
  var writeMethod = clipboard.writeMethod, _clipboard$cellSplit = clipboard.cellSplit, cellSplit = _clipboard$cellSplit === void 0 ? "," : _clipboard$cellSplit, _clipboard$rowSplit = clipboard.rowSplit, rowSplit = _clipboard$rowSplit === void 0 ? ";" : _clipboard$rowSplit;
  var getCellValue2 = function getCellValue22(column, row2) {
    var cellValue = "";
    if (isAsyncColumn) {
      var _format2 = column.format || {};
      if (_format2.async === true && _format2.type === "enum") {
        cellValue = Formatter.enum.call(column, row2[column.property]);
      } else if (_format2.async && typeof _format2.async.fetch === "function") {
        cellValue = row2[$table.getAsyncColumnName(column.property)];
      } else {
        cellValue = row2[column.property];
      }
    } else {
      cellValue = row2[column.property];
    }
    return cellValue || "";
  };
  if (!clipboard)
    return;
  var value;
  if (typeof writeMethod === "function") {
    value = writeMethod({
      $table,
      columns: columns2,
      rows
    });
  } else {
    var rowValues = [];
    rows.forEach(function(row2) {
      var cellValues = [];
      columns2.forEach(function(column) {
        var cellValue = getCellValue2(column, row2);
        cellValues.push(cellValue);
      });
      rowValues.push(cellValues.join(cellSplit));
    });
    value = rowValues.join(rowSplit);
  }
  var writeFallback = function writeFallback2() {
    var input = document.createElement("input");
    input.value = value;
    document.body.appendChild(input);
    input.select();
    document.execCommand("Copy");
    document.body.removeChild(input);
  };
  if (isSecureContext && navigator.clipboard) {
    navigator.clipboard.writeText(value).catch(function(reason) {
      warn("ui.grid.error.clipboardWriteError", reason);
      writeFallback();
    });
  } else {
    writeFallback();
  }
};
var Methods$b = {
  // Tab键移动处理
  moveTabSelected: function moveTabSelected(args, isLeft, event, edit) {
    var editConfig = this.editConfig, hasIndexColumn2 = this.hasIndexColumn, tableData = this.tableData, visibleColumn = this.visibleColumn;
    var params = _extends({}, args);
    var columnIndex = visibleColumn.indexOf(params.column);
    var rowIndex = tableData.indexOf(params.row);
    var _ref218 = {}, targetColumn = _ref218.targetColumn, targetColumnIndex = _ref218.targetColumnIndex, targetRow = _ref218.targetRow, targetRowIndex = _ref218.targetRowIndex;
    event.preventDefault();
    var checkColumn = function checkColumn2(column) {
      return !hasIndexColumn2(column) && (edit ? column.editor : true);
    };
    var args1 = {
      columnIndex,
      checkColumn,
      isLeft,
      tableData,
      rowIndex,
      targetColumn
    };
    Object.assign(args1, {
      targetRowIndex,
      targetColumnIndex,
      targetRow,
      visibleColumn
    });
    var ret = findLeft(args1);
    targetColumn = ret.targetColumn;
    targetColumnIndex = ret.targetColumnIndex;
    targetRow = ret.targetRow;
    targetRowIndex = ret.targetRowIndex;
    args1 = {
      checkColumn,
      columnIndex,
      isLeft,
      rowIndex,
      tableData,
      targetColumn
    };
    Object.assign(args1, {
      targetColumnIndex,
      targetRow,
      targetRowIndex,
      visibleColumn
    });
    ret = findRight(args1);
    targetColumn = ret.targetColumn;
    targetColumnIndex = ret.targetColumnIndex;
    targetRow = ret.targetRow;
    targetRowIndex = ret.targetRowIndex;
    args1 = {
      _vm: this,
      args,
      edit,
      editConfig,
      event,
      isLeft,
      params,
      rowIndex
    };
    Object.assign(args1, {
      targetColumn,
      targetColumnIndex,
      targetRow,
      targetRowIndex
    });
    processTarget(args1);
  },
  // 当前行方向键移动处理
  moveCurrentRow: function moveCurrentRow(isUpArrow, isDwArrow, event) {
    var _this74 = this;
    var afterFullData = this.afterFullData, currentRow = this.currentRow, treeConfig = this.treeConfig;
    var targetRow;
    event.preventDefault();
    if (treeConfig) {
      var _findTree2 = findTree(afterFullData, function(row2) {
        return row2 === currentRow;
      }, treeConfig), curIndex = _findTree2.index, neighbors = _findTree2.items;
      if (isUpArrow && curIndex > 0) {
        targetRow = neighbors[curIndex - 1];
      } else if (isDwArrow && curIndex < neighbors.length - 1) {
        targetRow = neighbors[curIndex + 1];
      }
    } else {
      var _curIndex = afterFullData.indexOf(currentRow);
      if (isUpArrow && _curIndex > 0) {
        targetRow = afterFullData[_curIndex - 1];
      } else if (isDwArrow && _curIndex < afterFullData.length - 1) {
        targetRow = afterFullData[_curIndex + 1];
      }
    }
    if (targetRow) {
      this.scrollToRow(targetRow).then(function() {
        return _this74.triggerCurrentRowEvent(event, {
          $table: _this74,
          row: targetRow
        });
      });
    }
  },
  // 可编辑方向键移动处理
  moveSelected: function moveSelected(_ref219) {
    var _this75 = this;
    var args = _ref219.args, isLeftArrow = _ref219.isLeftArrow, isUpArrow = _ref219.isUpArrow, isRightArrow = _ref219.isRightArrow, isDownArrow = _ref219.isDownArrow, event = _ref219.event;
    var hasIndexColumn2 = this.hasIndexColumn, visibleColumn = this.tableColumn, tableData = this.tableFullData;
    var params = _extends({}, args);
    var column = params.column;
    var columnIndex = visibleColumn.indexOf(column);
    event.preventDefault();
    if (isUpArrow && params.rowIndex) {
      params.row = tableData[--params.rowIndex];
    } else if (isDownArrow && params.rowIndex < tableData.length - 1) {
      params.row = tableData[++params.rowIndex];
    } else if (isLeftArrow && columnIndex) {
      for (var pos = columnIndex - 1; pos >= 0; pos--) {
        if (!hasIndexColumn2(visibleColumn[pos])) {
          params.columnIndex = pos;
          params.column = visibleColumn[pos];
          break;
        }
      }
    } else if (isRightArrow) {
      for (var _pos = columnIndex + 1; _pos < visibleColumn.length; _pos++) {
        if (!hasIndexColumn2(visibleColumn[_pos])) {
          params.columnIndex = _pos;
          params.column = visibleColumn[_pos];
          break;
        }
      }
    }
    getCell(this, params).then(function(resCell) {
      params.cell = resCell;
      _this75.handleSelected(params, event);
      _this75.scrollToRow(params.row, params.column, false, {
        isLeftArrow,
        isRightArrow,
        from: column
      });
    });
  },
  // 表头按下事件
  triggerHeaderCellMousedownEvent: function triggerHeaderCellMousedownEvent(event, params) {
    var _this76 = this;
    var $el = this.$el, elemStore = this.elemStore, _this$mouseConfig5 = this.mouseConfig, mouseConfig = _this$mouseConfig5 === void 0 ? {} : _this$mouseConfig5, tableData = this.tableData;
    var headerList = elemStore["main-header-list"].children;
    var bodyList = elemStore["main-body-list"].children;
    var cell = params.cell;
    var column = params.column;
    var isIndex = column.type === "index";
    var startCell = bodyList[0].querySelector("." + column.id);
    var button = event.button;
    var isLeftBtn = button === 0;
    if (!isLeftBtn || !mouseConfig.checked) {
      return;
    }
    if (isIndex) {
      this.handleAllChecked(event);
      this.closeMenu();
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    this.clearSelected(event);
    this.clearHeaderChecked();
    this.clearIndexChecked();
    handleHeaderCellMousedownEvent({
      $el,
      _vm: this,
      bodyList,
      cell,
      headerList,
      startCell
    });
    this.handleHeaderChecked([[cell]]);
    if (!bodyList.length) {
      this.closeMenu();
      return;
    }
    var firstTr = bodyList[0];
    var lastTr = bodyList[bodyList.length - 1];
    var firstCell = firstTr.querySelector(".col__index");
    var lastCell = lastTr.querySelector("." + column.id);
    params.rowIndex = 0;
    params.row = tableData[0];
    getCell(this, params).then(function(cellRes) {
      params.cell = cellRes;
      _this76.handleSelected(params, event);
      var rowNodes = getRowNodes(bodyList, getCellNodeIndex(firstCell), getCellNodeIndex(lastTr.querySelector(".col__index")));
      _this76.handleIndexChecked(rowNodes);
      _this76.handleChecked(getRowNodes(bodyList, getCellNodeIndex(startCell), getCellNodeIndex(lastCell)));
    });
    this.closeMenu();
  },
  // 单元格按下事件
  triggerCellMousedownEvent: function triggerCellMousedownEvent(event, params) {
    var $el = this.$el, editConfig = this.editConfig, editStore = this.editStore, elemStore = this.elemStore, _this$mouseConfig6 = this.mouseConfig, mouseConfig = _this$mouseConfig6 === void 0 ? {} : _this$mouseConfig6, visibleColumn = this.visibleColumn;
    var actived = editStore.actived, checked = editStore.checked;
    var button = event.button;
    var cell = params.cell, column = params.column, row2 = params.row;
    var isLeftBtn = button === 0;
    var args;
    if (editConfig && (actived.row !== row2 || !(editConfig.mode === "cell" && actived.column === column)) && isLeftBtn && mouseConfig.checked) {
      event.preventDefault();
      event.stopPropagation();
      this.clearHeaderChecked();
      this.clearIndexChecked();
      var isIndex = column.type === "index";
      var startCellNode = getCellNodeIndex(cell);
      var headerList = elemStore["main-header-list"].children;
      var bodyList = elemStore["main-body-list"].children;
      var cellFirstElementChild = cell.parentNode.firstElementChild;
      var cellLastElementChild = cell.parentNode.lastElementChild;
      var colIndex = Array.from(cell.parentNode.children).indexOf(cell);
      var headStart = headerList[0].children[colIndex];
      args = {
        $el,
        _vm: this,
        bodyList,
        cell,
        cellFirstElementChild
      };
      Object.assign(args, {
        cellLastElementChild,
        headStart,
        headerList,
        isIndex,
        startCellNode
      });
      handleCellMousedownEvent(args);
      args = {
        _vm: this,
        bodyList,
        cell,
        cellLastElementChild
      };
      Object.assign(args, {
        event,
        headerList,
        isIndex,
        params,
        visibleColumn
      });
      onCellMousedownIndexColumn(args);
      onCellMousedownNotIndexColumn({
        _vm: this,
        cell,
        column,
        event,
        headerList,
        isIndex,
        params
      });
      this.closeFilter();
      this.closeMenu();
    }
    args = {
      _vm: this,
      actived,
      cell,
      checked,
      column,
      editConfig
    };
    Object.assign(args, {
      event,
      isLeftBtn,
      mouseConfig,
      params,
      row: row2
    });
    onCellMousedownSelectEditable(args);
    onCellMousedownSelect({
      _vm: this,
      editConfig,
      event,
      mouseConfig,
      params
    });
  },
  // 清除所选中源状态
  _clearSelected: function _clearSelected(keep) {
    var selected = this.editStore.selected, elemStore = this.elemStore;
    if (!keep) {
      selected.row = null;
      selected.column = null;
    }
    var bodyElem = elemStore["main-body-list"];
    var headerElem = elemStore["main-header-list"];
    if (bodyElem) {
      var elem = bodyElem.querySelector(".col__selected");
      removeClass(elem, "col__selected");
    }
    if (headerElem) {
      arrayEach$1(headerElem.querySelectorAll(".col__title-selected"), function(elem2) {
        return removeClass(elem2, "col__title-selected");
      });
    }
    return this.$nextTick();
  },
  // 清除所有选中状态
  _clearChecked: function _clearChecked() {
    var $refs = this.$refs, editStore = this.editStore, mouseConfig = this.mouseConfig;
    var checked = editStore.checked;
    if (!mouseConfig || !mouseConfig.checked) {
      return this.$nextTick();
    }
    Object.assign(checked, {
      columns: [],
      rows: [],
      tColumns: [],
      tRows: [],
      rowNodes: []
    });
    var tableBody = $refs.tableBody;
    tableBody.$refs.checkBorders.style.display = "none";
    removeCellClass(tableBody, "col__checked");
    return this.$nextTick();
  },
  _getMouseCheckeds: function _getMouseCheckeds() {
    var _this77 = this;
    var _this$editStore$check = this.editStore.checked.rowNodes, rowNodes = _this$editStore$check === void 0 ? [] : _this$editStore$check;
    var _ref220 = {}, _ref220$rows = _ref220.rows, rows = _ref220$rows === void 0 ? [] : _ref220$rows, _ref220$columns = _ref220.columns, columns2 = _ref220$columns === void 0 ? [] : _ref220$columns;
    var res = {
      rows,
      columns: columns2,
      rowNodes
    };
    if (rowNodes && rowNodes.length) {
      res.rows = rowNodes.map(function(arr) {
        return _this77.getRowNode(arr[0].parentNode).item;
      });
      res.columns = rowNodes[0].map(function(col) {
        return _this77.getColumnNode(col).item;
      });
    }
    return res;
  },
  _getMouseSelecteds: function _getMouseSelecteds() {
    var _this$editStore$selec = this.editStore.selected, args = _this$editStore$selec.args, column = _this$editStore$selec.column;
    if (!args || !column) {
      return null;
    }
    return extend(true, {}, args);
  },
  // 处理所有选中
  handleChecked: function handleChecked(rowNodes) {
    var $refs = this.$refs, mouseConfig = this.mouseConfig;
    if (!mouseConfig || !mouseConfig.checked) {
      return;
    }
    var _ref221 = {}, cHeight = _ref221.cHeight, cWidth = _ref221.cWidth, offsetLeft = _ref221.offsetLeft, offsetTop = _ref221.offsetTop;
    cWidth = cHeight = -2;
    offsetTop = offsetLeft = 0;
    this.clearChecked();
    arrayEach$1(rowNodes, function(rowNode, rowIndex) {
      arrayEach$1(rowNode, function(colNode, colIndex) {
        var firstRow = rowIndex === 0;
        var firstCol = colIndex === 0;
        if (firstRow) {
          if (firstCol) {
            offsetTop = colNode.offsetTop;
            offsetLeft = colNode.offsetLeft;
          }
          cWidth += colNode.offsetWidth;
        }
        if (firstCol) {
          cHeight += colNode.offsetHeight;
        }
        addClass(colNode, "col__checked");
      });
    });
    var modify = getModify({
      offsetTop,
      offsetLeft,
      cWidth,
      cHeight
    });
    var tableBody = $refs.tableBody;
    var _tableBody$$refs = tableBody.$refs, checkBorders = _tableBody$$refs.checkBorders, checkTop = _tableBody$$refs.checkTop, checkRight = _tableBody$$refs.checkRight, checkBottom = _tableBody$$refs.checkBottom, checkLeft = _tableBody$$refs.checkLeft;
    checkBorders.style.display = "none";
    modify(checkTop, checkRight, checkBottom, checkLeft);
    checkBorders.style.display = "block";
    this.editStore.checked.rowNodes = rowNodes;
  },
  handleAllChecked: function handleAllChecked(event) {
    var _this78 = this;
    var elemStore = this.elemStore, _this$mouseConfig7 = this.mouseConfig, mouseConfig = _this$mouseConfig7 === void 0 ? {} : _this$mouseConfig7, tableData = this.tableData, visibleColumn = this.visibleColumn;
    if (!mouseConfig.checked) {
      return;
    }
    event.preventDefault();
    var column = find(visibleColumn, function(col) {
      return col.type === "index";
    }) || visibleColumn[0];
    var selectorColumnId = "." + column.id;
    var headerListElem = elemStore["main-header-list"];
    var headerList = headerListElem.children;
    var cell = headerListElem.querySelector(selectorColumnId);
    var bodyList = elemStore["main-body-list"].children;
    var firstTrElem = bodyList[0];
    var firstCell = firstTrElem.querySelector(selectorColumnId);
    var lastTrElem = bodyList[bodyList.length - 1];
    var params = {
      $table: this,
      rowIndex: 0,
      row: tableData[0]
    };
    params.column = find(visibleColumn, function(col) {
      return col.property;
    });
    params.columnIndex = this.getColumnIndex(params.column);
    getCell(this, params).then(function(resCell) {
      params.cell = resCell;
      _this78.handleSelected(params, event);
      _this78.handleHeaderChecked(getRowNodes(headerList, getCellNodeIndex(cell.nextElementSibling), getCellNodeIndex(cell.parentNode.lastElementChild)));
      _this78.handleIndexChecked(getRowNodes(bodyList, getCellNodeIndex(firstCell), getCellNodeIndex(lastTrElem.querySelector(selectorColumnId))));
      _this78.handleChecked(getRowNodes(bodyList, getCellNodeIndex(firstCell.nextElementSibling), getCellNodeIndex(lastTrElem.lastElementChild)));
    });
  },
  handleIndexChecked: function handleIndexChecked(rowNodes) {
    this.clearIndexChecked();
    arrayEach$1(rowNodes, function(rowNode) {
      arrayEach$1(rowNode, function(colNode) {
        addClass(colNode, "col__index-checked");
      });
    });
    this.editStore.indexs.rowNodes = rowNodes;
  },
  _clearIndexChecked: function _clearIndexChecked() {
    var indexCheckeds = this.elemStore["main-body-list"].querySelectorAll(".col__index-checked");
    var eachHandler = function eachHandler2(colNode) {
      return removeClass(colNode, "col__index-checked");
    };
    arrayEach$1(indexCheckeds, eachHandler);
    Object.assign(this.editStore.indexs, {
      rowNodes: []
    });
    return this.$nextTick();
  },
  handleHeaderChecked: function handleHeaderChecked(rowNodes) {
    this.clearHeaderChecked();
    arrayEach$1(rowNodes, function(rowNode) {
      arrayEach$1(rowNode, function(colNode) {
        addClass(colNode, "col__title-checked");
      });
    });
    this.editStore.titles.rowNodes = rowNodes;
  },
  _clearHeaderChecked: function _clearHeaderChecked() {
    var headerElem = this.elemStore["main-header-list"];
    if (headerElem) {
      var eachHandler = function eachHandler2(colNode) {
        return removeClass(colNode, "col__title-checked");
      };
      arrayEach$1(headerElem.querySelectorAll(".col__title-checked"), eachHandler);
    }
    return this.$nextTick();
  },
  // 清空已复制的内容
  _clearCopyed: function _clearCopyed() {
    var $refs = this.$refs, editStore = this.editStore, keyboardConfig = this.keyboardConfig;
    var editStoreCopyed = editStore.copyed;
    if (!keyboardConfig || !keyboardConfig.isCut)
      return this.$nextTick();
    var tableBody = $refs.tableBody;
    editStoreCopyed.cut = false;
    editStoreCopyed.rows = [];
    editStoreCopyed.columns = [];
    tableBody.$refs.copyBorders.style.display = "none";
    removeCellClass(tableBody, "col__copyed");
    return this.$nextTick();
  },
  // 处理复制
  handleCopyed: function handleCopyed(cut) {
    var editStore = this.editStore, tableColumn3 = this.tableColumn, tableData = this.tableData;
    var copyed = editStore.copyed;
    var rowNodes = editStore.checked.rowNodes;
    var _ref222 = {}, cHeight = _ref222.cHeight, cWidth = _ref222.cWidth, offsetLeft = _ref222.offsetLeft, offsetTop = _ref222.offsetTop, _ref222$rows = _ref222.rows, rows = _ref222$rows === void 0 ? [] : _ref222$rows, _ref222$columns = _ref222.columns, columns2 = _ref222$columns === void 0 ? [] : _ref222$columns;
    cWidth = cHeight = -3;
    offsetTop = offsetLeft = 0;
    this.clearCopyed();
    if (!rowNodes)
      return;
    if (rowNodes.length) {
      var firstRows = rowNodes[0];
      var firstCell = firstRows[0];
      var firstRowsLength = firstRows.length;
      var _getCellNodeIndex = getCellNodeIndex(firstCell), rowIndex = _getCellNodeIndex.rowIndex, columnIndex = _getCellNodeIndex.columnIndex;
      columns2 = tableColumn3.slice(columnIndex, columnIndex + firstRowsLength);
      rows = tableData.slice(rowIndex, rowIndex + rowNodes.length);
      writeClipboardText({
        $table: this,
        columns: columns2,
        rows
      });
    }
    arrayEach$1(rowNodes, function(rowNode, rowIndex2) {
      arrayEach$1(rowNode, function(colNode, colIndex) {
        var isTop = rowIndex2 === 0;
        var isLeft = colIndex === 0;
        if (isTop) {
          if (isLeft) {
            offsetTop = colNode.offsetTop;
            offsetLeft = colNode.offsetLeft;
          }
          cWidth += colNode.offsetWidth;
        }
        if (isLeft) {
          cHeight += colNode.offsetHeight;
        }
        addClass(colNode, "col__copyed");
      });
    });
    var modify = getModify({
      offsetTop,
      offsetLeft,
      cWidth,
      cHeight
    });
    var tableBody = this.$refs.tableBody;
    var _tableBody$$refs2 = tableBody.$refs, copyBorders = _tableBody$$refs2.copyBorders, copyTop = _tableBody$$refs2.copyTop, copyRight = _tableBody$$refs2.copyRight, copyBottom = _tableBody$$refs2.copyBottom, copyLeft = _tableBody$$refs2.copyLeft;
    modify(copyTop, copyRight, copyBottom, copyLeft);
    copyBorders.style.display = "block";
    copyed.cut = cut;
    copyed.columns = columns2;
    copyed.rows = rows;
    copyed.rowNodes = rowNodes;
  },
  // 处理粘贴
  handlePaste: function handlePaste() {
    var editStore = this.editStore, elemStore = this.elemStore, tableData = this.tableData, visibleColumn = this.visibleColumn;
    var copyed = editStore.copyed, selected = editStore.selected;
    var columns2 = copyed.columns, cut = copyed.cut, rows = copyed.rows;
    if (!rows.length || !columns2.length || !selected.row || !selected.column)
      return;
    var _selected$args = selected.args, columnIndex = _selected$args.columnIndex, rowIndex = _selected$args.rowIndex;
    arrayEach$1(rows, function(row2, rIndex2) {
      var targetRow = tableData[rowIndex + rIndex2];
      if (targetRow) {
        arrayEach$1(columns2, function(column, cIndex2) {
          var targetColumn = visibleColumn[columnIndex + cIndex2];
          targetColumn && setCellValue(targetRow, targetColumn, getCellValue(row2, column));
          cut && setCellValue(row2, column, null);
        });
      }
    });
    cut && this.clearCopyed();
    var cell = selected.args.cell;
    var bodyList = elemStore["main-body-list"].children;
    var _getCellIndex = getCellIndex({
      cell,
      elemStore,
      bodyList
    }), rIndex = _getCellIndex.rIndex, cIndex = _getCellIndex.cIndex;
    var maxIndex = bodyList.length - 1;
    var curIndex = rIndex + rows.length - 1;
    var targetTrElem = bodyList[curIndex > maxIndex ? maxIndex : curIndex];
    maxIndex = targetTrElem.children.length - 1;
    curIndex = cIndex + columns2.length - 1;
    var targetCell = targetTrElem.children[curIndex > maxIndex ? maxIndex : curIndex];
    var targetCellNode = getCellNodeIndex(targetCell);
    var cellNode = getCellNodeIndex(cell);
    var rowNodes = getRowNodes(bodyList, cellNode, targetCellNode);
    this.handleChecked(rowNodes);
  },
  handleClearMouseChecked: function handleClearMouseChecked(event) {
    var $grid = this.$grid, $refs = this.$refs, autoClearMouseChecked = this.autoClearMouseChecked, autoClearKeyboardCopy = this.autoClearKeyboardCopy;
    var tableWrapper = $refs.tableWrapper, tooltip = $refs.tooltip, validTip = $refs.validTip;
    var equalOrContain = function equalOrContain2(elm, target) {
      return elm && (elm === target || elm.contains(target));
    };
    if (!equalOrContain($grid.$el, event.target) && !equalOrContain(tableWrapper, event.target) && !equalOrContain(tooltip && tooltip.state.popperElm, event.target) && !equalOrContain(validTip && validTip.state.popperElm, event.target)) {
      if (autoClearMouseChecked) {
        this.clearChecked();
        this.clearSelected();
      }
      if (autoClearKeyboardCopy) {
        this.clearCopyed();
      }
    }
  }
};
var Keyboard = {
  install: function install3(Table2) {
    GridAdapter._keyboard = 1;
    Object.assign(Table2.methods, Methods$b);
  }
};
function adjustParams(rows, cb, vaildDatas) {
  if (rows) {
    if (isFunction(rows)) {
      cb = rows;
    } else {
      vaildDatas = isArray(rows) ? rows : [rows];
    }
  }
  return {
    cb,
    vaildDatas
  };
}
var columnHandler = function columnHandler2(_ref223) {
  var _vm = _ref223._vm, colValidPromiseArr = _ref223.colValidPromiseArr, editRules = _ref223.editRules, isAll = _ref223.isAll, row2 = _ref223.row, validRest = _ref223.validRest;
  return function(column, columnIndex) {
    if (has(editRules, column.property)) {
      colValidPromiseArr.push(new Promise(function(resolve, reject) {
        _vm.validCellRules("all", row2, column).then(resolve).catch(function(_ref224) {
          var rule = _ref224.rule, rules = _ref224.rules;
          var rowIndex = _vm.getRowIndex(row2);
          var rest = {
            rule,
            rules,
            rowIndex,
            row: row2,
            columnIndex,
            column,
            $table: _vm
          };
          if (isAll) {
            if (!validRest[column.property]) {
              validRest[column.property] = [];
            }
            validRest[column.property].push(rest);
            resolve();
          }
          reject(rest);
        });
      }));
    }
  };
};
function validTree(_ref225) {
  var treeConfig = _ref225.treeConfig, handleVaild = _ref225.handleVaild, hasTreeExpand2 = _ref225.hasTreeExpand, vaildDatas = _ref225.vaildDatas, treeOpts = _ref225.treeOpts;
  if (treeConfig.validHidden === false) {
    var _recurValid = function recurValid(row2) {
      var children = row2[treeConfig.children || "children"];
      handleVaild(row2);
      if (hasTreeExpand2(row2) && children && children.length) {
        children.forEach(_recurValid);
      }
    };
    vaildDatas.forEach(_recurValid);
  } else {
    eachTree(vaildDatas, handleVaild, treeOpts);
  }
}
var realValid = function realValid2(_ref226) {
  var _vm = _ref226._vm, editRules = _ref226.editRules, isAll = _ref226.isAll, validRest = _ref226.validRest, treeConfig = _ref226.treeConfig, hasTreeExpand2 = _ref226.hasTreeExpand, vaildDatas = _ref226.vaildDatas, treeOpts = _ref226.treeOpts;
  var rowValids = [];
  var columns2 = _vm.getColumns();
  var handleVaild = function handleVaild2(row2) {
    var colValidPromiseArr = [];
    columns2.forEach(columnHandler({
      _vm,
      colValidPromiseArr,
      editRules,
      isAll,
      row: row2,
      validRest
    }));
    rowValids.push(Promise.all(colValidPromiseArr));
  };
  if (treeConfig) {
    validTree({
      treeConfig,
      handleVaild,
      hasTreeExpand: hasTreeExpand2,
      vaildDatas,
      treeOpts
    });
  } else {
    vaildDatas.forEach(handleVaild);
  }
  return rowValids;
};
var Rule = /* @__PURE__ */ function() {
  function Rule2(rule) {
    Object.assign(this, {
      $options: rule,
      max: rule.min,
      maxWidth: rule.maxWidth,
      min: rule.min,
      pattern: rule.pattern,
      required: rule.required,
      trigger: rule.trigger,
      type: rule.type,
      validator: rule.validator
    });
  }
  return _createClass(Rule2, [{
    key: "message",
    get: function get2() {
      return getFuncText(this.$options.message);
    }
  }]);
}();
var onRejected = function onRejected2(opt, _this) {
  var isAll = opt.isAll, validRest = opt.validRest, cb = opt.cb, afterFullData = opt.afterFullData, treeConfig = opt.treeConfig;
  return function(params) {
    var _ref227;
    var args = isAll ? validRest : (_ref227 = {}, _ref227[params.column.property] = params, _ref227);
    var funcFinish = function funcFinish2(args2, reject, resolve) {
      return function() {
        opt.status = false;
        cb && cb(opt.status, args2);
        cb ? resolve() : reject(args2);
      };
    };
    var funcPosAndFinish = function funcPosAndFinish2(params2, finish) {
      return /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1)
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!_this.scrollXLoad) {
                  _context2.next = 3;
                  break;
                }
                _context2.next = 3;
                return _this.scrollToColumn(params2.column, true);
              case 3:
                return _context2.abrupt("return", getCell(_this, params2).then(function(activeCell) {
                  params2.cell = activeCell;
                  _this.handleValidError(params2);
                  finish();
                }));
              case 4:
              case "end":
                return _context2.stop();
            }
        }, _callee2);
      }));
    };
    var getLocatRow = function getLocatRow2(params2) {
      var row2 = params2.row;
      var rowIndex = afterFullData.indexOf(row2);
      return rowIndex > 0 ? afterFullData[rowIndex - 1] : row2;
    };
    return new Promise(function(resolve, reject) {
      var finish = funcFinish(args, reject, resolve);
      var posAndFinish = funcPosAndFinish(params, finish);
      var locatRow = getLocatRow(params);
      var isAutoPosFalse = _this.validOpts.autoPos === false;
      isAutoPosFalse && finish();
      !isAutoPosFalse && treeConfig && _this.scrollToTreeRow(locatRow).then(posAndFinish);
      !isAutoPosFalse && !treeConfig && _this.scrollToRow(locatRow, params.column, true).then(posAndFinish);
    });
  };
};
var Methods$a = {
  // 对表格数据进行校验
  _validate: function _validate(rows, cb) {
    return this.beginValidate(rows, cb);
  },
  // 与validate一致行为，区别就是会校验所有并返回所有不通过的列
  _fullValidate: function _fullValidate(rows, cb) {
    return this.beginValidate(rows, cb, true);
  },
  // 聚焦到校验通过的单元格并弹出校验错误提示
  handleValidError: function handleValidError(params) {
    var _this79 = this;
    var event = {
      type: "valid-error",
      trigger: "call"
    };
    this.handleActived(params, event).then(function() {
      return _this79.showValidTooltip(params);
    });
  },
  validatePromise: function validatePromise(row2, column, columnIndex, isAll, validRest) {
    var _this80 = this;
    function onrejected(_ref229) {
      var _vm = _ref229._vm, reject = _ref229.reject, resolve = _ref229.resolve;
      return function(_ref230) {
        var rule = _ref230.rule, rules = _ref230.rules;
        var rest = {
          $table: _vm,
          column,
          columnIndex,
          row: row2,
          rule,
          rules
        };
        rest.rowIndex = _vm.getRowIndex(row2);
        if (!isAll) {
          return reject(rest);
        }
        validRest[column.property] = validRest[column.property] || [];
        validRest[column.property].push(rest);
        return resolve();
      };
    }
    return new Promise(function(resolve, reject) {
      _this80.validCellRules("all", row2, column).then(resolve).catch(onrejected({
        _vm: _this80,
        reject,
        resolve
      }));
    });
  },
  /**
   * 对表格数据进行校验
   * 如果传 row 指定行记录，则只验证传入的行
   * 如果传 rows 为多行记录，则只验证传入的行
   * 如果只传 callback 否则默认验证整个表格数据
   * isAll: 是否全量校验，如果为true会校验所有并返回所有不通过的列
   * 返回 Promise 对象，或者使用回调方式
   */
  beginValidate: function beginValidate(rows, callback, isAll) {
    var afterFullData = this.afterFullData, editRules = this.editRules, hasTreeExpand2 = this.hasTreeExpand, treeConfig = this.treeConfig, treeOpts = this.treeOpts;
    var _ref231 = {}, _ref231$status = _ref231.status, status = _ref231$status === void 0 ? true : _ref231$status, _ref231$validRest = _ref231.validRest, validRest = _ref231$validRest === void 0 ? {} : _ref231$validRest;
    var _adjustParams = adjustParams(rows, callback, afterFullData), vaildDatas = _adjustParams.vaildDatas, cb = _adjustParams.cb;
    var opt = {
      isAll,
      validRest,
      cb,
      afterFullData,
      treeConfig,
      status
    };
    this.lastCallTime = Date.now();
    this.clearValidate();
    if (!editRules) {
      if (cb) {
        cb(opt.status);
      }
      return Promise.resolve(opt.status);
    }
    var validParams = {
      _vm: this,
      editRules,
      isAll,
      validRest,
      treeConfig,
      hasTreeExpand: hasTreeExpand2,
      vaildDatas,
      treeOpts
    };
    var rowValids = realValid(validParams);
    var onFulfilled = function onFulfilled2() {
      var ruleKeys = Object.keys(validRest);
      if (ruleKeys.length) {
        return Promise.reject(validRest[ruleKeys[0]][0]);
      }
      cb && cb(opt.status);
    };
    return Promise.all(rowValids).then(onFulfilled).catch(onRejected(opt, this));
  },
  hasCellRules: function hasCellRules(type, row2, _ref232) {
    var property = _ref232.property;
    if (!property || !this.editRules) {
      return false;
    }
    var rules = get(this.editRules, property);
    var handler6 = function handler7(rule) {
      return type === "all" || !rule.trigger || type === rule.trigger;
    };
    rules = !Array.isArray(rules) && (isObject(rules) || isFunction(rules)) ? [rules] : rules;
    return rules && find(rules, handler6);
  },
  /**
   * 校验数据：
   * 按表格行顺序、列顺序依次校验（同步或异步）；
   * 根据校验规则的索引顺序依次校验，如果是异步则会等待校验完成才会继续校验下一列；
   * 如果校验失败，则触发回调或者Promise，结果返回一个Boolean值；
   * 如果是传回调方式这返回一个Boolean值和校验不通过列的错误消息；
   *
   * rule 配置：
   *  required为Boolean表示是否必填；
   *  max为Number表示最大长度；
   *  min为Number表示最小长度；
   *  validator为Function(rule, value, callback, {rules, row, column, rowIndex, columnIndex})进行自定义校验；
   *  trigger为blur|change表示触发方式（默认为空就行，除非特殊场景）；
   *  @param {'change' | 'all'} type 校验单元格的触发方式
   *  @param { IRow }  row 表格的行数据
   *  @param { IColumnConfig }  column 表格的行数据
   *  @param { any }  defaultValue 需要校验的默认值
   */
  validCellRules: function validCellRules(type, row2, column, defaultValue) {
    var _this81 = this;
    var editRules = this.editRules, rowId = this.rowId;
    var property = column.property;
    var _ref233 = {}, _ref233$descriptor = _ref233.descriptor, descriptor = _ref233$descriptor === void 0 ? {} : _ref233$descriptor, _ref233$model = _ref233.model, model = _ref233$model === void 0 ? {} : _ref233$model;
    if (property && editRules) {
      var rules = get(editRules, property);
      var cellValue = isUndefined(defaultValue) ? get(row2, property) : defaultValue;
      if (Array.isArray(rules)) {
        rules.forEach(function(rule, index2) {
          model[property + index2] = cellValue;
          descriptor[property + index2] = rule;
        });
      } else {
        model[property] = cellValue;
        descriptor[property] = rules;
      }
    }
    var _descriptor = extend(true, {}, descriptor);
    var validator = new Validator$1(_descriptor, t);
    var executor = function executor2(resolve, reject) {
      var validArgs = {
        firstFields: true,
        first: true,
        custom: {
          row: row2,
          column
        }
      };
      var onRejected3 = function onRejected32(_ref234) {
        var fields = _ref234.fields;
        var cellErrors = Object.keys(fields).map(function(prop) {
          var rules2 = _descriptor[prop];
          _descriptor[prop] = !rules2.message ? Object.assign(rules2, {
            message: fields[prop][0].message
          }) : rules2;
          return new Rule(_descriptor[prop]);
        });
        reject({
          rules: cellErrors,
          rule: cellErrors[0]
        });
      };
      validator.validate(model, validArgs).then(resolve).catch(onRejected3);
    };
    var onFulfilled = function onFulfilled2() {
      _this81.validatedMap[column.id + "-" + row2[rowId]] = false;
      return Promise.resolve();
    };
    var onRejected22 = function onRejected23(errors) {
      _this81.validatedMap[column.id + "-" + row2[rowId]] = true;
      return Promise.reject(errors);
    };
    return new Promise(executor).then(onFulfilled).catch(onRejected22);
  },
  _clearValidate: function _clearValidate() {
    Object.assign(this.validStore, {
      column: null,
      content: "",
      isArrow: false,
      row: null,
      rule: null,
      visible: false
    });
    this.clostValidTooltip(void 0);
    return this.$nextTick();
  },
  // 触发校验
  triggerValidate: function triggerValidate(type) {
    var _this82 = this;
    var editConfig = this.editConfig, editRules = this.editRules, editStore = this.editStore, validStore = this.validStore;
    var actived = editStore.actived;
    if (!actived.row || !editRules) {
      return Promise.resolve();
    }
    var _actived$args = actived.args, cell = _actived$args.cell, column = _actived$args.column, row2 = _actived$args.row;
    if (!this.hasCellRules(type, row2, column)) {
      return Promise.resolve();
    }
    var onfulfilled = function onfulfilled2() {
      editConfig.mode === "row" && validStore.visible && validStore.row === row2 && validStore.column === column && _this82.clearValidate();
    };
    var onrejected = function onrejected2(_ref235) {
      var rule = _ref235.rule;
      if (rule.trigger && type !== rule.trigger) {
        return Promise.resolve();
      }
      var rest = {
        cell,
        column,
        row: row2,
        rule
      };
      _this82.showValidTooltip(rest);
      return Promise.reject(rest);
    };
    return this.validCellRules(type, row2, column).then(onfulfilled).catch(onrejected);
  },
  // 弹出校验错误提示
  showValidTooltip: function showValidTooltip(params) {
    var _this83 = this;
    var $refs = this.$refs, height2 = this.height, tableData = this.tableData, validOpts2 = this.validOpts;
    var cell = params.cell, column = params.column, row2 = params.row, rule = params.rule;
    var content = rule.message;
    var validTip = $refs.validTip;
    var isMessageTooltip = validOpts2.isMessageTooltip, isMessageDefault = validOpts2.isMessageDefault, isMessageInline = validOpts2.isMessageInline;
    var showMsg = isMessageTooltip || isMessageDefault && !height2 && tableData.length < 2;
    this.$nextTick(function() {
      Object.assign(_this83.validStore, {
        row: row2,
        column,
        rule,
        content,
        visible: true
      });
      if (validTip && showMsg) {
        _this83.clostValidTooltip();
        _this83.validTipContent = content;
        validTip.state.referenceElm = cell;
        validTip.$refs.popper && (validTip.$refs.popper.style.display = "none");
        validTip.doDestroy();
        validTip.setExpectedState(true);
        _this83.activateTooltipValid(validTip);
      } else if (isMessageInline) {
        _this83.$nextTick(function() {
          return _this83.recalculate();
        });
      }
      _emitEvent(_this83, "valid-error", [params]);
    });
  },
  // 关闭 validTip
  clostValidTooltip: function clostValidTooltip() {
    var validTip = this.$refs.validTip;
    if (validTip) {
      validTip.setExpectedState(false);
      validTip.handleClosePopper();
    }
    return this.$nextTick();
  }
};
var Validator = {
  install: function install4(Table2) {
    GridAdapter._valid = 1;
    Object.assign(Table2.methods, Methods$a);
  }
};
var Methods$9 = {
  bindResize: function bindResize() {
    var _this84 = this;
    var resizeObserver = new Resize$1(function() {
      _this84.updateParentHeight();
      _this84.updateTableBodyHeight();
      _this84.recalculate();
    }, GlobalConfig$2.resizeInterval);
    var parentElem = this.getParentElem();
    parentElem && resizeObserver.observe(parentElem);
    this.$resize = resizeObserver;
  },
  unbindResize: function unbindResize() {
    var $resize = this.$resize;
    if ($resize) {
      $resize.disconnect();
    }
  }
};
var Resize = {
  install: function install5(Table2) {
    GridAdapter._resize = 1;
    Object.assign(Table2.methods, Methods$9);
  }
};
var Methods$8 = {
  /**
   * 初始化fetch-data配置项
   * @returns {object}
   */
  initFetchOption: function initFetchOption() {
    var _this$fetchData = this.fetchData, fetchData = _this$fetchData === void 0 ? {} : _this$fetchData, _this$dataset = this.dataset, dataset = _this$dataset === void 0 ? {} : _this$dataset;
    if (fetchData.api || dataset.source || dataset.value || dataset.api) {
      var _ref236 = fetchData || dataset.source || dataset.api || {}, loading = _ref236.loading, fields = _ref236.fields, api = _ref236.api, reloadConfig = _ref236.reloadConfig;
      var isReloadFilter = false;
      var isReloadScroll = false;
      if (reloadConfig) {
        isReloadFilter = Boolean(reloadConfig.filter);
        isReloadScroll = Boolean(reloadConfig.scroll);
      }
      return {
        api,
        dataset,
        fields,
        loading,
        isReloadFilter,
        isReloadScroll
      };
    }
  },
  handleFetch: function handleFetch(code, sortArg) {
    var _this85 = this;
    var pager = this.pager, sortData = this.sortData, filterData = this.filterData, pagerConfig = this.pagerConfig, fetchOption = this.fetchOption, fetchData = this.fetchData, dataset = this.dataset;
    if (this.isInitialLoading) {
      this.isInitialLoading = false;
    } else {
      this.columnAnchor && this.clearActiveAnchor();
    }
    if (code !== "prefetch") {
      this.clearRadioRow();
      this.resetScrollTop();
    }
    if (!fetchOption) {
      error("ui.grid.error.notQuery");
      return this.$nextTick();
    }
    var _ref237 = fetchData || dataset.source || dataset.api || {}, args = _ref237.args, loading = _ref237.loading;
    var field = sortData.field, order = sortData.order, prop = sortData.prop, property = sortData.property;
    var sortByData = {
      field,
      order,
      prop,
      property
    };
    var params = _extends({
      $grid: this,
      sort: sortData,
      sortBy: sortByData,
      filters: filterData
    }, args);
    var search;
    var _fetchOption$isReload3 = fetchOption.isReloadFilter, isReloadFilter = _fetchOption$isReload3 === void 0 ? false : _fetchOption$isReload3;
    this.tableLoading = loading;
    if (pagerConfig) {
      params.page = pagerConfig;
    }
    if (code === "reload") {
      if (pager || args.page) {
        pagerConfig.currentPage = 1;
      }
      this.sortData = params.sort = {};
      if (!isReloadFilter) {
        params.filters = [];
        this.filterData = params.filters;
      }
      this.pendingRecords = [];
      this.clearAll();
    }
    if (sortArg && sortArg.length > 0) {
      params.sortBy = sortArg;
    }
    if (fetchData && fetchData.api) {
      search = fetchData.api.apply(this, [params]);
    } else {
      search = getDataset({
        dataset,
        service: this.$service
      }, params);
    }
    return search.then(this.loadFetchData).catch(function(error2) {
      _this85.tableLoading = false;
      throw error2;
    });
  },
  clearActiveAnchor: function clearActiveAnchor() {
    var columnAnchor = this.columnAnchor, _this$columnAnchorPar = this.columnAnchorParams, columnAnchorParams2 = _this$columnAnchorPar === void 0 ? {} : _this$columnAnchorPar;
    var _columnAnchorParams$a = columnAnchorParams2.anchors, anchors = _columnAnchorParams$a === void 0 ? [] : _columnAnchorParams$a;
    if (!columnAnchor || anchors.length <= 0)
      return;
    anchors.forEach(function(anchor) {
      return anchor.active = false;
    });
  },
  loadFetchData: function loadFetchData(rest) {
    if (!rest) {
      this.tableData = [];
      this.tableLoading = false;
      return;
    }
    var _this$fetchOption$fie = this.fetchOption.fields, fields = _this$fetchOption$fie === void 0 ? {} : _this$fetchOption$fie, pagerConfig = this.pagerConfig, pagerSlot = this.pagerSlot;
    if (pagerConfig && !Array.isArray(rest)) {
      var _rest$result;
      var total = getObj(rest, fields.total || "page.total") || (rest == null ? void 0 : (_rest$result = rest.result) == null ? void 0 : _rest$result.length) || 0;
      var data8 = getObj(rest, fields.result || fields.data || "result") || [];
      this.tableData = data8;
      pagerConfig.total = total;
      var setTotal = pagerSlot && pagerSlot.componentInstance.setTotal;
      setTotal && setTotal(total);
    } else {
      this.tableData = (fields.list ? getObj(rest, fields.list) : rest) || [];
    }
    this.tableLoading = false;
  }
};
var FetchData = {
  host: "grid",
  install: function install6(host) {
    Object.assign(host.methods, Methods$8);
  }
};
var Methods$7 = {
  // 初始化表格分页配置
  initPagerConfig: function initPagerConfig() {
    var $slots = this.$slots, fetchOption = this.fetchOption, _this$scrollLoad = this.scrollLoad, scrollLoad = _this$scrollLoad === void 0 ? {} : _this$scrollLoad;
    var pagerProps = {};
    if (fetchOption) {
      var pagerSlot = $slots.pager && $slots.pager[0];
      if (pagerSlot) {
        var componentOptions = pagerSlot.componentOptions, children = pagerSlot.children;
        if (componentOptions && !children) {
          this.pagerSlot = pagerSlot;
          pagerProps = componentOptions.propsData;
        }
      } else if (this.pager) {
        pagerProps = this.pager.attrs;
      }
      if (this.pager || $slots.pager || this.scrollLoad) {
        return Object.assign(this.tablePage, {
          pageSize: scrollLoad.pageSize
        }, pagerProps);
      }
      return fetchOption.args && fetchOption.args.page;
    }
  },
  // 表格内置分页渲染器
  renderPager: function renderPager(_ref238) {
    var $slots = _ref238.$slots, _vm = _ref238._vm, loading = _ref238.loading, pager = _ref238.pager, pagerConfig = _ref238.pagerConfig, tableLoading = _ref238.tableLoading, vSize4 = _ref238.vSize;
    var res = null;
    var isThemeSaas3 = _vm.isThemeSaas, isModeMobileFirst2 = _vm.isModeMobileFirst, isViewGantt2 = _vm.isViewGantt, currentBreakpoint = _vm.currentBreakpoint, fetchData = _vm.fetchData, isViewCustom2 = _vm.isViewCustom;
    var style = {
      display: "none"
    };
    if (isThemeSaas3 && isModeMobileFirst2) {
      if (!(isViewGantt2 || isViewCustom2) || (isViewGantt2 || isViewCustom2) && currentBreakpoint !== "default") {
        style.display = "flex";
        style.justifyContent = "flex-end";
      }
      if (currentBreakpoint === "default") {
        style.justifyContent = "center";
      }
    } else {
      style.display = "block";
    }
    if ($slots.pager) {
      res = $slots.pager();
    } else if (pager) {
      pager.component = pager.component || (fetchData && fetchData.api ? Pager$1 : null);
      res = h(hooks.toRaw(pager.component), {
        props: _extends({
          size: vSize4,
          loading: loading || tableLoading,
          isBeforePageChange: _vm.isBeforePageChange || _vm.showSaveMsg,
          accurateJumper: _vm.autoLoad
        }, pagerConfig),
        on: {
          "size-change": _vm.pageSizeChange,
          "current-change": _vm.pageCurrentChange,
          "before-page-change": _vm.beforePageChangeHandler
        },
        ref: "pager",
        style
      });
    }
    return res;
  },
  pageChangeEvent: function pageChangeEvent(params) {
    var _this86 = this;
    this.tablePageLoading = true;
    if (!this.tasks.updatePage) {
      this.tasks.updatePage = debounce(200, function() {
        var eventParams = _extends({
          $grid: _this86
        }, params);
        var toolbarVm = _this86.getVm("toolbar");
        _emitEvent(_this86, "page-change", eventParams);
        _this86.emitter.emit("page-change", eventParams);
        _this86.handleFetch("query").then(function() {
          _this86.realTimeTablePage = _extends({}, _this86.tablePage);
          _this86.tablePageLoading = false;
        });
        if (toolbarVm) {
          toolbarVm.orderSetting();
        }
      });
    }
    this.tasks.updatePage();
  },
  // size为页大小，load为false则触发change事件与查询，在个性化初始化时根据autoload控制是否加载数据
  pageSizeChange: function pageSizeChange(size, load) {
    this.tablePage.pageSize = size;
    this.tablePage.currentPage = 1;
    load || this.pageChangeEvent(this.tablePage);
  },
  pageCurrentChange: function pageCurrentChange(current) {
    if (this.tablePage.currentPage !== current) {
      this.tablePage.currentPage = current;
      this.pageChangeEvent(this.tablePage);
    }
  },
  beforePageChangeHandler: function beforePageChangeHandler(params) {
    var _this87 = this;
    if (!this.showSaveMsg) {
      var eventParams = extend(false, {
        $grid: this
      }, params);
      _emitEvent(this, "before-page-change", eventParams);
      this.emitter.emit("before-page-change", eventParams);
      return;
    }
    var callback = params.callback, rollback = params.rollback;
    var _this$getRecordset = this.getRecordset(), insertRecords = _this$getRecordset.insertRecords, removeRecords = _this$getRecordset.removeRecords, updateRecords = _this$getRecordset.updateRecords;
    if (insertRecords.length || removeRecords.length || updateRecords.length) {
      var next = function next2(res) {
        if (res === "confirm") {
          rollback && rollback();
          _emitEvent(_this87, "cancel-page-change", _this87);
          _this87.emitter.emit("cancel-page-change", _this87);
        } else {
          callback && callback();
        }
      };
      Modal$1.confirm(GlobalConfig$2.i18n("ui.grid.isSaveMsg")).then(next);
    } else {
      callback && callback();
    }
  }
};
var Pager = {
  host: "grid",
  install: function install7(host) {
    Object.assign(host.methods, Methods$7);
  }
};
function setBodyRecords(_ref239) {
  var body = _ref239.body, insertRecords = _ref239.insertRecords, pendingRecords = _ref239.pendingRecords;
  if (insertRecords.length) {
    body.pendingRecords = pendingRecords.filter(function(row2) {
      return !insertRecords.includes(row2);
    });
  }
  if (pendingRecords.length) {
    body.insertRecords = insertRecords.filter(function(row2) {
      return !pendingRecords.includes(row2);
    });
  }
}
function canInvokeSaveDataApi(body, removeRecords, updateRecords) {
  return body.insertRecords.length || removeRecords.length || updateRecords.length || body.pendingRecords.length;
}
function doRemoveOrShowMsg(_ref240) {
  var _vm = _ref240._vm, canInvoke = _ref240.canInvoke, code = _ref240.code, isMsg2 = _ref240.isMsg, pendingRecords = _ref240.pendingRecords, resolve = _ref240.resolve, valid = _ref240.valid;
  if (valid && !canInvoke) {
    if (isMsg2) {
      if (pendingRecords.length) {
        _vm.remove(pendingRecords);
      } else {
        Modal$1.message({
          id: code,
          message: GlobalConfig$2.i18n("ui.grid.dataUnchanged"),
          status: "info"
        });
      }
    }
    resolve();
  }
}
function invokeSaveDataApi(_ref241) {
  var _vm = _ref241._vm, args = _ref241.args, body = _ref241.body, code = _ref241.code, removeRecords = _ref241.removeRecords, resolve = _ref241.resolve, saveData = _ref241.saveData, updateRecords = _ref241.updateRecords, valid = _ref241.valid;
  var canInvoke = false;
  if (valid) {
    canInvoke = canInvokeSaveDataApi(body, removeRecords, updateRecords);
  }
  if (valid && canInvoke) {
    _vm.tableLoading = true;
    resolve(saveData.api.apply(_vm, [{
      $grid: _vm,
      changeRecords: body
    }].concat(args)).then(function() {
      Modal$1.message({
        id: code,
        message: GlobalConfig$2.i18n("ui.grid.saveSuccess"),
        status: "success"
      });
      _vm.tableLoading = false;
    }).catch(function() {
      _vm.tableLoading = false;
    }).then(function() {
      return _vm.commitProxy("reload");
    }));
  }
  return canInvoke;
}
var Methods$6 = {
  // 表格工具栏渲染器
  getRenderedToolbar: function getRenderedToolbar(_ref242) {
    var $slots = _ref242.$slots, _vm = _ref242._vm, loading = _ref242.loading, tableLoading = _ref242.tableLoading, toolbar = _ref242.toolbar;
    return _vm.renderedToolbar = function() {
      var res = null;
      if ($slots.toolbar) {
        res = $slots.toolbar();
      } else if (toolbar) {
        res = h(hooks.toRaw(toolbar.component), {
          ref: "toolbar",
          props: _extends({
            loading: loading || tableLoading
          }, toolbar),
          class: _vm.viewCls("toolbar"),
          scopedSlots: toolbar.slots || {}
        });
      }
      return res;
    }();
  },
  handleSave: function handleSave(code, args) {
    var _this88 = this;
    var saveData = this.saveData, isMsg2 = this.isMsg;
    if (!saveData) {
      error("ui.grid.error.notSave");
      return;
    }
    var body = extend(true, {
      pendingRecords: this.pendingRecords
    }, this.getRecordset());
    var insertRecords = body.insertRecords, removeRecords = body.removeRecords, updateRecords = body.updateRecords, pendingRecords = body.pendingRecords;
    var validRows = insertRecords.concat(updateRecords);
    var getCallback = function getCallback2(resolve) {
      return function(valid) {
        if (!valid) {
          resolve(valid);
          return;
        }
        var canInvoke = invokeSaveDataApi({
          _vm: _this88,
          args,
          body,
          code,
          removeRecords,
          resolve,
          saveData,
          updateRecords,
          valid
        });
        doRemoveOrShowMsg({
          _vm: _this88,
          canInvoke,
          code,
          isMsg: isMsg2,
          pendingRecords,
          resolve,
          valid
        });
      };
    };
    setBodyRecords({
      body,
      insertRecords,
      pendingRecords
    });
    return new Promise(function(resolve) {
      _this88.validate(validRows, getCallback(resolve));
    });
  },
  handleDelete: function handleDelete(code, args) {
    var _this89 = this;
    var deleteData = this.deleteData, isMsg2 = this.isMsg;
    if (!deleteData) {
      error("ui.grid.error.notDelete");
      return;
    }
    var selecteds = this.getSelectRecords(true);
    var afterRemove = function afterRemove2() {
      var removeds = _this89.getRemoveRecords();
      if (!removeds.length && isMsg2 && !selecteds.length) {
        Modal$1.message({
          id: code,
          message: GlobalConfig$2.i18n("ui.grid.selectOneRecord"),
          status: "warning"
        });
      }
      if (removeds.length) {
        var apiArgs = [{
          $grid: _this89,
          changeRecords: {
            removeRecords: removeds
          }
        }].concat(args);
        var stopLoading = function stopLoading2() {
          _this89.tableLoading = false;
        };
        _this89.tableLoading = true;
        return deleteData.api.apply(_this89, apiArgs).then(stopLoading).catch(stopLoading).then(function() {
          return _this89.commitProxy("reload");
        });
      }
    };
    this.remove(selecteds).then(afterRemove);
  },
  handleFullScreen: function handleFullScreen(_ref243) {
    var _this90 = this;
    var show2 = _ref243[0];
    this.fullScreenClass = show2 ? "tiny-fullscreen-full" : "";
    this.$nextTick(function() {
      _this90.recalculate(true);
      _emitEvent(_this90, "fullscreen", show2);
      _this90.emitter.emit("fullscreen", show2);
    });
  },
  commitProxy: function commitProxy(code) {
    var _this91 = this;
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    var btnMethod = Buttons.get(code);
    if (code === "insert") {
      this.insert();
    } else if (code === "insert_actived") {
      this.insert().then(function(_ref244) {
        var row2 = _ref244.row;
        return _this91.setActiveRow(row2);
      });
    } else if (code === "mark_cancel") {
      this.triggerPendingEvent(code);
    } else if (code === "delete_selection") {
      this.handleDeleteRow(code, "ui.grid.deleteSelectRecord", function() {
        return _this91.commitProxy(["delete"].concat(args));
      });
    } else if (code === "remove_selection") {
      this.handleDeleteRow(code, "ui.grid.removeSelectRecord", function() {
        return _this91.removeSelecteds();
      });
    } else if (code === "export") {
      this.exportCsv();
    } else if (code === "reset_custom") {
      this.resetAll();
    } else if (~["reload", "query", "prefetch"].indexOf(code)) {
      this.handleFetch(code, args);
    } else if (code === "delete") {
      this.handleDelete(code, args);
    } else if (code === "save") {
      this.handleSave();
    } else if (code === "fullscreen") {
      this.handleFullScreen(args);
    } else if (btnMethod) {
      btnMethod.call.apply(btnMethod, [this, {
        code,
        $grid: this
      }].concat(args));
    }
    return this.$nextTick();
  },
  handleDeleteRow: function handleDeleteRow(code, i18nKey, callback) {
    var selecteds = this.getSelectRecords();
    if (this.isMsg && selecteds.length) {
      Modal$1.confirm(GlobalConfig$2.i18n(i18nKey)).then(function(type) {
        type === "confirm" && callback();
      });
    }
    if (this.isMsg && !selecteds.length) {
      Modal$1.message({
        id: code,
        message: GlobalConfig$2.i18n("ui.grid.selectOneRecord"),
        status: "warning"
      });
    }
    if (!this.isMsg && selecteds.length) {
      callback();
    }
  },
  getPendingRecords: function getPendingRecords() {
    return this.pendingRecords;
  },
  triggerToolbarBtnEvent: function triggerToolbarBtnEvent(button, event) {
    var _this$events = this.events, events = _this$events === void 0 ? {} : _this$events, tableListeners = this.tableListeners;
    var code = button.code;
    if (!events.toolbarButtonClick && !tableListeners["toolbar-button-click"]) {
      this.commitProxy(code, event);
    }
    _emitEvent(this, "toolbar-button-click", [{
      code,
      button,
      $grid: this
    }, event]);
    this.emitter.emit("toolbar-button-click", {
      code,
      button,
      $grid: this
    }, event);
  },
  triggerPendingEvent: function triggerPendingEvent(code) {
    var isMsg2 = this.isMsg, pendings = this.pendingRecords;
    var selectColumn = this.getColumns().filter(function(col) {
      return ~["selection", "radio"].indexOf(col.type);
    });
    var isSelection = selectColumn.length && selectColumn[0].type === "selection";
    var isRadio = selectColumn.length && selectColumn[0].type === "radio";
    var selecteds = isSelection ? this.getSelectRecords(true) : isRadio ? [this.getRadioRow()] : [];
    if (!selecteds.length && isMsg2) {
      Modal$1.message({
        id: code,
        message: GlobalConfig$2.i18n("ui.grid.selectOneRecord"),
        status: "warning"
      });
    }
    if (selecteds.length) {
      var _ref245 = {}, _ref245$plus = _ref245.plus, plus = _ref245$plus === void 0 ? [] : _ref245$plus, _ref245$minus = _ref245.minus, minus = _ref245$minus === void 0 ? [] : _ref245$minus, tmp = _ref245.tmp;
      selecteds.forEach(function(data8) {
        var selectedPending = pendings.includes(data8);
        tmp = selectedPending ? minus : plus;
        tmp.push(data8);
      });
      tmp = minus.length ? pendings.filter(function(item) {
        return !~minus.indexOf(item);
      }) : pendings;
      this.pendingRecords = tmp.concat(plus);
      isSelection && this.clearSelection();
      isRadio && this.clearRadioRow();
    }
  }
};
var Toolbar = {
  host: "grid",
  install: function install8(host) {
    Object.assign(host.methods, Methods$6);
  }
};
var Methods$5 = {
  renderColumnAnchor: function renderColumnAnchor(params, _vm) {
    var _ref246 = params || {}, _ref246$anchors = _ref246.anchors, anchors = _ref246$anchors === void 0 ? [] : _ref246$anchors, _ref246$action = _ref246.action, action = _ref246$action === void 0 ? function() {
    } : _ref246$action;
    var viewType2 = _vm.viewType;
    return h("div", {
      class: ["tiny-grid__column-anchor", _vm.viewCls("columnAnchor")],
      style: viewType2 === "default" ? "display:flex" : "",
      key: _vm.columnAnchorKey,
      ref: "tinyGridColumnAnchor"
    }, anchors.map(function(anchor) {
      var _anchor$active = anchor.active, active = _anchor$active === void 0 ? false : _anchor$active, _anchor$label = anchor.label, label = _anchor$label === void 0 ? "" : _anchor$label, _anchor$field = anchor.field, field = _anchor$field === void 0 ? "" : _anchor$field, render18 = anchor.render;
      if (typeof render18 === "function") {
        return render18({
          h,
          anchor,
          action
        });
      }
      var itemClass = {
        "tiny-grid__column-anchor-item": true,
        "tiny-grid__column-anchor-item--active": active
      };
      var itemOn = {
        click: function click(e) {
          return action(field, e);
        }
      };
      var iconVnode = active ? h(iconMarkOn(), {
        class: "tiny-grid__column-anchor-item-icon"
      }) : null;
      var spanVnode = h("span", label);
      return h("div", {
        class: itemClass,
        on: itemOn
      }, [iconVnode, spanVnode]);
    }));
  },
  buildColumnAnchor: function buildColumnAnchor(_ref247) {
    var property = _ref247.property, label = _ref247.label, anchors = _ref247.anchors, activeAnchor = _ref247.activeAnchor;
    var visibleColumn = this.getColumns();
    var column = visibleColumn.find(function(col) {
      return !col.type && col.property === property;
    });
    var anchorName = "";
    var anchorRender = null;
    if (typeof label !== "undefined") {
      if (typeof label === "string") {
        anchorName = label;
      } else if (Array.isArray(label)) {
        if (label.length > 1) {
          anchorName = String(label[0]);
          anchorRender = label[1];
        }
      } else if (label && typeof label === "object") {
        anchorName = label.label;
        anchorRender = label.render;
        if (label.active) {
          activeAnchor.field = property;
          if (label.delay)
            activeAnchor.delay = label.delay;
        }
      }
    }
    if (column) {
      anchors.push({
        label: anchorName || (typeof column.title === "string" ? column.title : ""),
        field: property,
        active: false,
        render: anchorRender
      });
    }
  },
  buildColumnAnchorParams: function buildColumnAnchorParams() {
    var _this92 = this;
    var columnAnchor = this.columnAnchor;
    var anchors = [];
    var activeAnchor = {
      field: "",
      delay: 30
    };
    if (Array.isArray(columnAnchor) && columnAnchor.length) {
      columnAnchor.forEach(function(item) {
        if (typeof item === "string") {
          _this92.buildColumnAnchor({
            property: item,
            anchors
          });
        } else if (Array.isArray(item)) {
          if (item.length > 1)
            _this92.buildColumnAnchor({
              property: item[0],
              label: item[1],
              anchors
            });
        } else if (item && typeof item === "object") {
          var field = item.field, other = _objectWithoutPropertiesLoose(item, _excluded2);
          _this92.buildColumnAnchor({
            property: field,
            label: other,
            anchors,
            activeAnchor
          });
        }
      });
    }
    if (!activeAnchor.field && anchors.length) {
      activeAnchor.field = anchors[0].field;
    }
    this.columnAnchorParams = {
      anchors,
      activeAnchor,
      action: function action(field, e) {
        return _this92.anchorAction({
          field,
          anchors,
          _vm: _this92,
          e
        });
      }
    };
    this.emitter.once("active-anchor", function() {
      return _this92.anchorAction({
        field: activeAnchor.field,
        anchors,
        _vm: _this92
      });
    });
  },
  anchorAction: function anchorAction(_ref248) {
    var field = _ref248.field, anchors = _ref248.anchors, _vm = _ref248._vm;
    var fromAnchor = anchors.find(function(anchor) {
      return anchor.active;
    });
    var toAnchor = anchors.find(function(anchor) {
      return anchor.field === field;
    });
    if (toAnchor && fromAnchor !== toAnchor) {
      if (fromAnchor && fromAnchor.active) {
        fromAnchor.active = false;
      }
      if (!toAnchor.active) {
        toAnchor.active = true;
        _vm.columnAnchorKey = field;
        _vm.$nextTick(function(found) {
          if (found === void 0) {
            found = false;
          }
          var visibleColumn = _vm.getColumns();
          var column = visibleColumn.find(function(col) {
            return !col.type && col.property === field;
          });
          var width = visibleColumn.filter(function(col) {
            return !col.fixed;
          }).map(function(col) {
            if (col === column) {
              found = true;
            }
            return found ? 0 : col.renderWidth;
          }).reduce(function(p, c) {
            return p + c;
          }, 0);
          if (column) {
            _vm.scrollTo(width);
          }
        });
      }
    }
  }
};
var ColumnAnchor = {
  host: "grid",
  install: function install9(host) {
    Object.assign(host.methods, Methods$5);
  }
};
function handleIfScrollYLoadTruthy(_ref249) {
  var isScrollYLoad = _ref249.isScrollYLoad, _vm = _ref249._vm, selfRow = _ref249.selfRow, prevTrElem = _ref249.prevTrElem, targetTrElem = _ref249.targetTrElem;
  if (!isScrollYLoad) {
    return;
  }
  var actIndex = _vm.tableFullData.indexOf(selfRow);
  _vm.tableFullData.splice(actIndex, 1);
  if (prevTrElem) {
    var prevRow = _vm.getRowNode(prevTrElem).item;
    var parentIdx = _vm.tableFullData.indexOf(prevRow);
    var sleftIdx = _vm.tableFullData.indexOf(selfRow);
    _vm.tableFullData.splice(parentIdx + (sleftIdx < parentIdx ? 1 : 0), 0, selfRow);
  } else {
    _vm.tableFullData.unshift(selfRow);
  }
  targetTrElem.remove();
}
var createHandlerOnEnd = function createHandlerOnEnd2(_ref250) {
  var _vm = _ref250._vm, refresh = _ref250.refresh;
  return function(event) {
    var insertRecords = _vm.getInsertRecords();
    if (insertRecords.length) {
      return false;
    }
    var options = {
      children: (_vm.treeConfig || {}).children || "children"
    };
    var targetTrElem = event.item;
    var wrapperElem = targetTrElem.parentNode, prevTrElem = targetTrElem.previousElementSibling;
    var tableTreeData = _vm.data || _vm.tableData;
    var selfRow = _vm.getRowNode(targetTrElem).item;
    var selfNode = findTree(tableTreeData, function(row2) {
      return row2 === selfRow;
    }, options);
    var isScrollYLoad = _vm.scrollYLoad;
    if (!isScrollYLoad) {
      if (prevTrElem) {
        var prevRow = _vm.getRowNode(prevTrElem).item;
        var prevNode = findTree(tableTreeData, function(row2) {
          return row2 === prevRow;
        }, options);
        if (findTree(selfRow[options.children], function(row2) {
          return prevRow === row2;
        }, options)) {
          var oldTrElem = wrapperElem.children[event.oldIndex];
          wrapperElem.insertBefore(targetTrElem, oldTrElem);
          return Modal$1.message({
            message: GlobalConfig$2.i18n("ui.grid.error.notAllowDragSelf"),
            status: "error"
          });
        }
        var currRow = selfNode.items.splice(selfNode.index, 1)[0];
        if (_vm.hasTreeExpand(prevRow)) {
          prevRow[options.children].splice(0, 0, currRow);
        } else {
          prevNode.items.splice(prevNode.index + (selfNode.index < prevNode.index ? 0 : 1), 0, currRow);
          prevNode.items = [].concat(prevNode.items);
        }
      } else {
        var _currRow = selfNode.items.splice(selfNode.index, 1)[0];
        tableTreeData.unshift(_currRow);
        _vm.tableFullData = [].concat(tableTreeData);
      }
    }
    handleIfScrollYLoadTruthy({
      isScrollYLoad,
      _vm,
      selfRow,
      prevTrElem,
      targetTrElem
    });
    _vm.$emit("row-drop-end", event, _vm, _vm.scrollYLoad ? tableTreeData : _vm.tableFullData);
    refresh && _vm.data && !isVue2 && _vm.refreshData(_vm.data);
  };
};
var getSortColumns = function getSortColumns2(columns2) {
  var left = [];
  var right = [];
  var center = [];
  columns2.forEach(function(col) {
    var fixed = col.fixed;
    if (fixed === "left") {
      left.push(col);
    } else if (fixed === "right") {
      right.push(col);
    } else {
      center.push(col);
    }
  });
  return left.concat(center).concat(right);
};
var Methods$4 = {
  // 处理列拖拽
  columnDrop: function columnDrop(headerEl) {
    var _this93 = this;
    var _ref251 = this.dropConfig || {}, plugin = _ref251.plugin, onBeforeMove = _ref251.onBeforeMove, filter2 = _ref251.filter;
    var columnDropContainer = headerEl.querySelector(".tiny-grid__header .tiny-grid-header__row");
    var columnDropOptions = {
      handle: ".tiny-grid-header__column:not(.col__fixed)",
      filter: filter2,
      onEnd: function onEnd(event) {
        var item = event.item, newIndex = event.newIndex, oldIndex = event.oldIndex;
        var _this93$getTableColum = _this93.getTableColumn(), fullColumn = _this93$getTableColum.fullColumn, tableColumn3 = _this93$getTableColum.tableColumn;
        var sortVisibleCols = getSortColumns(tableColumn3);
        var targetThElem = item;
        var wrapperElem = targetThElem.parentNode;
        var newColumn = sortVisibleCols[newIndex];
        if (newColumn.fixed) {
          if (newIndex > oldIndex) {
            for (var i = newIndex; i >= oldIndex; i--) {
              wrapperElem.insertBefore(targetThElem, wrapperElem.children[i]);
            }
          } else {
            for (var _i2 = newIndex; _i2 <= oldIndex; _i2++) {
              wrapperElem.insertBefore(targetThElem, wrapperElem.children[_i2]);
            }
            wrapperElem.insertBefore(wrapperElem.children[oldIndex], targetThElem);
          }
          return Modal.message({
            message: GlobalConfig.i18n("ui.grid.error.notAllowDragFixed"),
            status: "error"
          });
        }
        var oldColumnIndex = _this93.getColumnIndex(sortVisibleCols[oldIndex]);
        var newColumnIndex = _this93.getColumnIndex(sortVisibleCols[newIndex]);
        var currCol = fullColumn.splice(oldColumnIndex, 1)[0];
        fullColumn.splice(newColumnIndex, 0, currCol);
        _this93.loadColumn(fullColumn);
        _this93.$emit("column-drop-end", event, _this93);
        var toolbarVm = _this93.getVm("toolbar");
        _this93.isDragHeaderSorting && toolbarVm && toolbarVm.updateSetting();
      },
      onStart: function onStart(event) {
        _this93.$emit("column-drop-start", event, _this93);
      },
      onMove: function onMove(event) {
        var cancel = typeof onBeforeMove === "function" ? onBeforeMove("column", null, event, _this93) : true;
        _this93.$emit("column-drop-move", event, _this93);
        return cancel === void 0 || cancel;
      }
    };
    return plugin.create(columnDropContainer, columnDropOptions);
  },
  // 处理行拖拽
  rowDrop: function rowDrop(bodyEl) {
    var _this94 = this;
    var _this$dropConfig2 = this.dropConfig, plugin = _this$dropConfig2.plugin, onBeforeMove = _this$dropConfig2.onBeforeMove, filter2 = _this$dropConfig2.filter, _this$dropConfig2$ref = _this$dropConfig2.refresh, refresh = _this$dropConfig2$ref === void 0 ? true : _this$dropConfig2$ref, rowHandle = _this$dropConfig2.rowHandle, trigger = _this$dropConfig2.trigger;
    var rowDropContainer = bodyEl.querySelector(".tiny-grid__body tbody");
    var handle = trigger || ".tiny-grid-body__row";
    if (rowHandle === "index") {
      handle = ".tiny-grid-body__row>td.col__index>.row__drop-handle";
    }
    var rowDropOptions = {
      handle,
      filter: filter2,
      onEnd: createHandlerOnEnd({
        _vm: this,
        refresh
      }),
      onStart: function onStart(event) {
        _this94.$emit("row-drop-start", event, _this94);
      },
      onMove: function onMove(event) {
        var insertRecords = _this94.getInsertRecords();
        if (insertRecords.length)
          return false;
        var dragged = event.dragged;
        var selfRow = _this94.getRowNode(dragged).item;
        var cancel = typeof onBeforeMove === "function" ? onBeforeMove("row", selfRow, event, _this94) : true;
        _this94.$emit("row-drop-move", event, _this94);
        return cancel === void 0 || cancel;
      }
    };
    return plugin.create(rowDropContainer, rowDropOptions);
  }
};
var Dragger = {
  host: "table",
  install: function install10(host) {
    Object.assign(host.methods, Methods$4);
  }
};
var Methods$3 = {};
var Sort = {
  host: "table",
  install: function install11(host) {
    Object.assign(host.methods, Methods$3);
  }
};
function createTooltipRange(_ref252) {
  var _vm = _ref252._vm, cell = _ref252.cell, column = _ref252.column, isHeader = _ref252.isHeader;
  var range = document.createRange();
  var rangeEnd;
  range.setStart(cell, 0);
  if (_vm.headerSuffixIconAbsolute) {
    if (column.sortable && column.filter && isHeader) {
      rangeEnd = cell.childNodes.length - 2;
    } else if ((column.sortable || column.filter) && isHeader) {
      rangeEnd = cell.childNodes.length - 1;
    } else {
      rangeEnd = cell.childNodes.length;
    }
  } else {
    rangeEnd = column.sortable && isHeader ? cell.childNodes.length - 1 : cell.childNodes.length;
  }
  range.setEnd(cell, rangeEnd);
  return range;
}
function processContentMethod(_ref253) {
  var _vm = _ref253._vm, column = _ref253.column, content = _ref253.content, contentMethod = _ref253.contentMethod, event = _ref253.event, isHeader = _ref253.isHeader, row2 = _ref253.row, showTip = _ref253.showTip;
  if (contentMethod) {
    _vm.tooltipContent = contentMethod({
      event,
      column,
      row: row2,
      showTip,
      isHeader,
      content
    }, h);
  } else {
    _vm.tooltipContent = content;
  }
}
var focusSingle = null;
var Methods$2 = {
  // 显示 tooltip 依赖的 popper 组件
  activateTooltip: function activateTooltip(tooltip, isValid) {
    if (!this.tasks.activateTooltip) {
      this.tasks.activateTooltip = debounce(300, function() {
        var sign = isValid !== void 0 ? isValid : focusSingle;
        if (sign) {
          tooltip.state.popperElm && (tooltip.state.popperElm.style.display = "none");
          tooltip.doDestroy();
          tooltip.show();
          setTimeout(tooltip.updatePopper);
        }
      });
    }
    this.tasks.activateTooltip();
  },
  // 显示 tooltip 依赖的 popper 组件
  activateTooltipValid: function activateTooltipValid(tooltip) {
    if (!this.tasks.activateTooltipValid) {
      this.tasks.activateTooltipValid = debounce(50, function() {
        tooltip.handleShowPopper();
        setTimeout(function() {
          return tooltip.updatePopper();
        });
      });
    }
    this.tasks.activateTooltipValid();
  },
  // 显示 tooltip
  handleTooltip: function handleTooltip(event, column, row2, showTip, isHeader) {
    var cell = isHeader && !(typeof column.title === "function") ? event.currentTarget.querySelector(".tiny-grid-cell-text") : event.currentTarget.querySelector(".tiny-grid-cell");
    if (isHeader && event.target !== cell && !(cell != null && cell.contains(event.target))) {
      return;
    }
    var tooltip = this.$refs.tooltip;
    var wrapperElem = cell;
    var content = cell.innerText.trim() || cell.textContent.trim();
    var contentMethod = this.tooltipConfig.contentMethod;
    var range = createTooltipRange({
      _vm: this,
      cell,
      column,
      isHeader
    });
    var rangeWidth = range.getBoundingClientRect().width;
    var padding = (parseInt(getStyle(cell, "paddingLeft"), 10) || 0) + (parseInt(getStyle(cell, "paddingRight"), 10) || 0);
    var isOverflow = rangeWidth + padding > cell.offsetWidth || wrapperElem.scrollWidth > wrapperElem.clientWidth;
    if ((contentMethod || content) && (showTip || isOverflow)) {
      Object.assign(this.tooltipStore, {
        row: row2,
        column,
        visible: true
      });
      if (tooltip) {
        processContentMethod({
          _vm: this,
          column,
          content,
          contentMethod,
          event,
          isHeader,
          row: row2,
          showTip
        });
        tooltip.state.referenceElm = cell;
        tooltip.state.popperElm && (tooltip.state.popperElm.style.display = "none");
        focusSingle = true;
        this.activateTooltip(tooltip);
      }
    }
    return this.$nextTick();
  },
  // 提供关闭tips提示的方法
  clostTooltip: function clostTooltip() {
    var tooltip = this.$refs.tooltip;
    Object.assign(this.tooltipStore, {
      content: null,
      row: null,
      visible: false,
      column: null
    });
    focusSingle = false;
    if (tooltip && typeof tooltip.setExpectedState === "function") {
      tooltip.setExpectedState(false);
      this.debounceClose(tooltip);
    }
    return this.$nextTick();
  },
  // 添加代码让用户代码可以划入popper
  debounceClose: function debounceClose(tooltip) {
    if (!this.tasks.debounceClose) {
      this.tasks.debounceClose = debounce(50, function() {
        tooltip.handleClosePopper();
      });
    }
    this.tasks.debounceClose();
  },
  // 触发表头 tooltip 事件
  triggerHeaderTooltipEvent: function triggerHeaderTooltipEvent(event, params) {
    var tooltipStore = this.tooltipStore;
    var column = params.column, showHeaderTip = params.showHeaderTip;
    if (tooltipStore.column !== column || !tooltipStore.visible) {
      this.handleTooltip(event, column, null, showHeaderTip, true);
    }
  },
  // 触发表尾 tooltip 事件
  triggerFooterTooltipEvent: function triggerFooterTooltipEvent(event, params) {
    var column = params.column;
    var tooltipStore = this.tooltipStore;
    if (tooltipStore.column !== column || !tooltipStore.visible) {
      this.handleTooltip(event, column);
    }
  },
  // 触发 tooltip 事件
  triggerTooltipEvent: function triggerTooltipEvent(event, params) {
    var editConfig = this.editConfig, editStore = this.editStore, tooltipStore = this.tooltipStore;
    var actived = editStore.actived;
    var row2 = params.row, column = params.column, showTip = params.showTip;
    if (editConfig) {
      if (editConfig.mode === "row" && actived.row === row2 && column.editor || actived.row === row2 && actived.column === column) {
        return;
      }
    }
    if (tooltipStore.column !== column || tooltipStore.row !== row2 || !tooltipStore.visible) {
      this.handleTooltip(event, column, row2, showTip);
    }
  }
};
var Tooltip = {
  host: "table",
  install: function install12(host) {
    Object.assign(host.methods, Methods$2);
  }
};
function onHalfSelectionProperty(_ref254) {
  var checkStrictly = _ref254.checkStrictly, property = _ref254.property, row2 = _ref254.row, treeConfig = _ref254.treeConfig, treeIndeterminates = _ref254.treeIndeterminates, value = _ref254.value;
  if (property && treeConfig && !checkStrictly && value === -1) {
    treeIndeterminates.push(row2);
    set(row2, property, false);
  }
}
function onFullSelectionProperty(_ref255) {
  var checkMethod = _ref255.checkMethod, checkStrictly = _ref255.checkStrictly, property = _ref255.property, row2 = _ref255.row, treeConfig = _ref255.treeConfig, treeIndeterminates = _ref255.treeIndeterminates, value = _ref255.value;
  if (property && treeConfig && !checkStrictly && value !== -1) {
    eachTree([row2], function(item, $rowIndex) {
      if (row2 === item || !checkMethod || checkMethod({
        row: item,
        $rowIndex
      })) {
        set(item, property, value);
        remove(treeIndeterminates, function(r) {
          return r === item;
        });
      }
    }, treeConfig);
  }
}
function getVItemsOnParentSlctProp(_ref256) {
  var checkMethod = _ref256.checkMethod, matchObj = _ref256.matchObj;
  var tinyItems;
  if (checkMethod) {
    tinyItems = matchObj.items.filter(function(item, $rowIndex) {
      return checkMethod({
        row: item,
        $rowIndex
      });
    });
  } else {
    tinyItems = matchObj.items;
  }
  return tinyItems;
}
function getParentStatusOnParentSlctProp(_ref257) {
  var indeterminatesItem = _ref257.indeterminatesItem, matchObj = _ref257.matchObj, property = _ref257.property, vItems = _ref257.vItems, value = _ref257.value;
  var parentStatus;
  if (indeterminatesItem) {
    parentStatus = -1;
  } else {
    var selectItemArr = matchObj.items.filter(function(item) {
      return get(item, property);
    });
    var _isEqual = selectItemArr.filter(function(item) {
      return ~vItems.indexOf(item);
    }).length === vItems.length;
    parentStatus = _isEqual ? true : selectItemArr.length || value === -1 ? -1 : false;
  }
  return parentStatus;
}
function onHalfSelection(_ref258) {
  var checkStrictly = _ref258.checkStrictly, property = _ref258.property, row2 = _ref258.row, selection = _ref258.selection, treeConfig = _ref258.treeConfig, treeIndeterminates = _ref258.treeIndeterminates, value = _ref258.value;
  if (!property && treeConfig && !checkStrictly && value === -1) {
    treeIndeterminates.push(row2);
    remove(selection, function(item) {
      return item === row2;
    });
  }
}
var addSelection = function addSelection2(selection, item) {
  return !selection.includes(item) && selection.push(item);
};
function onFullSelection(_ref259) {
  var checkMethod = _ref259.checkMethod, checkStrictly = _ref259.checkStrictly, property = _ref259.property, row2 = _ref259.row, selection = _ref259.selection, treeConfig = _ref259.treeConfig, treeIndeterminates = _ref259.treeIndeterminates, value = _ref259.value;
  if (!property && treeConfig && !checkStrictly && value !== -1) {
    eachTree([row2], function(item, $rowIndex) {
      if (row2 === item || !checkMethod || checkMethod({
        row: item,
        $rowIndex
      })) {
        if (value) {
          addSelection(selection, item);
        } else {
          remove(selection, function(select2) {
            return select2 === item;
          });
        }
        remove(treeIndeterminates, function(r) {
          return r === item;
        });
      }
    }, treeConfig);
  }
}
function getParentStatusOnParentSelection(_ref260) {
  var indeterminatesItem = _ref260.indeterminatesItem, matchObj = _ref260.matchObj, selection = _ref260.selection, vItems = _ref260.vItems, value = _ref260.value;
  var parentStatus;
  if (indeterminatesItem) {
    parentStatus = -1;
  } else {
    var selectItems = matchObj.items.filter(function(item) {
      return selection.includes(item);
    });
    var isEqualItem = selectItems.length === vItems.length;
    parentStatus = isEqualItem ? true : selectItems.length || value === -1 ? -1 : false;
  }
  return parentStatus;
}
function hasCheckField(_ref261, value, _vm) {
  var row2 = _ref261.row;
  var tableFullData = _vm.tableFullData, _vm$selectConfig = _vm.selectConfig, selectConfig = _vm$selectConfig === void 0 ? {} : _vm$selectConfig, treeConfig = _vm.treeConfig, treeIndeterminates = _vm.treeIndeterminates;
  var property = selectConfig.checkField, checkStrictly = selectConfig.checkStrictly, checkMethod = selectConfig.checkMethod;
  onHalfSelectionProperty({
    checkStrictly,
    property,
    row: row2,
    treeConfig,
    treeIndeterminates,
    value
  });
  onFullSelectionProperty({
    checkMethod,
    checkStrictly,
    property,
    row: row2,
    treeConfig,
    treeIndeterminates,
    value
  });
  if (property && treeConfig && !checkStrictly) {
    var matchObj = findTree(tableFullData, function(item) {
      return item === row2;
    }, treeConfig);
    if (matchObj && matchObj.parent) {
      var vItems = getVItemsOnParentSlctProp({
        checkMethod,
        matchObj
      });
      var indeterminatesItem = find(matchObj.items, function(item) {
        return treeIndeterminates.includes(item);
      });
      var parentStatus = getParentStatusOnParentSlctProp({
        indeterminatesItem,
        matchObj,
        property,
        vItems,
        value
      });
      return _vm.handleSelectRow({
        row: matchObj.parent
      }, parentStatus);
    }
  }
  if (property && !(treeConfig && !checkStrictly)) {
    set(row2, property, value);
  }
}
function onSelectTreeCheckStrictly(_ref262, value, _vm) {
  var row2 = _ref262.row;
  var selection = _vm.selection, tableFullData = _vm.tableFullData, _vm$selectConfig2 = _vm.selectConfig, selectConfig = _vm$selectConfig2 === void 0 ? {} : _vm$selectConfig2, treeConfig = _vm.treeConfig, treeIndeterminates = _vm.treeIndeterminates;
  var property = selectConfig.checkField, checkStrictly = selectConfig.checkStrictly, checkMethod = selectConfig.checkMethod;
  onHalfSelection({
    checkStrictly,
    property,
    row: row2,
    selection,
    treeConfig,
    treeIndeterminates,
    value
  });
  onFullSelection({
    checkMethod,
    checkStrictly,
    property,
    row: row2,
    selection,
    treeConfig,
    treeIndeterminates,
    value
  });
  if (!property && treeConfig && !checkStrictly) {
    var matchObj = findTree(tableFullData, function(item) {
      return item === row2;
    }, treeConfig);
    if (matchObj && matchObj.parent) {
      var vItems = matchObj.items;
      var indeterminatesItem = find(matchObj.items, function(item) {
        return treeIndeterminates.includes(item);
      });
      var parentStatus = getParentStatusOnParentSelection({
        indeterminatesItem,
        matchObj,
        selection,
        vItems,
        value
      });
      return _vm.handleSelectRow({
        row: matchObj.parent
      }, parentStatus);
    }
  }
}
function onSelectOther(_ref263, value, _vm) {
  var row2 = _ref263.row;
  var selection = _vm.selection, _vm$selectConfig3 = _vm.selectConfig, selectConfig = _vm$selectConfig3 === void 0 ? {} : _vm$selectConfig3, treeConfig = _vm.treeConfig;
  var property = selectConfig.checkField, checkStrictly = selectConfig.checkStrictly;
  if (!property && !(treeConfig && !checkStrictly)) {
    if (value) {
      addSelection(selection, row2);
    } else {
      remove(selection, function(item) {
        return item === row2;
      });
    }
  }
}
function hasNoCheckField(_ref264, value, _vm) {
  var row2 = _ref264.row;
  onSelectTreeCheckStrictly({
    row: row2
  }, value, _vm);
  onSelectOther({
    row: row2
  }, value, _vm);
}
function pushSelectRow(_ref265) {
  var afterFullData = _ref265.afterFullData, checkMethod = _ref265.checkMethod, checkStrictly = _ref265.checkStrictly, property = _ref265.property, selectRows = _ref265.selectRows, selection = _ref265.selection, treeConfig = _ref265.treeConfig, value = _ref265.value;
  if (!checkStrictly && value) {
    eachTree(afterFullData, function(row2, $rowIndex) {
      if (!checkMethod || checkMethod({
        row: row2,
        $rowIndex
      })) {
        selectRows.push(row2);
      }
    }, treeConfig);
  }
  if (!checkStrictly && !value && checkMethod) {
    eachTree(afterFullData, function(row2, $rowIndex) {
      if (checkMethod({
        row: row2,
        $rowIndex
      }) ? 0 : selection.includes(row2)) {
        selectRows.push(row2);
      }
    }, treeConfig);
  }
}
function hasCheckFieldNoStrictly(_ref266) {
  var afterFullData = _ref266.afterFullData, checkMethod = _ref266.checkMethod, checkStrictly = _ref266.checkStrictly, property = _ref266.property, selection = _ref266.selection, treeConfig = _ref266.treeConfig, value = _ref266.value;
  if (!checkStrictly && property) {
    var indexKey = (treeConfig ? "$" : "") + "rowIndex";
    var setValFn = function setValFn2(row2, rowIndex) {
      var _checkMethod;
      if (!checkMethod || checkMethod((_checkMethod = {
        row: row2
      }, _checkMethod[indexKey] = rowIndex, _checkMethod))) {
        set(row2, property, value);
      }
    };
    var clearValFn = function clearValFn2(row2, rowIndex) {
      var _checkMethod2;
      if (!checkMethod || (checkMethod((_checkMethod2 = {
        row: row2
      }, _checkMethod2[indexKey] = rowIndex, _checkMethod2)) ? selection.includes(row2) : false)) {
        set(row2, property, value);
      }
    };
    if (treeConfig) {
      eachTree(afterFullData, value ? setValFn : clearValFn, treeConfig);
    } else {
      afterFullData.forEach(value ? setValFn : clearValFn);
    }
  }
}
function filterSelectRow(_ref267) {
  var afterFullData = _ref267.afterFullData, checkMethod = _ref267.checkMethod, checkStrictly = _ref267.checkStrictly, selectRows = _ref267.selectRows, selection = _ref267.selection, value = _ref267.value;
  if (!checkStrictly && value && checkMethod) {
    selectRows = afterFullData.filter(function(row2, rowIndex) {
      return selection.includes(row2) || checkMethod({
        row: row2,
        rowIndex
      });
    });
  }
  if (!checkStrictly && value && !checkMethod) {
    selectRows = afterFullData.slice(0);
  }
  if (!checkStrictly && !value && checkMethod) {
    selectRows = afterFullData.filter(function(row2, rowIndex) {
      return checkMethod({
        row: row2,
        rowIndex
      }) ? 0 : selection.includes(row2);
    });
  }
  return selectRows;
}
function hasNoCheckFieldNoStrictly(_ref268) {
  var afterFullData = _ref268.afterFullData, checkMethod = _ref268.checkMethod, checkStrictly = _ref268.checkStrictly, property = _ref268.property, selection = _ref268.selection, treeConfig = _ref268.treeConfig, value = _ref268.value;
  var selectRows = [];
  if (treeConfig) {
    pushSelectRow({
      afterFullData,
      checkMethod,
      checkStrictly,
      property,
      selectRows,
      selection,
      treeConfig,
      value
    });
  } else {
    selectRows = filterSelectRow({
      afterFullData,
      checkMethod,
      checkStrictly,
      property,
      selectRows,
      selection,
      treeConfig,
      value
    });
  }
  return selectRows;
}
function setSelectionNoStrictly(_ref269) {
  var _vm = _ref269._vm, checkStrictly = _ref269.checkStrictly, reserve = _ref269.reserve, selectRows = _ref269.selectRows, selection = _ref269.selection, value = _ref269.value, afterFullData = _ref269.afterFullData;
  if (!checkStrictly) {
    if (reserve) {
      var unCheckedRows = afterFullData.filter(function(row2) {
        return !selectRows.includes(row2);
      });
      _vm.selection = value ? selection.concat(selectRows.filter(function(row2) {
        return !selection.includes(row2);
      })) : selection.filter(function(row2) {
        return !unCheckedRows.includes(row2);
      });
    } else {
      _vm.selection = selectRows;
    }
  }
}
var Methods$1 = {
  // 处理默认勾选
  handleSelectionDefChecked: function handleSelectionDefChecked() {
    var fullDataRowIdData = this.fullDataRowIdData;
    var _ref270 = this.selectConfig || {}, checkAll = _ref270.checkAll, checkRowKeys = _ref270.checkRowKeys;
    if (checkAll) {
      this.setAllSelection(true);
      return;
    }
    if (checkRowKeys) {
      var defCheckedRowids = checkRowKeys.map(function(key) {
        return encodeURIComponent(key);
      });
      var defCheckedRows = [];
      defCheckedRowids.forEach(function(rowid2) {
        var rowCache = fullDataRowIdData[rowid2];
        if (rowCache) {
          defCheckedRows.push(rowCache.row);
        }
      });
      this.setSelection(defCheckedRows, true);
    }
  },
  setSelection: function setSelection(rows, value) {
    var _this95 = this;
    if (rows) {
      if (!isArray(rows)) {
        rows = [rows];
      }
      rows.forEach(function(row2) {
        return _this95.handleSelectRow({
          row: row2
        }, !!value);
      });
    }
    return this.$nextTick();
  },
  // 多选，行选中事件。value：选中true、不选false、不确定-1
  handleSelectRow: function handleSelectRow(_ref271, value) {
    var row2 = _ref271.row;
    hasCheckField({
      row: row2
    }, value, this);
    hasNoCheckField({
      row: row2
    }, value, this);
    this.checkSelectionStatus();
  },
  handleToggleCheckRowEvent: function handleToggleCheckRowEvent(params, event) {
    var selection = this.selection;
    var _ref272 = this.selectConfig || {}, checkField = _ref272.checkField;
    var row2 = params.row;
    var value = checkField ? !get(row2, checkField) : !~selection.indexOf(row2);
    if (event) {
      this.triggerCheckRowEvent(event, params, value);
    } else {
      this.handleSelectRow(params, value);
    }
  },
  triggerCheckRowEvent: function triggerCheckRowEvent(event, params, value) {
    var _this$selectConfig4 = this.selectConfig, selectConfig = _this$selectConfig4 === void 0 ? {} : _this$selectConfig4;
    var checkMethod = selectConfig.checkMethod;
    if (!checkMethod || checkMethod(params)) {
      this.handleSelectRow(params, value);
      _emitEvent(this, "select-change", [_extends({
        selection: this.getSelectRecords(),
        checked: value,
        $table: this
      }, params), event]);
    }
  },
  // 多选，切换某一行的选中状态
  toggleRowSelection: function toggleRowSelection(row2) {
    this.handleToggleCheckRowEvent({
      row: row2
    });
    return this.$nextTick();
  },
  setAllSelection: function setAllSelection(value) {
    var afterFullData = this.afterFullData, _this$selectConfig5 = this.selectConfig, selectConfig = _this$selectConfig5 === void 0 ? {} : _this$selectConfig5, treeConfig = this.treeConfig, selection = this.selection;
    var property = selectConfig.checkField, reserve = selectConfig.reserve, checkStrictly = selectConfig.checkStrictly, checkMethod = selectConfig.checkMethod;
    checkStrictly = false;
    hasCheckFieldNoStrictly({
      afterFullData,
      checkMethod,
      checkStrictly,
      property,
      selection,
      treeConfig,
      value
    });
    var selectRows = hasNoCheckFieldNoStrictly({
      afterFullData,
      checkMethod,
      checkStrictly,
      property,
      selection,
      treeConfig,
      value
    });
    setSelectionNoStrictly({
      _vm: this,
      checkStrictly,
      reserve,
      selectRows,
      selection,
      value,
      afterFullData
    });
    this.treeIndeterminates = [];
    this.checkSelectionStatus();
  },
  // 根据表格选中状态，给头部复现框赋值状态（全选，半选，未选）
  checkSelectionStatus: function checkSelectionStatus() {
    var afterFullData = this.afterFullData, selection = this.selection, treeIndeterminates = this.treeIndeterminates;
    var _ref273 = this.selectConfig || {}, checkField = _ref273.checkField, checkMethod = _ref273.checkMethod;
    var _ref274 = {}, everyHandler = _ref274.everyHandler, someHandler = _ref274.someHandler;
    if (checkField) {
      everyHandler = checkMethod ? function(row2, rowIndex) {
        return !checkMethod({
          row: row2,
          rowIndex
        }) || get(row2, checkField);
      } : function(row2) {
        return get(row2, checkField);
      };
      someHandler = function someHandler2(row2) {
        return get(row2, checkField) || ~treeIndeterminates.indexOf(row2);
      };
      this.isAllSelected = false;
      this.headerCheckDisabled = checkMethod && afterFullData.length && afterFullData.every(function(row2, rowIndex) {
        return !checkMethod({
          row: row2,
          rowIndex
        });
      });
      afterFullData.length && (this.isAllSelected = afterFullData.every(everyHandler));
      this.isIndeterminate = !this.isAllSelected && afterFullData.some(someHandler);
    } else {
      everyHandler = function everyHandler2(row2, rowIndex) {
        return !checkMethod({
          row: row2,
          rowIndex
        });
      };
      this.headerCheckDisabled = checkMethod && afterFullData.length && afterFullData.every(everyHandler);
      everyHandler = checkMethod ? function(row2, rowIndex) {
        return !checkMethod({
          row: row2,
          rowIndex
        }) || ~selection.indexOf(row2);
      } : function(row2) {
        return ~selection.indexOf(row2);
      };
      someHandler = function someHandler2(row2) {
        return ~treeIndeterminates.indexOf(row2) || ~selection.indexOf(row2);
      };
      this.isAllSelected = false;
      afterFullData.length && (this.isAllSelected = afterFullData.every(everyHandler));
      this.isIndeterminate = !this.isAllSelected && afterFullData.some(someHandler);
    }
  },
  // 保留选中状态
  reserveCheckSelection: function reserveCheckSelection() {
    var fullDataRowIdData = this.fullDataRowIdData, selection = this.selection;
    var _ref275 = this.selectConfig || {}, reserve = _ref275.reserve;
    var rowkey = getTableRowKey(this);
    if (reserve && selection.length) {
      this.selection = selection.map(function(row2) {
        var rowCache = fullDataRowIdData["" + get(row2, rowkey)];
        return rowCache ? rowCache.row : row2;
      });
    }
  },
  // 多选，选中所有事件
  triggerCheckAllEvent: function triggerCheckAllEvent(event, value) {
    this.setAllSelection(value);
    var eventParams = {
      selection: this.getSelectRecords(),
      checked: value,
      $table: this
    };
    _emitEvent(this, "select-all", [eventParams, event]);
  },
  // 多选，切换所有行的选中状态
  toggleAllSelection: function toggleAllSelection() {
    this.triggerCheckAllEvent(null, !this.isAllSelected);
    return this.$nextTick();
  },
  clearSelection: function clearSelection() {
    var tableFullData = this.tableFullData, treeConfig = this.treeConfig;
    var _ref276 = this.selectConfig || {}, checkField = _ref276.checkField;
    if (checkField) {
      treeConfig ? eachTree(tableFullData, function(item) {
        return set(item, checkField, false);
      }, treeConfig) : tableFullData.forEach(function(item) {
        return set(item, checkField, false);
      });
    }
    Object.assign(this, {
      isAllSelected: false,
      isIndeterminate: false,
      selection: [],
      treeIndeterminates: []
    });
    return this.$nextTick();
  },
  initMultipleHistory: function initMultipleHistory() {
    var isMultipleHistory = this.$grid.isMultipleHistory;
    var toolbarVm = this.getVm("toolbar");
    var storageKey = toolbarVm.settingOpts.storageKey, toolbarId = toolbarVm.id;
    var remoteSelectedMethod = toolbarVm.setting.multipleHistory.remoteSelectedMethod;
    var remoteSelectedPromise;
    if (isMultipleHistory && toolbarVm && toolbarVm.setting && toolbarVm.setting.multipleHistory && remoteSelectedMethod) {
      if (typeof remoteSelectedMethod === "function") {
        remoteSelectedPromise = remoteSelectedMethod();
        if (typeof remoteSelectedPromise.then === "function") {
          remoteSelectedPromise.then(function(storeStr) {
            var storeObj = toStringJSON(storeStr);
            storeObj = storeObj && storeObj[storageKey] || null;
            storeObj = (storeObj || {})[toolbarId] || {};
            var _storeObj = storeObj, columns2 = _storeObj.columns, pageSize = _storeObj.pageSize;
            toolbarVm.applySettings({
              columns: columns2,
              pageSize
            });
          });
        }
      }
    }
  },
  // 显示多选工具栏
  showSelectToolbar: function showSelectToolbar() {
    var _this$$grid4 = this.$grid, selectToolbar = _this$$grid4.selectToolbar, showHeader = _this$$grid4.showHeader, selectToolbarStore = this.selectToolbarStore;
    if (selectToolbar && showHeader) {
      selectToolbarStore.visible = false;
      var selectColumn = find(this.visibleColumn, function(item) {
        return item.type === "selection";
      });
      var selected = this.getSelectRecords();
      var position = typeof selectToolbar === "object" ? selectToolbar.position : "";
      if (selectColumn && selected && selected.length) {
        var selectTh = this.$el.querySelector("th.tiny-grid-header__column.col__selection");
        var headerWrapper = this.$el.querySelector(".tiny-grid>.tiny-grid__header-wrapper");
        var tr = selectTh.parentNode;
        var thArr = toArray(tr.childNodes);
        var range = document.createRange();
        var rangeBoundingRect;
        var headerBoundingRect = headerWrapper.getBoundingClientRect();
        var layout = {
          width: 0,
          height: 0,
          left: 0,
          top: 0,
          zIndex: 1
        };
        var adjust = 1;
        if (selectColumn.fixed === "right") {
          range.setStart(tr, thArr.indexOf(selectTh));
          range.setEnd(tr, thArr.length);
          rangeBoundingRect = range.getBoundingClientRect();
          layout.left = adjust + "px";
        } else {
          range.setStart(tr, 0);
          range.setEnd(tr, thArr.indexOf(selectTh) + 1);
          rangeBoundingRect = range.getBoundingClientRect();
          layout.left = rangeBoundingRect.width + adjust + "px";
        }
        layout.width = headerBoundingRect.width - rangeBoundingRect.width - 2 * adjust + "px";
        if (!selectColumn.fixed && position === "left") {
          range = document.createRange();
          range.setStart(tr, 0);
          range.setEnd(tr, thArr.indexOf(selectTh));
          rangeBoundingRect = range.getBoundingClientRect();
          layout.left = adjust + "px";
          layout.width = rangeBoundingRect.width - 2 * adjust + "px";
        }
        layout.top = headerBoundingRect.height - rangeBoundingRect.height + adjust + "px";
        layout.height = rangeBoundingRect.height - 2 * adjust + "px";
        return this.$nextTick().then(function() {
          selectToolbarStore.layout = layout;
          selectToolbarStore.visible = true;
        });
      }
    }
    return this.$nextTick();
  },
  // 切换多选工具栏的显示
  toggleSelectToolbarVisible: function toggleSelectToolbarVisible() {
    this.selectToolbarStore.visible = !this.selectToolbarStore.visible;
    return this.$nextTick();
  },
  // 在空数据时Selection列表头复选框禁用，headerAutoDisabled设置为false就会和旧版本兼容
  handleSelectionHeader: function handleSelectionHeader() {
    var tableFullData = this.tableFullData, visibleColumn = this.visibleColumn, _this$selectConfig6 = this.selectConfig, selectConfig = _this$selectConfig6 === void 0 ? {} : _this$selectConfig6;
    var headerAutoDisabled = selectConfig.headerAutoDisabled;
    var selectionColumn = visibleColumn.find(function(column) {
      return column.type === "selection";
    });
    if ((typeof headerAutoDisabled === "undefined" || typeof headerAutoDisabled === "boolean" && headerAutoDisabled) && !tableFullData.length && selectionColumn) {
      this.headerCheckDisabled = true;
    }
  }
};
var Checkbox = {
  host: "table",
  install: function install13(host) {
    Object.assign(host.methods, Methods$1);
  }
};
var Methods = {
  // 展开树节点事件
  triggerTreeExpandEvent: function triggerTreeExpandEvent(event, _ref277) {
    var _this96 = this;
    var row2 = _ref277.row;
    var currentColumn = this.currentColumn, currentRow = this.currentRow;
    var rest = this.toggleTreeExpansion(row2);
    var eventParams = {
      $table: this,
      row: row2,
      rowIndex: this.getRowIndex(row2)
    };
    _emitEvent(this, "toggle-tree-change", [eventParams, event]);
    this.$nextTick(function() {
      if (currentRow) {
        _this96.setCurrentRow(currentRow);
      } else if (currentColumn) {
        _this96.setCurrentColumn(currentColumn);
      }
    });
    return rest;
  },
  // 切换/展开树节点
  toggleTreeExpansion: function toggleTreeExpansion(row2) {
    return this.setTreeExpansion(row2);
  },
  // 处理默认展开树节点
  handleDefaultTreeExpand: function handleDefaultTreeExpand() {
    var _this97 = this;
    var tableFullData = this.tableFullData, treeConfig = this.treeConfig;
    if (!treeConfig) {
      return;
    }
    var children = treeConfig.children, expandAll = treeConfig.expandAll, rowids = treeConfig.expandRowKeys;
    var treeExpandeds = [];
    var rowkey = getTableRowKey(this);
    var isNonEmptyArr = function isNonEmptyArr2(arr) {
      return isArray(arr) && arr.length;
    };
    var doExpandAll = function doExpandAll2() {
      filterTree(tableFullData, function(row2) {
        return isNonEmptyArr(row2[children]) && treeExpandeds.push(row2);
      }, treeConfig);
      _this97.treeExpandeds = treeExpandeds;
    };
    var doExpandRows = function doExpandRows2() {
      rowids.forEach(function(rowid2) {
        var matchObj = findTree(tableFullData, function(item) {
          return rowid2 === get(item, rowkey);
        }, treeConfig);
        matchObj && isNonEmptyArr(matchObj.item[children]) && treeExpandeds.push(matchObj.item);
      });
      _this97.treeExpandeds = treeExpandeds;
    };
    if (expandAll) {
      doExpandAll();
    } else if (rowids) {
      doExpandRows();
    }
    setTreeScrollYCache(this);
  },
  setAllTreeExpansion: function setAllTreeExpansion(expanded) {
    var tableFullData = this.tableFullData, treeConfig = this.treeConfig;
    var children = treeConfig.children;
    var treeExpandeds = [];
    if (expanded) {
      var rowHandler = function rowHandler2(row2) {
        if (row2[children] && row2[children].length) {
          treeExpandeds.push(row2);
        }
      };
      eachTree(tableFullData, rowHandler, treeConfig);
    }
    this.treeExpandeds = treeExpandeds;
    setTreeScrollYCache(this);
    return this.$nextTick().then(this.recalculate);
  },
  // 设置展开树形节点，二个参数设置这一行展开与否：支持单行，支持多行
  setTreeExpansion: function setTreeExpansion(rows, expanded) {
    var treeConfig = this.treeConfig, treeExpandeds = this.treeExpandeds, tableFullData = this.tableFullData;
    var accordion = treeConfig.accordion, children = treeConfig.children;
    var isToggle = arguments.length === 1;
    if (!rows) {
      return this.$nextTick().then(this.recalculate);
    }
    if (!isArray(rows)) {
      rows = [rows];
    }
    if (accordion) {
      rows = rows.slice(rows.length - 1, rows.length);
    }
    var treeExpandedsCopy = [].concat(treeExpandeds);
    rows.forEach(function(row2) {
      if (row2[children] && row2[children].length) {
        var _index9 = treeExpandedsCopy.indexOf(row2);
        if (accordion) {
          var matchObj = findTree(tableFullData, function(item) {
            return item === row2;
          }, treeConfig);
          remove(treeExpandedsCopy, function(item) {
            return ~matchObj.items.indexOf(item);
          });
        }
        if (~_index9 && (isToggle || !expanded)) {
          treeExpandedsCopy.splice(_index9, 1);
          return;
        }
        if (!~_index9 && (isToggle || expanded)) {
          treeExpandedsCopy.push(row2);
        }
      }
    });
    this.treeExpandeds = treeExpandedsCopy;
    setTreeScrollYCache(this);
    return this.$nextTick().then(this.recalculate);
  },
  hasTreeExpand: function hasTreeExpand(row2) {
    return ~this.treeExpandeds.indexOf(row2);
  },
  clearTreeExpand: function clearTreeExpand() {
    var _this98 = this;
    var hasExpand = this.treeExpandeds.length;
    this.treeExpandeds = [];
    setTreeScrollYCache(this);
    return this.$nextTick().then(function() {
      return hasExpand ? _this98.recalculate() : 0;
    });
  }
};
var Tree = {
  host: "table",
  install: function install14(host) {
    Object.assign(host.methods, Methods);
  }
};
var version = "3.undefined";
var plugins = [Panel, Edit, Export, Keyboard, Validator, Resize, Panel$1, FetchData, Pager, Toolbar, ColumnAnchor, Dragger, Sort, Tooltip, Checkbox, Tree];
GridAdapter.setup({
  i18n: t
});
GridAdapter.t = t;
plugins.map(function(plugin) {
  return plugin.install(plugin.host === "grid" ? Grid : Table);
});
var getWrapFunc = function getWrapFunc2(name) {
  return function() {
    var tinyTable = this.$refs.tinyTable;
    if (tinyTable) {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return this.$refs.tinyTable[name].apply(tinyTable, args);
    }
  };
};
Object.keys(Table.methods).forEach(function(name) {
  if (!Grid.methods[name]) {
    Grid.methods[name] = getWrapFunc(name);
  }
});
Grid.version = version;
Grid.install = function(Vue) {
  Vue.component(Grid.name, Grid);
};
export {
  GridAdapter,
  Column as GridColumn,
  GlobalConfig$2 as GridConfig,
  Radio as GridRadio,
  index as GridTools,
  Grid as default
};
