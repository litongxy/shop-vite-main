/**
 * MIT License
 *
 * Copyright (c) 2019 Xu Liangzhan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
import { hooks } from '@opentiny/vue-common';
declare const _default: hooks.DefineComponent<{
    filterStore: ObjectConstructor;
    optimizeOpts: ObjectConstructor;
}, void, {
    popperJS: null;
    showAdvance: boolean;
    showAdvItems: boolean;
    listPopper: null;
}, {
    condition(): any;
    visible(): any;
    id(): any;
    i18n(): (this: any, path: any, options?: any) => any;
}, {
    updatePanel: Function;
    renderBase(): import("vue/jsx-runtime").JSX.Element;
    renderDefault(): import("vue/jsx-runtime").JSX.Element | null;
    renderExtends(): import("vue/jsx-runtime").JSX.Element | null;
    renderInput(): import("vue/jsx-runtime").JSX.Element | null;
    renderEnumable(): import("vue/jsx-runtime").JSX.Element | null;
    renderSimple(): import("vue/jsx-runtime").JSX.Element | null;
    renderSlot(h: any): any;
    filterCheckAllEvent(event: any, value: any): void;
    resetInput(): void;
    confirmFilter(type: any): void;
    commitFilter(): void;
    resetFilter(): void;
    clearFilter(): void;
    filterNull(empty: any): void;
    filterExtends(item: any): void;
    filterInput(): void;
    filterDate(): void;
    filterEnum(): void;
    close(): void;
    correctRelations(): void;
}, hooks.ComponentOptionsMixin, hooks.ComponentOptionsMixin, {}, string, hooks.PublicProps, Readonly<hooks.ExtractPropTypes<{
    filterStore: ObjectConstructor;
    optimizeOpts: ObjectConstructor;
}>>, {}, {}>;
export default _default;
