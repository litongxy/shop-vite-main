/**
 * MIT License
 *
 * Copyright (c) 2019 Xu Liangzhan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
import { hooks } from '@opentiny/vue-common';
declare const _default: hooks.DefineComponent<{
    align: {
        type: StringConstructor;
        default: () => any;
    };
    autoResize: BooleanConstructor;
    border: {
        type: BooleanConstructor;
        default: () => any;
    };
    cellClassName: (StringConstructor | FunctionConstructor)[];
    columnKey: BooleanConstructor;
    columnMinWidth: (StringConstructor | NumberConstructor)[];
    columnWidth: (StringConstructor | NumberConstructor)[];
    contextMenu: ObjectConstructor;
    customs: ArrayConstructor;
    data: (ObjectConstructor | ArrayConstructor)[];
    dropConfig: ObjectConstructor;
    editConfig: (ObjectConstructor | BooleanConstructor)[];
    editRules: ObjectConstructor;
    expandConfig: ObjectConstructor;
    fit: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    footerAlign: {
        type: StringConstructor;
        default: () => any;
    };
    footerCellClassName: (StringConstructor | FunctionConstructor)[];
    footerMethod: FunctionConstructor;
    footerRowClassName: (StringConstructor | FunctionConstructor)[];
    footerSpanMethod: FunctionConstructor;
    headerAlign: {
        type: StringConstructor;
        default: () => any;
    };
    headerCellClassName: (StringConstructor | FunctionConstructor)[];
    headerRowClassName: (StringConstructor | FunctionConstructor)[];
    headerSuffixIconAbsolute: BooleanConstructor;
    height: (StringConstructor | NumberConstructor)[];
    highlightCell: BooleanConstructor;
    highlightCurrentColumn: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightCurrentRow: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightHoverColumn: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightHoverRow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    isAsyncColumn: BooleanConstructor;
    isCenterEmpty: BooleanConstructor;
    isDragHeaderSorting: BooleanConstructor;
    keyboardConfig: ObjectConstructor;
    loading: BooleanConstructor;
    loadingComponent: ObjectConstructor;
    maxHeight: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    mouseConfig: ObjectConstructor;
    optimization: ObjectConstructor;
    params: ObjectConstructor;
    radioConfig: ObjectConstructor;
    remoteFilter: BooleanConstructor;
    remoteSort: BooleanConstructor;
    renderEmpty: FunctionConstructor;
    renderRowAfter: FunctionConstructor;
    resizable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    resizableConfig: ObjectConstructor;
    rowClassName: (StringConstructor | FunctionConstructor)[];
    rowGroup: ObjectConstructor;
    rowId: {
        type: StringConstructor;
        default: () => string;
    };
    rowKey: BooleanConstructor;
    rowSpan: ArrayConstructor;
    scrollLoad: ObjectConstructor;
    selectConfig: ObjectConstructor;
    showFooter: BooleanConstructor;
    showHeader: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    showHeaderOverflow: {
        type: (StringConstructor | BooleanConstructor)[];
        default: () => any;
    };
    showOverflow: {
        type: (StringConstructor | BooleanConstructor)[];
        default: () => any;
    };
    size: {
        type: StringConstructor;
        default: () => any;
    };
    sortConfig: ObjectConstructor;
    sortMethod: FunctionConstructor;
    sortable: {
        type: BooleanConstructor;
        default: boolean;
    };
    spanMethod: FunctionConstructor;
    startIndex: {
        type: NumberConstructor;
        default: number;
    };
    stripe: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    stripeSaas: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    borderSaas: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    borderVertical: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    summaryConfig: ObjectConstructor;
    syncResize: BooleanConstructor;
    tableLayout: StringConstructor;
    tooltipConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    treeConfig: ObjectConstructor;
    validConfig: ObjectConstructor;
    cardConfig: ObjectConstructor;
    viewType: {
        type: StringConstructor;
        default: () => string;
    };
    mfShow: {
        type: StringConstructor;
        default: () => string;
    };
    columnAnchor: ArrayConstructor;
    renderFooter: FunctionConstructor;
    listConfig: ObjectConstructor;
    ganttConfig: ObjectConstructor;
    customConfig: ObjectConstructor;
    prefetch: (ArrayConstructor | BooleanConstructor)[];
    intersectionOption: ObjectConstructor;
    equals: FunctionConstructor;
    operationColumnResizable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    autoClearMouseChecked: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoClearKeyboardCopy: {
        type: BooleanConstructor;
        default: boolean;
    };
    customColumnNames: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string;
    };
}, {
    slots: Readonly<{
        [name: string]: hooks.Slot<any> | undefined;
    }>;
    tableListeners: any;
    tinyTheme: hooks.Ref<any>;
    id: hooks.Ref<any>;
    collectColumn: hooks.Ref<never[]>;
    tableFullColumn: hooks.Ref<never[]>;
    visibleColumn: hooks.Ref<never[]>;
    tableColumn: hooks.Ref<never[]>;
}, object, {
    bodyCtxMenu(): any;
    ctxMenuList(): never[];
    ctxMenuOpts(): object;
    hasFilter(): boolean;
    hasTip(): boolean;
    headerCtxMenu(): any;
    isCtxMenu(): any;
    isGroup(): boolean;
    isResizable(): boolean;
    optimizeOpts(): object;
    sortOpts(): object;
    tooltipContentOpts(): object;
    vSize(): any;
    vaildTipOpts(): object;
    validOpts(): any;
    computerTableBodyHeight(): string;
    isThemeTiny(): boolean;
    isThemeSaas(): boolean;
    isViewDefault(): boolean;
    isShapeTable(): boolean;
    columnNames(): string[];
}, {
    handleDataChange(): void;
    viewCls(module: any): any;
    getParentElem(): any;
    updateParentHeight(): void;
    getParentHeight(): any;
    clearAll(silent: any): any;
    refreshData(data: any): any;
    refreshStyle(): any;
    updateData(): any;
    handleTableData(force: any): any;
    loadTableData(datas: any, notRefresh: any): any;
    reloadData(datas: any): any;
    loadData(datas: any): Promise<any>;
    reloadRow(row: any, record: any, field: any): any;
    reloadColumn(columns: any): any;
    loadColumn(columns: any): Promise<any>;
    updateCache(source: any): void;
    cacheColumnMap(): void;
    getRowNode(tr: any): any;
    getColumnNode(cell: any): any;
    getRowIndex(row: any): any;
    getColumnIndex(column: any): any;
    hasIndexColumn(column: any): any;
    defineField(row: any, copy: any): any;
    isTemporaryRow(row: any): any;
    createData(records: any, copy: any): Promise<unknown>;
    createRow(records: any): Promise<unknown>;
    clearData(rows: any, field: any): any;
    hasRowInsert(row: any): number;
    compareRow(row: any, originalRow: any, field: any): any;
    hasRowChange(row: any, field: any): any;
    getColumns(columnIndex: any): any;
    getColumnById(colid: any): any;
    getColumnByField(field: any): any;
    getTableColumn(): {
        fullColumn: any;
        visibleColumn: any;
        tableColumn: any;
        collectColumn: any;
    };
    getData(rowIndex: any): any;
    getSelectRecords(notCopy: any): any;
    updateAfterFullData(): any;
    getRowById(rowid: any): any;
    getTableData(): {
        visibleData: any;
        footerData: any;
        tableData: any;
        fullData: any;
    };
    handleDefault(): void;
    mergeCustomColumn(customColumns: any, sort: any, colWidth: any): void;
    resetAll(): void;
    hideColumn(tableColumn: any): any;
    showColumn(tableColumn: any): any;
    resetCustoms(): any;
    handleVisibleColumn(tableColumn: any, visible: any): any;
    reloadCustoms(customColumns: any, sort: any, colWidth: any): any;
    watchColumn(value: any): void;
    refreshColumn(): any;
    analyColumnWidth(): void;
    recalculate(): any;
    autoCellWidth(headerEl: any, bodyEl: any, footerEl: any): void;
    syncHeaderHeight(): void;
    resetResizable(): any;
    updateStyle(): any;
    preventEvent(event: any, type: any, args: any, next: any, end: any): void;
    blurOutside({ row, args, column }: {
        row: any;
        args: any;
        column: any;
    }, event: any): boolean | undefined;
    handleGlobalMousedownEvent: typeof import("./events").handleGlobalMousedownEvent;
    handleGlobalBlurEvent: typeof import("./events").handleGlobalBlurEvent;
    handleGlobalMousewheelEvent: typeof import("./events").handleGlobalMousewheelEvent;
    handleEscKeyDown: typeof import("./events").handleEscKeyDown;
    handleEnterKeyDown: typeof import("./events").handleEnterKeyDown;
    handleCtxMenu: typeof import("./events").handleCtxMenu;
    handleArrowKeyDown: typeof import("./events").handleArrowKeyDown;
    handleDelKeyDown: typeof import("./events").handleDelKeyDown;
    handleSpaceKeyDown: typeof import("./events").handleSpaceKeyDown;
    handleTabKeyDown: typeof import("./events").handleTabKeyDown;
    handleCopyKeyDown: typeof import("./events").handleCopyKeyDown;
    handleF2KeyDown: typeof import("./events").handleF2KeyDown;
    handleOtherKeyDown: typeof import("./events").handleOtherKeyDown;
    handleGlobalKeydownEvent: typeof import("./events").handleGlobalKeydownEvent;
    handleGlobalResizeEvent: typeof import("./events").handleGlobalResizeEvent;
    handleGlobalMousedownCaptureEvent: typeof import("./events").handleGlobalMousedownCaptureEvent;
    handleRadioDefChecked(): void;
    triggerRadioRowEvent(event: any, params: any): void;
    triggerCurrentRowEvent(event: any, params: any): void;
    setCurrentRow(row: any): any;
    setRadioRow(row: any): any;
    clearCurrentRow(): any;
    clearRadioRow(): any;
    getCurrentRow(): any;
    getRadioRow(): any;
    triggerHeaderCellClickEvent(event: any, params: any): any;
    setCurrentColumn(column: any): any;
    clearCurrentColumn(): any;
    handleChangeCell(event: any, params: any): void;
    triggerCellClickEvent(event: any, params: any): void;
    triggerCellDBLClickEvent(event: any, params: any): void;
    triggerSortEvent(event: any, column: any, order: any): void;
    sort(field: any, order: any): any;
    clearSort(): any;
    toggleGroupExpansion(row: any): void;
    triggerRowExpandEvent(event: any, { row }: {
        row: any;
    }): any;
    toggleRowExpansion(row: any): any;
    handleDefaultRowExpand(): void;
    setAllRowExpansion(expanded: any): any;
    setRowExpansion(rows: any, expanded: any): any;
    hasRowExpand(row: any): number;
    clearRowExpand(): any;
    getVirtualScroller(): {
        scrollX: any;
        scrollY: any;
        scrollLeft: any;
        scrollTop: any;
    };
    triggerScrollXEvent(event: any): void;
    debounceScrollX(event: any): void;
    loadScrollXData(): void;
    triggerScrollYEvent(event: any): void;
    debounceScrollLoad(event: any): void;
    loadScrollYData(event: any): void;
    getRowHeight(): any;
    computeScrollLoad(): any;
    updateScrollXData(): void;
    updateScrollXSpace(): void;
    debounceRaf(handlerKey: any, callback: any): void;
    updateScrollYData(): void;
    updateScrollYSpace(): void;
    updateScrollLoadBar(event: any): void;
    scrollTo(scrollLeft: any, scrollTop: any): any;
    scrollToRow(row: any, column: any, isDelay: any, move: any): any;
    scrollToTreeRow(row: any): any;
    scrollToColumn(column: any, isDelay: any, move: any): any;
    resetScrollTop(): void;
    clearScroll(): any;
    updateFooter(): any;
    updateStatus(scope: any, cellValue: any, renderOpts: any): any;
    updateScrollStatus(): void;
    getAsyncColumnUniqueKey(property: any, row: any): string;
    getAsyncColumnName(property: any): string;
    collectAsyncColumn(tableData: any): never[];
    handleAsyncColumn(tableData: any): void;
    handleResolveColumn(tableData: any, fetchColumns: any): void;
    connect({ toolbar }: {
        toolbar: any;
    }): void;
    getEventTargetNode: (event: any, container: any, queryCls: any) => {
        flag: boolean;
        container: any;
        targetElem: any;
    } | {
        flag: boolean;
        container?: undefined;
        targetElem?: undefined;
    };
    handleVisibilityChange(visible: any, entry: any): void;
    updateTableBodyHeight(): void;
    toggleColumnOrder(column: any): "asc" | "desc" | null;
    watchDataForVue3(): void;
    getVm(name: any): any;
    assembleColumns(): void;
    isValidCustomColumn(columnName: any): any;
    computeCollectKey(): string;
    getAllSelection(): any;
    attemptRestoreScoll(options: any): any;
}, hooks.ComponentOptionsMixin, hooks.ComponentOptionsMixin, {}, string, hooks.PublicProps, Readonly<hooks.ExtractPropTypes<{
    align: {
        type: StringConstructor;
        default: () => any;
    };
    autoResize: BooleanConstructor;
    border: {
        type: BooleanConstructor;
        default: () => any;
    };
    cellClassName: (StringConstructor | FunctionConstructor)[];
    columnKey: BooleanConstructor;
    columnMinWidth: (StringConstructor | NumberConstructor)[];
    columnWidth: (StringConstructor | NumberConstructor)[];
    contextMenu: ObjectConstructor;
    customs: ArrayConstructor;
    data: (ObjectConstructor | ArrayConstructor)[];
    dropConfig: ObjectConstructor;
    editConfig: (ObjectConstructor | BooleanConstructor)[];
    editRules: ObjectConstructor;
    expandConfig: ObjectConstructor;
    fit: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    footerAlign: {
        type: StringConstructor;
        default: () => any;
    };
    footerCellClassName: (StringConstructor | FunctionConstructor)[];
    footerMethod: FunctionConstructor;
    footerRowClassName: (StringConstructor | FunctionConstructor)[];
    footerSpanMethod: FunctionConstructor;
    headerAlign: {
        type: StringConstructor;
        default: () => any;
    };
    headerCellClassName: (StringConstructor | FunctionConstructor)[];
    headerRowClassName: (StringConstructor | FunctionConstructor)[];
    headerSuffixIconAbsolute: BooleanConstructor;
    height: (StringConstructor | NumberConstructor)[];
    highlightCell: BooleanConstructor;
    highlightCurrentColumn: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightCurrentRow: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightHoverColumn: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightHoverRow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    isAsyncColumn: BooleanConstructor;
    isCenterEmpty: BooleanConstructor;
    isDragHeaderSorting: BooleanConstructor;
    keyboardConfig: ObjectConstructor;
    loading: BooleanConstructor;
    loadingComponent: ObjectConstructor;
    maxHeight: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    mouseConfig: ObjectConstructor;
    optimization: ObjectConstructor;
    params: ObjectConstructor;
    radioConfig: ObjectConstructor;
    remoteFilter: BooleanConstructor;
    remoteSort: BooleanConstructor;
    renderEmpty: FunctionConstructor;
    renderRowAfter: FunctionConstructor;
    resizable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    resizableConfig: ObjectConstructor;
    rowClassName: (StringConstructor | FunctionConstructor)[];
    rowGroup: ObjectConstructor;
    rowId: {
        type: StringConstructor;
        default: () => string;
    };
    rowKey: BooleanConstructor;
    rowSpan: ArrayConstructor;
    scrollLoad: ObjectConstructor;
    selectConfig: ObjectConstructor;
    showFooter: BooleanConstructor;
    showHeader: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    showHeaderOverflow: {
        type: (StringConstructor | BooleanConstructor)[];
        default: () => any;
    };
    showOverflow: {
        type: (StringConstructor | BooleanConstructor)[];
        default: () => any;
    };
    size: {
        type: StringConstructor;
        default: () => any;
    };
    sortConfig: ObjectConstructor;
    sortMethod: FunctionConstructor;
    sortable: {
        type: BooleanConstructor;
        default: boolean;
    };
    spanMethod: FunctionConstructor;
    startIndex: {
        type: NumberConstructor;
        default: number;
    };
    stripe: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    stripeSaas: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    borderSaas: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    borderVertical: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    summaryConfig: ObjectConstructor;
    syncResize: BooleanConstructor;
    tableLayout: StringConstructor;
    tooltipConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    treeConfig: ObjectConstructor;
    validConfig: ObjectConstructor;
    cardConfig: ObjectConstructor;
    viewType: {
        type: StringConstructor;
        default: () => string;
    };
    mfShow: {
        type: StringConstructor;
        default: () => string;
    };
    columnAnchor: ArrayConstructor;
    renderFooter: FunctionConstructor;
    listConfig: ObjectConstructor;
    ganttConfig: ObjectConstructor;
    customConfig: ObjectConstructor;
    prefetch: (ArrayConstructor | BooleanConstructor)[];
    intersectionOption: ObjectConstructor;
    equals: FunctionConstructor;
    operationColumnResizable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    autoClearMouseChecked: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoClearKeyboardCopy: {
        type: BooleanConstructor;
        default: boolean;
    };
    customColumnNames: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string;
    };
}>>, {
    size: string;
    border: boolean;
    sortable: boolean;
    remoteSort: boolean;
    startIndex: number;
    viewType: string;
    rowKey: boolean;
    mfShow: string;
    highlightCurrentRow: boolean;
    highlightCurrentColumn: boolean;
    columnKey: boolean;
    isDragHeaderSorting: boolean;
    resizable: boolean;
    headerSuffixIconAbsolute: boolean;
    operationColumnResizable: boolean;
    showHeaderOverflow: string | boolean;
    headerAlign: string;
    align: string;
    footerAlign: string;
    showOverflow: string | boolean;
    rowId: string;
    isCenterEmpty: boolean;
    loading: boolean;
    remoteFilter: boolean;
    showFooter: boolean;
    fit: boolean;
    isAsyncColumn: boolean;
    showHeader: boolean;
    highlightCell: boolean;
    stripe: boolean;
    highlightHoverRow: boolean;
    highlightHoverColumn: boolean;
    stripeSaas: boolean;
    borderSaas: boolean;
    borderVertical: boolean;
    syncResize: boolean;
    autoResize: boolean;
    tooltipConfig: Record<string, any>;
    autoClearMouseChecked: boolean;
    autoClearKeyboardCopy: boolean;
    customColumnNames: string | unknown[];
}, {}>;
export default _default;
