import { defineComponent, $prefix, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/watermark/vue';
import '@opentiny/vue-theme/watermark/index.css';
import { openBlock, createElementBlock, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var $constants = {
  font: {
    color: "rgba(0,0,0,.15)",
    fontSize: 16,
    fontWeight: "normal",
    fontFamily: "sans-serif",
    fontStyle: "normal"
  }
};
var _sfc_main = defineComponent({
  name: $prefix + "Watermark",
  props: {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    width: {
      type: Number,
      default: 120
    },
    height: {
      type: Number,
      default: 64
    },
    rotate: {
      type: Number,
      default: -22
    },
    zIndex: {
      type: Number,
      default: 9
    },
    image: {
      type: String
    },
    content: {
      type: [String, Array]
    },
    font: {
      type: Object
    },
    gap: {
      type: Array,
      default: [100, 100]
    },
    offset: {
      type: Array,
      default: [20, 20]
    },
    customClass: {
      type: String,
      default: ""
    },
    interlaced: {
      type: Boolean,
      default: true
    }
  },
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      mono: true,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-watermark-wrapper",
  ref: "parentRef"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    _hoisted_1,
    [renderSlot(_ctx.$slots, "default")],
    512
    /* NEED_PATCH */
  );
}
var Watermark = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
Watermark.install = function(Vue) {
  Vue.component(Watermark.name, Watermark);
};
Watermark.version = version;

export { Watermark as default };
