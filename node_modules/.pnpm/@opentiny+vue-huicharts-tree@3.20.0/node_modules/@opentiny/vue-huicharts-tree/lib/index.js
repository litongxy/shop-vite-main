import Core, { itemLabel, itemContent, isObject } from '@opentiny/vue-huicharts-core';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getTreeLegend = function getTreeLegend2(args) {
  var dimension = args.dimension, rows = args.rows;
  var result = rows.map(function(row) {
    return row[dimension];
  });
  return {
    data: result
  };
};
var getTreeTooltip = function getTreeTooltip2(opts) {
  var tooltipFormatter = opts.tooltipFormatter;
  return {
    trigger: "item",
    triggerOn: "mousemove",
    formatter: function formatter(item) {
      if (tooltipFormatter) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return tooltipFormatter.apply(void 0, [item].concat(args));
      }
      var template = [];
      var treeAncestors = item.treeAncestors, value = item.value;
      var names = [];
      treeAncestors.forEach(function(ancestor, idx) {
        idx && names.push(ancestor.name);
      });
      template.push("" + itemLabel(names.join(".")));
      template.push("" + itemContent(value));
      return template.join("");
    }
  };
};
var getTreeSeries = function getTreeSeries2(args) {
  var dimension = args.dimension, metrics = args.metrics, rows = args.rows, seriesMap = args.seriesMap;
  var series = [];
  rows.forEach(function(row) {
    var seriesItem = seriesMap[row[dimension]];
    var result = {
      type: "tree",
      name: row[dimension],
      data: row[metrics]
    };
    if (seriesItem) {
      Object.keys(seriesItem).forEach(function(key) {
        if (!isObject(result[key])) {
          result[key] = seriesItem[key];
        } else {
          Object.assign(result[key], seriesItem[key]);
        }
      });
    }
    series.push(result);
  });
  return series;
};
var tree = function tree2(columns, rows, settings, extra) {
  var _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? columns[1] : _settings$metrics, _settings$seriesMap = settings.seriesMap, seriesMap = _settings$seriesMap === void 0 ? {} : _settings$seriesMap;
  var legendVisible = extra.legendVisible, tooltipFormatter = extra.tooltipFormatter, tooltipVisible = extra.tooltipVisible;
  var seriesParam = {
    dimension,
    metrics,
    rows,
    seriesMap
  };
  var series = getTreeSeries(seriesParam);
  var legendParam = {
    dimension,
    rows
  };
  var legend = legendVisible && rows.length > 1 && getTreeLegend(legendParam);
  var tooltip = tooltipVisible && getTreeTooltip({
    tooltipFormatter
  });
  var data2 = rows.map(function(item) {
    return {
      name: item.name,
      data: item.value
    };
  });
  return {
    data: data2,
    series,
    legend,
    tooltip,
    tipHtml: tooltip.formatter,
    type: "LineTreeHuiCharts",
    initialTreeDepth: 3
  };
};
var _sfc_main = {
  name: $prefix + "ChartTree",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "TreeChart"
    };
  },
  methods: {
    updateChart: function updateChart() {
      var _this$data = this.data, _this$data$columns = _this$data.columns, columns = _this$data$columns === void 0 ? [] : _this$data$columns, _this$data$rows = _this$data.rows, rows = _this$data$rows === void 0 ? [] : _this$data$rows;
      var extra = {
        tooltipVisible: this.tooltipVisible,
        legendVisible: this.legendVisible,
        tooltipFormatter: this.tooltipFormatter
      };
      var option = tree(columns, rows, this.settings, extra);
      this.huiChartOption = _extends({}, option);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsTree = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsTree.install = function(Vue) {
  Vue.component(HuiChartsTree.name, HuiChartsTree);
};

export { HuiChartsTree, HuiChartsTree as default };
