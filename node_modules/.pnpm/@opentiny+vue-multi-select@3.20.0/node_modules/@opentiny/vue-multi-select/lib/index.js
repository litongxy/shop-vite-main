function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import MobileTemplate from "./mobile.js";
import { t } from "@opentiny/vue-locale";
import "@opentiny/vue-theme-mobile/multi-select/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return MobileTemplate;
};
var MultiSelect = defineComponent({
  name: $prefix + "MultiSelect",
  inject: {},
  props: _extends({}, $props, {
    dataSource: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    modelValue: {
      type: [String, Array],
      default: ""
    },
    searchValue: {
      type: String,
      default: ""
    },
    defaultSelectedArray: {
      type: Array,
      default: function _default2() {
        return [];
      }
    },
    filterable: {
      type: Boolean,
      default: false
    },
    searchPlaceholder: {
      type: String,
      default: function _default3() {
        return t("ui.search.placeholder");
      }
    },
    type: {
      type: String,
      default: "list"
    },
    disabled: {
      type: Boolean,
      default: false
    },
    mask: {
      type: Boolean,
      default: false
    },
    maskOptions: {
      type: Object,
      default: function _default4() {
        return {};
      }
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
MultiSelect.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
MultiSelect.install = function(Vue) {
  Vue.component(MultiSelect.name, MultiSelect);
};
MultiSelect.version = version;
export {
  MultiSelect as default
};
