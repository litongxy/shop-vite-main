import { defineComponent as Q, toRefs as ue, openBlock as d, createElementBlock as P, createElementVNode as F, ref as I, inject as j, provide as Y, onMounted as ge, nextTick as me, onBeforeUnmount as We, unref as l, createBlock as O, normalizeClass as Z, renderSlot as _, mergeProps as Se, createCommentVNode as A, createVNode as le, toDisplayString as ke, Transition as Ee, normalizeProps as Ge, withCtx as ce, resolveComponent as de, normalizeStyle as Be, Fragment as Ie, renderList as De, createSlots as qe, withDirectives as Ae, vShow as He, useSlots as Je, watch as Te, h as se, Teleport as Qe, render as Fe } from "vue";
let G = null;
function et() {
  return G !== null;
}
function tt(e) {
  G && Ne(), G = e;
}
function _e(e) {
  e === G && (G = null);
}
function Ne() {
  G && (G.closeMenu(), G = null);
}
const N = {
  defaultDirection: "br",
  defaultMinWidth: 100,
  defaultMaxWidth: 600,
  defaultZindex: 100,
  defaultZoom: 1,
  defaultAdjustPadding: {
    x: 0,
    y: 10
  }
};
function q(e, t) {
  let u = e.offsetTop;
  return e.offsetParent != null && e.offsetParent != t && (u -= e.offsetParent.scrollTop, u += q(e.offsetParent, t)), u;
}
function J(e, t) {
  let u = e.offsetLeft;
  return e.offsetParent != null && e.offsetParent != t && (u -= e.offsetParent.scrollLeft, u += J(e.offsetParent, t)), u;
}
function nt(e, t, u, a) {
  return {
    x: J(e, a) + t,
    y: q(e, a) + u
  };
}
const xe = "mx-menu-default-container", ot = "mx-menu-container-";
let lt = 0;
function ze(e) {
  const { getContainer: t, zIndex: u } = e;
  if (t) {
    const f = typeof t == "function" ? t() : t;
    if (f) {
      let v = f.getAttribute("id");
      return v || (v = ot + lt++, f.setAttribute("id", v)), {
        eleId: v,
        container: f,
        isNew: !1
      };
    }
  }
  let a = document.getElementById(xe);
  return a || (a = document.createElement("div"), a.setAttribute("id", xe), a.setAttribute("class", "mx-menu-ghost-host mx-fullscreen"), document.body.appendChild(a)), a.style.zIndex = (u == null ? void 0 : u.toString()) || N.defaultZindex.toString(), {
    eleId: xe,
    container: a,
    isNew: !0
  };
}
function st(e) {
  return typeof e == "number" ? `${e}px` : e;
}
const V = Q({
  props: {
    /**
     * Can be VNode or (data: unknown) => VNode
     */
    vnode: {
      type: null
    },
    /**
     * If vnode is a callback, this data will be passed to the callback first parameter.
     * @default null
     */
    data: {
      type: null,
      default: null
    }
  },
  setup(e) {
    const { vnode: t, data: u } = ue(e);
    return () => typeof t.value == "function" ? t.value(u.value) : t.value;
  }
}), fe = (e, t) => {
  const u = e.__vccOpts || e;
  for (const [a, f] of t)
    u[a] = f;
  return u;
}, ut = {}, it = {
  class: "mx-checked-mark",
  "aria-hidden": "true",
  viewBox: "0 0 1024 1024"
}, at = /* @__PURE__ */ F("path", { d: "M129.3,428.6L52,512l345,372.5l575-620.8l-69.5-75L400.4,718.2L129.3,428.6z" }, null, -1), rt = [
  at
];
function dt(e, t) {
  return d(), P("svg", it, rt);
}
const ct = /* @__PURE__ */ fe(ut, [["render", dt]]), ft = {}, vt = {
  class: "mx-right-arrow",
  "aria-hidden": "true",
  viewBox: "0 0 1024 1024"
}, ht = /* @__PURE__ */ F("path", { d: "M307.018 49.445c11.517 0 23.032 4.394 31.819 13.18L756.404 480.18c8.439 8.438 13.181 19.885 13.181 31.82s-4.741 23.38-13.181 31.82L338.838 961.376c-17.574 17.573-46.065 17.573-63.64-0.001-17.573-17.573-17.573-46.065 0.001-63.64L660.944 512 275.198 126.265c-17.574-17.573-17.574-46.066-0.001-63.64C283.985 53.839 295.501 49.445 307.018 49.445z" }, null, -1), mt = [
  ht
];
function pt(e, t) {
  return d(), P("svg", vt, mt);
}
const Ve = /* @__PURE__ */ fe(ft, [["render", pt]]), gt = { class: "mx-item-row" }, bt = ["xlink:href"], Ct = {
  key: 1,
  class: "label"
}, Mt = { class: "mx-item-row" }, yt = { class: "mx-shortcut" }, Pe = /* @__PURE__ */ Q({
  __name: "ContextMenuItem",
  props: {
    /**
     * Is this menu disabled? 
     */
    disabled: {
      type: Boolean,
      default: !1
    },
    /**
     * Is this menu hidden? 
     */
    hidden: {
      type: Boolean,
      default: !1
    },
    customRender: {
      type: Function,
      default: null
    },
    /**
     * Custom css class for submenu
     */
    customClass: {
      type: String,
      default: ""
    },
    clickHandler: {
      type: Function,
      default: null
    },
    /**
     * Menu label
     */
    label: {
      type: [String, Object, Function],
      default: ""
    },
    /**
     * Menu icon (for icon class)
     */
    icon: {
      type: [String, Object, Function],
      default: ""
    },
    /**
     * Custom icon library font class name.
     * 
     * Only for css font icon, If you use the svg icon, you do not need to use this.
     */
    iconFontClass: {
      type: String,
      default: "iconfont"
    },
    /**
     * Is this menu item checked?
     * 
     * The check mark are displayed on the left side of the icon, so it is not recommended to display the icon at the same time.
     */
    checked: {
      type: Boolean,
      default: !1
    },
    /**
     * Shortcut key text display on the right.
     * 
     * The shortcut keys here are only for display. You need to handle the key events by yourself.
     */
    shortcut: {
      type: String,
      default: ""
    },
    /**
     * Display icons use svg symbol (`<use xlink:href="#icon-symbol-name">`) ï¼Œ only valid when icon attribute is empty.
     */
    svgIcon: {
      type: String,
      default: ""
    },
    /**
     * The user-defined attribute of the svg tag, which is valid when using `svgIcon`.
     */
    svgProps: {
      type: Object,
      default: null
    },
    /**
     * Should a fixed-width icon area be reserved for menu items without icon. (this item)
     * 
     * Default is true .
     * 
     * The width of icon area can be override with css var `--mx-menu-placeholder-width`.
     */
    preserveIconWidth: {
      type: Boolean,
      default: !0
    },
    /**
     * Show right arrow on this menu?
     */
    showRightArrow: {
      type: Boolean,
      default: !1
    },
    hasChildren: {
      type: Boolean,
      default: !1
    },
    /**
     * Should close menu when Click this menu item ?
     */
    clickClose: {
      type: Boolean,
      default: !0
    },
    /**
     * When there are subitems in this item, is it allowed to trigger its own click event? Default is false
     */
    clickableWhenHasChildren: {
      type: Boolean,
      default: !1
    },
    rawMenuItem: {
      type: Object,
      default: void 0
    }
  },
  emits: [
    "click",
    "subMenuOpen",
    "subMenuClose"
  ],
  setup(e, { expose: t, emit: u }) {
    const a = e, f = u, {
      clickHandler: v,
      clickClose: x,
      clickableWhenHasChildren: i,
      disabled: p,
      hidden: b,
      label: n,
      icon: S,
      iconFontClass: $,
      showRightArrow: w,
      shortcut: E,
      hasChildren: L
    } = ue(a), M = I(!1), o = I(!1), r = I(), g = j("globalOptions"), C = j("globalHasSlot"), R = j("globalRenderSlot"), c = j("globalCloseMenu"), y = j("menuContext"), W = {
      getSubMenuInstance: () => {
      },
      showSubMenu: () => M.value ? (y.markActiveMenuItem(W, !0), !0) : L.value ? (z(), !0) : !1,
      hideSubMenu: () => {
        y.closeOtherSubMenu();
      },
      isDisabledOrHidden: () => p.value || b.value,
      getElement: () => r.value,
      focus: () => o.value = !0,
      blur: () => o.value = !1,
      click: D
    };
    Y("menuItemInstance", W), ge(() => {
      y.isMenuItemDataCollectedFlag() ? me(() => {
        let m = 0;
        const B = y.getElement();
        if (B) {
          let K = 0;
          for (let X = 0; X < B.children.length; X++) {
            const te = B.children[X];
            if (te.getAttribute("data-type") === "ContextMenuItem") {
              if (te === r.value) {
                m = K;
                break;
              }
              K++;
            }
          }
        }
        y.addChildMenuItem(W, m);
      }) : y.addChildMenuItem(W);
    }), We(() => {
      y.removeChildMenuItem(W);
    });
    function D(m) {
      if (!p.value) {
        if (m) {
          const B = m.target;
          if (B.classList.contains("mx-context-no-clickable") || g.value.ignoreClickClassName && B.classList.contains(g.value.ignoreClickClassName))
            return;
          if (g.value.clickCloseClassName && B.classList.contains(g.value.clickCloseClassName)) {
            m.stopPropagation(), c(a.rawMenuItem);
            return;
          }
        }
        L.value ? i.value ? (typeof v.value == "function" && v.value(m), f("click", m)) : M.value || z() : (typeof v.value == "function" && v.value(m), f("click", m), x.value && c(a.rawMenuItem));
      }
    }
    function z(m) {
      o.value = !1, y.checkCloseOtherSubMenuTimeOut() || y.closeOtherSubMenu(), p.value || (y.markActiveMenuItem(W), L.value && (m || y.markThisOpenedByKeyBoard(), y.addOpenedSubMenu(ee), M.value = !0, me(() => f("subMenuOpen", W))));
    }
    function ee() {
      o.value = !1, M.value = !1, f("subMenuClose", W);
    }
    function H() {
      return {
        disabled: p.value,
        label: n.value,
        icon: S.value,
        iconFontClass: $.value,
        showRightArrow: w.value,
        clickClose: x.value,
        clickableWhenHasChildren: i.value,
        shortcut: E.value,
        theme: g.value.theme,
        isOpen: M,
        hasChildren: L,
        onClick: D,
        onMouseEnter: z,
        closeMenu: c
      };
    }
    return t(W), (m, B) => l(b) ? A("", !0) : (d(), P("div", {
      key: 0,
      class: "mx-context-menu-item-wrapper",
      ref_key: "menuItemRef",
      ref: r,
      "data-type": "ContextMenuItem"
    }, [
      l(C)("itemRender") ? (d(), O(l(V), {
        key: 0,
        vnode: () => l(R)("itemRender", H())
      }, null, 8, ["vnode"])) : e.customRender ? (d(), O(l(V), {
        key: 1,
        vnode: e.customRender,
        data: H()
      }, null, 8, ["vnode", "data"])) : (d(), P("div", {
        key: 2,
        class: Z([
          "mx-context-menu-item",
          l(p) ? "disabled" : "",
          o.value ? "keyboard-focus" : "",
          e.customClass ? " " + e.customClass : "",
          M.value ? "open" : ""
        ]),
        onClick: D,
        onMouseenter: z
      }, [
        _(m.$slots, "default", {}, () => [
          F("div", gt, [
            F("div", {
              class: Z([
                "mx-icon-placeholder",
                e.preserveIconWidth ? "preserve-width" : ""
              ])
            }, [
              _(m.$slots, "icon", {}, () => [
                l(C)("itemIconRender") ? (d(), O(l(V), {
                  key: 0,
                  vnode: () => l(R)("itemIconRender", H())
                }, null, 8, ["vnode"])) : typeof e.svgIcon == "string" && e.svgIcon ? (d(), P("svg", Se({
                  key: 1,
                  class: "icon svg"
                }, e.svgProps), [
                  F("use", { "xlink:href": e.svgIcon }, null, 8, bt)
                ], 16)) : typeof l(S) != "string" ? (d(), O(l(V), {
                  key: 2,
                  vnode: l(S),
                  data: l(S)
                }, null, 8, ["vnode", "data"])) : typeof l(S) == "string" && l(S) !== "" ? (d(), P("i", {
                  key: 3,
                  class: Z(l(S) + " icon " + l($) + " " + l(g).iconFontClass)
                }, null, 2)) : A("", !0)
              ]),
              e.checked ? _(m.$slots, "check", { key: 0 }, () => [
                l(C)("itemCheckRender") ? (d(), O(l(V), {
                  key: 0,
                  vnode: () => l(R)("itemCheckRender", H())
                }, null, 8, ["vnode"])) : A("", !0),
                le(ct)
              ]) : A("", !0)
            ], 2),
            _(m.$slots, "label", {}, () => [
              l(C)("itemLabelRender") ? (d(), O(l(V), {
                key: 0,
                vnode: () => l(R)("itemLabelRender", H())
              }, null, 8, ["vnode"])) : typeof l(n) == "string" ? (d(), P("span", Ct, ke(l(n)), 1)) : (d(), O(l(V), {
                key: 2,
                vnode: l(n),
                data: l(n)
              }, null, 8, ["vnode", "data"]))
            ])
          ]),
          F("div", Mt, [
            l(E) ? _(m.$slots, "shortcut", { key: 0 }, () => [
              l(C)("itemShortcutRender") ? (d(), O(l(V), {
                key: 0,
                vnode: () => l(R)("itemShortcutRender", H())
              }, null, 8, ["vnode"])) : A("", !0),
              F("span", yt, ke(l(E)), 1)
            ]) : A("", !0),
            l(w) ? _(m.$slots, "rightArrow", { key: 1 }, () => [
              l(C)("itemRightArrowRender") ? (d(), O(l(V), {
                key: 0,
                vnode: () => l(R)("itemRightArrowRender", H())
              }, null, 8, ["vnode"])) : A("", !0),
              le(Ve)
            ]) : A("", !0)
          ])
        ])
      ], 34)),
      l(g).menuTransitionProps ? (d(), O(Ee, Ge(Se({ key: 3 }, l(g).menuTransitionProps)), {
        default: ce(() => [
          M.value ? _(m.$slots, "submenu", { key: 0 }) : A("", !0)
        ]),
        _: 3
      }, 16)) : M.value ? _(m.$slots, "submenu", { key: 4 }) : A("", !0)
    ], 512));
  }
}), xt = Q({
  name: "ContextMenuSperator",
  components: {
    VNodeRender: V
  },
  setup() {
    const e = j("globalHasSlot"), t = j("globalRenderSlot");
    return {
      globalHasSlot: e,
      globalRenderSlot: t
    };
  }
}), St = {
  key: 1,
  class: "mx-context-menu-item-sperator mx-context-no-clickable"
};
function kt(e, t, u, a, f, v) {
  const x = de("VNodeRender");
  return e.globalHasSlot("separatorRender") ? (d(), O(x, {
    key: 0,
    vnode: () => e.globalRenderSlot("separatorRender", {})
  }, null, 8, ["vnode"])) : (d(), P("div", St));
}
const we = /* @__PURE__ */ fe(xt, [["render", kt]]), It = Q({
  name: "ContextSubMenu",
  components: {
    ContextMenuItem: Pe,
    ContextMenuSeparator: we,
    ContextMenuIconRight: Ve
  },
  props: {
    /**
     * Items from options
     */
    items: {
      type: Object,
      default: null
    },
    /**
     * Max width for this submenu
     */
    maxWidth: {
      type: [String, Number],
      default: 0
    },
    /**
     * Min width for this submenu
     */
    minWidth: {
      type: [String, Number],
      default: 0
    },
    /**
     * Specifies should submenu adjust it position
     * when the menu exceeds the screen. The default is true
     */
    adjustPosition: {
      type: Boolean,
      default: !0
    },
    /**
     * Menu direction
     */
    direction: {
      type: String,
      default: "br"
    }
  },
  setup(e) {
    const t = j("menuContext"), u = j("globalOptions"), a = j("globalHasSlot"), f = j("globalRenderSlot"), { zIndex: v, getParentWidth: x, getParentHeight: i, getZoom: p } = t, { adjustPosition: b } = ue(e), n = I(), S = I(), $ = I(), w = I(), E = [], L = j("globalSetCurrentSubMenu"), M = [];
    let o = null, r = 0;
    function g() {
      o && o.blur();
    }
    function C(s, h) {
      if (s) {
        for (let T = h !== void 0 ? h : 0; T < M.length; T++)
          if (!M[T].isDisabledOrHidden()) {
            R(T);
            break;
          }
      } else
        for (let T = h !== void 0 ? h : M.length - 1; T >= 0; T--)
          if (!M[T].isDisabledOrHidden()) {
            R(T);
            break;
          }
    }
    function R(s) {
      if (o && g(), s !== void 0 && (o = M[Math.max(0, Math.min(s, M.length - 1))]), !!o && (o.focus(), ne.value)) {
        const h = o.getElement();
        h && (m.value = Math.min(Math.max(-B.value, -h.offsetTop - h.offsetHeight + U.value), 0));
      }
    }
    function c() {
      L(y);
    }
    const y = {
      isTopLevel: () => t.getParentContext() === null,
      closeSelfAndActiveParent: () => {
        const s = z.getParentContext();
        if (s) {
          s.closeOtherSubMenu();
          const h = s.getSubMenuInstanceContext();
          if (h)
            return h.focusCurrentItem(), !0;
        }
        return !1;
      },
      closeCurrentSubMenu: () => {
        var s;
        return (s = z.getParentContext()) == null ? void 0 : s.closeOtherSubMenu();
      },
      moveCurrentItemFirst: () => C(!0),
      moveCurrentItemLast: () => C(!1),
      moveCurrentItemDown: () => C(!0, o ? M.indexOf(o) + 1 : 0),
      moveCurrentItemUp: () => C(!1, o ? M.indexOf(o) - 1 : 0),
      focusCurrentItem: () => R(),
      openCurrentItemSubMenu: () => o ? o == null ? void 0 : o.showSubMenu() : !1,
      triggerCurrentItemClick: (s) => o == null ? void 0 : o.click(s)
    };
    let W = !1, D = !1;
    const z = {
      zIndex: v + 1,
      container: t.container,
      adjustPadding: u.value.adjustPadding || N.defaultAdjustPadding,
      getParentWidth: () => {
        var s;
        return ((s = S.value) == null ? void 0 : s.offsetWidth) || 0;
      },
      getParentHeight: () => {
        var s;
        return ((s = S.value) == null ? void 0 : s.offsetHeight) || 0;
      },
      getParentX: () => k.value.x,
      getParentY: () => k.value.y,
      getParentAbsX: () => S.value ? J(S.value, t.container) : 0,
      getParentAbsY: () => S.value ? q(S.value, t.container) : 0,
      getPositon: () => [0, 0],
      getZoom: () => u.value.zoom || N.defaultZoom,
      addOpenedSubMenu(s) {
        E.push(s);
      },
      closeOtherSubMenu() {
        E.forEach((s) => s()), E.splice(0, E.length), L(y);
      },
      checkCloseOtherSubMenuTimeOut() {
        return r ? (clearTimeout(r), r = 0, !0) : !1;
      },
      closeOtherSubMenuWithTimeOut() {
        r = setTimeout(() => {
          r = 0, this.closeOtherSubMenu();
        }, 200);
      },
      addChildMenuItem: (s, h) => {
        h === void 0 ? M.push(s) : M.splice(h, 0, s);
      },
      removeChildMenuItem: (s) => {
        M.splice(M.indexOf(s), 1), s.getSubMenuInstance = () => {
        };
      },
      markActiveMenuItem: (s, h = !1) => {
        g(), o = s, h && R();
      },
      markThisOpenedByKeyBoard: () => {
        W = !0;
      },
      isOpenedByKeyBoardFlag: () => W ? (W = !1, !0) : !1,
      isMenuItemDataCollectedFlag: () => D,
      getElement: () => S.value || null,
      getParentContext: () => t,
      getSubMenuInstanceContext: () => y
    };
    Y("menuContext", z);
    const ee = {
      getChildItem: (s) => M[s],
      getMenuDimensions: () => n.value ? {
        width: n.value.offsetWidth,
        height: n.value.offsetHeight
      } : { width: 0, height: 0 },
      getSubmenuRoot: () => n.value,
      getMenu: () => S.value,
      getScrollValue: () => m.value,
      setScrollValue: (s) => m.value = s,
      getScrollHeight: () => B.value,
      getMaxHeight: () => U.value,
      getPosition: () => k.value,
      setPosition: (s, h) => {
        k.value.x = s, k.value.y = h;
      }
    }, H = j("menuItemInstance", void 0);
    H && (H.getSubMenuInstance = () => ee);
    const m = I(0), B = I(0);
    function K(s) {
      s ? m.value = Math.min(Math.max(m.value - 50, -B.value), 0) : m.value = Math.min(m.value + 50, 0);
    }
    function X(s) {
      s.preventDefault(), s.stopPropagation(), K(s.deltaY > 0);
    }
    function te(s) {
      u.value.mouseScroll && (s.preventDefault(), s.stopPropagation(), K(s.deltaY > 0));
    }
    const ne = I(!1), k = I({ x: 0, y: 0 }), U = I(0);
    return ge(() => {
      const s = t.getPositon();
      k.value = {
        x: (s[0] ?? u.value.xOffset ?? 0) / p(),
        y: (s[1] ?? u.value.yOffset ?? 0) / p()
      }, L(y), me(() => {
        var T, Oe;
        const h = S.value;
        if (h && $.value) {
          const { container: oe } = t, be = (x == null ? void 0 : x()) ?? 0, $e = (i == null ? void 0 : i()) ?? 0, ve = typeof t.adjustPadding == "number" ? t.adjustPadding : ((T = t.adjustPadding) == null ? void 0 : T.x) ?? 0, he = typeof t.adjustPadding == "number" ? t.adjustPadding : ((Oe = t.adjustPadding) == null ? void 0 : Oe.y) ?? 0, ie = $e > 0 ? he : 0, Ye = document.documentElement.scrollHeight / p(), Ze = document.documentElement.scrollWidth / p(), Xe = Math.min(Ze, oe.offsetWidth), Ce = Math.min(Ye, oe.offsetHeight);
          let Me = J(h, oe), ye = q(h, oe);
          e.direction.includes("l") ? k.value.x -= h.offsetWidth + ve : e.direction.includes("r") ? k.value.x += be + ve : (k.value.x += be / 2, k.value.x -= (h.offsetWidth + ve) / 2), e.direction.includes("t") ? k.value.y -= (h.offsetHeight + he * 2) / p() : e.direction.includes("b") ? k.value.y -= he / p() : (k.value.y += $e / 2 / p(), k.value.y -= (h.offsetHeight + he) / 2 / p()), b.value && me(() => {
            Me = J(h, oe), ye = q(h, oe);
            const Ue = Me + h.offsetWidth - Xe, Re = ye + h.offsetHeight + ie * 2 - Ce;
            if (ne.value = Re > 0, B.value = h.offsetHeight - Ce + ie * 2, Ue > 0) {
              const ae = be + h.offsetWidth - ve, re = Me;
              ae > re ? k.value.x -= re : k.value.x -= ae;
            }
            if (ne.value) {
              const ae = Re, re = ye;
              ae > re ? k.value.y -= re - ie : k.value.y -= ae - ie, U.value = Ce - ie * 2;
            } else
              U.value = 0;
          });
        }
        h == null || h.focus({
          preventScroll: !0
        }), t.isOpenedByKeyBoardFlag() && C(!0), D = !0;
      });
    }), We(() => {
      H && (H.getSubMenuInstance = () => {
      });
    }), {
      submenuRoot: n,
      menu: S,
      scroll: $,
      options: u,
      zIndex: v,
      constOptions: N,
      scrollValue: m,
      upScrollButton: w,
      overflow: ne,
      position: k,
      scrollHeight: B,
      maxHeight: U,
      ...ee,
      globalHasSlot: a,
      globalRenderSlot: f,
      onScroll: K,
      onSubMenuBodyClick: c,
      onMouseWhell: te,
      onMouseWhellMx: X,
      solveNumberOrStringSize: st
    };
  }
});
const wt = {
  key: 0,
  class: "mx-context-menu-updown placeholder"
}, Wt = {
  key: 1,
  class: "mx-context-menu-updown placeholder"
}, Pt = {
  class: "mx-context-menu-scroll",
  ref: "scroll"
};
function Ot(e, t, u, a, f, v) {
  const x = de("ContextMenuSeparator"), i = de("ContextSubMenu", !0), p = de("ContextMenuItem"), b = de("ContextMenuIconRight");
  return d(), P("div", {
    ref: "submenuRoot",
    class: Z([
      "mx-context-menu",
      e.options.customClass ? e.options.customClass : "",
      e.options.theme ?? ""
    ]),
    style: Be({
      maxWidth: e.maxWidth ? e.solveNumberOrStringSize(e.maxWidth) : `${e.constOptions.defaultMaxWidth}px`,
      minWidth: e.minWidth ? e.solveNumberOrStringSize(e.minWidth) : `${e.constOptions.defaultMinWidth}px`,
      maxHeight: e.overflow && e.maxHeight > 0 ? `${e.maxHeight}px` : void 0,
      zIndex: e.zIndex,
      left: `${e.position.x}px`,
      top: `${e.position.y}px`
    }),
    "data-type": "ContextSubMenu",
    onClick: t[4] || (t[4] = (...n) => e.onSubMenuBodyClick && e.onSubMenuBodyClick(...n)),
    onWheel: t[5] || (t[5] = (...n) => e.onMouseWhell && e.onMouseWhell(...n))
  }, [
    F("div", {
      class: Z(["mx-context-menu-items"]),
      ref: "menu",
      style: Be({
        top: `${e.scrollValue}px`
      })
    }, [
      _(e.$slots, "default", {}, () => [
        e.overflow && e.options.updownButtonSpaceholder ? (d(), P("div", wt)) : A("", !0),
        (d(!0), P(Ie, null, De(e.items, (n, S) => (d(), P(Ie, { key: S }, [
          n.hidden !== !0 && n.divided === "up" ? (d(), O(x, { key: 0 })) : A("", !0),
          n.hidden !== !0 && n.divided === "self" ? (d(), O(x, { key: 1 })) : (d(), O(p, {
            key: 2,
            clickHandler: n.onClick ? ($) => n.onClick($) : void 0,
            disabled: n.disabled,
            hidden: n.hidden,
            icon: n.icon,
            iconFontClass: n.iconFontClass,
            svgIcon: n.svgIcon,
            svgProps: n.svgProps,
            label: n.label,
            customRender: n.customRender,
            customClass: n.customClass,
            checked: n.checked,
            shortcut: n.shortcut,
            clickClose: n.clickClose,
            clickableWhenHasChildren: n.clickableWhenHasChildren,
            preserveIconWidth: n.preserveIconWidth !== void 0 ? n.preserveIconWidth : e.options.preserveIconWidth,
            showRightArrow: n.children && n.children.length > 0,
            hasChildren: n.children && n.children.length > 0,
            rawMenuItem: n,
            onSubMenuOpen: ($) => {
              var w;
              return (w = n.onSubMenuOpen) == null ? void 0 : w.call(n, $);
            },
            onSubMenuClose: ($) => {
              var w;
              return (w = n.onSubMenuClose) == null ? void 0 : w.call(n, $);
            }
          }, qe({ _: 2 }, [
            n.children && n.children.length > 0 ? {
              name: "submenu",
              fn: ce(() => [
                le(i, {
                  items: n.children,
                  maxWidth: n.maxWidth,
                  minWidth: n.minWidth,
                  adjustPosition: n.adjustSubMenuPosition !== void 0 ? n.adjustSubMenuPosition : e.options.adjustPosition,
                  direction: n.direction !== void 0 ? n.direction : e.options.direction
                }, null, 8, ["items", "maxWidth", "minWidth", "adjustPosition", "direction"])
              ]),
              key: "0"
            } : void 0
          ]), 1032, ["clickHandler", "disabled", "hidden", "icon", "iconFontClass", "svgIcon", "svgProps", "label", "customRender", "customClass", "checked", "shortcut", "clickClose", "clickableWhenHasChildren", "preserveIconWidth", "showRightArrow", "hasChildren", "rawMenuItem", "onSubMenuOpen", "onSubMenuClose"])),
          n.hidden !== !0 && (n.divided === "down" || n.divided === !0) ? (d(), O(x, { key: 3 })) : A("", !0)
        ], 64))), 128)),
        e.overflow && e.options.updownButtonSpaceholder ? (d(), P("div", Wt)) : A("", !0)
      ])
    ], 4),
    F("div", Pt, [
      Ae(F("div", {
        ref: "upScrollButton",
        class: Z("mx-context-menu-updown mx-context-no-clickable up" + (e.overflow && e.scrollValue < 0 ? "" : " disabled")),
        onClick: t[0] || (t[0] = (n) => e.onScroll(!1)),
        onWheel: t[1] || (t[1] = (...n) => e.onMouseWhellMx && e.onMouseWhellMx(...n))
      }, [
        le(b)
      ], 34), [
        [He, e.overflow]
      ]),
      Ae(F("div", {
        class: Z("mx-context-menu-updown mx-context-no-clickable down" + (e.overflow && e.scrollValue > -e.scrollHeight ? "" : " disabled")),
        onClick: t[2] || (t[2] = (n) => e.onScroll(!0)),
        onWheel: t[3] || (t[3] = (...n) => e.onMouseWhellMx && e.onMouseWhellMx(...n))
      }, [
        le(b)
      ], 34), [
        [He, e.overflow]
      ])
    ], 512)
  ], 38);
}
const pe = /* @__PURE__ */ fe(It, [["render", Ot]]), $t = { class: "mx-menu-ghost-host" }, Ke = /* @__PURE__ */ Q({
  __name: "ContextSubMenuWrapper",
  props: {
    /**
     * Menu options
     */
    options: {
      type: Object,
      default: null
    },
    /**
     * Show menu?
     */
    show: {
      type: Object,
      default: null
    },
    /**
     * Current container, For calculation only
     */
    container: {
      type: Object,
      default: null
    },
    /**
     * Make sure is user set the custom container.
     */
    isFullScreenContainer: {
      type: Boolean,
      default: !0
    }
  },
  emits: ["close", "closeAnimFinished"],
  setup(e, { expose: t, emit: u }) {
    const a = e, f = u, v = Je(), x = I(), {
      options: i,
      show: p,
      container: b
    } = ue(a);
    ge(() => {
      p.value && $();
    }), We(() => {
      M();
    }), Te(p, (c) => {
      c ? $() : (_e(n), M());
    });
    const n = {
      closeMenu: w,
      isClosed: E,
      getMenuRef: () => x.value,
      getMenuDimensions: () => {
        var c;
        return ((c = x.value) == null ? void 0 : c.getMenuDimensions()) ?? { width: 0, height: 0 };
      }
    };
    let S = !1;
    function $() {
      L(), tt(n);
    }
    function w(c) {
      S = !0, f("close", c), i.value.menuTransitionProps || f("closeAnimFinished"), _e(n);
    }
    function E() {
      return S;
    }
    function L() {
      setTimeout(() => {
        document.addEventListener("click", C, !0), document.addEventListener("contextmenu", C, !0), document.addEventListener("scroll", g, !0), !a.isFullScreenContainer && b.value && b.value.addEventListener("scroll", g, !0), i.value.keyboardControl !== !1 && document.addEventListener("keydown", r);
      }, 50);
    }
    function M() {
      document.removeEventListener("contextmenu", C, !0), document.removeEventListener("click", C, !0), document.removeEventListener("scroll", g, !0), !a.isFullScreenContainer && b.value && b.value.removeEventListener("scroll", g, !0), i.value.keyboardControl !== !1 && document.removeEventListener("keydown", r);
    }
    const o = I();
    Y("globalSetCurrentSubMenu", (c) => o.value = c);
    function r(c) {
      var W, D, z, ee, H, m, B, K, X, te, ne, k, U;
      let y = !0;
      switch (c.key) {
        case "Escape": {
          ((W = o.value) == null ? void 0 : W.isTopLevel()) === !1 ? (D = o.value) == null || D.closeCurrentSubMenu() : w();
          break;
        }
        case "ArrowDown":
          (z = o.value) == null || z.moveCurrentItemDown();
          break;
        case "ArrowUp":
          (ee = o.value) == null || ee.moveCurrentItemUp();
          break;
        case "Home":
          (H = o.value) == null || H.moveCurrentItemFirst();
          break;
        case "End":
          (m = o.value) == null || m.moveCurrentItemLast();
          break;
        case "ArrowLeft": {
          (B = o.value) != null && B.closeSelfAndActiveParent() || (X = (K = i.value).onKeyFocusMoveLeft) == null || X.call(K);
          break;
        }
        case "ArrowRight":
          (te = o.value) != null && te.openCurrentItemSubMenu() || (k = (ne = i.value).onKeyFocusMoveRight) == null || k.call(ne);
          break;
        case "Enter":
          (U = o.value) == null || U.triggerCurrentItemClick(c);
          break;
        default:
          y = !1;
          break;
      }
      y && o.value && (c.stopPropagation(), c.preventDefault());
    }
    function g() {
      i.value.closeWhenScroll !== !1 && w();
    }
    function C(c) {
      R(c.target, c);
    }
    function R(c, y) {
      var W, D;
      for (; c; ) {
        if (c.classList && c.classList.contains("mx-menu-host"))
          return;
        c = c.parentNode;
      }
      i.value.clickCloseOnOutside !== !1 ? (M(), w()) : (D = (W = i.value).onClickOnOutside) == null || D.call(W, y);
    }
    return Y("globalOptions", i), Y("globalCloseMenu", w), Y("globalIsFullScreenContainer", a.isFullScreenContainer), Y("globalHasSlot", (c) => v[c] !== void 0), Y("globalRenderSlot", (c, y) => _(v, c, { ...y }, () => [se("span", "Render slot failed")], !1)), Y("menuContext", {
      zIndex: i.value.zIndex || N.defaultZindex,
      container: b.value,
      adjustPadding: { x: 0, y: 0 },
      getParentAbsY: () => i.value.x,
      getParentAbsX: () => i.value.y,
      getZoom: () => i.value.zoom || N.defaultZoom,
      getParentX: () => 0,
      getParentY: () => 0,
      getParentWidth: () => 0,
      getParentHeight: () => 0,
      getPositon: () => [i.value.x, i.value.y],
      closeOtherSubMenuWithTimeOut: () => {
      },
      checkCloseOtherSubMenuTimeOut: () => !1,
      addOpenedSubMenu: () => {
      },
      closeOtherSubMenu: () => {
      },
      getParentContext: () => null,
      getSubMenuInstanceContext: () => null,
      getElement: () => null,
      addChildMenuItem: () => {
      },
      removeChildMenuItem: () => {
      },
      markActiveMenuItem: () => {
      },
      markThisOpenedByKeyBoard: () => {
      },
      isOpenedByKeyBoardFlag: () => !1,
      isMenuItemDataCollectedFlag: () => !1
    }), t(n), (c, y) => (d(), P("div", $t, [
      l(i).menuTransitionProps ? (d(), O(Ee, Se({
        key: 0,
        appear: ""
      }, l(i).menuTransitionProps, {
        onAfterLeave: y[0] || (y[0] = (W) => f("closeAnimFinished"))
      }), {
        default: ce(() => [
          l(p) ? (d(), O(pe, {
            key: 0,
            ref_key: "submenuInstance",
            ref: x,
            class: "mx-menu-host",
            items: l(i).items,
            adjustPosition: l(i).adjustPosition,
            maxWidth: l(i).maxWidth || l(N).defaultMaxWidth,
            minWidth: l(i).minWidth || l(N).defaultMinWidth,
            direction: l(i).direction || l(N).defaultDirection
          }, {
            default: ce(() => [
              _(c.$slots, "default")
            ]),
            _: 3
          }, 8, ["items", "adjustPosition", "maxWidth", "minWidth", "direction"])) : A("", !0)
        ]),
        _: 3
      }, 16)) : l(p) ? (d(), O(pe, {
        key: 1,
        ref_key: "submenuInstance",
        ref: x,
        class: "mx-menu-host",
        items: l(i).items,
        adjustPosition: l(i).adjustPosition,
        maxWidth: l(i).maxWidth || l(N).defaultMaxWidth,
        minWidth: l(i).minWidth || l(N).defaultMinWidth,
        direction: l(i).direction || l(N).defaultDirection
      }, {
        default: ce(() => [
          _(c.$slots, "default")
        ]),
        _: 3
      }, 8, ["items", "adjustPosition", "maxWidth", "minWidth", "direction"])) : A("", !0)
    ]));
  }
});
const Rt = Q({
  name: "ContextMenu",
  emits: ["update:show", "close"],
  props: {
    /**
     * Menu options
     */
    options: {
      type: Object,
      default: null
    },
    /**
     * Show menu?
     */
    show: {
      type: Boolean,
      default: !1
    }
  },
  setup(e, t) {
    const {
      options: u,
      show: a
    } = ue(e), f = I(null);
    return t.expose({
      closeMenu: () => t.emit("update:show", !1),
      isClosed: () => !a.value,
      getMenuRef: () => {
        var v;
        return (v = f.value) == null ? void 0 : v.getMenuRef();
      },
      getMenuDimensions: () => {
        var v;
        return ((v = f.value) == null ? void 0 : v.getMenuDimensions()) ?? { width: 0, height: 0 };
      }
    }), () => {
      const { isNew: v, container: x, eleId: i } = ze(u.value);
      return [
        se(
          Qe,
          { to: `#${i}` },
          [
            se(Ke, {
              ref: f,
              options: u,
              show: a,
              container: x,
              isFullScreenContainer: !v,
              onClose: (p) => {
                var b, n;
                t.emit("update:show", !1), t.emit("close"), (n = (b = u.value).onClose) == null || n.call(b, p);
              }
            }, t.slots)
          ]
        )
      ];
    };
  }
}), Bt = Q({
  name: "ContextMenuGroup",
  props: {
    /**
    * Is this menu disabled? 
    */
    disabled: {
      type: Boolean,
      default: !1
    },
    /**
    * Is this menu hidden? 
    */
    hidden: {
      type: Boolean,
      default: !1
    },
    /**
     * Is this menu disabled? 
     */
    clickHandler: {
      type: Function,
      default: null
    },
    /**
     * Menu label
     */
    label: {
      type: String,
      default: ""
    },
    /**
     * Menu icon (for icon class)
     */
    icon: {
      type: String,
      default: ""
    },
    /**
     * Custom icon library font class name.
     * 
     * Only for css font icon, If you use the svg icon, you do not need to use this.
     */
    iconFontClass: {
      type: String,
      default: "iconfont"
    },
    /**
     * Is this menu item checked?
     * 
     * The check mark are displayed on the left side of the icon, so it is not recommended to display the icon at the same time.
     */
    checked: {
      type: Boolean,
      default: !1
    },
    /**
     * Shortcut key text display on the right.
     * 
     * The shortcut keys here are only for display. You need to handle the key events by yourself.
     */
    shortcut: {
      type: String,
      default: ""
    },
    /**
     * Display icons use svg symbol (`<use xlink:href="#icon-symbol-name">`) ï¼Œ only valid when icon attribute is empty.
     */
    svgIcon: {
      type: String,
      default: ""
    },
    /**
     * The user-defined attribute of the svg tag, which is valid when using `svgIcon`.
     */
    svgProps: {
      type: Object,
      default: null
    },
    /**
     * Should a fixed-width icon area be reserved for menu items without icon. (this item)
     * 
     * Default is true .
     * 
     * The width of icon area can be override with css var `--mx-menu-placeholder-width`.
     */
    preserveIconWidth: {
      type: Boolean,
      default: !0
    },
    /**
     * Show right arrow on this menu?
     */
    showRightArrow: {
      type: Boolean,
      default: !1
    },
    /**
     * Should close menu when Click this menu item ?
     */
    clickClose: {
      type: Boolean,
      default: !0
    },
    /**
     * By default, the submenu will automatically adjust its position to prevent it overflow the container.
     * 
     * If you allow menu overflow containers, you can set this to false.
     * 
     * Default is inherit from `MenuOptions.adjustPosition`  .
     */
    adjustSubMenuPosition: {
      type: Boolean,
      default: void 0
    },
    /**
     * Max width of submenu
     */
    maxWidth: {
      type: [String, Number],
      default: 0
    },
    /**
     * Min width of submenu
     */
    minWidth: {
      type: [String, Number],
      default: 0
    }
  },
  setup(e, t) {
    const u = j("globalOptions"), { adjustSubMenuPosition: a, maxWidth: f, minWidth: v } = ue(e), x = typeof a.value < "u" ? a.value : u.value.adjustPosition, i = I(), p = I();
    return t.expose({
      getSubMenuRef: () => i.value,
      getMenuItemRef: () => p.value
    }), () => se(Pe, {
      ...e,
      ref: p,
      showRightArrow: !0,
      maxWidth: void 0,
      minWidth: void 0,
      adjustSubMenuPosition: void 0,
      hasChildren: typeof t.slots.default !== void 0
    }, t.slots.default ? {
      //Create SubMenu
      submenu: () => se(pe, {
        ref: i,
        maxWidth: f.value,
        minWidth: v.value,
        adjustPosition: x
      }, {
        default: t.slots.default
      })
    } : void 0);
  }
});
function At(e, t, u, a) {
  const f = I(!0), v = se(Ke, {
    options: e,
    show: f,
    container: t,
    isFullScreenContainer: !u,
    onCloseAnimFinished: () => {
      Fe(null, t);
    },
    onClose: (x) => {
      var i;
      (i = e.onClose) == null || i.call(e, x), f.value = !1;
    }
  }, a);
  return Fe(v, t), v.component;
}
function je(e, t) {
  const u = ze(e);
  return At(e, u.container, u.isNew, t).exposed;
}
const Le = {
  /**
   * For Vue install
   * @param app 
   */
  install(e) {
    e.config.globalProperties.$contextmenu = je, e.component("ContextMenu", Rt), e.component("ContextMenuItem", Pe), e.component("ContextMenuGroup", Bt), e.component("ContextMenuSperator", we), e.component("ContextMenuSeparator", we), e.component("ContextSubMenu", pe);
  },
  /**
   * Show a ContextMenu in page, same as `this.$contextmenu`
   * 
   * For example:
   * 
   * ```ts
   * onContextMenu(e : MouseEvent) {
   *   //prevent the browser's default menu
   *   e.preventDefault();
   *   //show your menu
   *   ContextMenu.showContextMenu({
   *     x: e.x,
   *     y: e.y,
   *     items: [
   *       { 
   *         label: "A menu item", 
   *         onClick: () => {
   *           alert("You click a menu item");
   *         }
   *       },
   *       { 
   *         label: "A submenu", 
   *         children: [
   *           { label: "Item1" },
   *           { label: "Item2" },
   *           { label: "Item3" },
   *         ]
   *       },
   *     ]
   *   }); 
   * }
   * ```
   * 
   * You can pass customSlots to custom rendering this menu.
   * 
   * For example, custom rendering #itemRender and #separatorRender:
   * ```ts
   *   ContextMenu.showContextMenu({
   *     ...
   *   } as MenuOptions, {
   *     //Use slot in function mode
   *     itemRender: ({ disabled, label, icon, showRightArrow, onClick, onMouseEnter }) => [  h('div', { 
   *       class: 'my-menu-item'+(disabled?' disabled':''),
   *       onMouseenter: onMouseEnter,
   *       onClick: onClick,
   *     }, [
   *       icon ? h('img', { src: icon }) : h('div', { class: 'icon-place-holder' }),
   *       h('span', label),
   *       showRightArrow ? h('span', { class: 'right-arraw' }, '>>') : h('div'),
   *     ]) ],
   *     separatorRender: () => [ h('div', { class: 'my-menu-sperator' }) ]
   *   })
   * ```
   * 
   * @param options The options of ContextMenu
   * @param customSlots You can provide some custom slots to customize the rendering style of the menu. These slots are the same as the slots of component ContextMenu.
   * @returns Menu instance 
   */
  showContextMenu(e, t) {
    return je(e, t);
  },
  /**
   * Get if there is a menu open now.
   */
  isAnyContextMenuOpen() {
    return et();
  },
  /**
   * Close the currently open menu
   */
  closeContextMenu: Ne,
  //Tools
  transformMenuPosition: nt
}, Ht = {}, Ft = {
  class: "mx-menu-bar-icon-menu",
  viewBox: "0 0 1024 1024",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  width: "200",
  height: "200"
}, _t = /* @__PURE__ */ F("path", { d: "M133.310936 296.552327l757.206115 0c19.781623 0 35.950949-16.169326 35.950949-35.950949 0-19.781623-15.997312-35.950949-35.950949-35.950949L133.310936 224.650428c-19.781623 0-35.950949 16.169326-35.950949 35.950949C97.359987 280.383 113.529313 296.552327 133.310936 296.552327z" }, null, -1), jt = /* @__PURE__ */ F("path", { d: "M890.51705 476.135058 133.310936 476.135058c-19.781623 0-35.950949 16.169326-35.950949 35.950949 0 19.781623 16.169326 35.950949 35.950949 35.950949l757.206115 0c19.781623 0 35.950949-16.169326 35.950949-35.950949C926.467999 492.304384 910.298673 476.135058 890.51705 476.135058z" }, null, -1), Lt = /* @__PURE__ */ F("path", { d: "M890.51705 727.447673 133.310936 727.447673c-19.781623 0-35.950949 15.997312-35.950949 35.950949s16.169326 35.950949 35.950949 35.950949l757.206115 0c19.781623 0 35.950949-15.997312 35.950949-35.950949S910.298673 727.447673 890.51705 727.447673z" }, null, -1), Et = [
  _t,
  jt,
  Lt
];
function Dt(e, t) {
  return d(), P("svg", Ft, Et);
}
const Tt = /* @__PURE__ */ fe(Ht, [["render", Dt]]), Nt = ["onClick", "onMouseenter"], Vt = /* @__PURE__ */ Q({
  __name: "MenuBar",
  props: {
    /**
     * Menu options
     */
    options: {
      type: Object,
      default: null
    }
  },
  setup(e) {
    const t = e, u = I(), a = I(!1), f = I([]), v = I(null);
    function x() {
      a.value = !0;
    }
    function i() {
      a.value = !1;
    }
    ge(() => {
      f.value = t.options.items || [];
    }), Te(() => t.options, () => {
      f.value = t.options.items || [];
    });
    let p = null, b = -1;
    function n() {
      b < f.value.length - 1 ? b++ : b = 0, w(b, f.value[b]);
    }
    function S() {
      b > 0 ? b-- : b = f.value.length - 1, w(b, f.value[b]);
    }
    function $(o) {
      const r = t.options.barPopDirection ?? "bl";
      let g = 0, C = 0;
      return r.startsWith("b") ? C = q(o) + o.offsetHeight : r.startsWith("t") ? C = q(o) : C = q(o) + o.offsetHeight / 2, r.endsWith("l") ? g = J(o) : r.startsWith("r") ? g = J(o) + o.offsetWidth : g = J(o) + o.offsetWidth / 2, { x: g, y: C };
    }
    function w(o, r) {
      var C;
      if (b = o, !r.children)
        return;
      p && (p.closeMenu(), p = null, a.value = !0), v.value = r;
      const g = (C = u.value) == null ? void 0 : C.children[o];
      if (g) {
        const { x: R, y: c } = $(g);
        p = Le.showContextMenu({
          ...t.options,
          items: r.children,
          x: R,
          y: c,
          onKeyFocusMoveLeft() {
            S();
          },
          onKeyFocusMoveRight() {
            n();
          },
          onClose() {
            v.value == r && (a.value = !1, v.value = null);
          }
        });
      }
    }
    function E() {
      b = 0;
      const o = u.value;
      if (o) {
        const { x: r, y: g } = $(o);
        p = Le.showContextMenu({
          ...t.options,
          x: r,
          y: g
        });
      }
    }
    function L(o, r) {
      r ? (a.value = !0, w(o, r), r.onClick && (r.clickableWhenHasChildren === !0 && r.children && r.children.length > 0 || !r.children || r.children.length === 0) && r.onClick()) : E();
    }
    function M(o, r) {
      a.value && w(o, r);
    }
    return (o, r) => (d(), P("div", {
      class: Z([
        "mx-menu-bar",
        e.options.theme ?? "",
        e.options.mini ? "mini" : ""
      ]),
      onFocus: x,
      onBlur: i
    }, [
      _(o.$slots, "prefix"),
      e.options.mini ? (d(), P("div", {
        key: 0,
        ref_key: "menuBarContent",
        ref: u,
        class: "mx-menu-bar-content"
      }, [
        F("div", {
          class: "mx-menu-bar-item",
          onClick: r[0] || (r[0] = (g) => L(0, null))
        }, [
          le(Tt)
        ])
      ], 512)) : (d(), P("div", {
        key: 1,
        ref_key: "menuBarContent",
        ref: u,
        class: "mx-menu-bar-content"
      }, [
        (d(!0), P(Ie, null, De(f.value, (g, C) => (d(), P("div", {
          key: C,
          class: Z([
            "mx-menu-bar-item",
            g == v.value ? "active" : ""
          ]),
          onClick: (R) => L(C, g),
          onMouseenter: (R) => M(C, g)
        }, ke(g.label), 43, Nt))), 128))
      ], 512)),
      _(o.$slots, "suffix")
    ], 34));
  }
});
export {
  Rt as ContextMenu,
  Bt as ContextMenuGroup,
  Pe as ContextMenuItem,
  we as ContextMenuSeparator,
  Vt as MenuBar,
  Le as default
};
//# sourceMappingURL=vue3-context-menu.es.js.map
