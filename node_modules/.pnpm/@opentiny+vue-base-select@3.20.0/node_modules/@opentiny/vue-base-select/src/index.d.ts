/**
 * Copyright (c) 2022 - present TinyVue Authors.
 * Copyright (c) 2022 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            CLASS: {
                SelectDropdownWrap: string;
                IsReverse: string;
            };
            I18N: {
                noData: string;
                noMatch: string;
                loading: string;
            };
            COMPONENT_NAME: {
                Form: string;
                Select: string;
                Option: string;
                FormItem: string;
                OptionGroup: string;
                SelectDropdown: string;
            };
            EVENT_NAME: {
                removeTag: string;
                formChange: string;
                formBlur: string;
                queryChange: string;
                setSelected: string;
                updatePopper: string;
                destroyPopper: string;
                visibleChange: string;
                handleOptionClick: string;
                handleGroupDisabled: string;
                initValue: string;
            };
            TYPE: {
                Grid: string;
                Tree: string;
            };
            MAX_WIDTH: number;
            RECYCLE: {
                SAAS_HEIGHT: number;
                AURORA_HEIGHT: number;
                ITEM_HEIGHT: number;
                SAFE_MARGIN: number;
            };
            SAAS_SIZE: {
                mini: number;
                small: number;
                medium: number;
            };
            AURORA_SIZE: {
                mini: number;
                small: number;
                medium: number;
            };
            SPACING_HEIGHT: number;
            MAX_VISIBLE_ROWS: number;
        };
    };
    id: (StringConstructor | NumberConstructor)[];
    name: StringConstructor;
    size: StringConstructor;
    remote: BooleanConstructor;
    remoteConfig: {
        type: ObjectConstructor;
        default(): {
            showIcon: boolean;
            clearData: boolean;
            autoSearch: boolean;
        };
    };
    title: StringConstructor;
    shape: StringConstructor;
    tip: StringConstructor;
    label: StringConstructor;
    loading: BooleanConstructor;
    disabled: BooleanConstructor;
    options: ArrayConstructor;
    dataset: ObjectConstructor;
    textField: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    showCheck: {
        type: BooleanConstructor;
        default: boolean;
    };
    showAlloption: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: BooleanConstructor;
    clearable: BooleanConstructor;
    noDataText: StringConstructor;
    filterable: BooleanConstructor;
    loadingText: StringConstructor;
    noMatchText: StringConstructor;
    popperClass: StringConstructor;
    allowCreate: BooleanConstructor;
    collapseTags: BooleanConstructor;
    remoteMethod: FunctionConstructor;
    filterMethod: FunctionConstructor;
    reserveKeyword: BooleanConstructor;
    automaticDropdown: BooleanConstructor;
    defaultFirstOption: BooleanConstructor;
    modelValue: {};
    valueKey: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: () => any;
    };
    searchPlaceholder: {
        type: StringConstructor;
        default: () => any;
    };
    autocomplete: {
        type: StringConstructor;
        default: string;
    };
    multipleLimit: {
        type: NumberConstructor;
        default: number;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideDrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    copyable: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderType: StringConstructor;
    gridOp: {
        type: ObjectConstructor;
        default: () => {};
    };
    treeOp: {
        type: ObjectConstructor;
        default: () => {};
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
    readonly: BooleanConstructor;
    dropStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    cacheOp: ObjectConstructor;
    isDropInheritWidth: BooleanConstructor;
    tagSelectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectConfig: {
        type: ObjectConstructor;
        default(): {
            checkMethod(): true;
        };
    };
    radioConfig: {
        type: ObjectConstructor;
        default(): {
            checkMethod(): true;
        };
    };
    allowCopy: {
        type: BooleanConstructor;
        default: boolean;
    };
    textSplit: {
        type: StringConstructor;
        default: string;
    };
    autoClose: BooleanConstructor;
    queryDebounce: NumberConstructor;
    ignoreEnter: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropdownIcon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: () => import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    disabledTooltipContent: StringConstructor;
    hoverExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    optimization: (BooleanConstructor | ObjectConstructor)[];
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    initQuery: FunctionConstructor;
    extraQueryParams: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | ArrayConstructor | NumberConstructor)[];
        default: string;
    };
    updateDelay: {
        type: NumberConstructor;
        default: number;
    };
    showTips: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeByMask: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    popperOptions: {
        type: ObjectConstructor;
        default: () => {
            gpuAcceleration: boolean;
            boundariesPadding: number;
        };
    };
    trim: {
        type: BooleanConstructor;
        default: boolean;
    };
    topCreate: {
        type: BooleanConstructor;
        default: boolean;
    };
    topCreateText: {
        type: StringConstructor;
        default: () => any;
    };
    blank: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    showEmptyImage: {
        type: BooleanConstructor;
        default: boolean;
    };
    InputBoxType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    tagType: {
        type: StringConstructor;
        default: string;
    };
    clearNoMatchValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    showLimitText: {
        type: BooleanConstructor;
        default: boolean;
    };
    showProportion: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxVisibleRows: {
        type: NumberConstructor;
        default: number;
    };
    allText: {
        type: StringConstructor;
        default: string;
    };
    showAllTextTag: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            CLASS: {
                SelectDropdownWrap: string;
                IsReverse: string;
            };
            I18N: {
                noData: string;
                noMatch: string;
                loading: string;
            };
            COMPONENT_NAME: {
                Form: string;
                Select: string;
                Option: string;
                FormItem: string;
                OptionGroup: string;
                SelectDropdown: string;
            };
            EVENT_NAME: {
                removeTag: string;
                formChange: string;
                formBlur: string;
                queryChange: string;
                setSelected: string;
                updatePopper: string;
                destroyPopper: string;
                visibleChange: string;
                handleOptionClick: string;
                handleGroupDisabled: string;
                initValue: string;
            };
            TYPE: {
                Grid: string;
                Tree: string;
            };
            MAX_WIDTH: number;
            RECYCLE: {
                SAAS_HEIGHT: number;
                AURORA_HEIGHT: number;
                ITEM_HEIGHT: number;
                SAFE_MARGIN: number;
            };
            SAAS_SIZE: {
                mini: number;
                small: number;
                medium: number;
            };
            AURORA_SIZE: {
                mini: number;
                small: number;
                medium: number;
            };
            SPACING_HEIGHT: number;
            MAX_VISIBLE_ROWS: number;
        };
    };
    id: (StringConstructor | NumberConstructor)[];
    name: StringConstructor;
    size: StringConstructor;
    remote: BooleanConstructor;
    remoteConfig: {
        type: ObjectConstructor;
        default(): {
            showIcon: boolean;
            clearData: boolean;
            autoSearch: boolean;
        };
    };
    title: StringConstructor;
    shape: StringConstructor;
    tip: StringConstructor;
    label: StringConstructor;
    loading: BooleanConstructor;
    disabled: BooleanConstructor;
    options: ArrayConstructor;
    dataset: ObjectConstructor;
    textField: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    showCheck: {
        type: BooleanConstructor;
        default: boolean;
    };
    showAlloption: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: BooleanConstructor;
    clearable: BooleanConstructor;
    noDataText: StringConstructor;
    filterable: BooleanConstructor;
    loadingText: StringConstructor;
    noMatchText: StringConstructor;
    popperClass: StringConstructor;
    allowCreate: BooleanConstructor;
    collapseTags: BooleanConstructor;
    remoteMethod: FunctionConstructor;
    filterMethod: FunctionConstructor;
    reserveKeyword: BooleanConstructor;
    automaticDropdown: BooleanConstructor;
    defaultFirstOption: BooleanConstructor;
    modelValue: {};
    valueKey: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: () => any;
    };
    searchPlaceholder: {
        type: StringConstructor;
        default: () => any;
    };
    autocomplete: {
        type: StringConstructor;
        default: string;
    };
    multipleLimit: {
        type: NumberConstructor;
        default: number;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideDrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    copyable: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderType: StringConstructor;
    gridOp: {
        type: ObjectConstructor;
        default: () => {};
    };
    treeOp: {
        type: ObjectConstructor;
        default: () => {};
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
    readonly: BooleanConstructor;
    dropStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    cacheOp: ObjectConstructor;
    isDropInheritWidth: BooleanConstructor;
    tagSelectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectConfig: {
        type: ObjectConstructor;
        default(): {
            checkMethod(): true;
        };
    };
    radioConfig: {
        type: ObjectConstructor;
        default(): {
            checkMethod(): true;
        };
    };
    allowCopy: {
        type: BooleanConstructor;
        default: boolean;
    };
    textSplit: {
        type: StringConstructor;
        default: string;
    };
    autoClose: BooleanConstructor;
    queryDebounce: NumberConstructor;
    ignoreEnter: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropdownIcon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: () => import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    disabledTooltipContent: StringConstructor;
    hoverExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    optimization: (BooleanConstructor | ObjectConstructor)[];
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    initQuery: FunctionConstructor;
    extraQueryParams: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | ArrayConstructor | NumberConstructor)[];
        default: string;
    };
    updateDelay: {
        type: NumberConstructor;
        default: number;
    };
    showTips: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeByMask: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    popperOptions: {
        type: ObjectConstructor;
        default: () => {
            gpuAcceleration: boolean;
            boundariesPadding: number;
        };
    };
    trim: {
        type: BooleanConstructor;
        default: boolean;
    };
    topCreate: {
        type: BooleanConstructor;
        default: boolean;
    };
    topCreateText: {
        type: StringConstructor;
        default: () => any;
    };
    blank: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    showEmptyImage: {
        type: BooleanConstructor;
        default: boolean;
    };
    InputBoxType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    tagType: {
        type: StringConstructor;
        default: string;
    };
    clearNoMatchValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    showLimitText: {
        type: BooleanConstructor;
        default: boolean;
    };
    showProportion: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxVisibleRows: {
        type: NumberConstructor;
        default: number;
    };
    allText: {
        type: StringConstructor;
        default: string;
    };
    showAllTextTag: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    disabled: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    tabindex: string;
    placement: string;
    popperAppendToBody: boolean;
    textField: string;
    valueField: string;
    trim: boolean;
    loading: boolean;
    popperOptions: Record<string, any>;
    readonly: boolean;
    hoverExpand: boolean;
    clearable: boolean;
    autocomplete: string;
    displayOnly: boolean;
    placeholder: string;
    multiple: boolean;
    dropStyle: Record<string, any>;
    blank: boolean;
    showTips: boolean;
    remote: boolean;
    remoteConfig: Record<string, any>;
    showCheck: boolean;
    showAlloption: boolean;
    filterable: boolean;
    allowCreate: boolean;
    collapseTags: boolean;
    reserveKeyword: boolean;
    automaticDropdown: boolean;
    defaultFirstOption: boolean;
    valueKey: string;
    searchPlaceholder: string;
    multipleLimit: number;
    hideDrop: boolean;
    copyable: boolean;
    gridOp: Record<string, any>;
    treeOp: Record<string, any>;
    delay: number;
    isDropInheritWidth: boolean;
    tagSelectable: boolean;
    selectConfig: Record<string, any>;
    radioConfig: Record<string, any>;
    allowCopy: boolean;
    textSplit: string;
    autoClose: boolean;
    ignoreEnter: boolean;
    dropdownIcon: string | Record<string, any>;
    extraQueryParams: string | number | boolean | Record<string, any> | unknown[];
    updateDelay: number;
    closeByMask: boolean;
    keepFocus: boolean;
    topCreate: boolean;
    topCreateText: string;
    searchable: boolean;
    showEmptyImage: boolean;
    InputBoxType: string;
    tagType: string;
    clearNoMatchValue: boolean;
    showLimitText: boolean;
    showProportion: boolean;
    clickExpand: boolean;
    maxVisibleRows: number;
    allText: string;
    showAllTextTag: boolean;
}, {}>;
export default _default;
