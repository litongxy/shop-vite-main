export declare const $constants: {
    TITLE: string;
    COLUMNS_TYPE: {
        selection: string;
        radio: string;
        index: string;
        width: number;
    };
    GRID_REF: {
        history: string;
        source: string;
    };
    TAG_NAME: string;
    MODAL_WIDTH: {
        multi: number;
        radio: number;
    };
    ACTIVE_NAME: {
        history: string;
        source: string;
    };
    TYPE_GRID: string;
    TYPE_TREE: string;
    ID: string;
    LABEL: string;
};
export declare const popeditorProps: {
    _constants: {
        type: ObjectConstructor;
        default: () => {
            TITLE: string;
            COLUMNS_TYPE: {
                selection: string;
                radio: string;
                index: string;
                width: number;
            };
            GRID_REF: {
                history: string;
                source: string;
            };
            TAG_NAME: string;
            MODAL_WIDTH: {
                multi: number;
                radio: number;
            };
            ACTIVE_NAME: {
                history: string;
                source: string;
            };
            TYPE_GRID: string;
            TYPE_TREE: string;
            ID: string;
            LABEL: string;
        };
    };
    modelValue: {
        type: (StringConstructor | ArrayConstructor | NumberConstructor)[];
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    size: StringConstructor;
    trigger: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    iconSearch: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    textField: {
        type: StringConstructor;
        default: string;
    };
    textSplit: {
        type: StringConstructor;
        default: string;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    valueSplit: {
        type: StringConstructor;
        default: string;
    };
    popseletor: {
        type: StringConstructor;
        default: string;
        validator(value: any): boolean;
    };
    conditions: {
        type: ArrayConstructor;
        default(): never[];
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    gridOp: {
        type: ObjectConstructor;
        default(): {
            columns: never[];
            data: never[];
        };
    };
    remoteSearch: FunctionConstructor;
    dataset: ObjectConstructor;
    alwaysLoad: {
        type: BooleanConstructor;
        default: boolean;
    };
    treeOp: {
        type: ObjectConstructor;
        default(): {
            data: never[];
        };
    };
    pagerOp: {
        type: ObjectConstructor;
        default(): {};
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    multi: {
        type: BooleanConstructor;
        default: boolean;
    };
    showClearBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPager: {
        type: BooleanConstructor;
        default: boolean;
    };
    showHistory: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoLookup: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeReset: FunctionConstructor;
    resize: {
        type: BooleanConstructor;
        default: boolean;
    };
    dialogClass: {
        type: StringConstructor;
        default: string;
    };
    textRenderSource: FunctionConstructor;
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    suggest: BooleanConstructor;
    beforeClose: {
        type: FunctionConstructor;
        default: () => () => boolean;
    };
    showSelectedBox: BooleanConstructor;
    selectedBoxOp: {
        type: ObjectConstructor;
        default: () => {};
    };
    tooltipConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    autoReset: {
        type: BooleanConstructor;
        default: boolean;
    };
    radioChangeClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            TITLE: string;
            COLUMNS_TYPE: {
                selection: string;
                radio: string;
                index: string;
                width: number;
            };
            GRID_REF: {
                history: string;
                source: string;
            };
            TAG_NAME: string;
            MODAL_WIDTH: {
                multi: number;
                radio: number;
            };
            ACTIVE_NAME: {
                history: string;
                source: string;
            };
            TYPE_GRID: string;
            TYPE_TREE: string;
            ID: string;
            LABEL: string;
        };
    };
    modelValue: {
        type: (StringConstructor | ArrayConstructor | NumberConstructor)[];
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    size: StringConstructor;
    trigger: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    iconSearch: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    textField: {
        type: StringConstructor;
        default: string;
    };
    textSplit: {
        type: StringConstructor;
        default: string;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    valueSplit: {
        type: StringConstructor;
        default: string;
    };
    popseletor: {
        type: StringConstructor;
        default: string;
        validator(value: any): boolean;
    };
    conditions: {
        type: ArrayConstructor;
        default(): never[];
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    gridOp: {
        type: ObjectConstructor;
        default(): {
            columns: never[];
            data: never[];
        };
    };
    remoteSearch: FunctionConstructor;
    dataset: ObjectConstructor;
    alwaysLoad: {
        type: BooleanConstructor;
        default: boolean;
    };
    treeOp: {
        type: ObjectConstructor;
        default(): {
            data: never[];
        };
    };
    pagerOp: {
        type: ObjectConstructor;
        default(): {};
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    multi: {
        type: BooleanConstructor;
        default: boolean;
    };
    showClearBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPager: {
        type: BooleanConstructor;
        default: boolean;
    };
    showHistory: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoLookup: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeReset: FunctionConstructor;
    resize: {
        type: BooleanConstructor;
        default: boolean;
    };
    dialogClass: {
        type: StringConstructor;
        default: string;
    };
    textRenderSource: FunctionConstructor;
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    suggest: BooleanConstructor;
    beforeClose: {
        type: FunctionConstructor;
        default: () => () => boolean;
    };
    showSelectedBox: BooleanConstructor;
    selectedBoxOp: {
        type: ObjectConstructor;
        default: () => {};
    };
    tooltipConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    autoReset: {
        type: BooleanConstructor;
        default: boolean;
    };
    radioChangeClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            TITLE: string;
            COLUMNS_TYPE: {
                selection: string;
                radio: string;
                index: string;
                width: number;
            };
            GRID_REF: {
                history: string;
                source: string;
            };
            TAG_NAME: string;
            MODAL_WIDTH: {
                multi: number;
                radio: number;
            };
            ACTIVE_NAME: {
                history: string;
                source: string;
            };
            TYPE_GRID: string;
            TYPE_TREE: string;
            ID: string;
            LABEL: string;
        };
    };
    modelValue: {
        type: (StringConstructor | ArrayConstructor | NumberConstructor)[];
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    size: StringConstructor;
    trigger: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    iconSearch: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    textField: {
        type: StringConstructor;
        default: string;
    };
    textSplit: {
        type: StringConstructor;
        default: string;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    valueSplit: {
        type: StringConstructor;
        default: string;
    };
    popseletor: {
        type: StringConstructor;
        default: string;
        validator(value: any): boolean;
    };
    conditions: {
        type: ArrayConstructor;
        default(): never[];
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    gridOp: {
        type: ObjectConstructor;
        default(): {
            columns: never[];
            data: never[];
        };
    };
    remoteSearch: FunctionConstructor;
    dataset: ObjectConstructor;
    alwaysLoad: {
        type: BooleanConstructor;
        default: boolean;
    };
    treeOp: {
        type: ObjectConstructor;
        default(): {
            data: never[];
        };
    };
    pagerOp: {
        type: ObjectConstructor;
        default(): {};
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    multi: {
        type: BooleanConstructor;
        default: boolean;
    };
    showClearBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPager: {
        type: BooleanConstructor;
        default: boolean;
    };
    showHistory: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoLookup: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeReset: FunctionConstructor;
    resize: {
        type: BooleanConstructor;
        default: boolean;
    };
    dialogClass: {
        type: StringConstructor;
        default: string;
    };
    textRenderSource: FunctionConstructor;
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    suggest: BooleanConstructor;
    beforeClose: {
        type: FunctionConstructor;
        default: () => () => boolean;
    };
    showSelectedBox: BooleanConstructor;
    selectedBoxOp: {
        type: ObjectConstructor;
        default: () => {};
    };
    tooltipConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    autoReset: {
        type: BooleanConstructor;
        default: boolean;
    };
    radioChangeClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    disabled: boolean;
    icon: Record<string, any>;
    title: string;
    resize: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    width: string | number;
    modelValue: string | number | unknown[];
    trigger: string;
    tabindex: string;
    placement: string;
    popperAppendToBody: boolean;
    textField: string;
    valueField: string;
    beforeClose: Function;
    readonly: boolean;
    placeholder: string;
    gridOp: Record<string, any>;
    treeOp: Record<string, any>;
    textSplit: string;
    tooltipConfig: Record<string, any>;
    draggable: boolean;
    iconSearch: Record<string, any>;
    dialogClass: string;
    selectedBoxOp: Record<string, any>;
    popseletor: string;
    multi: boolean;
    showSelectedBox: boolean;
    autoLookup: boolean;
    valueSplit: string;
    showPager: boolean;
    pagerOp: Record<string, any>;
    conditions: unknown[];
    alwaysLoad: boolean;
    showClearBtn: boolean;
    showHistory: boolean;
    suggest: boolean;
    autoReset: boolean;
    radioChangeClose: boolean;
}, {}>;
export default _default;
