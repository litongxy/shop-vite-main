import { defineComponent, $prefix, props, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/upload-list/vue';
import Progress from '@opentiny/vue-progress';
import Tooltip from '@opentiny/vue-tooltip';
import Button from '@opentiny/vue-button';
import { iconDocument, iconSuccessful, iconClose, iconView, iconDel, iconYes, iconCloseCircle, iconError, iconFileCloudupload, iconDownload, iconCueL, iconRefresh, iconOperationfaild, iconFullscreenLeft, iconRight, iconPause, iconAudio, iconEllipsis, iconExcelType, iconFileType, iconOtherType, iconPdfType, iconPictureType, iconPptType, iconTextType, iconVideoType, iconWordType, iconZipType, iconFileuploadPro } from '@opentiny/vue-icon';
import Modal from '@opentiny/vue-modal';
import { resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, renderSlot, createElementVNode, normalizeStyle, createCommentVNode, createBlock, resolveDynamicComponent, createVNode, toDisplayString, withModifiers, TransitionGroup, withCtx, withKeys, createTextVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "UploadList",
  components: {
    TinyProgress: Progress,
    TinyTooltip: Tooltip,
    TinyButton: Button,
    TinyIconDocument: iconDocument(),
    IconSuccessful: iconSuccessful(),
    IconClose: iconClose(),
    IconView: iconView(),
    IconDel: iconDel(),
    IconYes: iconYes(),
    IconCloseCircle: iconCloseCircle(),
    IconError: iconError(),
    IconFileCloudupload: iconFileCloudupload(),
    IconDownload: iconDownload(),
    IconCueL: iconCueL(),
    IconRefresh: iconRefresh(),
    IconOperationfaild: iconOperationfaild(),
    IconFullscreenLeft: iconFullscreenLeft(),
    IconRight: iconRight(),
    IconPause: iconPause(),
    IconAudio: iconAudio(),
    IconEllipsis: iconEllipsis(),
    IconExcelType: iconExcelType(),
    IconFileType: iconFileType(),
    IconOtherType: iconOtherType(),
    IconPdfType: iconPdfType(),
    IconPictureType: iconPictureType(),
    IconPptType: iconPptType(),
    IconTextType: iconTextType(),
    IconVideoType: iconVideoType(),
    IconWordType: iconWordType(),
    IconZipType: iconZipType(),
    IconFileuploadPro: iconFileuploadPro()
  },
  emits: ["click-file-list", "remove", "start", "update:visible", "update", "reUpload", "ReUploadTotal"],
  props: [].concat(props, ["disabled", "display", "files", "filesIcon", "handlePreview", "isEdm", "isFolder", "listType", "openDownloadFile", "srcList", "isFolderTitle", "listOption", "maxNameLength", "mode", "reUploadable", "reUploadTip", "selected", "displayOnly", "handleDownloadFile", "handleReUpload", "compact"]),
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api,
      extendOptions: {
        Modal
      }
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "tiny-upload-list-panel"
};
var _hoisted_2 = ["onClick"];
var _hoisted_3 = {
  class: "tiny-upload-list-thumb"
};
var _hoisted_4 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    class: "uploading-mask"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_5 = {
  class: "uploading-progress"
};
var _hoisted_6 = {
  class: "uploading-progress-panel"
};
var _hoisted_7 = {
  key: 2,
  class: "upload-fail"
};
var _hoisted_8 = {
  class: "tiny-upload-list-content"
};
var _hoisted_9 = {
  class: "file-name"
};
var _hoisted_10 = {
  class: "file-name-box"
};
var _hoisted_11 = ["title"];
var _hoisted_12 = {
  class: "operate-panel"
};
var _hoisted_13 = ["onClick"];
var _hoisted_14 = ["onClick"];
var _hoisted_15 = ["onClick"];
var _hoisted_16 = ["onClick"];
var _hoisted_17 = {
  class: "file-size"
};
var _hoisted_18 = {
  class: "file-size-content"
};
var _hoisted_19 = {
  key: 0,
  class: "fail"
};
var _hoisted_20 = {
  key: 1
};
var _hoisted_21 = {
  key: 2
};
var _hoisted_22 = {
  class: "file-size-right"
};
var _hoisted_23 = {
  key: 1,
  class: "no-attachments"
};
var _hoisted_24 = {
  key: 1,
  class: "tiny-upload-list__wrapper"
};
var _hoisted_25 = ["onKeydown"];
var _hoisted_26 = ["src"];
var _hoisted_27 = {
  key: 0,
  class: "tiny-upload-list__item-tooltip"
};
var _hoisted_28 = {
  key: 1,
  class: "tiny-upload-list__item-tooltip"
};
var _hoisted_29 = ["onClick", "title"];
var _hoisted_30 = {
  key: 2,
  class: "tiny-upload-list__item-status-label"
};
var _hoisted_31 = ["title", "onClick"];
var _hoisted_32 = ["title", "onClick"];
var _hoisted_33 = ["title", "onClick"];
var _hoisted_34 = {
  key: 6,
  class: "tiny-icon-close-tip"
};
var _hoisted_35 = ["onClick"];
var _hoisted_36 = {
  class: "tiny-upload-list__item-tooltip"
};
var _hoisted_37 = {
  key: 0,
  class: "tiny-upload-list__item-actions"
};
var _hoisted_38 = ["title", "onClick"];
var _hoisted_39 = ["title", "onClick"];
var _hoisted_40 = ["title", "onClick"];
var _hoisted_41 = ["title", "onClick"];
var _hoisted_42 = ["title"];
var _hoisted_43 = {
  key: 0,
  class: "tiny-upload-list__text-title"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_cue_l = resolveComponent("icon-cue-l");
  var _component_tiny_progress = resolveComponent("tiny-progress");
  var _component_icon_operationfaild = resolveComponent("icon-operationfaild");
  var _component_tiny_icon_document = resolveComponent("tiny-icon-document");
  var _component_tiny_tooltip = resolveComponent("tiny-tooltip");
  var _component_icon_successful = resolveComponent("icon-successful");
  var _component_icon_yes = resolveComponent("icon-yes");
  var _component_icon_file_cloudupload = resolveComponent("icon-file-cloudupload");
  var _component_icon_refresh = resolveComponent("icon-refresh");
  var _component_icon_download = resolveComponent("icon-download");
  var _component_icon_fullscreen_left = resolveComponent("icon-fullscreen-left");
  var _component_icon_view = resolveComponent("icon-view");
  var _component_icon_del = resolveComponent("icon-del");
  var _component_tiny_button = resolveComponent("tiny-button");
  return _ctx.listType === "saas" ? (openBlock(), createElementBlock(
    "div",
    {
      key: 0,
      ref: "uploadList",
      class: normalizeClass(["tiny-upload-list--saas", [_ctx.state.files.length || _ctx.mode === "bubble" ? "border-zero" : "border-top", {
        "mode-bubble": _ctx.mode === "bubble"
      }]])
    },
    [_ctx.state.files.length ? (openBlock(), createElementBlock("div", _hoisted_1, [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.files, function(file) {
        return openBlock(), createElementBlock("div", {
          ref_for: true,
          ref: "uploadListLi",
          class: normalizeClass(["tiny-upload-list-item", {
            "selected": file.uid === (_ctx.selected && _ctx.selected.uid),
            "compact": _ctx.compact
          }]),
          "data-tag": "tiny-upload-list-item",
          key: file.uid,
          tabindex: "0",
          onClick: function onClick($event) {
            return _ctx.$emit("click-file-list", file);
          }
        }, [renderSlot(_ctx.$slots, "default", {
          file
        }, function() {
          return [createElementVNode("div", _hoisted_3, [~["uploading"].indexOf(file.status) ? (openBlock(), createElementBlock(
            Fragment,
            {
              key: 0
            },
            [_hoisted_4, createElementVNode("div", _hoisted_5, [createElementVNode("div", _hoisted_6, [createElementVNode(
              "div",
              {
                class: "uploading-progress-bar",
                style: normalizeStyle({
                  width: _ctx.parsePercentage(Math.max(0, Math.min(file.percentage || 0, 100))) + "%"
                })
              },
              null,
              4
              /* STYLE */
            )])])],
            64
            /* STABLE_FRAGMENT */
          )) : createCommentVNode("v-if", true), ~["uploading", "success", "downloading"].indexOf(file.status) ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.getFileIcon({
            type: _ctx.getFileType({
              file
            })
          }).name), {
            key: 1,
            class: "file-icon",
            style: normalizeStyle({
              fill: _ctx.getFileIcon({
                type: _ctx.getFileType({
                  file
                })
              }).color
            })
          }, null, 8, ["style"])) : createCommentVNode("v-if", true), ~["fail"].indexOf(file.status) ? (openBlock(), createElementBlock("div", _hoisted_7, [createVNode(_component_icon_cue_l, {
            class: "upload-fail-icon"
          })])) : createCommentVNode("v-if", true)]), createElementVNode("div", _hoisted_8, [createElementVNode("div", _hoisted_9, [createElementVNode("div", _hoisted_10, [createElementVNode("span", {
            title: file.name
          }, toDisplayString(file.name.split(".").filter(function(item, i, arr) {
            return arr.length - 1 > i || arr.length === 1;
          }).join(".")), 9, _hoisted_11), createElementVNode(
            "span",
            null,
            "." + toDisplayString(file.name.split(".")[file.name.split(".").length - 1]),
            1
            /* TEXT */
          )]), createElementVNode("div", _hoisted_12, [renderSlot(_ctx.$slots, "operate", {
            file
          }, function() {
            return [_ctx.handlePreview && ~["success", "downloading"].indexOf(file.status) ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: "operate-btn",
              onClick: function onClick($event) {
                return _ctx.handlePreview(file);
              }
            }, toDisplayString(_ctx.t("ui.uploadList.preview")), 9, _hoisted_13)) : createCommentVNode("v-if", true), _ctx.handleDownloadFile && !~["fail", "uploading"].indexOf(file.status) ? (openBlock(), createElementBlock("span", {
              key: 1,
              class: "operate-btn",
              onClick: function onClick($event) {
                return _ctx.handleDownloadFile(file);
              }
            }, toDisplayString(_ctx.t("ui.uploadList.download")), 9, _hoisted_14)) : createCommentVNode("v-if", true), (_ctx.isEdm ? true : _ctx.handleReUpload) && ~["fail"].indexOf(file.status) ? (openBlock(), createElementBlock("span", {
              key: 2,
              class: "operate-btn",
              onClick: function onClick($event) {
                return _ctx.reUpload(file);
              }
            }, toDisplayString(_ctx.t("ui.uploadList.reUpload")), 9, _hoisted_15)) : createCommentVNode("v-if", true), !_ctx.displayOnly ? (openBlock(), createElementBlock("span", {
              key: 3,
              class: "operate-btn",
              onClick: withModifiers(function($event) {
                return _ctx.remove({
                  file
                });
              }, ["stop"])
            }, toDisplayString(_ctx.t("ui.uploadList.delete")), 9, _hoisted_16)) : createCommentVNode("v-if", true)];
          })])]), createElementVNode("div", _hoisted_17, [createElementVNode("span", _hoisted_18, [~["fail"].indexOf(file.status) ? (openBlock(), createElementBlock("span", _hoisted_19, [createElementVNode(
            "span",
            null,
            toDisplayString(_ctx.t("ui.uploadList.uploadFailed")),
            1
            /* TEXT */
          )])) : ~["uploading"].indexOf(file.status) ? (openBlock(), createElementBlock(
            "span",
            _hoisted_20,
            toDisplayString(_ctx.formatFileSize(file.size * file.percentage / 100) + "/" + _ctx.formatFileSize(file.size)),
            1
            /* TEXT */
          )) : (openBlock(), createElementBlock(
            "span",
            _hoisted_21,
            toDisplayString(_ctx.formatFileSize(file.size)),
            1
            /* TEXT */
          ))]), createElementVNode("span", _hoisted_22, [renderSlot(_ctx.$slots, "assist-content", {
            file
          })])])])];
        }), file.showDownloadBar ? (openBlock(), createBlock(_component_tiny_progress, {
          key: 0,
          class: "tiny-upload-list__download-bar",
          "show-text": false,
          "stroke-width": 4,
          percentage: file.downloadPercentage || 0,
          status: file.downloadStatus || "default"
        }, null, 8, ["percentage", "status"])) : createCommentVNode("v-if", true)], 10, _hoisted_2);
      }),
      128
      /* KEYED_FRAGMENT */
    ))])) : (openBlock(), createElementBlock(
      "div",
      _hoisted_23,
      toDisplayString(_ctx.t("ui.uploadList.noAttachments")),
      1
      /* TEXT */
    ))],
    2
    /* CLASS */
  )) : (openBlock(), createElementBlock("div", _hoisted_24, [createVNode(TransitionGroup, {
    tag: "ul",
    class: normalizeClass(["tiny-upload-list", "tiny-upload-list--" + _ctx.listType, {
      "is-disabled": _ctx.disabled
    }]),
    name: "tiny-list"
  }, {
    default: withCtx(function() {
      return [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.files, function(file) {
          return openBlock(), createElementBlock("li", {
            key: file.uid,
            tabindex: "0",
            class: "tiny-upload-list__li"
          }, [createElementVNode("div", {
            class: normalizeClass(["tiny-upload-list__item", "is-" + file.status, _ctx.state.focusing ? "focusing" : "", {
              isEdm: _ctx.isEdm
            }, {
              showUpdate: _ctx.listOption.showUpdate
            }, {
              showDel: _ctx.listOption.showDel
            }]),
            onKeydown: withKeys(function($event) {
              return !_ctx.disabled && _ctx.$emit("remove", file);
            }, ["delete"]),
            onFocus: _cache[0] || (_cache[0] = function($event) {
              return _ctx.state.focusing = true;
            }),
            onBlur: _cache[1] || (_cache[1] = function($event) {
              return _ctx.state.focusing = false;
            }),
            onClick: _cache[2] || (_cache[2] = function($event) {
              return _ctx.state.focusing = false;
            })
          }, [renderSlot(_ctx.$slots, "default", {
            file
          }, function() {
            return [file.status !== "uploading" && file.status !== "fail" && ["picture-card", "picture"].indexOf(_ctx.listType) > -1 ? (openBlock(), createElementBlock("img", {
              key: 0,
              class: "tiny-upload-list__item-thumbnail",
              src: file.url,
              alt: ""
            }, null, 8, _hoisted_26)) : createCommentVNode("v-if", true), createVNode(_component_tiny_tooltip, {
              placement: "top",
              effect: "light",
              disabled: _ctx.state.tooltipDisabled
            }, {
              content: withCtx(function() {
                return [file.status === "fail" ? (openBlock(), createElementBlock("span", _hoisted_27, [createVNode(_component_icon_operationfaild, {
                  class: "tiny-upload-list__icon-operationfaild"
                }), createTextVNode(
                  toDisplayString(_ctx.t("ui.fileUpload.networkError")),
                  1
                  /* TEXT */
                )])) : (openBlock(), createElementBlock(
                  "span",
                  _hoisted_28,
                  toDisplayString(_ctx.isFolderTitle ? (file.path || "") + file.name : file.name),
                  1
                  /* TEXT */
                ))];
              }),
              default: withCtx(function() {
                return [createElementVNode("a", {
                  class: normalizeClass(["tiny-upload-list__item-name", {
                    isFail: _ctx.isEdm && file.status === "fail"
                  }]),
                  onClick: function onClick($event) {
                    return _ctx.handleClick($event, file);
                  },
                  title: _ctx.state.tooltipDisabled ? _ctx.isFolderTitle ? (file.path || "") + file.name : file.name : ""
                }, [!_ctx.isFolder ? (openBlock(), createBlock(_component_tiny_icon_document, {
                  key: 0,
                  fill: _ctx.isEdm && file.status === "fail" ? "#f5222d" : "",
                  class: "tiny-svg-size"
                }, null, 8, ["fill"])) : createCommentVNode("v-if", true), createTextVNode(
                  toDisplayString(file.name.length > _ctx.maxNameLength ? file.name.substring(0, _ctx.maxNameLength) + "..." : file.name),
                  1
                  /* TEXT */
                )], 10, _hoisted_29)];
              }),
              _: 2
              /* DYNAMIC */
            }, 1032, ["disabled"]), _ctx.isEdm ? (openBlock(), createElementBlock(
              "div",
              {
                key: 1,
                class: normalizeClass(["tiny-upload-list__item-edminfo", {
                  isFail: _ctx.isEdm && file.status === "fail"
                }])
              },
              [createElementVNode(
                "span",
                null,
                toDisplayString(file.docId),
                1
                /* TEXT */
              ), createElementVNode(
                "span",
                null,
                toDisplayString(file.version),
                1
                /* TEXT */
              ), createElementVNode(
                "span",
                null,
                toDisplayString(file.size),
                1
                /* TEXT */
              ), createElementVNode(
                "span",
                null,
                toDisplayString(file.serverName),
                1
                /* TEXT */
              )],
              2
              /* CLASS */
            )) : createCommentVNode("v-if", true), !_ctx.state.preViewComponent ? (openBlock(), createElementBlock("label", _hoisted_30, [_ctx.listType === "text" ? (openBlock(), createBlock(_component_icon_successful, {
              key: 0,
              class: "tiny-svg-size icon-successful"
            })) : createCommentVNode("v-if", true), ["picture-card", "picture"].indexOf(_ctx.listType) > -1 ? (openBlock(), createBlock(_component_icon_yes, {
              key: 1,
              class: "tiny-svg-size tiny-icon-check"
            })) : createCommentVNode("v-if", true)])) : createCommentVNode("v-if", true), _ctx.isEdm && !_ctx.isFolder && !_ctx.disabled && file.status !== "fail" && _ctx.listOption.showUpdate ? (openBlock(), createElementBlock("span", {
              key: 3,
              title: _ctx.t("ui.fileUpload.updateFile"),
              onClick: function onClick($event) {
                return _ctx.$emit("update", file);
              }
            }, [createVNode(_component_icon_file_cloudupload, {
              class: "tiny-svg-size icon-refres",
              fill: _ctx.isEdm && file.status === "fail" ? "#f5222d" : ""
            }, null, 8, ["fill"])], 8, _hoisted_31)) : createCommentVNode("v-if", true), !_ctx.disabled && _ctx.reUploadable && file.status === "fail" ? (openBlock(), createElementBlock("span", {
              key: 4,
              title: _ctx.t("ui.fileUpload.reUploadFile"),
              onClick: function onClick($event) {
                return _ctx.$emit("reUpload", file);
              }
            }, [createVNode(_component_icon_refresh, {
              class: "tiny-svg-size icon-refres",
              fill: _ctx.isEdm ? "#f5222d" : ""
            }, null, 8, ["fill"])], 8, _hoisted_32)) : createCommentVNode("v-if", true), !_ctx.disabled && _ctx.listOption.showDel ? (openBlock(), createElementBlock("span", {
              key: 5,
              title: _ctx.t("ui.fileUpload.deleteFile"),
              onClick: function onClick($event) {
                return _ctx.$emit("remove", file);
              }
            }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.state.closeComponent), {
              class: "tiny-svg-size icon-close",
              fill: _ctx.isEdm && file.status === "fail" ? "#f5222d" : ""
            }, null, 8, ["fill"]))], 8, _hoisted_33)) : createCommentVNode("v-if", true), !_ctx.disabled && _ctx.listOption.showDel ? (openBlock(), createElementBlock(
              "i",
              _hoisted_34,
              toDisplayString(_ctx.t("ui.fileUpload.deleteTip")),
              1
              /* TEXT */
            )) : createCommentVNode("v-if", true), file.status === "uploading" || file.status === "downloading" ? (openBlock(), createBlock(_component_tiny_progress, {
              key: 7,
              status: "success",
              type: _ctx.listType === "picture-card" ? _ctx.state.progressType : "line",
              "stroke-width": _ctx.listType === "picture-card" ? _ctx.state.progressStrokeWidth : 2,
              width: _ctx.state.progressWidth,
              percentage: _ctx.parsePercentage(file.percentage),
              "show-text": !_ctx.state.progressWidth
            }, null, 8, ["type", "stroke-width", "width", "percentage", "show-text"])) : createCommentVNode("v-if", true), file.status === "uploading" && _ctx.listType === "picture-card" && _ctx.state.progressWidth ? (openBlock(), createElementBlock("div", {
              key: 8,
              class: "tiny-upload-list__item-cancel",
              onClick: function onClick($event) {
                return _ctx.$emit("remove", file);
              }
            }, toDisplayString(_ctx.t("ui.fileUpload.cancelFile")), 9, _hoisted_35)) : createCommentVNode("v-if", true), createVNode(_component_tiny_tooltip, {
              placement: "top",
              effect: "light",
              disabled: _ctx.state.tooltipDisabled || file.status !== "fail"
            }, {
              content: withCtx(function() {
                return [createElementVNode("span", _hoisted_36, [createVNode(_component_icon_operationfaild, {
                  class: "tiny-upload-list__icon-operationfaild"
                }), createTextVNode(
                  toDisplayString(_ctx.t("ui.fileUpload.pictureNetworkError")),
                  1
                  /* TEXT */
                )])];
              }),
              default: withCtx(function() {
                return [_ctx.listType === "picture-card" && (_ctx.state.progressWidth ? file.status !== "uploading" : true) ? (openBlock(), createElementBlock("span", _hoisted_37, [_ctx.openDownloadFile ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  class: "tiny-upload-list__item-download",
                  title: _ctx.t("ui.fileUpload.downloadFile"),
                  onClick: function onClick($event) {
                    return _ctx.handleClick(file);
                  }
                }, [createVNode(_component_icon_download, {
                  class: "tiny-svg-size"
                })], 8, _hoisted_38)) : createCommentVNode("v-if", true), _ctx.handlePreview && file.status !== "fail" ? (openBlock(), createElementBlock("span", {
                  key: 1,
                  class: "tiny-upload-list__item-preview",
                  title: _ctx.t("ui.fileUpload.previewFile"),
                  onClick: function onClick($event) {
                    return _ctx.handlePreview(file);
                  }
                }, [_ctx.state.preViewComponent ? (openBlock(), createBlock(_component_icon_fullscreen_left, {
                  key: 0,
                  class: "tiny-svg-size tiny-svg-fullscreen"
                })) : (openBlock(), createBlock(_component_icon_view, {
                  key: 1,
                  class: "tiny-svg-size"
                }))], 8, _hoisted_39)) : createCommentVNode("v-if", true), _ctx.isEdm && !_ctx.isFolder && !_ctx.disabled ? (openBlock(), createElementBlock("span", {
                  key: 2,
                  title: _ctx.t("ui.fileUpload.updateFile"),
                  class: "tiny-upload-list__item-refres",
                  onClick: function onClick($event) {
                    return _ctx.$emit("update", file);
                  }
                }, [createVNode(_component_icon_file_cloudupload, {
                  class: "tiny-svg-size"
                })], 8, _hoisted_40)) : createCommentVNode("v-if", true), !_ctx.disabled ? (openBlock(), createElementBlock("span", {
                  key: 3,
                  class: "tiny-upload-list__item-delete",
                  title: _ctx.t("ui.fileUpload.deleteFile"),
                  onClick: function onClick($event) {
                    return _ctx.$emit("remove", file);
                  }
                }, [createVNode(_component_icon_del, {
                  class: "tiny-svg-size icon-delete"
                })], 8, _hoisted_41)) : createCommentVNode("v-if", true)])) : createCommentVNode("v-if", true)];
              }),
              _: 2
              /* DYNAMIC */
            }, 1032, ["disabled"])];
          })], 42, _hoisted_25), _ctx.state.preViewComponent && _ctx.listType === "picture-card" ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(["tiny-upload-list__li-title", file.status === "fail" && "is-fail"]),
            title: _ctx.isFolderTitle ? (file.path || "") + file.name : file.name
          }, toDisplayString(file.name.length > _ctx.maxNameLength ? file.name.substring(0, _ctx.maxNameLength) + "..." : file.name), 11, _hoisted_42)) : createCommentVNode("v-if", true)]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["class"]), _ctx.reUploadable && _ctx.state.failUploadFileCount && _ctx.listType === "text" ? (openBlock(), createElementBlock("div", _hoisted_43, [createVNode(_component_icon_operationfaild, {
    class: "tiny-upload-list__icon-operationfaild"
  }), createTextVNode(
    toDisplayString(typeof _ctx.reUploadTip === "function" ? _ctx.reUploadTip(_ctx.state.failUploadFileCount) : _ctx.t("ui.fileUpload.reUploadTip", {
      number: _ctx.state.failUploadFileCount
    })) + " ",
    1
    /* TEXT */
  ), createVNode(_component_tiny_button, {
    type: "text",
    onClick: _cache[3] || (_cache[3] = function($event) {
      return _ctx.$emit("ReUploadTotal", _ctx.files);
    })
  }, {
    default: withCtx(function() {
      return [createTextVNode(
        toDisplayString(_ctx.t("ui.fileUpload.reUploadFile")),
        1
        /* TEXT */
      )];
    }),
    _: 1
    /* STABLE */
  })])) : createCommentVNode("v-if", true)]));
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
