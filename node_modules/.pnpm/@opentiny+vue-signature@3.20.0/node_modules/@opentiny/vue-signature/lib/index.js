function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import { t } from "@opentiny/vue-locale";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return MobileFirstTemplate;
};
var Signature = defineComponent({
  name: $prefix + "Signature",
  props: _extends({}, $props, {
    placeholder: {
      type: String,
      default: t("ui.signature.placeholder")
    },
    height: String,
    type: {
      type: String,
      default: "png"
    },
    penColor: {
      type: String,
      default: "#191919"
    },
    lineWidth: {
      type: Number,
      default: 4
    },
    backgroundColor: {
      type: String,
      default: ""
    },
    value: String,
    showSubmitButton: {
      type: Boolean,
      default: true
    },
    rewriteButtonText: {
      type: String,
      default: t("ui.signature.rewrite")
    },
    resignButtonText: {
      type: String,
      default: t("ui.signature.resign")
    },
    cancelButtonText: {
      type: String,
      default: t("ui.signature.cancel")
    },
    submitButtonText: {
      type: String,
      default: t("ui.signature.confirm")
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Signature.install = function(Vue) {
  Vue.component(Signature.name, Signature);
};
Signature.version = version;
export {
  Signature as default
};
