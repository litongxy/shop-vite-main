function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return MobileTemplate;
};
var Tabbar = defineComponent({
  name: $prefix + "Tabbar",
  componentName: "Tabbar",
  props: _extends({}, $props, {
    activeColor: String,
    border: {
      type: Boolean,
      default: true
    },
    fixed: {
      type: Boolean,
      default: true
    },
    inactiveColor: String,
    modelValue: {
      type: [Number, String],
      default: 0
    },
    placeholder: Boolean,
    route: Boolean,
    safeAreaInsetBottom: Boolean,
    zIndex: [Number, String],
    showNumber: {
      type: Number,
      default: 5
    },
    itemList: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Tabbar.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Tabbar.install = function(Vue) {
  Vue.component(Tabbar.name, Tabbar);
};
Tabbar.version = version;
export {
  Tabbar as default
};
