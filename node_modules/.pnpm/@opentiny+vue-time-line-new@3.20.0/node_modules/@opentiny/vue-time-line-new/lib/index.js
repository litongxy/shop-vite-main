function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  PROCESS_DONE_CLS: "process-done",
  PROCESS_CUR_CLS: "process-current",
  PROCESS_WAIT_CLS: "process-wait",
  STACK_NODES_MAX: "7",
  LIMITED_STACK_NODES: "3"
};
var TimeLine = defineComponent({
  name: $prefix + "TimeLine",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    vertical: {
      type: Boolean,
      default: false
    },
    showNumber: {
      type: Boolean,
      default: true
    },
    nameField: {
      type: String,
      default: "name"
    },
    timeField: {
      type: String,
      default: "time"
    },
    tipsField: {
      type: String,
      default: "tips"
    },
    autoColorField: {
      type: String,
      default: "autoColor"
    },
    start: {
      type: Number,
      default: 1
    },
    data: Array,
    space: Number,
    active: {
      type: Number,
      default: -1
    },
    reverse: {
      type: Boolean,
      default: false
    },
    showStatus: {
      type: Boolean,
      default: false
    },
    subField: {
      type: Boolean,
      default: false
    },
    foldDisabled: {
      type: Boolean,
      default: false
    },
    nodeMax: {
      type: [Number, String],
      default: $constants.STACK_NODES_MAX
    },
    limitedNodes: {
      type: [Number, String],
      default: $constants.LIMITED_STACK_NODES
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
TimeLine.install = function(Vue) {
  Vue.component(TimeLine.name, TimeLine);
};
TimeLine.version = version;
export {
  TimeLine as default
};
