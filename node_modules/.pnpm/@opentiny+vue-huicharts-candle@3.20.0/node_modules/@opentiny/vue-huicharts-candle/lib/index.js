import Core, { itemContent, itemPoint, itemLabel, getFormatted } from '@opentiny/vue-huicharts-core';
import { t } from '@opentiny/vue-locale';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var isNull = function isNull2(x) {
  return x === null || x === void 0;
};
var defaultKName = "";
var getLegend = function getLegend2(args) {
  var legendVisible = args.legendVisible;
  if (!legendVisible) {
    return {
      show: false
    };
  }
  var MA = args.MA, labelMap = args.labelMap, legendName = args.legendName, showMA = args.showMA;
  var data2 = [defaultKName];
  showMA && (data2 = data2.concat(MA.map(function(v) {
    return "MA" + v;
  })));
  data2 = data2.map(function(v) {
    return {
      name: v
    };
  });
  var formatter = function formatter2(name) {
    var temp = labelMap[name];
    return isNull(legendName[name]) ? isNull(temp) ? name : temp : legendName[name];
  };
  return {
    show: true,
    data: data2,
    formatter
  };
};
var getTooltip = function getTooltip2(args) {
  var dataType = args.dataType, digit = args.digit, labelMap = args.labelMap, metrics = args.metrics;
  var position = function position2(pos, params, dom, rect, size) {
    var result = {
      top: 10
    };
    var side = pos[0] < size.viewSize[0] / 2 ? "right" : "left";
    result[side] = 60;
    return result;
  };
  var formatter = function formatter2(options) {
    var tplt = [];
    tplt.push(itemContent(options[0].axisValue) + "<br>");
    options.forEach(function(opt) {
      var color = opt.color, componentSubType = opt.componentSubType, data2 = opt.data, seriesName = opt.seriesName;
      var name = isNull(labelMap[seriesName]) ? seriesName : labelMap[seriesName];
      tplt.push("" + itemPoint(color) + itemLabel(name) + ": ");
      if (componentSubType === "candlestick") {
        tplt.push("<br>");
        metrics.slice(0, 4).forEach(function(m, i) {
          var name2 = isNull(labelMap[m]) ? m : labelMap[m];
          var value2 = getFormatted(data2[i + 1], dataType, digit);
          tplt.push("" + itemLabel("- " + name2) + itemContent(value2) + "<br>");
        });
      } else if (componentSubType === "line") {
        var value = getFormatted(data2, dataType, digit);
        tplt.push(itemContent(value) + "<br>");
      } else if (componentSubType === "bar") {
        var _value = getFormatted(data2[1], dataType, digit);
        tplt.push(itemContent(_value) + "<br>");
      }
    });
    return tplt.join("");
  };
  return {
    axisPointer: {
      type: "cross"
    },
    formatter,
    position,
    trigger: "axis"
  };
};
var getData = function getData2(args) {
  var rows = args.rows, dimension = args.dimension, metrics = args.metrics;
  return rows.map(function(item) {
    var _ref2;
    if (Array.isArray(item)) {
      var _ref;
      var newKeys = metrics.map(function(keyname) {
        return keyname === "vol" ? "volume" : keyname;
      });
      newKeys.unshift(dimension);
      return _ref = {}, _ref[newKeys[0]] = item[0], _ref[newKeys[1]] = item[1], _ref[newKeys[2]] = item[2], _ref[newKeys[3]] = item[3], _ref[newKeys[4]] = item[4], _ref[newKeys[5]] = item[5], _ref;
    }
    return _ref2 = {}, _ref2[dimension] = item[dimension], _ref2.open = item[metrics[0]], _ref2.close = item[metrics[1]], _ref2.lowest = item[metrics[2]], _ref2.highest = item[metrics[3]], _ref2.volume = item[metrics[4]], _ref2;
  });
};
var candle = function candle2(columns, rows, settings, extra) {
  var _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? columns.slice(1, 6) : _settings$metrics, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit; settings.itemStyle;
  var _settings$labelMap = settings.labelMap, labelMap = _settings$labelMap === void 0 ? {} : _settings$labelMap, _settings$legendName = settings.legendName, legendName = _settings$legendName === void 0 ? {} : _settings$legendName, _settings$MA = settings.MA, MA = _settings$MA === void 0 ? [5, 10, 20, 30] : _settings$MA, _settings$showMA = settings.showMA, showMA = _settings$showMA === void 0 ? false : _settings$showMA, _settings$showVol = settings.showVol, showVol = _settings$showVol === void 0 ? false : _settings$showVol;
  var _settings$showDataZoo = settings.showDataZoom, showDataZoom = _settings$showDataZoo === void 0 ? false : _settings$showDataZoo, _settings$downColor = settings.downColor, downColor = _settings$downColor === void 0 ? "#eb171f" : _settings$downColor, _settings$upColor = settings.upColor, upColor = _settings$upColor === void 0 ? "#00a874" : _settings$upColor;
  var _settings$start = settings.start, start = _settings$start === void 0 ? 50 : _settings$start, _settings$end = settings.end, end = _settings$end === void 0 ? 100 : _settings$end, dataType = settings.dataType;
  var tooltipVisible = extra.tooltipVisible, legendVisible = extra.legendVisible, t2 = extra.t;
  defaultKName = t2("ui.chart.kName");
  var data2 = getData({
    dimension,
    metrics,
    rows
  });
  var legend = getLegend({
    legendVisible,
    MA,
    labelMap,
    legendName,
    showMA
  });
  var ichartOption = {
    legend,
    MA: showMA ? MA : [],
    volume: showVol,
    data: data2,
    upColor,
    downColor
  };
  if (tooltipVisible) {
    ichartOption.tooltip = getTooltip({
      dataType,
      digit,
      labelMap,
      metrics
    });
  }
  if (showDataZoom) {
    ichartOption.dataZoom = {
      show: true,
      start,
      end
    };
  }
  return ichartOption;
};
var _sfc_main = {
  name: $prefix + "ChartCandle",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "CandlestickChart"
    };
  },
  methods: {
    updateChart: function updateChart(data2) {
      var _data$columns = data2.columns, columns = _data$columns === void 0 ? [] : _data$columns, _data$rows = data2.rows, rows = _data$rows === void 0 ? [] : _data$rows;
      var extra = {
        tooltipVisible: this.tooltipVisible,
        legendVisible: this.legendVisible,
        t
      };
      this.huiChartOption = candle(columns, rows, this.settings, extra);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsCandle = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsCandle.install = function(Vue) {
  Vue.component(HuiChartsCandle.name, HuiChartsCandle);
};

export { HuiChartsCandle, HuiChartsCandle as default };
