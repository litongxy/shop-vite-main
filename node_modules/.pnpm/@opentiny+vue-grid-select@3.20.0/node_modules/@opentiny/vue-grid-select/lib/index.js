import { defineComponent, $prefix, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/grid-select/vue';
import Grid from '@opentiny/vue-grid';
import BaseSelect from '@opentiny/vue-base-select';
import { resolveComponent, openBlock, createBlock, withCtx, createVNode, mergeProps, withModifiers } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "GridSelect",
  components: {
    TinyGrid: Grid,
    TinyBaseSelect: BaseSelect
  },
  props: {
    clearable: Boolean,
    extraQueryParams: {
      type: [Object, String, Boolean, Array, Number],
      default: ""
    },
    filterable: Boolean,
    filterMethod: Function,
    gridOp: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    initLabel: {
      type: String,
      default: ""
    },
    initQuery: Function,
    modelValue: {},
    multiple: Boolean,
    radioConfig: {
      type: Object,
      default: function _default2() {
        return {
          checkMethod: function checkMethod() {
            return true;
          }
        };
      }
    },
    remote: Boolean,
    remoteConfig: {
      type: Object,
      default: function _default3() {
        return {
          showIcon: false,
          clearData: false,
          autoSearch: false
        };
      }
    },
    remoteMethod: Function,
    reserveKeyword: Boolean,
    selectConfig: {
      type: Object,
      default: function _default4() {
        return {
          checkMethod: function checkMethod() {
            return true;
          }
        };
      }
    },
    textField: {
      type: String,
      default: "label"
    },
    valueField: {
      type: String,
      default: "value"
    }
  },
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_grid = resolveComponent("tiny-grid");
  var _component_tiny_base_select = resolveComponent("tiny-base-select");
  return openBlock(), createBlock(_component_tiny_base_select, {
    ref: "baseSelectRef",
    class: "tiny-grid-select",
    modelValue: _ctx.state.value,
    "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
      return _ctx.state.value = $event;
    }),
    multiple: _ctx.multiple,
    filterable: _ctx.filterable,
    "filter-method": _ctx.filter
  }, {
    panel: withCtx(function() {
      return [createVNode(_component_tiny_grid, mergeProps({
        ref: "gridRef",
        "auto-resize": "",
        "row-id": _ctx.valueField,
        "select-config": _ctx.buildSelectConfig(),
        "radio-config": _ctx.buildRadioConfig(),
        "highlight-current-row": true,
        columns: _ctx.state.gridData.columns,
        data: _ctx.state.gridData,
        onSelectAll: _ctx.selectChange,
        onSelectChange: _ctx.selectChange,
        onRadioChange: _ctx.radioChange,
        onMousedown: _cache[0] || (_cache[0] = withModifiers(function() {
        }, ["stop"]))
      }, _ctx.gridOp), null, 16, ["row-id", "select-config", "radio-config", "columns", "data", "onSelectAll", "onSelectChange", "onRadioChange"])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "multiple", "filterable", "filter-method"]);
}
var GridSelect = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
GridSelect.install = function(Vue) {
  Vue.component(GridSelect.name, GridSelect);
};
GridSelect.version = version;

export { GridSelect as default };
