function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var buttonProps = _extends({}, $props, {
  /** 展示按钮不同的状态，设置为text则展示为文本按钮。可取值为：'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'text'  */
  type: {
    type: String,
    default: "default"
  },
  /** 设置原生的tabindex属性 */
  tabindex: {
    type: String,
    default: "0"
  },
  /** 按钮左侧展示的图标，接收为Icon组件  */
  icon: {
    type: [Object, String],
    default: ""
  },
  /** 按钮显示的文本 */
  text: {
    type: String,
    default: ""
  },
  /** 设置按钮禁用时间，防止重复提交，单位毫秒 */
  resetTime: {
    type: Number,
    default: 1e3
  },
  /** 对应按钮原生 type 属性  */
  nativeType: {
    type: String,
    default: "button"
  },
  /** 当配置href后，点击按钮则更新 location.href 进行页面跳转  */
  href: {
    type: String,
    default: ""
  },
  /** 定义按钮尺寸 */
  size: {
    type: String,
    default: "",
    validator: function validator(val) {
      return ["large", "medium", "small", "mini", ""].includes(val);
    }
  },
  /** 是否圆角按钮 */
  round: {
    type: Boolean,
    default: void 0
  },
  /** 是否朴素按钮  */
  plain: Boolean,
  /** 是否圆形按钮  */
  circle: Boolean,
  /** 是否加载中状态 */
  loading: Boolean,
  /** 是否被禁用按钮 */
  disabled: Boolean,
  /** 是否默认聚焦 */
  autofocus: Boolean,
  /** 自定义类名， 仅 mobile-first 模板时有效 */
  customClass: {
    type: String,
    default: ""
  },
  /** 设置通栏按钮,宽度充满水平方向， 仅 mobile-first 模板时有效  */
  banner: {
    type: Boolean,
    default: false
  },
  /** 是否幽灵按钮 */
  ghost: Boolean,
  /** 点击事件 */
  onClick: {
    type: Function
  }
});
var Button = defineComponent({
  name: $prefix + "Button",
  inject: {
    buttonGroup: {
      default: ""
    }
  },
  props: buttonProps,
  slots: Object,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Button.install = function(Vue) {
  Vue.component(Button.name, Button);
};
Button.version = version;
export {
  Button as default
};
