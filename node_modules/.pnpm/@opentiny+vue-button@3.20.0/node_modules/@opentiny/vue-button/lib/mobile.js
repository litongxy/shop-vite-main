import { renderless, api } from '@opentiny/vue-renderless/button/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import '@opentiny/vue-theme-mobile/button/index.css';
import { openBlock, createElementBlock, mergeProps, normalizeClass, createCommentVNode, createBlock, resolveDynamicComponent, renderSlot, createElementVNode, normalizeStyle, toDisplayString } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["click"],
  props: [].concat(props, ["type", "text", "size", "icon", "resetTime", "nativeType", "loading", "disabled", "customClass"]),
  components: {},
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = ["disabled", "type"];
var _hoisted_2 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    class: "tiny-mobile-button-loading-inner"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_3 = [_hoisted_2];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("button", mergeProps({
    class: ["tiny-mobile-button", [_ctx.type ? "tiny-mobile-button--" + _ctx.type : "", _ctx.size ? "tiny-mobile-button--" + _ctx.size : "", {
      "is-disabled": _ctx.state.buttonDisabled,
      "is-loading": _ctx.loading
    }]],
    onClick: _cache[0] || (_cache[0] = function() {
      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
    }),
    disabled: _ctx.state.buttonDisabled || _ctx.loading,
    type: _ctx.nativeType
  }, _ctx.a(_ctx.$attrs, ["class", "style"], true)), [_ctx.loading ? (openBlock(), createElementBlock(
    "div",
    {
      key: 0,
      class: normalizeClass(["tiny-mobile-button-loading", "tiny-mobile-button-loading-" + (_ctx.type === "primary" ? "white" : "black")])
    },
    _hoisted_3,
    2
    /* CLASS */
  )) : createCommentVNode("v-if", true), _ctx.icon && !_ctx.loading ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {
    key: 1,
    class: normalizeClass(["tiny-icon", "is-icon", _ctx.text ? "small" : null])
  }, null, 8, ["class"])) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "default", {}, function() {
    return [createElementVNode(
      "span",
      {
        style: normalizeStyle({
          marginLeft: _ctx.text && (_ctx.icon || _ctx.loading) ? "4px" : 0
        })
      },
      toDisplayString(_ctx.text),
      5
      /* TEXT, STYLE */
    )];
  })], 16, _hoisted_1);
}
var mobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobile as default };
