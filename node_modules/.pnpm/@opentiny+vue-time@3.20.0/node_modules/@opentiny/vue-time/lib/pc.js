import { renderless, api } from '@opentiny/vue-renderless/time/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import TimeSpinner from '@opentiny/vue-time-spinner';
import Button from '@opentiny/vue-button';
import { resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, toDisplayString, createElementBlock, createCommentVNode, createVNode, createTextVNode, vShow } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = /* @__PURE__ */ defineComponent({
  emits: ["dodestroy", "pick", "select-range"],
  components: {
    TimeSpinner,
    TinyButton: Button
  },
  props: [].concat(props, ["show", "timeArrowControl", "emitter", "value", "step"]),
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-time-panel__header"
};
var _hoisted_2 = {
  class: "tiny-time-panel__header-title"
};
var _hoisted_3 = {
  key: 0
};
var _hoisted_4 = {
  class: "tiny-time-panel__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_time_spinner = resolveComponent("time-spinner");
  var _component_tiny_button = resolveComponent("tiny-button");
  return openBlock(), createBlock(Transition, {
    name: "tiny-zoom-in-top",
    onAfterLeave: _cache[2] || (_cache[2] = function($event) {
      return _ctx.$emit("dodestroy");
    }),
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          class: normalizeClass(["tiny-time tiny-time-panel tiny-popper", _ctx.state.popperClass])
        },
        [createElementVNode("div", _hoisted_1, [createElementVNode("div", _hoisted_2, [createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.datepicker.hour")),
          1
          /* TEXT */
        ), createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.datepicker.minute")),
          1
          /* TEXT */
        ), _ctx.state.showSeconds ? (openBlock(), createElementBlock(
          "span",
          _hoisted_3,
          toDisplayString(_ctx.t("ui.datepicker.second")),
          1
          /* TEXT */
        )) : createCommentVNode("v-if", true)])]), createElementVNode(
          "div",
          {
            class: normalizeClass(["tiny-time-panel__content", {
              "has-seconds": _ctx.state.showSeconds
            }])
          },
          [createVNode(_component_time_spinner, {
            ref: "spinner",
            step: _ctx.step,
            onChange: _ctx.handleChange,
            "arrow-control": _ctx.state.useArrow,
            "show-seconds": _ctx.state.showSeconds,
            "am-pm-mode": _ctx.state.amPmMode,
            onSelectRange: _ctx.setSelectionRange,
            date: _ctx.state.date
          }, null, 8, ["step", "onChange", "arrow-control", "show-seconds", "am-pm-mode", "onSelectRange", "date"])],
          2
          /* CLASS */
        ), createElementVNode("div", _hoisted_4, [!_ctx.state.showTimePickerButton ? (openBlock(), createBlock(_component_tiny_button, {
          key: 0,
          class: "tiny-time-panel__btn cancel",
          onClick: _cache[0] || (_cache[0] = function($event) {
            return _ctx.handleCancel();
          })
        }, {
          default: withCtx(function() {
            return [createTextVNode(
              toDisplayString(_ctx.t("ui.datepicker.cancel")),
              1
              /* TEXT */
            )];
          }),
          _: 1
          /* STABLE */
        })) : createCommentVNode("v-if", true), createVNode(_component_tiny_button, {
          onClick: _cache[1] || (_cache[1] = function($event) {
            return _ctx.handleConfirm();
          }),
          size: "small",
          class: normalizeClass({
            "tiny-time-panel__btn": !_ctx.state.showTimePickerButton,
            confirm: !_ctx.state.disabled && !_ctx.state.showTimePickerButton
          })
        }, {
          default: withCtx(function() {
            return [createTextVNode(
              toDisplayString(_ctx.t("ui.datepicker.confirm")),
              1
              /* TEXT */
            )];
          }),
          _: 1
          /* STABLE */
        }, 8, ["class"])])],
        2
        /* CLASS */
      ), [[vShow, _ctx.state.visible]])];
    }),
    _: 1
    /* STABLE */
  });
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
