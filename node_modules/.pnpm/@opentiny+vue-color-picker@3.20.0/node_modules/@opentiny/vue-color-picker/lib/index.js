function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import "@opentiny/vue-theme/color-picker/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  return PcTemplate;
};
var $constants = {};
var ColorPicker = defineComponent({
  name: $prefix + "ColorPicker",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    modelValue: String,
    visible: Boolean,
    alpha: Boolean,
    predefine: Array,
    history: Array,
    size: {
      type: String,
      default: "",
      validator: function validator(val) {
        return [" large", "medium", "small", "mini", ""].includes(val);
      }
    },
    format: {
      type: Array,
      default: function _default2() {
        return [];
      },
      validator: function validator2(val) {
        if (!val.length) {
          return true;
        }
        if (val[val.length - 1] === "a") {
          console.warn("If you want enable alpha, You should set `alpha` prop to true");
        }
        return ["hsv", "hsl", "rgb", "hex"].includes(val);
      }
    },
    enableHistory: {
      type: Boolean,
      default: false
    },
    enablePredefineColor: {
      type: Boolean,
      default: false
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
ColorPicker.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
ColorPicker.install = function(Vue) {
  Vue.component(ColorPicker.name, ColorPicker);
};
ColorPicker.version = version;
export {
  ColorPicker as default
};
