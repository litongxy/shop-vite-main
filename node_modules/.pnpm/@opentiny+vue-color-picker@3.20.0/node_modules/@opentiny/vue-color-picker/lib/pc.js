import { renderless, api } from '@opentiny/vue-renderless/color-picker/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import { IconChevronDown } from '@opentiny/vue-icon';
import ColorSelectPanel from '@opentiny/vue-color-select-panel';
import '@opentiny/vue-theme/color-picker/index.css';
import { resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createVNode, Transition, withCtx } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["update:modelValue", "confirm", "cancel"],
  props: [].concat(props, ["modelValue", "visible", "alpha", "predefine", "history", "size", "format", "enableHistory", "enablePredefineColor"]),
  components: {
    IconChevronDown: IconChevronDown(),
    ColorSelect: ColorSelectPanel
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _ctx$state$hex;
  var _component_IconChevronDown = resolveComponent("IconChevronDown");
  var _component_color_select = resolveComponent("color-select");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass([{
        "tiny-color-picker": true
      }, _ctx.state.size ? "tiny-color-picker--" + _ctx.state.size : ""]),
      onClick: _cache[1] || (_cache[1] = function() {
        return _ctx.changeVisible(!_ctx.state.isShow);
      })
    },
    [createElementVNode(
      "div",
      {
        class: "tiny-color-picker__inner",
        style: normalizeStyle({
          background: (_ctx$state$hex = _ctx.state.hex) != null ? _ctx$state$hex : ""
        })
      },
      [createVNode(_component_IconChevronDown)],
      4
      /* STYLE */
    ), createVNode(Transition, {
      name: "tiny-zoom-in-top"
    }, {
      default: withCtx(function() {
        return [createVNode(_component_color_select, {
          onConfirm: _ctx.onConfirm,
          onCancel: _ctx.onCancel,
          modelValue: _ctx.state.hex,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
            return _ctx.state.hex = $event;
          }),
          visible: _ctx.state.isShow,
          alpha: _ctx.alpha,
          predefine: _ctx.state.predefineStack,
          history: _ctx.state.stack,
          format: _ctx.format,
          style: {
            "min-width": "420px"
          },
          "enable-history": _ctx.state.enableHistory,
          "enable-predefine-color": _ctx.state.enablePredefineColor
        }, null, 8, ["onConfirm", "onCancel", "modelValue", "visible", "alpha", "predefine", "history", "format", "enable-history", "enable-predefine-color"])];
      }),
      _: 1
      /* STABLE */
    })],
    2
    /* CLASS */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
