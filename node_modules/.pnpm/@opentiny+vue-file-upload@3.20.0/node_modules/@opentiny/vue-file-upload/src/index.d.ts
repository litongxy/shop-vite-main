export declare const $constants: {
    FILE_UPLOAD_INNER_TEMPLATE: string;
    UPLOAD_INNER: string;
    UPLOAD_INNER_TEMPLATE: string;
    UPLOAD_LIST_INNER: string;
    UPLOAD_LIST_INNER_TEMPLATE: string;
    ONLY_SUPPORT: string;
    COMMA: string;
    FILE_NOT_LESS_THAN: string;
    FILE_NOT_MORE_THAN: string;
    FILE_SIZE_RANGE: string;
    NUMBER_LIMIT: string;
    FILE_STATUS: {
        READY: string;
        SUCESS: string;
        UPLOADING: string;
        FAIL: string;
        DOWNLOADING: string;
    };
    LIST_TYPE: {
        TEXT: string;
        PICTURE_CARD: string;
        PICTURE: string;
        THUMB: string;
        PICTURE_SINGLE: string;
        DRAG_SINGLE: string;
        SAAS: string;
    };
    EDM: {
        CHUNKINIT: string;
        FILESIZE: string;
        CHUNKS: string;
        FILENAME: string;
        ISCHECKCODE: string;
        CHECKCODE: string;
        MULTIPART: string;
        DOCID: string;
        CHUNK: string;
        SINGLEUPLOAD: string;
        LOWERNAME: string;
        FOLDERKEY: string;
        FORMAT: string;
        WATER: string;
        SOURCE: string;
        URLCONTS: string;
        EDMTOKEN: string;
        TRACEID: string;
        TEXT: string;
        JSLIB: string;
        I18NKEY: string;
        LARGEFILEKEY: string;
        EXCEED: string;
        SIZE: string;
        SIZE_17G: number;
        SIZE_2G: number;
        SIZE_64M: number;
        SIZE_32M: number;
        SIZE_20M: number;
        SIZE_16M: number;
        SIZE_8M: number;
        SIZE_4M: number;
        SIZE_2M: number;
        SIZE_0M: number;
        FILEEMPTY: string;
        KIASCANTIP: string;
        FILENAMEEXCEEDS: string;
        THEFILENAME: string;
        CALCHASH: string;
        KIASTATUS: number;
        NumberExceed: string;
        notSupport: string;
        NOT_SUPPORT_NO_SUFFIX: string;
        STATUS_SPECIAL_CHARACTERS: number;
        NOT_SUPPORT_SPECIAL_CHARACTERS: string;
        DOC_PREVIEW: string;
    };
    IMAGE_TYPE: string;
    FILE_TYPE: {
        EXCEL: string;
        FILE: string;
        PDF: string;
        PICTURE: string;
        PPT: string;
        TEXT: string;
        WORD: string;
        ZIP: string;
        VIDEO: string;
        AUDIO: string;
    };
    SOURCE_TYPE: {
        SOURCE_VIDEO: string;
        SOURCE_AUDIO: string;
        SOURCE_PICTURE: string;
    };
    MODE: {
        BUBBLE: string;
    };
};
export declare const fileUploadProps: {
    _constants: {
        type: ObjectConstructor;
        default: () => {
            FILE_UPLOAD_INNER_TEMPLATE: string;
            UPLOAD_INNER: string;
            UPLOAD_INNER_TEMPLATE: string;
            UPLOAD_LIST_INNER: string;
            UPLOAD_LIST_INNER_TEMPLATE: string;
            ONLY_SUPPORT: string;
            COMMA: string;
            FILE_NOT_LESS_THAN: string;
            FILE_NOT_MORE_THAN: string;
            FILE_SIZE_RANGE: string;
            NUMBER_LIMIT: string;
            FILE_STATUS: {
                READY: string;
                SUCESS: string;
                UPLOADING: string;
                FAIL: string;
                DOWNLOADING: string;
            };
            LIST_TYPE: {
                TEXT: string;
                PICTURE_CARD: string;
                PICTURE: string;
                THUMB: string;
                PICTURE_SINGLE: string;
                DRAG_SINGLE: string;
                SAAS: string;
            };
            EDM: {
                CHUNKINIT: string;
                FILESIZE: string;
                CHUNKS: string;
                FILENAME: string;
                ISCHECKCODE: string;
                CHECKCODE: string;
                MULTIPART: string;
                DOCID: string;
                CHUNK: string;
                SINGLEUPLOAD: string;
                LOWERNAME: string;
                FOLDERKEY: string;
                FORMAT: string;
                WATER: string;
                SOURCE: string;
                URLCONTS: string;
                EDMTOKEN: string;
                TRACEID: string;
                TEXT: string;
                JSLIB: string;
                I18NKEY: string;
                LARGEFILEKEY: string;
                EXCEED: string;
                SIZE: string;
                SIZE_17G: number;
                SIZE_2G: number;
                SIZE_64M: number;
                SIZE_32M: number;
                SIZE_20M: number;
                SIZE_16M: number;
                SIZE_8M: number;
                SIZE_4M: number;
                SIZE_2M: number;
                SIZE_0M: number;
                FILEEMPTY: string;
                KIASCANTIP: string;
                FILENAMEEXCEEDS: string;
                THEFILENAME: string;
                CALCHASH: string;
                KIASTATUS: number;
                NumberExceed: string;
                notSupport: string;
                NOT_SUPPORT_NO_SUFFIX: string;
                STATUS_SPECIAL_CHARACTERS: number;
                NOT_SUPPORT_SPECIAL_CHARACTERS: string;
                DOC_PREVIEW: string;
            };
            IMAGE_TYPE: string;
            FILE_TYPE: {
                EXCEL: string;
                FILE: string;
                PDF: string;
                PICTURE: string;
                PPT: string;
                TEXT: string;
                WORD: string;
                ZIP: string;
                VIDEO: string;
                AUDIO: string;
            };
            SOURCE_TYPE: {
                SOURCE_VIDEO: string;
                SOURCE_AUDIO: string;
                SOURCE_PICTURE: string;
            };
            MODE: {
                BUBBLE: string;
            };
        };
    };
    accept: StringConstructor;
    action: StringConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    beforeRemove: FunctionConstructor;
    beforeUpload: FunctionConstructor;
    data: ObjectConstructor;
    disabled: BooleanConstructor;
    display: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    drag: BooleanConstructor;
    dragger: BooleanConstructor;
    edm: {
        type: ObjectConstructor;
        default: () => {};
    };
    fileIconList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fileList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fileSize: {
        type: (ArrayConstructor | NumberConstructor)[];
        validator(value: any): boolean;
    };
    fileTitle: {
        type: StringConstructor;
        default: () => string;
    };
    headerShow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    headers: {
        type: ObjectConstructor;
        default: () => {};
    };
    httpRequest: FunctionConstructor;
    limit: NumberConstructor;
    listType: {
        type: StringConstructor;
        default: () => string;
        validator: (value: string) => boolean;
    };
    mergeService: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: () => string;
    };
    openDownloadFile: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    showFileList: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    size: StringConstructor;
    successStatistics: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    thumbOption: {
        type: ObjectConstructor;
        default: () => {
            popperClass: string;
            width: number;
            showDownload: boolean;
            downloadFile: FunctionConstructor;
            showDel: boolean;
            icon: string;
            showTooltip: boolean;
        };
    };
    type: {
        type: StringConstructor;
        default: () => string;
    };
    uploadIcon: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    withCredentials: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    isFolderTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    listOption: {
        type: ObjectConstructor;
        default: () => {
            showUpdate: boolean;
            showDel: boolean;
        };
    };
    maxNameLength: {
        type: NumberConstructor;
        default: number;
    };
    scale: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    showName: {
        type: BooleanConstructor;
        default: boolean;
    };
    sourceType: {
        type: StringConstructor;
        default: string;
        validator(val: any): any;
    };
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    hwh5: ObjectConstructor;
    mode: {
        type: StringConstructor;
        default: string;
        validator(val: any): boolean;
    };
    cacheToken: {
        type: BooleanConstructor;
        default: boolean;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    compact: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeAddFile: FunctionConstructor;
    encryptConfig: {
        type: ObjectConstructor;
        default: () => {
            enabled: boolean;
            encrypt: boolean;
            watermark: string;
        };
    };
    promptTip: {
        type: BooleanConstructor;
        default: boolean;
    };
    isHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    pasteUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    reUploadable: BooleanConstructor;
    reUploadTip: FunctionConstructor;
    imageBgColor: StringConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            FILE_UPLOAD_INNER_TEMPLATE: string;
            UPLOAD_INNER: string;
            UPLOAD_INNER_TEMPLATE: string;
            UPLOAD_LIST_INNER: string;
            UPLOAD_LIST_INNER_TEMPLATE: string;
            ONLY_SUPPORT: string;
            COMMA: string;
            FILE_NOT_LESS_THAN: string;
            FILE_NOT_MORE_THAN: string;
            FILE_SIZE_RANGE: string;
            NUMBER_LIMIT: string;
            FILE_STATUS: {
                READY: string;
                SUCESS: string;
                UPLOADING: string;
                FAIL: string;
                DOWNLOADING: string;
            };
            LIST_TYPE: {
                TEXT: string;
                PICTURE_CARD: string;
                PICTURE: string;
                THUMB: string;
                PICTURE_SINGLE: string;
                DRAG_SINGLE: string;
                SAAS: string;
            };
            EDM: {
                CHUNKINIT: string;
                FILESIZE: string;
                CHUNKS: string;
                FILENAME: string;
                ISCHECKCODE: string;
                CHECKCODE: string;
                MULTIPART: string;
                DOCID: string;
                CHUNK: string;
                SINGLEUPLOAD: string;
                LOWERNAME: string;
                FOLDERKEY: string;
                FORMAT: string;
                WATER: string;
                SOURCE: string;
                URLCONTS: string;
                EDMTOKEN: string;
                TRACEID: string;
                TEXT: string;
                JSLIB: string;
                I18NKEY: string;
                LARGEFILEKEY: string;
                EXCEED: string;
                SIZE: string;
                SIZE_17G: number;
                SIZE_2G: number;
                SIZE_64M: number;
                SIZE_32M: number;
                SIZE_20M: number;
                SIZE_16M: number;
                SIZE_8M: number;
                SIZE_4M: number;
                SIZE_2M: number;
                SIZE_0M: number;
                FILEEMPTY: string;
                KIASCANTIP: string;
                FILENAMEEXCEEDS: string;
                THEFILENAME: string;
                CALCHASH: string;
                KIASTATUS: number;
                NumberExceed: string;
                notSupport: string;
                NOT_SUPPORT_NO_SUFFIX: string;
                STATUS_SPECIAL_CHARACTERS: number;
                NOT_SUPPORT_SPECIAL_CHARACTERS: string;
                DOC_PREVIEW: string;
            };
            IMAGE_TYPE: string;
            FILE_TYPE: {
                EXCEL: string;
                FILE: string;
                PDF: string;
                PICTURE: string;
                PPT: string;
                TEXT: string;
                WORD: string;
                ZIP: string;
                VIDEO: string;
                AUDIO: string;
            };
            SOURCE_TYPE: {
                SOURCE_VIDEO: string;
                SOURCE_AUDIO: string;
                SOURCE_PICTURE: string;
            };
            MODE: {
                BUBBLE: string;
            };
        };
    };
    accept: StringConstructor;
    action: StringConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    beforeRemove: FunctionConstructor;
    beforeUpload: FunctionConstructor;
    data: ObjectConstructor;
    disabled: BooleanConstructor;
    display: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    drag: BooleanConstructor;
    dragger: BooleanConstructor;
    edm: {
        type: ObjectConstructor;
        default: () => {};
    };
    fileIconList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fileList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fileSize: {
        type: (ArrayConstructor | NumberConstructor)[];
        validator(value: any): boolean;
    };
    fileTitle: {
        type: StringConstructor;
        default: () => string;
    };
    headerShow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    headers: {
        type: ObjectConstructor;
        default: () => {};
    };
    httpRequest: FunctionConstructor;
    limit: NumberConstructor;
    listType: {
        type: StringConstructor;
        default: () => string;
        validator: (value: string) => boolean;
    };
    mergeService: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: () => string;
    };
    openDownloadFile: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    showFileList: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    size: StringConstructor;
    successStatistics: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    thumbOption: {
        type: ObjectConstructor;
        default: () => {
            popperClass: string;
            width: number;
            showDownload: boolean;
            downloadFile: FunctionConstructor;
            showDel: boolean;
            icon: string;
            showTooltip: boolean;
        };
    };
    type: {
        type: StringConstructor;
        default: () => string;
    };
    uploadIcon: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    withCredentials: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    isFolderTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    listOption: {
        type: ObjectConstructor;
        default: () => {
            showUpdate: boolean;
            showDel: boolean;
        };
    };
    maxNameLength: {
        type: NumberConstructor;
        default: number;
    };
    scale: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    showName: {
        type: BooleanConstructor;
        default: boolean;
    };
    sourceType: {
        type: StringConstructor;
        default: string;
        validator(val: any): any;
    };
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    hwh5: ObjectConstructor;
    mode: {
        type: StringConstructor;
        default: string;
        validator(val: any): boolean;
    };
    cacheToken: {
        type: BooleanConstructor;
        default: boolean;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    compact: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeAddFile: FunctionConstructor;
    encryptConfig: {
        type: ObjectConstructor;
        default: () => {
            enabled: boolean;
            encrypt: boolean;
            watermark: string;
        };
    };
    promptTip: {
        type: BooleanConstructor;
        default: boolean;
    };
    isHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    pasteUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    reUploadable: BooleanConstructor;
    reUploadTip: FunctionConstructor;
    imageBgColor: StringConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            FILE_UPLOAD_INNER_TEMPLATE: string;
            UPLOAD_INNER: string;
            UPLOAD_INNER_TEMPLATE: string;
            UPLOAD_LIST_INNER: string;
            UPLOAD_LIST_INNER_TEMPLATE: string;
            ONLY_SUPPORT: string;
            COMMA: string;
            FILE_NOT_LESS_THAN: string;
            FILE_NOT_MORE_THAN: string;
            FILE_SIZE_RANGE: string;
            NUMBER_LIMIT: string;
            FILE_STATUS: {
                READY: string;
                SUCESS: string;
                UPLOADING: string;
                FAIL: string;
                DOWNLOADING: string;
            };
            LIST_TYPE: {
                TEXT: string;
                PICTURE_CARD: string;
                PICTURE: string;
                THUMB: string;
                PICTURE_SINGLE: string;
                DRAG_SINGLE: string;
                SAAS: string;
            };
            EDM: {
                CHUNKINIT: string;
                FILESIZE: string;
                CHUNKS: string;
                FILENAME: string;
                ISCHECKCODE: string;
                CHECKCODE: string;
                MULTIPART: string;
                DOCID: string;
                CHUNK: string;
                SINGLEUPLOAD: string;
                LOWERNAME: string;
                FOLDERKEY: string;
                FORMAT: string;
                WATER: string;
                SOURCE: string;
                URLCONTS: string;
                EDMTOKEN: string;
                TRACEID: string;
                TEXT: string;
                JSLIB: string;
                I18NKEY: string;
                LARGEFILEKEY: string;
                EXCEED: string;
                SIZE: string;
                SIZE_17G: number;
                SIZE_2G: number;
                SIZE_64M: number;
                SIZE_32M: number;
                SIZE_20M: number;
                SIZE_16M: number;
                SIZE_8M: number;
                SIZE_4M: number;
                SIZE_2M: number;
                SIZE_0M: number;
                FILEEMPTY: string;
                KIASCANTIP: string;
                FILENAMEEXCEEDS: string;
                THEFILENAME: string;
                CALCHASH: string;
                KIASTATUS: number;
                NumberExceed: string;
                notSupport: string;
                NOT_SUPPORT_NO_SUFFIX: string;
                STATUS_SPECIAL_CHARACTERS: number;
                NOT_SUPPORT_SPECIAL_CHARACTERS: string;
                DOC_PREVIEW: string;
            };
            IMAGE_TYPE: string;
            FILE_TYPE: {
                EXCEL: string;
                FILE: string;
                PDF: string;
                PICTURE: string;
                PPT: string;
                TEXT: string;
                WORD: string;
                ZIP: string;
                VIDEO: string;
                AUDIO: string;
            };
            SOURCE_TYPE: {
                SOURCE_VIDEO: string;
                SOURCE_AUDIO: string;
                SOURCE_PICTURE: string;
            };
            MODE: {
                BUBBLE: string;
            };
        };
    };
    accept: StringConstructor;
    action: StringConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    beforeRemove: FunctionConstructor;
    beforeUpload: FunctionConstructor;
    data: ObjectConstructor;
    disabled: BooleanConstructor;
    display: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    drag: BooleanConstructor;
    dragger: BooleanConstructor;
    edm: {
        type: ObjectConstructor;
        default: () => {};
    };
    fileIconList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fileList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    fileSize: {
        type: (ArrayConstructor | NumberConstructor)[];
        validator(value: any): boolean;
    };
    fileTitle: {
        type: StringConstructor;
        default: () => string;
    };
    headerShow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    headers: {
        type: ObjectConstructor;
        default: () => {};
    };
    httpRequest: FunctionConstructor;
    limit: NumberConstructor;
    listType: {
        type: StringConstructor;
        default: () => string;
        validator: (value: string) => boolean;
    };
    mergeService: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: () => string;
    };
    openDownloadFile: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    showFileList: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    size: StringConstructor;
    successStatistics: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    thumbOption: {
        type: ObjectConstructor;
        default: () => {
            popperClass: string;
            width: number;
            showDownload: boolean;
            downloadFile: FunctionConstructor;
            showDel: boolean;
            icon: string;
            showTooltip: boolean;
        };
    };
    type: {
        type: StringConstructor;
        default: () => string;
    };
    uploadIcon: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    withCredentials: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    isFolderTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    listOption: {
        type: ObjectConstructor;
        default: () => {
            showUpdate: boolean;
            showDel: boolean;
        };
    };
    maxNameLength: {
        type: NumberConstructor;
        default: number;
    };
    scale: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    showName: {
        type: BooleanConstructor;
        default: boolean;
    };
    sourceType: {
        type: StringConstructor;
        default: string;
        validator(val: any): any;
    };
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    hwh5: ObjectConstructor;
    mode: {
        type: StringConstructor;
        default: string;
        validator(val: any): boolean;
    };
    cacheToken: {
        type: BooleanConstructor;
        default: boolean;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    compact: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeAddFile: FunctionConstructor;
    encryptConfig: {
        type: ObjectConstructor;
        default: () => {
            enabled: boolean;
            encrypt: boolean;
            watermark: string;
        };
    };
    promptTip: {
        type: BooleanConstructor;
        default: boolean;
    };
    isHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    pasteUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    reUploadable: BooleanConstructor;
    reUploadTip: FunctionConstructor;
    imageBgColor: StringConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    name: string;
    disabled: boolean;
    type: string;
    title: string;
    mode: string;
    drag: boolean;
    display: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    lockScroll: boolean;
    showTitle: boolean;
    displayOnly: boolean;
    multiple: boolean;
    isHidden: boolean;
    scale: string | number;
    listType: string;
    withCredentials: boolean;
    sourceType: string;
    openDownloadFile: boolean;
    isFolderTitle: boolean;
    listOption: Record<string, any>;
    maxNameLength: number;
    showName: boolean;
    compact: boolean;
    autoUpload: boolean;
    pasteUpload: boolean;
    fileList: unknown[];
    headers: Record<string, any>;
    promptTip: boolean;
    showFileList: boolean;
    encryptConfig: Record<string, any>;
    fileIconList: unknown[];
    fileTitle: string;
    headerShow: boolean;
    successStatistics: boolean;
    uploadIcon: boolean;
    edm: Record<string, any>;
    dragger: boolean;
    mergeService: boolean;
    thumbOption: Record<string, any>;
    cacheToken: boolean;
    reUploadable: boolean;
}, {}>;
export default _default;
