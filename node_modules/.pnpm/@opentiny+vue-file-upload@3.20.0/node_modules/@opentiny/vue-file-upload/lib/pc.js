function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { createVNode, resolveComponent, createTextVNode, mergeProps, isVNode } from "vue";
import { renderless, api } from "@opentiny/vue-renderless/file-upload/vue";
import { defineComponent, props, setup as _setup, h, isVue3 } from "@opentiny/vue-common";
import UploadList from "@opentiny/vue-upload-list";
import Upload from "@opentiny/vue-upload";
import Progress from "@opentiny/vue-progress";
import "@opentiny/vue-theme/file-upload/index.css";
import "@opentiny/vue-theme/upload-list/index.css";
import "@opentiny/vue-theme/upload-dragger/index.css";
import "@opentiny/vue-theme/upload/index.css";
import Modal from "@opentiny/vue-modal";
import DialogBox from "@opentiny/vue-dialog-box";
import Popover from "@opentiny/vue-popover";
import Button from "@opentiny/vue-button";
import Input from "@opentiny/vue-input";
import Switch from "@opentiny/vue-switch";
import Tooltip from "@opentiny/vue-tooltip";
import { iconAttachment, iconSuccessful, iconClose, iconDownload, iconFileCloudupload, iconPlus, iconHelpCircle } from "@opentiny/vue-icon";
import CryptoJS from "crypto-js/core.js";
import "crypto-js/sha256.js";
import "crypto-js/lib-typedarrays.js";
import Streamsaver from "streamsaver";
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var TinyIconAttachment = iconAttachment();
var TinyIconSuccessful = iconSuccessful();
var TinyIconClose = iconClose();
var TinyIconDownload = iconDownload();
var TinyIconFileCloudupload = iconFileCloudupload();
var TinyIconPlus = iconPlus();
var TinyIconHelpCircle = iconHelpCircle();
var _sfc_main = /* @__PURE__ */ defineComponent({
  inheritAttrs: false,
  props: [].concat(props, ["edm", "action", "headers", "data", "multiple", "name", "drag", "dragger", "withCredentials", "showFileList", "accept", "type", "beforeUpload", "beforeRemove", "fileList", "autoUpload", "listType", "httpRequest", "disabled", "limit", "openDownloadFile", "mergeService", "fileSize", "thumbOption", "isFolderTitle", "listOption", "maxNameLength", "isHidden", "sourceType", "cacheToken", "pasteUpload", "reUploadable", "reUploadTip", "encryptConfig", "title", "showTitle", "displayOnly", "compact", "promptTip"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      extendOptions: {
        Modal,
        CryptoJS,
        Streamsaver
      }
    });
  },
  components: {
    TinyProgress: Progress,
    UploadList,
    Upload,
    TinyDialogBox: DialogBox,
    Popover,
    TinyButton: Button,
    TinyInput: Input,
    TinySwitch: Switch,
    TinyTooltip: Tooltip
  },
  render: function render() {
    var _this = this;
    var uploadList;
    var _this$state$listeners = this.state.listeners, _this$state$listeners2 = _this$state$listeners.exceed, exceed = _this$state$listeners2 === void 0 ? function() {
    } : _this$state$listeners2, _this$state$listeners3 = _this$state$listeners.preview, preview = _this$state$listeners3 === void 0 ? void 0 : _this$state$listeners3, downloadAll = _this$state$listeners["download-all"], handleDownloadFile = _this$state$listeners["download-file"], reUpload = _this$state$listeners["re-upload"];
    var _this$state = this.state, uploadFiles = _this$state.uploadFiles, isEdm = _this$state.isEdm, dialogConfigObj = _this$state.dialogConfigObj, isSuccess = _this$state.isSuccess, uploadDisabled = _this$state.uploadDisabled, url = _this$state.url, accept = _this$state.accept, httpRequest = _this$state.httpRequest, edmToken = _this$state.edmToken, iframeUrl = _this$state.iframeUrl;
    var downloadFile = this.downloadFile, handleRemove = this.handleRemove, handleReUpload = this.handleReUpload, handleReUploadTotal = this.handleReUploadTotal, updateFile = this.updateFile, slots = this.slots, _this$edm = this.edm, edm = _this$edm === void 0 ? {} : _this$edm, t = this.t, $attrs = this.$attrs, a = this.a, encryptConfig = this.encryptConfig, encryptDialogConfirm = this.encryptDialogConfirm, handleTriggerClick = this.handleTriggerClick, handleClickFileList = this.handleClickFileList, handleFileClick = this.handleFileClick, displayOnly = this.displayOnly, listType = this.listType, compact = this.compact, promptTip = this.promptTip;
    var isPictureCard = listType === "picture-card";
    var isSaasType = listType === "saas";
    var _this$thumbOption = this.thumbOption, showDel = _this$thumbOption.showDel, showDownload = _this$thumbOption.showDownload, showTooltip = _this$thumbOption.showTooltip, showUpdate = _this$thumbOption.showUpdate, icon = _this$thumbOption.icon;
    var execDownload = this.thumbOption.downloadFile || downloadFile;
    var isFolder = edm.upload ? edm.upload.isFolder : false;
    var notice = this.slots.notice && this.slots.notice();
    var title = this.title || t("ui.fileUpload.attachment");
    var getDefaultTitle = function getDefaultTitle2(title2, showTitle) {
      return createVNode("div", {
        "class": "tiny-upload-title"
      }, [createVNode("span", {
        "class": [showTitle ? "title-show" : "title-hide", displayOnly ? "display-only" : ""]
      }, [title2])]);
    };
    var popperConfig = {
      bubbling: true
    };
    var getTriggerContent = function getTriggerContent2(t2, disabled) {
      return createVNode("div", {
        "class": "trigger-btn"
      }, [createVNode(resolveComponent("tiny-button"), {
        "disabled": disabled,
        "onClick": handleTriggerClick
      }, {
        default: function _default() {
          return [createVNode(TinyIconPlus, null, null), createVNode("span", null, [t2("ui.fileUpload.uploadFile")])];
        }
      })]);
    };
    var getOperateContent = function getOperateContent2(downloadAll2, uploadFiles2, t2) {
      return downloadAll2 && isSaasType ? createVNode("div", {
        "class": "operate-content"
      }, [createVNode(resolveComponent("tiny-button"), {
        "onClick": function onClick() {
          return downloadAll2(uploadFiles2);
        }
      }, {
        default: function _default() {
          return [createVNode("div", {
            "class": "button-wrap"
          }, [createVNode(TinyIconDownload, null, null), createVNode("span", null, [t2("ui.fileUpload.downloadAll")])])];
        }
      })]) : null;
    };
    var getDefaultTip = function getDefaultTip2(tipMsg2) {
      if (promptTip) {
        return slots.tip && slots.tip() || tipMsg2 && promptTip && createVNode(resolveComponent("tiny-tooltip"), {
          "effect": "light",
          "content": slots.tip && slots.tip() || tipMsg2,
          "placement": "right",
          "popper-options": popperConfig
        }, {
          default: function _default() {
            return [createVNode("div", {
              "class": "prompt-tip"
            }, [createVNode(TinyIconHelpCircle, null, null)])];
          }
        });
      } else {
        return createVNode("div", {
          "class": "tip-wrap"
        }, [createVNode("div", {
          "title": tipMsg2,
          "class": "tip-content"
        }, [slots.tip && slots.tip() || tipMsg2])]);
      }
    };
    var getThumIcon = function getThumIcon2(file) {
      return [showDownload && createVNode("span", {
        "class": "thumb-icon",
        "title": t("ui.fileUpload.downloadFile"),
        "onClick": function onClick() {
          return execDownload(file);
        }
      }, [createVNode(TinyIconDownload, {
        "class": "download-icon"
      }, null)]), isEdm && !isFolder && showUpdate && createVNode("span", {
        "class": "thumb-icon",
        "title": t("ui.fileUpload.updateFile"),
        "onClick": function onClick() {
          return updateFile(file);
        }
      }, [createVNode(TinyIconFileCloudupload, {
        "class": "refres-icon"
      }, null)]), showDel && createVNode("span", {
        "class": "thumb-icon",
        "title": t("ui.fileUpload.deleteFile"),
        "onClick": function onClick() {
          return handleRemove(file);
        }
      }, [createVNode(TinyIconClose, {
        "class": "close-icon"
      }, null)])];
    };
    var getThumbList = function getThumbList2(file) {
      var result = slots.file && slots.file({
        file
      });
      if (result) {
        return result;
      } else {
        return [createVNode(TinyIconSuccessful, {
          "class": "thumb-success-icon"
        }, null), createVNode("span", {
          "class": ["thumb-item-name", !showDel ? "hide-close-icon" : "", !showDownload ? "hide-download-icon" : ""]
        }, [file.name]), getThumIcon(file)];
      }
    };
    var getFileSize = function getFileSize2() {
      return createVNode("span", null, [uploadFiles.length]);
    };
    if (this.showFileList) {
      if (listType === "thumb") {
        uploadList = uploadFiles.length === 0 ? "" : h("div", {
          class: "tiny-upload--thumb__wrap"
        }, [h("Popover", {
          props: {
            trigger: "hover",
            popperClass: this.thumbOption.popperClass,
            width: this.thumbOption.width
          },
          scopedSlots: {
            reference: function reference() {
              return h("div", {
                class: "tiny-upload--thumb__head"
              }, [h(icon || TinyIconAttachment, {
                class: "thumb-icon"
              }), getFileSize()]);
            },
            default: function _default() {
              return h("div", {
                class: "tiny-upload--thumb__body"
              }, [h("div", {
                class: "tiny-upload--thumb__list"
              }, [uploadFiles.map(function(item) {
                return h("Popover", {
                  props: {
                    content: item.name,
                    trigger: showTooltip ? "hover" : "manual",
                    placement: "top"
                  },
                  scopedSlots: {
                    reference: function reference() {
                      return h("div", {
                        class: "thumb-item",
                        on: {
                          click: function click() {
                            handleFileClick(item);
                          }
                        }
                      }, [getThumbList(item)]);
                    }
                  }
                });
              })])]);
            }
          }
        })]);
      } else {
        var uploadListDate = {
          props: {
            disabled: uploadDisabled,
            reUploadable: this.reUploadable,
            reUploadTip: this.reUploadTip,
            isFolder,
            isEdm,
            edm,
            displayOnly,
            listType,
            files: uploadFiles,
            isFolderTitle: this.isFolderTitle,
            listOption: this.listOption,
            maxNameLength: this.maxNameLength,
            handlePreview: preview,
            handleDownloadFile,
            handleReUpload: reUpload,
            openDownloadFile: this.openDownloadFile,
            compact
          },
          scopedSlots: {
            default: function _default(props2) {
              if (slots.file) {
                return slots.file({
                  file: props2.file
                });
              }
            },
            tip: function tip() {
              return _tip;
            },
            "assist-content": function assistContent(props2) {
              if (slots["assist-content"]) {
                return slots["assist-content"]({
                  file: props2.file
                });
              }
            },
            operate: function operate(props2) {
              if (slots.operate) {
                return slots.operate({
                  file: props2.file
                });
              }
            }
          },
          on: {
            remove: handleRemove,
            reUpload: handleReUpload,
            reUploadTotal: handleReUploadTotal,
            update: updateFile,
            start: this.handleStart,
            "click-file-list": handleClickFileList,
            "update:visible": function updateVisible(visible) {
              return _this.state.visible = visible;
            }
          },
          ref: "upload-list-inner"
        };
        uploadList = h(UploadList, uploadListDate);
      }
    }
    var uploadData = {
      props: {
        type: this.type,
        drag: this.drag,
        action: url,
        multiple: this.multiple,
        withCredentials: this.withCredentials,
        headers: this.headers,
        name: this.name,
        data: this.data,
        edm: this.edm,
        accept: isEdm ? accept : this.accept,
        fileList: uploadFiles,
        autoUpload: this.autoUpload,
        listType,
        disabled: uploadDisabled,
        displayOnly,
        limit: this.limit,
        onExceed: exceed,
        onStart: this.handleStart,
        onProgress: this.handleProgress,
        onSuccess: this.handleSuccess,
        onError: this.handleError,
        onPreview: preview,
        httpRequest,
        isFolder,
        edmToken,
        pasteUpload: this.pasteUpload,
        isHidden: this.isHidden
      },
      ref: "upload-inner"
    };
    var tipMsg = this.getTipMessage({
      accept: isEdm ? accept : this.accept,
      fileSize: this.fileSize,
      limit: this.limit
    });
    var _tip = !displayOnly && isSaasType ? getDefaultTip(tipMsg) : null;
    _tip && _tip.data && (_tip.data.slot = "tip");
    var _operate = !displayOnly ? getOperateContent(downloadAll, uploadFiles, t) : null;
    _operate && _operate.data && (_operate.data.slot = "operate");
    var defaultSlot = slots.default && slots.default();
    var trigger = slots.trigger ? slots.trigger() : defaultSlot;
    var getChildren = function getChildren2() {
      var triggerDom = !trigger && isSaasType && !displayOnly ? getTriggerContent(t, _this.disabled) : trigger;
      var childNodes = isVue3 ? {
        default: function _default() {
          return triggerDom;
        },
        tip: function tip() {
          return _tip;
        },
        operate: function operate() {
          return _operate;
        }
      } : [triggerDom, _tip, _operate];
      return childNodes;
    };
    var uploadComponent = h(Upload, uploadData, getChildren());
    var previewComponent = null;
    var encryptDialogComponent = null;
    if (isEdm && isSuccess) {
      uploadData.props.accept = accept;
      uploadData.props.edmToken = edmToken;
    }
    if (this.edm.preview) {
      previewComponent = h("tiny-dialog-box", _extends({
        minHeight: "600px",
        width: "60%"
      }, dialogConfigObj, {
        scopedSlots: {
          default: function _default() {
            return createVNode("iframe", {
              "id": "_iframe",
              "style": "display: block;width: 100%;height: 500px;display: inline-block;",
              "allowfullscreen": true,
              "allowtransparency": "true",
              "frameborder": "0",
              "border": "0",
              "marginwidth": "0",
              "marginheight": "0",
              "scrolling": "no",
              "src": iframeUrl
            }, null);
          }
        }
      }));
    }
    if (encryptConfig.enabled) {
      encryptDialogComponent = h("tiny-dialog-box", {
        class: "encrypt-config-dialog",
        style: "",
        props: {
          lockScroll: true,
          visible: this.state.encryptDialogConfig.show,
          dragable: true,
          title: this.t("ui.fileUpload.encryptDialogTitle"),
          width: "380px",
          height: "auto"
        },
        on: {
          "update:visible": function updateVisible(value) {
            return _this.state.encryptDialogConfig.show = value;
          }
        },
        scopedSlots: {
          default: function _default() {
            return createVNode("div", {
              "class": "encrypt-config-dialog-body"
            }, [createVNode("div", {
              "class": "encrypt-item"
            }, [_this.t("ui.fileUpload.addWatermark")]), createVNode("div", null, [createVNode(resolveComponent("tiny-input"), {
              "modelValue": _this.encryptConfig.watermark,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return _this.encryptConfig.watermark = $event;
              }
            }, null)]), createVNode("p", null, [createTextVNode(" ")]), createVNode("div", {
              "class": "encrypt-item"
            }, [_this.t("ui.fileUpload.encrypted")]), createVNode("div", null, [createVNode(resolveComponent("tiny-switch"), {
              "modelValue": _this.encryptConfig.encrypt,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return _this.encryptConfig.encrypt = $event;
              }
            }, null)])]);
          },
          footer: function footer() {
            var _slot, _slot2;
            return [createVNode(Button, {
              "onClick": function onClick() {
                return _this.state.encryptDialogConfig.show = false;
              }
            }, _isSlot(_slot = _this.t("ui.base.cancel")) ? _slot : {
              default: function _default() {
                return [_slot];
              }
            }), [createVNode(Button, {
              "type": "primary",
              "onClick": function onClick() {
                return encryptDialogConfirm();
              }
            }, _isSlot(_slot2 = _this.t("ui.popupload.uploadButtonText")) ? _slot2 : {
              default: function _default() {
                return [_slot2];
              }
            })]];
          }
        }
      });
    }
    var attrs = a($attrs, ["^on[A-Z]"]);
    return createVNode("div", mergeProps({
      "class": "tiny-file-upload"
    }, attrs), [isSaasType ? getDefaultTitle(title, this.showTitle) : "", notice, isPictureCard ? uploadList : "", slots.trigger ? [uploadComponent, defaultSlot] : uploadComponent, !isSaasType && slots.tip && slots.tip(), isPictureCard ? "" : uploadList, previewComponent, encryptDialogComponent]);
  }
});
export {
  _sfc_main as default
};
