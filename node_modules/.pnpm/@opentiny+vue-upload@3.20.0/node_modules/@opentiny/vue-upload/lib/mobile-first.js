import { createVNode, resolveComponent, isVNode } from "vue";
import { defineComponent, $prefix, props, setup as _setup, h } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/upload/vue";
import UploadDragger from "@opentiny/vue-upload-dragger";
import Modal from "@opentiny/vue-modal";
import Tooltip from "@opentiny/vue-tooltip";
import { iconHelpCircle } from "@opentiny/vue-icon";
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _sfc_main = /* @__PURE__ */ defineComponent({
  inheritAttrs: false,
  name: $prefix + "Upload",
  components: {
    TinyTooltip: Tooltip,
    TinyIconHelpCircle: iconHelpCircle()
  },
  props: [].concat(props, ["accept", "action", "autoUpload", "beforeUpload", "data", "disabled", "drag", "edmToken", "fileList", "headers", "httpRequest", "isFolder", "limit", "listType", "multiple", "name", "onError", "onExceed", "onPreview", "onProgress", "onRemove", "onStart", "onSuccess", "type", "withCredentials", "scale", "sourceType", "displayOnly", "customClass", "handleTriggerClick", "mode", "showTitle", "isHwh5", "tipMessage", "promptTip", "showFileList"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      h,
      extendOptions: {
        Modal
      }
    });
  },
  render: function render() {
    var _slot;
    var accept = this.accept, disabled = this.disabled, handleChange = this.handleChange, handleClick = this.handleClick, handleKeydown = this.handleKeydown, isFolder = this.isFolder, multiple = this.multiple, name = this.name, uploadFiles = this.uploadFiles, listType = this.listType, displayOnly = this.displayOnly, customClass = this.customClass, sourceType = this.sourceType, mode = this.mode, showTitle = this.showTitle, state = this.state, tipMessage = this.tipMessage, promptTip = this.promptTip, showFileList = this.showFileList;
    var defaultSlot = this.slots.default && this.slots.default();
    var tipSlot = this.slots.tip && this.slots.tip();
    var operateSlot = this.slots.operate && this.slots.operate();
    var isBubbleMode = mode === "bubble";
    var isShowTitle = showTitle;
    var popperConfig = {
      bubbling: true
    };
    var uploadTrigger = function uploadTrigger2() {
      return createVNode("div", {
        "data-tag": "tiny-upload-drag-single",
        "class": "h-full",
        "onClick": function onClick($event) {
          return handleClick($event, sourceType);
        },
        "onKeydown": handleKeydown,
        "tabindex": "0"
      }, [listType === "drag-single" ? createVNode(UploadDragger, {
        "customClass": customClass,
        "disabled": disabled,
        "onFile": uploadFiles
      }, _isSlot(defaultSlot) ? defaultSlot : {
        default: function _default() {
          return [defaultSlot];
        }
      }) : defaultSlot]);
    };
    return createVNode("div", {
      "data-tag": "tiny-upload",
      "class": [!displayOnly && listType === "text" ? "flex justify-between mt-4 mb-2 " + (isBubbleMode ? "sm:my-0" : !isShowTitle ? "sm:mt-0" : "sm:my-3") : "h-full", showFileList ? "sm:mb-3" : "sm:mb-0"]
    }, [state.currentBreakpoint === "default" && tipSlot && createVNode("div", {
      "class": "flex items-center sm:hidden inline-block text-sm"
    }, [tipSlot]), state.currentBreakpoint === "default" && createVNode("div", {
      "data-tag": "tiny-upload-drag-single",
      "class": "h-full",
      "onClick": function onClick($event) {
        return handleClick($event, sourceType);
      },
      "onKeydown": handleKeydown,
      "tabindex": "0"
    }, [listType === "drag-single" ? createVNode(UploadDragger, {
      "customClass": customClass,
      "disabled": disabled,
      "onFile": uploadFiles
    }, _isSlot(defaultSlot) ? defaultSlot : {
      default: function _default() {
        return [defaultSlot];
      }
    }) : defaultSlot]), state.currentBreakpoint !== "default" && (promptTip && tipMessage ? createVNode("div", {
      "class": "hidden sm:inline-flex sm:items-center"
    }, [uploadTrigger(), createVNode(resolveComponent("tiny-tooltip"), {
      "effect": "light",
      "content": tipMessage,
      "placement": "right",
      "popper-options": popperConfig
    }, {
      default: function _default() {
        return [createVNode(resolveComponent("tiny-icon-help-circle"), {
          "custom-class": "ml-2 cursor-pointer fill-color-icon-tertiary"
        }, null)];
      }
    })]) : listType === "text" ? createVNode("div", {
      "class": "hidden sm:inline-flex sm:items-center"
    }, [uploadTrigger(), createVNode("div", {
      "title": tipMessage,
      "class": "hidden sm:block text-xs leading-4 overflow-hidden text-ellipsis whitespace-nowrap text-color-text-placeholder ml-2 cursor-pointer"
    }, [tipMessage])]) : createVNode(resolveComponent("tiny-tooltip"), {
      "effect": "light",
      "content": tipMessage,
      "placement": "top",
      "popper-options": popperConfig
    }, _isSlot(_slot = uploadTrigger()) ? _slot : {
      default: function _default() {
        return [_slot];
      }
    })), operateSlot, createVNode("input", {
      "class": "hidden",
      "type": "file",
      "webkitdirectory": isFolder,
      "ref": "input",
      "name": name,
      "onChange": handleChange,
      "multiple": isFolder ? true : multiple,
      "accept": accept
    }, null)]);
  }
});
export {
  _sfc_main as default
};
