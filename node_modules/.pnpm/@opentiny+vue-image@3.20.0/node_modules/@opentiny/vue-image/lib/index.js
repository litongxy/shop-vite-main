function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/image/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  NONE: "none",
  CONTAIN: "contain",
  COVER: "cover",
  FILL: "fill",
  SCALE_DOWN: "scale-down",
  DEFAULT_POPPER_ZINDEX: Number.POSITIVE_INFINITY
};
var imageProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  fit: String,
  lazy: Boolean,
  previewSrcList: {
    type: Array,
    default: function _default2() {
      return [];
    }
  },
  scrollContainer: {
    type: [String, HTMLElement],
    default: null
  },
  src: String,
  zIndex: {
    type: Number,
    default: $constants.DEFAULT_POPPER_ZINDEX
  },
  showIndex: {
    type: Boolean,
    default: false
  },
  showHover: {
    type: Boolean,
    default: false
  },
  previewVisible: {
    type: Boolean,
    default: false
  },
  round: {
    type: Boolean,
    default: false
  },
  imageSize: {
    type: Number,
    default: 100
  },
  keepStyle: {
    type: Boolean,
    default: false
  },
  appendToBody: {
    type: Boolean,
    default: true
  }
});
var Image = defineComponent({
  name: $prefix + "Image",
  props: imageProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Image.install = function(Vue) {
  Vue.component(Image.name, Image);
};
Image.version = version;
export {
  Image as default
};
