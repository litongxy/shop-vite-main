import { defineComponent, $prefix, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/transfer-panel/vue';
import Checkbox from '@opentiny/vue-checkbox';
import Input from '@opentiny/vue-input';
import Pager from '@opentiny/vue-pager';
import { iconArrowDown, iconArrowUp, iconYes, iconSearch } from '@opentiny/vue-icon';
import { resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, createCommentVNode, createBlock, createSlots, withDirectives, Fragment, renderList, vShow, resolveDynamicComponent, mergeProps, toHandlers, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var transferPanelProps = {
  columns: Array,
  data: {
    type: Array,
    default: function _default() {
      return [];
    }
  },
  defaultChecked: Array,
  filterMethod: Function,
  filterable: Boolean,
  format: Object,
  isToLeft: Boolean,
  optionRender: Function,
  pagerOp: Object,
  placeholder: String,
  props: Object,
  render: Object,
  renderContent: Function,
  showLeft: Boolean,
  showPager: Boolean,
  title: String,
  treeOp: Object,
  value: {
    type: Array,
    default: function _default2() {
      return [];
    }
  }
};
var _sfc_main = defineComponent({
  name: $prefix + "TransferPanel",
  componentName: "TransferPanel",
  inheritAttrs: false,
  components: {
    TinyCheckbox: Checkbox,
    TinyInput: Input,
    TinyPager: Pager,
    IconArrowDown: iconArrowDown(),
    IconArrowUp: iconArrowUp(),
    IconCheckedSur: iconYes(),
    IconCheck: iconYes(),
    IconSearch: iconSearch(),
    OptionContent: {
      props: {
        option: [Object, Array]
      },
      render: function render() {
        return this.option;
      }
    }
  },
  props: transferPanelProps,
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "tiny-transfer-panel__header"
};
var _hoisted_2 = {
  key: 0,
  class: "headSort"
};
var _hoisted_3 = {
  key: 0,
  class: "tiny-transfer-panel__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_arrow_up = resolveComponent("icon-arrow-up");
  var _component_icon_arrow_down = resolveComponent("icon-arrow-down");
  var _component_tiny_checkbox = resolveComponent("tiny-checkbox");
  var _component_icon_search = resolveComponent("icon-search");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_option_content = resolveComponent("option-content");
  var _component_tiny_pager = resolveComponent("tiny-pager");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-transfer-panel", [_ctx.state.renderType === "TinyTable" ? "transferGrid" : ""]])
    },
    [createElementVNode("p", _hoisted_1, [createVNode(_component_tiny_checkbox, {
      modelValue: _ctx.state.allChecked,
      "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
        return _ctx.state.allChecked = $event;
      }),
      onChange: _ctx.handleAllCheckedChange,
      indeterminate: _ctx.state.isIndeterminate
    }, {
      default: withCtx(function() {
        return [createTextVNode(
          toDisplayString(_ctx.title) + " ",
          1
          /* TEXT */
        ), _ctx.render && _ctx.state.renderType !== "TinyTable" && _ctx.data.flag === "sort" ? (openBlock(), createElementBlock("div", _hoisted_2, [createElementVNode("div", {
          class: "sort-btn disabled up",
          onClick: _cache[0] || (_cache[0] = function($event) {
            return _ctx.setPosition("up", $event);
          })
        }, [createVNode(_component_icon_arrow_up)]), createElementVNode("div", {
          class: "sort-btn disabled down",
          onClick: _cache[1] || (_cache[1] = function($event) {
            return _ctx.setPosition("down", $event);
          })
        }, [createVNode(_component_icon_arrow_down)])])) : createCommentVNode("v-if", true), createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.state.checkedSummary),
          1
          /* TEXT */
        )];
      }),
      _: 1
      /* STABLE */
    }, 8, ["modelValue", "onChange", "indeterminate"])]), createElementVNode(
      "div",
      {
        class: normalizeClass(["tiny-transfer-panel__body", _ctx.state.hasFooter ? "is-with-footer" : ""]),
        ref: "reference"
      },
      [_ctx.filterable ? (openBlock(), createBlock(_component_tiny_input, {
        key: 0,
        class: "tiny-transfer-panel__filter",
        modelValue: _ctx.state.query,
        "onUpdate:modelValue": _cache[3] || (_cache[3] = function($event) {
          return _ctx.state.query = $event;
        }),
        size: "small",
        placeholder: _ctx.placeholder,
        clearable: "",
        inputBoxType: _ctx.state.inputBoxType,
        onClear: _ctx.clearQuery,
        onMouseenter: _cache[4] || (_cache[4] = function($event) {
          return _ctx.state.inputHover = true;
        }),
        onMouseleave: _cache[5] || (_cache[5] = function($event) {
          return _ctx.state.inputHover = false;
        })
      }, createSlots({
        _: 2
        /* DYNAMIC */
      }, [_ctx.state.showInputSearch ? {
        name: "prefix",
        fn: withCtx(function() {
          return [createVNode(_component_icon_search)];
        }),
        key: "0"
      } : void 0]), 1032, ["modelValue", "placeholder", "inputBoxType", "onClear"])) : createCommentVNode("v-if", true), withDirectives(createElementVNode(
        "div",
        {
          role: "group",
          "aria-label": "checkbox-group",
          class: normalizeClass(["tiny-checkbox-group tiny-transfer-panel__list", {
            "is-filterable": _ctx.filterable
          }])
        },
        [(openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(_ctx.state.filteredData, function(item) {
            return openBlock(), createBlock(_component_tiny_checkbox, {
              key: item[_ctx.state.keyProp],
              class: "tiny-transfer-panel__item",
              disabled: item[_ctx.state.disabledProp],
              checked: _ctx.state.checked.length > 0 && _ctx.state.checked.indexOf(item[_ctx.state.keyProp]) > -1,
              onChange: function onChange($event) {
                return _ctx.checkedEvent(item[_ctx.state.keyProp], item[_ctx.state.disabledProp]);
              }
            }, {
              default: withCtx(function() {
                return [createVNode(_component_option_content, {
                  option: _ctx.optionRender(item)
                }, null, 8, ["option"])];
              }),
              _: 2
              /* DYNAMIC */
            }, 1032, ["disabled", "checked", "onChange"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))],
        2
        /* CLASS */
      ), [[vShow, !_ctx.render]]), _ctx.render && _ctx.render.plugin ? (openBlock(), createBlock(
        resolveDynamicComponent(_ctx.toRaw(_ctx.render.plugin)),
        mergeProps({
          key: 1,
          ref: "plugin"
        }, _ctx.state.render, toHandlers(_ctx.state.render.on)),
        null,
        16
        /* FULL_PROPS */
      )) : createCommentVNode("v-if", true), withDirectives(createVNode(_component_tiny_pager, {
        onSizeChange: _ctx.sizesChange,
        ref: "pager",
        total: _ctx.state.pagerTotal.length,
        "current-page": _ctx.state.currentPage,
        "onUpdate:currentPage": _cache[6] || (_cache[6] = function($event) {
          return _ctx.state.currentPage = $event;
        }),
        "page-size": _ctx.pagerOp.pageVO.pageSize,
        layout: _ctx.pagerOp.pageVO.layout,
        "page-sizes": _ctx.pagerOp.pageVO.pageSizes,
        mode: _ctx.pagerOp.mode,
        "pager-count": _ctx.pagerOp.pagerCount,
        onCurrentChange: _ctx.handlePageChange
      }, null, 8, ["onSizeChange", "total", "current-page", "page-size", "layout", "page-sizes", "mode", "pager-count", "onCurrentChange"]), [[vShow, _ctx.showPager && _ctx.state.renderType === "TinyTable"]]), withDirectives(createElementVNode(
        "p",
        {
          class: "tiny-transfer-panel__empty"
        },
        toDisplayString(_ctx.t("ui.transfer.noMatch")),
        513
        /* TEXT, NEED_PATCH */
      ), [[vShow, !_ctx.render && _ctx.state.hasNoMatch]]), withDirectives(createElementVNode(
        "p",
        {
          class: "tiny-transfer-panel__empty"
        },
        toDisplayString(_ctx.t("ui.transfer.noData")),
        513
        /* TEXT, NEED_PATCH */
      ), [[vShow, !_ctx.render && _ctx.data.length === 0 && !_ctx.state.hasNoMatch]])],
      2
      /* CLASS */
    ), _ctx.$parent.slots["left-footer"] || _ctx.$parent.slots["right-footer"] ? (openBlock(), createElementBlock("p", _hoisted_3, [renderSlot(_ctx.$slots, "default")])) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  );
}
var TransferPanel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
TransferPanel.install = function(Vue) {
  Vue.component(TransferPanel.name, TransferPanel);
};
TransferPanel.version = version;

export { TransferPanel as default };
