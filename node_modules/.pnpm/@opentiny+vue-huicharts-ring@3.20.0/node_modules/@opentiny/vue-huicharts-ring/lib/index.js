import Core, { deepCopy, isDefined, getFormatted, itemPoint, itemLabel, itemContent } from '@opentiny/vue-huicharts-core';
import { t } from '@opentiny/vue-locale';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var PIE_RADIUS = 100;
var RING_RADIUS = [90, 100];
var ROSE_RING_RADIUS = [20, 100];
var PIE_OFFSET = "50%";
var getTooltip = function getTooltip2(args) {
  var dataType = args.dataType, digit = args.digit, dimension = args.dimension, innerRows = args.innerRows, limitShowNum = args.limitShowNum, metrics = args.metrics, t2 = args.t;
  var _ref = {}, _ref$localeOther = _ref.localeOther, localeOther = _ref$localeOther === void 0 ? t2("ui.chart.other") : _ref$localeOther, remainArr = _ref.remainArr, _ref$sum = _ref.sum, sum = _ref$sum === void 0 ? 0 : _ref$sum;
  var mapHandler = function mapHandler2(row) {
    sum += row[metrics];
    return {
      name: row[dimension],
      value: row[metrics]
    };
  };
  remainArr = innerRows.map(mapHandler).slice(limitShowNum, innerRows.length);
  var formatter = function formatter2(item) {
    var tplt = [itemPoint(item.color)];
    var percent;
    if (!limitShowNum || item.name !== localeOther) {
      tplt.push(itemLabel(item.name));
      tplt.push(itemContent(getFormatted(item.value, dataType, digit)));
      tplt.push(itemContent("(" + item.percent + "%)"));
    } else {
      tplt.push(localeOther + ":");
      remainArr.forEach(function(_ref2) {
        var name = _ref2.name, value = _ref2.value;
        percent = "(" + getFormatted(value / sum, "percent") + ")";
        tplt.push("<br>" + itemLabel(name));
        tplt.push(itemContent(getFormatted(value, dataType, digit)));
        tplt.push(itemContent(percent));
      });
    }
    return tplt.join("");
  };
  return formatter;
};
var getLabel = function getLabel2(args) {
  var label = args.label, labelLine = args.labelLine, percentShow = args.percentShow, dataType = args.dataType, digit = args.digit;
  var labelObj = {};
  if (label) {
    if (isDefined(label.show)) {
      labelObj.show = label.show;
    }
    if (isDefined(label.formatter)) {
      labelObj.labelHtml = label.formatter;
    }
  }
  if (percentShow) {
    labelObj.labelHtml = function(params) {
      var tplt = [];
      tplt.push(params.name + ":");
      tplt.push(getFormatted(params.value, dataType, digit));
      tplt.push("(" + params.percent + "%)");
      return tplt.join("");
    };
  }
  if (labelLine) {
    if (isDefined(labelLine.show)) {
      labelObj.line = labelLine.show;
    }
    var color;
    if (labelLine && labelLine.lineStyle) {
      color = labelLine.lineStyle.color;
    }
    if (isDefined(color)) {
      labelObj.lineColor = color;
    }
    if (isDefined(labelLine.length)) {
      labelObj.distance = labelLine.length;
    }
  }
  return labelObj;
};
var getPosition = function getPosition2(args) {
  var radius = args.radius, offsetY = args.offsetY, level = args.level;
  var position = {};
  if (isDefined(offsetY)) {
    position.center = [PIE_OFFSET, offsetY];
  }
  if (Array.isArray(radius)) {
    position.radius = radius;
  } else if (!level || level.length === 0) {
    position.radius = [0, radius];
  }
  return position;
};
var getInnerData = function getInnerData2(args) {
  var dimension = args.dimension, metrics = args.metrics, innerRows = args.innerRows;
  return innerRows.map(function(row) {
    return {
      name: row[dimension],
      value: row[metrics]
    };
  });
};
var getDataOrSeries = function getDataOrSeries2(args) {
  var innerData = args.innerData, isRing = args.isRing, radius = args.radius, level = args.level, limitShowNum = args.limitShowNum, t2 = args.t;
  var series;
  var getLimitData = function getLimitData2(data2) {
    var tempData = data2;
    if (limitShowNum && limitShowNum < tempData.length) {
      var remainArr = tempData.slice(limitShowNum, innerData.length);
      var sum = remainArr.reduce(function(a, c) {
        return a + c.value;
      }, 0);
      tempData.splice(limitShowNum, Infinity, {
        name: t2("ui.chart.other"),
        value: sum
      });
    }
    return tempData;
  };
  var levelFlag = level && level.length;
  if (levelFlag) {
    var levelObj = {};
    var maxLevel = 0;
    var levelData = [];
    level.forEach(function(levelItems, index) {
      levelItems.forEach(function(item) {
        if (levelObj[item] === void 0) {
          levelObj[item] = [index];
        } else {
          levelObj[item].push(index);
        }
        if (maxLevel < index + 1) {
          maxLevel = index + 1;
        }
      });
    });
    levelData = Array.from({
      length: maxLevel
    }, function() {
      return [];
    });
    innerData.forEach(function(data2) {
      Array.isArray(levelObj[data2.name]) && levelObj[data2.name].forEach(function(levelIdx) {
        levelData[levelIdx].push(_extends({}, data2));
      });
    });
    var rowsCount = levelData.length;
    var centerWidth = radius / rowsCount;
    series = levelData.map(function(data2, index) {
      var itemRadius;
      if (index === 0) {
        itemRadius = isRing ? radius : centerWidth;
      } else {
        var outerWidth = centerWidth + radius / (2 * rowsCount) * (2 * index - 1);
        var innerWidth = outerWidth + radius / (2 * rowsCount);
        itemRadius = [outerWidth, innerWidth];
      }
      return {
        name: "PIE-" + index,
        type: "pie",
        radius: itemRadius,
        data: getLimitData(data2)
      };
    });
  }
  return levelFlag ? {
    series
  } : {
    data: getLimitData(innerData)
  };
};
var getLegend = function getLegend2(args) {
  var dimension = args.dimension, innerRows = args.innerRows, legendVisible = args.legendVisible, legendLimit = args.legendLimit, level = args.level, limitShowNum = args.limitShowNum, innerData = args.innerData;
  if (!legendVisible) {
    return {
      show: false
    };
  }
  var _ref3 = {}, _ref3$legend = _ref3.legend, legend = _ref3$legend === void 0 ? [] : _ref3$legend, _ref3$levelTemp = _ref3.levelTemp, levelTemp = _ref3$levelTemp === void 0 ? [] : _ref3$levelTemp;
  if (level) {
    level.forEach(function(levelItem) {
      return levelItem.forEach(function(item) {
        return levelTemp.push(item);
      });
    });
    legend = levelTemp;
  } else if (limitShowNum && limitShowNum < innerRows.length) {
    for (var i = limitShowNum - 1; i >= 0; i--) {
      legend.unshift(innerRows[i][dimension]);
    }
  } else {
    legend = innerRows.map(function(row) {
      return row[dimension];
    });
  }
  var show = false;
  if (legend.length) {
    show = legend.length < legendLimit;
  }
  if (level && level.length) {
    return {
      show,
      data: innerData
    };
  }
  return {
    show
  };
};
var pie = function pie2(columns, rows, settings, extra, isRing) {
  var innerRows = deepCopy(rows);
  var _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? "normal" : _settings$dataType, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, emphasis = settings.emphasis;
  var itemStyle = settings.itemStyle, _settings$label = settings.label, label = _settings$label === void 0 ? false : _settings$label, labelLine = settings.labelLine, _settings$legendLimit = settings.legendLimit, legendLimit = _settings$legendLimit === void 0 ? 30 : _settings$legendLimit; settings.legendName; var _settings$level = settings.level, level = _settings$level === void 0 ? false : _settings$level;
  var _settings$limitShowNu = settings.limitShowNum, limitShowNum = _settings$limitShowNu === void 0 ? 0 : _settings$limitShowNu, _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? columns[1] : _settings$metrics, _settings$offsetY = settings.offsetY, offsetY = _settings$offsetY === void 0 ? PIE_OFFSET : _settings$offsetY, percentShow = settings.percentShow;
  var _settings$roseType = settings.roseType, roseType = _settings$roseType === void 0 ? false : _settings$roseType, _settings$selectedMod = settings.selectedMode, selectedMode = _settings$selectedMod === void 0 ? false : _settings$selectedMod, hoverAnimation = settings.hoverAnimation;
  var _settings$radius = settings.radius, radius = _settings$radius === void 0 ? isRing ? roseType ? ROSE_RING_RADIUS : RING_RADIUS : PIE_RADIUS : _settings$radius;
  var legendVisible = extra.legendVisible, tooltipVisible = extra.tooltipVisible, t2 = extra.t;
  limitShowNum && innerRows.sort(function(a, b) {
    return b[metrics] - a[metrics];
  });
  var innerData = getInnerData({
    dimension,
    metrics,
    innerRows
  });
  var type = isRing ? "circle" : "pie";
  var position = getPosition({
    radius,
    offsetY,
    level
  });
  var ichartLabel = getLabel({
    label,
    labelLine,
    percentShow,
    dataType,
    digit
  });
  var ichartLegend = getLegend({
    legendVisible,
    dimension,
    innerRows,
    legendLimit,
    level,
    limitShowNum
  });
  var dataOrSeries = getDataOrSeries({
    innerData,
    isRing,
    radius,
    level,
    limitShowNum,
    t: t2
  });
  var ichartOption = _extends({
    legend: ichartLegend,
    type,
    position,
    label: ichartLabel,
    itemStyle,
    emphasis: emphasis || {
      scale: hoverAnimation === void 0 ? true : hoverAnimation
    },
    roseType,
    selectedMode
  }, dataOrSeries);
  if (tooltipVisible) {
    var tipHtml = getTooltip({
      dataType,
      innerRows,
      limitShowNum,
      digit,
      metrics,
      dimension,
      t: t2
    });
    ichartOption.tipHtml = tipHtml;
  } else {
    ichartOption.tooltip = {
      show: false
    };
  }
  var ichartExtend = {};
  if (label) {
    ichartExtend.label = label;
  }
  if (labelLine) {
    ichartExtend.labelLine = labelLine;
  }
  ichartOption.extend = _extends({}, ichartExtend);
  return ichartOption;
};
var _sfc_main = {
  name: $prefix + "ChartRing",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "PieChart"
    };
  },
  methods: {
    updateChart: function updateChart() {
      var _this$data = this.data, _this$data$columns = _this$data.columns, columns = _this$data$columns === void 0 ? [] : _this$data$columns, _this$data$rows = _this$data.rows, rows = _this$data$rows === void 0 ? [] : _this$data$rows;
      var extra = {
        legendVisible: this.legendVisible,
        tooltipVisible: this.tooltipVisible,
        t
      };
      this.huiChartOption = pie(columns, rows, this.settings, extra, true);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsRing = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsRing.install = function(Vue) {
  Vue.component(HuiChartsRing.name, HuiChartsRing);
};

export { HuiChartsRing, HuiChartsRing as default };
