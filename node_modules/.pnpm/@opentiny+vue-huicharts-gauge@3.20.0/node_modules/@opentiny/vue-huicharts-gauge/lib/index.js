import Core, { isNull, getFormatted, isObject, itemLabel } from '@opentiny/vue-huicharts-core';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _arguments = typeof arguments === "undefined" ? void 0 : arguments;
var getTooltip = function getTooltip2(args) {
  var tooltipFormatter = args.tooltipFormatter, dataType = args.dataType, digit = args.digit;
  var formatter = function formatter2(options) {
    if (tooltipFormatter) {
      return tooltipFormatter.apply(void 0, _arguments);
    }
    var seriesName = options.seriesName, data2 = options.data;
    var value = data2.value, name = data2.name;
    return itemLabel(seriesName) + " " + getFormatted(value, dataType[seriesName], digit) + " " + name;
  };
  return formatter;
};
var getPoint = function getPoint2() {
  return {
    show: false,
    width: 10,
    length: 10,
    icon: "path://M511.999488 819.413462 72.8374 204.586538 951.1626 204.586538Z",
    offsetCenter: [0, "-108%"],
    itemStyle: {
      color: "auto"
    }
  };
};
function getSeries(args) {
  var rows = args.rows, dimension = args.dimension, metrics = args.metrics, seriesMap = args.seriesMap, dataName = args.dataName, dataType = args.dataType, digit = args.digit, labelMap = args.labelMap;
  var series = rows.map(function(row) {
    var label = row[dimension];
    var seriesItem = seriesMap[label];
    var formatter2 = function formatter22(value) {
      return getFormatted(value, dataType[label], digit);
    };
    var result = {
      type: "gauge",
      name: !isNull(labelMap[label]) ? labelMap[label] : label,
      data: [{
        name: dataName[label] || "",
        value: row[metrics]
      }],
      detail: {
        fontSize: 60,
        color: "#191919",
        offsetCenter: [0, 0],
        valueAnimation: true,
        formatter: !dataType ? "{value}" : function(value) {
          var res = getFormatted(value, dataType[label], digit);
          return dataType[label] === "percent" ? res.split("%")[0] + "{percent|%}" : res;
        },
        rich: {
          percent: {
            fontSize: 12,
            color: "#4e4e4e",
            padding: [0, 0, -20, 0]
          }
        }
      },
      axisLabel: {
        formatter: formatter2
      },
      itemStyle: {
        color: "#6D8FF0"
      },
      pointer: getPoint(),
      axisLine: {
        roundCap: true
      },
      progress: {
        show: true,
        roundCap: true,
        width: 8,
        color: "red"
      },
      axisTick: {
        show: false
      },
      splitLine: {
        length: 8,
        distance: 0,
        lineStyle: {
          width: 1,
          color: "rgba(25,25,25,0.10)"
        }
      },
      title: {
        show: true,
        offsetCenter: [0, "25%"],
        color: "#191919",
        fontSize: 15
      }
    };
    if (seriesItem) {
      Object.keys(seriesItem).forEach(function(key) {
        return isObject(result[key]) ? Object.assign(result[key], seriesItem[key]) : result[key] = seriesItem[key];
      });
    }
    return result;
  });
  return series;
}
var getIChartOption = function getIChartOption2(columns, rows, settings, extra) {
  var _settings$dataName = settings.dataName, dataName = _settings$dataName === void 0 ? {} : _settings$dataName, _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? {} : _settings$dataType, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, _settings$labelMap = settings.labelMap, labelMap = _settings$labelMap === void 0 ? {} : _settings$labelMap;
  var _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? columns[1] : _settings$metrics, _settings$seriesMap = settings.seriesMap, seriesMap = _settings$seriesMap === void 0 ? {} : _settings$seriesMap;
  var tooltipFormatter = extra.tooltipFormatter, tooltipVisible = extra.tooltipVisible;
  var tooltip = tooltipVisible && getTooltip({
    tooltipFormatter,
    dataType,
    digit
  });
  var seriesParams = {
    rows,
    dimension,
    metrics,
    seriesMap,
    dataName,
    dataType,
    digit,
    labelMap
  };
  var series = getSeries(seriesParams);
  var seriesName = series[0].name;
  var ichartOption = {
    tipHtml: tooltip,
    series,
    seriesName
  };
  return ichartOption;
};
var _sfc_main = {
  name: $prefix + "ChartGauge",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "GaugeChart"
    };
  },
  methods: {
    updateChart: function updateChart() {
      var _this$data = this.data, _this$data$columns = _this$data.columns, columns = _this$data$columns === void 0 ? [] : _this$data$columns, _this$data$rows = _this$data.rows, rows = _this$data$rows === void 0 ? [] : _this$data$rows;
      var extra = {
        legendVisible: this.legendVisible,
        tooltipVisible: this.tooltipVisible
      };
      this.huiChartOption = getIChartOption(columns, rows, this.settings, extra);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsGauge = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsGauge.install = function(Vue) {
  Vue.component(HuiChartsGauge.name, HuiChartsGauge);
};

export { HuiChartsGauge, HuiChartsGauge as default };
