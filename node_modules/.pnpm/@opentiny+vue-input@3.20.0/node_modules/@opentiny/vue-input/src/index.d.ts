/**
 * Copyright (c) 2022 - present TinyVue Authors.
 * Copyright (c) 2022 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */
import type { PropType } from '@opentiny/vue-common';
export declare const $constants: {
    INPUT_PC: string;
    INPUTGROUP_PC: string;
    INPUT_MOBILE: string;
    INPUTGROUP_MOBILE: string;
    Mode: string;
    inputMode(mode: any): string;
    inputGroupMode(mode: any): string;
    VALIDATE_ICON: {
        Validating: string;
        Success: string;
        Error: string;
    };
    COMPONENT_NAME: {
        FormItem: string;
    };
    MASKSYMBOL: string;
    TEXTAREA_HEIGHT_MOBILE: number;
};
export declare const inputProps: {
    _constants: {
        type: ObjectConstructor;
        default: () => {
            INPUT_PC: string;
            INPUTGROUP_PC: string;
            INPUT_MOBILE: string;
            INPUTGROUP_MOBILE: string;
            Mode: string;
            inputMode(mode: any): string;
            inputGroupMode(mode: any): string;
            VALIDATE_ICON: {
                Validating: string;
                Success: string;
                Error: string;
            };
            COMPONENT_NAME: {
                FormItem: string;
            };
            MASKSYMBOL: string;
            TEXTAREA_HEIGHT_MOBILE: number;
        };
    };
    name: StringConstructor;
    size: StringConstructor;
    form: StringConstructor;
    label: StringConstructor;
    height: NumberConstructor;
    resize: StringConstructor;
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    disabled: BooleanConstructor;
    readonly: BooleanConstructor;
    hoverExpand: BooleanConstructor;
    mask: BooleanConstructor;
    suffixIcon: (StringConstructor | ObjectConstructor)[];
    prefixIcon: (StringConstructor | ObjectConstructor)[];
    modelValue: PropType<string | number | null>;
    type: {
        type: StringConstructor;
        default: string;
    };
    memorySpace: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectMenu: {
        type: {
            (arrayLength: number): {
                id: string;
                label: string;
            }[];
            (...items: {
                id: string;
                label: string;
            }[]): {
                id: string;
                label: string;
            }[];
            new (arrayLength: number): {
                id: string;
                label: string;
            }[];
            new (...items: {
                id: string;
                label: string;
            }[]): {
                id: string;
                label: string;
            }[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        default: () => never[];
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    isSelect: {
        type: BooleanConstructor;
        default: boolean;
    };
    tips: StringConstructor;
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: (BooleanConstructor | ObjectConstructor)[];
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: StringConstructor;
        default: string;
    };
    showPassword: {
        type: BooleanConstructor;
        default: boolean;
    };
    showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupMore: {
        type: BooleanConstructor;
        default: boolean;
    };
    textareaTitle: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    displayOnlyContent: {
        type: StringConstructor;
        default: string;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    frontClearIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    showEmptyValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    textAlign: {
        type: StringConstructor;
        default: string;
    };
    width: {
        type: PropType<string | number | null>;
    };
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** 输入框的边框模式，当值为underline时，只显示一条底部直线 */
    inputBoxType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            INPUT_PC: string;
            INPUTGROUP_PC: string;
            INPUT_MOBILE: string;
            INPUTGROUP_MOBILE: string;
            Mode: string;
            inputMode(mode: any): string;
            inputGroupMode(mode: any): string;
            VALIDATE_ICON: {
                Validating: string;
                Success: string;
                Error: string;
            };
            COMPONENT_NAME: {
                FormItem: string;
            };
            MASKSYMBOL: string;
            TEXTAREA_HEIGHT_MOBILE: number;
        };
    };
    name: StringConstructor;
    size: StringConstructor;
    form: StringConstructor;
    label: StringConstructor;
    height: NumberConstructor;
    resize: StringConstructor;
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    disabled: BooleanConstructor;
    readonly: BooleanConstructor;
    hoverExpand: BooleanConstructor;
    mask: BooleanConstructor;
    suffixIcon: (StringConstructor | ObjectConstructor)[];
    prefixIcon: (StringConstructor | ObjectConstructor)[];
    modelValue: PropType<string | number | null>;
    type: {
        type: StringConstructor;
        default: string;
    };
    memorySpace: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectMenu: {
        type: {
            (arrayLength: number): {
                id: string;
                label: string;
            }[];
            (...items: {
                id: string;
                label: string;
            }[]): {
                id: string;
                label: string;
            }[];
            new (arrayLength: number): {
                id: string;
                label: string;
            }[];
            new (...items: {
                id: string;
                label: string;
            }[]): {
                id: string;
                label: string;
            }[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        default: () => never[];
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    isSelect: {
        type: BooleanConstructor;
        default: boolean;
    };
    tips: StringConstructor;
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: (BooleanConstructor | ObjectConstructor)[];
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: StringConstructor;
        default: string;
    };
    showPassword: {
        type: BooleanConstructor;
        default: boolean;
    };
    showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupMore: {
        type: BooleanConstructor;
        default: boolean;
    };
    textareaTitle: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    displayOnlyContent: {
        type: StringConstructor;
        default: string;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    frontClearIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    showEmptyValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    textAlign: {
        type: StringConstructor;
        default: string;
    };
    width: {
        type: PropType<string | number | null>;
    };
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** 输入框的边框模式，当值为underline时，只显示一条底部直线 */
    inputBoxType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            INPUT_PC: string;
            INPUTGROUP_PC: string;
            INPUT_MOBILE: string;
            INPUTGROUP_MOBILE: string;
            Mode: string;
            inputMode(mode: any): string;
            inputGroupMode(mode: any): string;
            VALIDATE_ICON: {
                Validating: string;
                Success: string;
                Error: string;
            };
            COMPONENT_NAME: {
                FormItem: string;
            };
            MASKSYMBOL: string;
            TEXTAREA_HEIGHT_MOBILE: number;
        };
    };
    name: StringConstructor;
    size: StringConstructor;
    form: StringConstructor;
    label: StringConstructor;
    height: NumberConstructor;
    resize: StringConstructor;
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    disabled: BooleanConstructor;
    readonly: BooleanConstructor;
    hoverExpand: BooleanConstructor;
    mask: BooleanConstructor;
    suffixIcon: (StringConstructor | ObjectConstructor)[];
    prefixIcon: (StringConstructor | ObjectConstructor)[];
    modelValue: PropType<string | number | null>;
    type: {
        type: StringConstructor;
        default: string;
    };
    memorySpace: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectMenu: {
        type: {
            (arrayLength: number): {
                id: string;
                label: string;
            }[];
            (...items: {
                id: string;
                label: string;
            }[]): {
                id: string;
                label: string;
            }[];
            new (arrayLength: number): {
                id: string;
                label: string;
            }[];
            new (...items: {
                id: string;
                label: string;
            }[]): {
                id: string;
                label: string;
            }[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        default: () => never[];
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    isSelect: {
        type: BooleanConstructor;
        default: boolean;
    };
    tips: StringConstructor;
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: (BooleanConstructor | ObjectConstructor)[];
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: StringConstructor;
        default: string;
    };
    showPassword: {
        type: BooleanConstructor;
        default: boolean;
    };
    showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupMore: {
        type: BooleanConstructor;
        default: boolean;
    };
    textareaTitle: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    displayOnlyContent: {
        type: StringConstructor;
        default: string;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    frontClearIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    showEmptyValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    textAlign: {
        type: StringConstructor;
        default: string;
    };
    width: {
        type: PropType<string | number | null>;
    };
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** 输入框的边框模式，当值为underline时，只显示一条底部直线 */
    inputBoxType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    disabled: boolean;
    type: string;
    ellipsis: boolean;
    mask: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    tabindex: string;
    contentStyle: Record<string, any>;
    customClass: string;
    readonly: boolean;
    hoverExpand: boolean;
    memorySpace: number;
    vertical: boolean;
    selectMenu: {
        id: string;
        label: string;
    }[];
    isSelect: boolean;
    counter: boolean;
    autosize: boolean | Record<string, any>;
    clearable: boolean;
    autocomplete: string;
    showPassword: boolean;
    showWordLimit: boolean;
    showTitle: boolean;
    validateEvent: boolean;
    popupMore: boolean;
    textareaTitle: string;
    displayOnly: boolean;
    displayOnlyContent: string;
    frontClearIcon: boolean;
    showEmptyValue: boolean;
    textAlign: string;
    showTooltip: boolean;
    inputBoxType: string;
}, {}>;
export default _default;
