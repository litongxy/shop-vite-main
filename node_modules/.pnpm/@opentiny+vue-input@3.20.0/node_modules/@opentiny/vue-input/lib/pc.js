import { renderless as renderless$1, api as api$1 } from '@opentiny/vue-renderless/input/vue';
import { defineComponent, $prefix, setup, directive, props } from '@opentiny/vue-common';
import Clickoutside from '@opentiny/vue-renderless/common/deps/clickoutside';
import { renderless, api } from '@opentiny/vue-renderless/tall-storage/vue';
import '@opentiny/vue-theme/tall-storage/index.css';
import { openBlock, createElementBlock, createElementVNode, withKeys, Fragment, renderList, normalizeClass, toDisplayString, resolveComponent, resolveDirective, mergeProps, renderSlot, createCommentVNode, createBlock, withCtx, resolveDynamicComponent, createVNode, Transition, withModifiers, createTextVNode, withDirectives } from 'vue';
import { IconClose, IconEyeopen, IconEyeclose } from '@opentiny/vue-icon';
import Tooltip from '@opentiny/vue-tooltip';
import Button from '@opentiny/vue-button';
import DialogBox from '@opentiny/vue-dialog-box';
import '@opentiny/vue-theme/input/index.css';
import '@opentiny/vue-theme/textarea/index.css';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main$1 = defineComponent({
  name: $prefix + "TallStorage",
  inheritAttrs: false,
  props: {
    isMemoryStorage: Boolean,
    localstorageData: Array
  },
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1$1 = {
  class: "tiny-storage-list-style"
};
var _hoisted_2$1 = ["onClick"];
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: "tiny-tall-storage",
      onMousedown: _cache[1] || (_cache[1] = function() {
        return _ctx.mousedown && _ctx.mousedown.apply(_ctx, arguments);
      })
    },
    [createElementVNode("div", _hoisted_1$1, [createElementVNode(
      "ul",
      {
        onKeydown: _cache[0] || (_cache[0] = withKeys(function() {
          return _ctx.keydownEvent && _ctx.keydownEvent.apply(_ctx, arguments);
        }, ["enter"])),
        class: "tiny-storage-list"
      },
      [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.localstorageData, function(item) {
          return openBlock(), createElementBlock("li", {
            key: item,
            class: normalizeClass(["tiny-storage-item", [_ctx.state.hoverValue === item ? "item-hover" : ""]]),
            onClick: function onClick($event) {
              return _ctx.selectItem(item);
            }
          }, toDisplayString(item), 11, _hoisted_2$1);
        }),
        128
        /* KEYED_FRAGMENT */
      ))],
      32
      /* NEED_HYDRATION */
    )])],
    32
    /* NEED_HYDRATION */
  );
}
var tallStorage = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);

var _sfc_main = defineComponent({
  inheritAttrs: false,
  // 勿删，兼容灵雀特殊场景,MR#1861
  emits: ["update:modelValue", "change", "clear", "focus", "blur", "keyup", "keydown", "paste", "mouseenter", "mouseleave", "click", "input"],
  directives: directive({
    Clickoutside
  }),
  components: {
    IconClose: IconClose(),
    IconEyeopen: IconEyeopen(),
    IconEyeclose: IconEyeclose(),
    TinyTallStorage: tallStorage,
    TinyTooltip: Tooltip,
    TinyButton: Button,
    TinyDialogBox: DialogBox
  },
  props: [].concat(props, ["name", "size", "form", "type", "mask", "label", "modelValue", "height", "resize", "counter", "autosize", "disabled", "readonly", "tabindex", "clearable", "suffixIcon", "prefixIcon", "autocomplete", "showPassword", "memorySpace", "validateEvent", "showWordLimit", "displayOnly", "displayOnlyContent", "frontClearIcon", "showEmptyValue", "hoverExpand", "popupMore", "showTooltip", "inputBoxType"]),
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless: renderless$1,
      api: api$1
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "tiny-input-group__prepend",
  ref: "prepend"
};
var _hoisted_2 = {
  class: "tiny-input-display-only"
};
var _hoisted_3 = {
  key: 0,
  class: "tiny-input-display-only__content"
};
var _hoisted_4 = {
  key: 1,
  class: "tiny-input-display-only__mask"
};
var _hoisted_5 = {
  class: "tiny-input-display-only__mask-text"
};
var _hoisted_6 = {
  key: 2,
  class: "tiny-input-display-only__content"
};
var _hoisted_7 = ["name", "tabindex", "type", "disabled", "readonly", "unselectable", "autocomplete", "aria-label"];
var _hoisted_8 = {
  key: 2,
  class: "tiny-input__prefix",
  ref: "prefix"
};
var _hoisted_9 = {
  key: 0,
  class: "tiny-input__suffix",
  ref: "suffix"
};
var _hoisted_10 = {
  class: "tiny-input__suffix-inner"
};
var _hoisted_11 = {
  key: 5,
  class: "tiny-input__count"
};
var _hoisted_12 = {
  class: "tiny-input__count-inner"
};
var _hoisted_13 = {
  class: "tiny-input__count-text-length"
};
var _hoisted_14 = {
  class: "tiny-input__count-upper-limit"
};
var _hoisted_15 = {
  key: 3,
  class: "tiny-input-group__append",
  ref: "append"
};
var _hoisted_16 = {
  key: 4,
  class: "tiny-input-group__panel",
  ref: "panel"
};
var _hoisted_17 = {
  class: "tiny-textarea-display-only__wrap"
};
var _hoisted_18 = {
  ref: "textBox",
  class: "tiny-textarea-display-only__content text-box"
};
var _hoisted_19 = ["tabindex", "disabled", "readonly", "unselectable", "autocomplete", "aria-label"];
var _hoisted_20 = {
  key: 2,
  class: "tiny-input__count"
};
var _hoisted_21 = {
  class: "tiny-input__count-inner"
};
var _hoisted_22 = {
  class: "tiny-input__count-text-length"
};
var _hoisted_23 = {
  class: "tiny-input__count-upper-limit"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_tooltip = resolveComponent("tiny-tooltip");
  var _component_tiny_tall_storage = resolveComponent("tiny-tall-storage");
  var _component_icon_close = resolveComponent("icon-close");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_dialog_box = resolveComponent("tiny-dialog-box");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return openBlock(), createElementBlock(
    "div",
    mergeProps(_ctx.a(_ctx.$attrs, ["class"]), {
      class: [_ctx.$attrs.class, _ctx.type === "textarea" ? "tiny-textarea" : "tiny-input", _ctx.state.inputSize ? "tiny-input-" + _ctx.state.inputSize : "", {
        "is-disabled": _ctx.state.inputDisabled,
        "is-exceed": _ctx.state.inputExceed,
        "tiny-input-group": _ctx.slots.prepend || _ctx.slots.append,
        "tiny-input-group-append": _ctx.slots.append,
        "tiny-input-group-prepend": _ctx.slots.prepend,
        "tiny-input-prefix": _ctx.slots.prefix || _ctx.prefixIcon,
        "tiny-input-suffix": _ctx.slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword || _ctx.mask && _ctx.state.inputDisabled,
        "tiny-input-word-limit": _ctx.state.isWordLimitVisible,
        "is-display-only": _ctx.state.isDisplayOnly,
        "tiny-input-underline": _ctx.inputBoxType === "underline"
      }],
      onMouseenter: _cache[32] || (_cache[32] = function($event) {
        _ctx.state.hovering = true;
        _ctx.$emit("mouseenter", $event);
      }),
      onMouseleave: _cache[33] || (_cache[33] = function($event) {
        _ctx.state.hovering = false;
        _ctx.$emit("mouseleave", $event);
      }),
      onClick: _cache[34] || (_cache[34] = function($event) {
        return _ctx.$emit("click", $event);
      })
    }),
    [_ctx.type !== "textarea" ? (openBlock(), createElementBlock(
      Fragment,
      {
        key: 0
      },
      [_ctx.slots.prepend ? (openBlock(), createElementBlock(
        "div",
        _hoisted_1,
        [renderSlot(_ctx.$slots, "prepend")],
        512
        /* NEED_PATCH */
      )) : createCommentVNode("v-if", true), createElementVNode("span", _hoisted_2, [_ctx.state.isDisplayOnly ? (openBlock(), createBlock(_component_tiny_tooltip, {
        key: 0,
        disabled: !_ctx.showTooltip,
        effect: "light",
        content: _ctx.state.displayOnlyTooltip,
        placement: "top",
        "popper-class": _ctx.state.tooltipConfig.popperClass || "",
        onMouseenter: _ctx.handleEnterDisplayOnlyContent
      }, {
        default: withCtx(function() {
          return [_ctx.type === "password" ? (openBlock(), createElementBlock(
            "span",
            _hoisted_3,
            toDisplayString(_ctx.state.hiddenPassword),
            1
            /* TEXT */
          )) : _ctx.mask ? (openBlock(), createElementBlock("span", _hoisted_4, [createElementVNode(
            "span",
            _hoisted_5,
            toDisplayString(_ctx.state.displayedMaskValue),
            1
            /* TEXT */
          ), (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.maskValueVisible ? "icon-eyeopen" : "icon-eyeclose"), {
            onClick: _cache[0] || (_cache[0] = function($event) {
              return _ctx.state.maskValueVisible = !_ctx.state.maskValueVisible;
            })
          }))])) : (openBlock(), createElementBlock(
            "span",
            _hoisted_6,
            toDisplayString(_ctx.state.displayOnlyText),
            1
            /* TEXT */
          ))];
        }),
        _: 1
        /* STABLE */
      }, 8, ["disabled", "content", "popper-class", "onMouseenter"])) : createCommentVNode("v-if", true), _ctx.type !== "textarea" ? (openBlock(), createElementBlock("input", mergeProps({
        key: 1,
        ref: "input",
        name: _ctx.name,
        "data-tag": "tiny-input-inner"
      }, _ctx.a(_ctx.$attrs, ["type", "class", "style", "^on[A-Z]", "id"]), {
        class: ["tiny-input__inner", _ctx.mask && _ctx.state.inputDisabled && !_ctx.state.maskValueVisible && "tiny-input__mask"],
        tabindex: _ctx.tabindex,
        type: _ctx.showPassword ? _ctx.state.passwordVisible ? "text" : "password" : _ctx.type,
        disabled: _ctx.state.inputDisabled,
        readonly: _ctx.readonly,
        unselectable: _ctx.readonly ? "on" : "off",
        autocomplete: _ctx.autocomplete,
        onCompositionend: _cache[1] || (_cache[1] = function() {
          return _ctx.handleCompositionEnd && _ctx.handleCompositionEnd.apply(_ctx, arguments);
        }),
        onCompositionupdate: _cache[2] || (_cache[2] = function() {
          return _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate.apply(_ctx, arguments);
        }),
        onCompositionstart: _cache[3] || (_cache[3] = function() {
          return _ctx.handleCompositionStart && _ctx.handleCompositionStart.apply(_ctx, arguments);
        }),
        onBlur: _cache[4] || (_cache[4] = function() {
          return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);
        }),
        onFocus: _cache[5] || (_cache[5] = function() {
          return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
        }),
        onInput: _cache[6] || (_cache[6] = function() {
          return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);
        }),
        onChange: _cache[7] || (_cache[7] = function() {
          return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
        }),
        "aria-label": _ctx.label,
        onKeyup: _cache[8] || (_cache[8] = function($event) {
          return _ctx.$emit("keyup", $event);
        }),
        onKeydown: _cache[9] || (_cache[9] = function($event) {
          return _ctx.$emit("keydown", $event);
        }),
        onPaste: _cache[10] || (_cache[10] = function($event) {
          return _ctx.$emit("paste", $event);
        })
      }), null, 16, _hoisted_7)) : createCommentVNode("v-if", true)]), _ctx.isMemoryStorage ? (openBlock(), createBlock(_component_tiny_tall_storage, {
        key: 1,
        name: _ctx.name,
        "localstorage-data": _ctx.storageData,
        "is-memory-storage": _ctx.isMemoryStorage,
        onSelected: _ctx.selectedMemory
      }, null, 8, ["name", "localstorage-data", "is-memory-storage", "onSelected"])) : createCommentVNode("v-if", true), !_ctx.state.isDisplayOnly && (_ctx.slots.prefix || _ctx.prefixIcon) ? (openBlock(), createElementBlock(
        "span",
        _hoisted_8,
        [renderSlot(_ctx.$slots, "prefix"), _ctx.prefixIcon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon), {
          key: 0,
          class: "tiny-svg-size tiny-input__icon"
        })) : createCommentVNode("v-if", true)],
        512
        /* NEED_PATCH */
      )) : createCommentVNode("v-if", true), createElementVNode("div", null, [createVNode(Transition, {
        name: "tiny-transition-icon-out-in"
      }, {
        default: withCtx(function() {
          return [!_ctx.state.isDisplayOnly && _ctx.getSuffixVisible() ? (openBlock(), createElementBlock(
            "span",
            _hoisted_9,
            [createElementVNode("span", _hoisted_10, [_ctx.frontClearIcon && _ctx.state.showClear ? (openBlock(), createBlock(_component_icon_close, {
              key: 0,
              class: "tiny-svg-size tiny-input__icon tiny-input__clear",
              onMousedown: _cache[11] || (_cache[11] = withModifiers(function() {
              }, ["prevent"])),
              onClick: _ctx.clear
            }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), !_ctx.state.showClear || !_ctx.state.showPwdVisible || !_ctx.state.isWordLimitVisible ? (openBlock(), createElementBlock(
              Fragment,
              {
                key: 1
              },
              [renderSlot(_ctx.$slots, "suffix"), _ctx.suffixIcon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon), {
                key: 0,
                class: "tiny-svg-size tiny-input__icon"
              })) : createCommentVNode("v-if", true)],
              64
              /* STABLE_FRAGMENT */
            )) : createCommentVNode("v-if", true), !_ctx.frontClearIcon && _ctx.state.showClear ? (openBlock(), createBlock(_component_icon_close, {
              key: 2,
              class: "tiny-svg-size tiny-input__icon tiny-input__clear",
              onMousedown: _cache[12] || (_cache[12] = withModifiers(function() {
              }, ["prevent"])),
              onClick: _ctx.clear
            }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), _ctx.showPassword ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.passwordVisible ? "icon-eyeopen" : "icon-eyeclose"), {
              key: 3,
              class: "tiny-svg-size tiny-input__icon",
              onClick: _ctx.handlePasswordVisible
            }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), _ctx.mask && _ctx.state.inputDisabled ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.maskValueVisible ? "icon-eyeopen" : "icon-eyeclose"), {
              key: 4,
              class: "tiny-svg-size tiny-input__icon",
              onClick: _cache[13] || (_cache[13] = function($event) {
                return _ctx.state.maskValueVisible = !_ctx.state.maskValueVisible;
              })
            })) : createCommentVNode("v-if", true), _ctx.state.isWordLimitVisible ? (openBlock(), createElementBlock("span", _hoisted_11, [createElementVNode("span", _hoisted_12, [createElementVNode(
              "span",
              _hoisted_13,
              toDisplayString(_ctx.state.showWordLimit ? "" + _ctx.state.textLength : ""),
              1
              /* TEXT */
            ), createElementVNode(
              "span",
              _hoisted_14,
              toDisplayString(_ctx.state.showWordLimit ? "/" + _ctx.state.upperLimit : _ctx.state.textLength),
              1
              /* TEXT */
            )])])) : createCommentVNode("v-if", true)]), _ctx.state.validateState ? (openBlock(), createElementBlock(
              "i",
              {
                key: 0,
                class: normalizeClass(["tiny-input__icon", ["tiny-input__validateIcon", _ctx.validateIcon]])
              },
              null,
              2
              /* CLASS */
            )) : createCommentVNode("v-if", true)],
            512
            /* NEED_PATCH */
          )) : createCommentVNode("v-if", true)];
        }),
        _: 3
        /* FORWARDED */
      })]), _ctx.slots.append ? (openBlock(), createElementBlock(
        "div",
        _hoisted_15,
        [renderSlot(_ctx.$slots, "append")],
        512
        /* NEED_PATCH */
      )) : createCommentVNode("v-if", true), _ctx.slots.panel ? (openBlock(), createElementBlock(
        "div",
        _hoisted_16,
        [renderSlot(_ctx.$slots, "panel")],
        512
        /* NEED_PATCH */
      )) : createCommentVNode("v-if", true)],
      64
      /* STABLE_FRAGMENT */
    )) : (openBlock(), createElementBlock(
      "span",
      {
        key: 1,
        class: normalizeClass(["tiny-textarea-display-only", _ctx.hoverExpand && "tiny-textarea__inner-con"])
      },
      [_ctx.state.isDisplayOnly ? (openBlock(), createBlock(_component_tiny_tooltip, {
        key: 0,
        disabled: !_ctx.showTooltip,
        pre: "",
        effect: "light",
        content: _ctx.state.displayOnlyTooltip,
        placement: "top",
        "popper-class": _ctx.state.tooltipConfig.popperClass || "",
        onMouseenter: _cache[15] || (_cache[15] = function($event) {
          return _ctx.handleEnterDisplayOnlyContent($event, "textarea");
        })
      }, {
        default: withCtx(function() {
          return [createElementVNode("div", _hoisted_17, [createElementVNode(
            "span",
            _hoisted_18,
            [_ctx.state.showMoreBtn ? (openBlock(), createElementBlock(
              "span",
              {
                key: 0,
                onClick: _cache[14] || (_cache[14] = function($event) {
                  return _ctx.state.showDisplayOnlyBox = true;
                }),
                class: "more-btn"
              },
              toDisplayString(_ctx.t("ui.input.more")) + ">",
              1
              /* TEXT */
            )) : createCommentVNode("v-if", true), createElementVNode(
              "span",
              null,
              toDisplayString(_ctx.state.displayOnlyText),
              1
              /* TEXT */
            )],
            512
            /* NEED_PATCH */
          )])];
        }),
        _: 1
        /* STABLE */
      }, 8, ["disabled", "content", "popper-class"])) : createCommentVNode("v-if", true), _ctx.state.isDisplayOnly && _ctx.popupMore ? (openBlock(), createBlock(_component_tiny_dialog_box, {
        key: 1,
        title: _ctx.t("ui.input.detail"),
        visible: _ctx.state.showDisplayOnlyBox,
        "append-to-body": true,
        "onUpdate:visible": _cache[17] || (_cache[17] = function($event) {
          return _ctx.state.showDisplayOnlyBox = $event;
        })
      }, {
        footer: withCtx(function() {
          return [createVNode(_component_tiny_button, {
            onClick: _cache[16] || (_cache[16] = function($event) {
              return _ctx.state.showDisplayOnlyBox = false;
            })
          }, {
            default: withCtx(function() {
              return [createTextVNode(
                toDisplayString(_ctx.t("ui.input.close")),
                1
                /* TEXT */
              )];
            }),
            _: 1
            /* STABLE */
          })];
        }),
        default: withCtx(function() {
          return [createElementVNode(
            "div",
            null,
            toDisplayString(_ctx.state.displayOnlyText),
            1
            /* TEXT */
          )];
        }),
        _: 1
        /* STABLE */
      }, 8, ["title", "visible"])) : createCommentVNode("v-if", true), withDirectives((openBlock(), createElementBlock("textarea", mergeProps({
        ref: "textarea"
      }, _ctx.a(_ctx.$attrs, ["type", "class", "style", "id"]), {
        tabindex: _ctx.tabindex,
        class: ["tiny-textarea__inner", _ctx.hoverExpand && !_ctx.state.enteredTextarea && "tiny-textarea__fix-height"],
        onCompositionstart: _cache[18] || (_cache[18] = function() {
          return _ctx.handleCompositionStart && _ctx.handleCompositionStart.apply(_ctx, arguments);
        }),
        onCompositionupdate: _cache[19] || (_cache[19] = function() {
          return _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate.apply(_ctx, arguments);
        }),
        onCompositionend: _cache[20] || (_cache[20] = function() {
          return _ctx.handleCompositionEnd && _ctx.handleCompositionEnd.apply(_ctx, arguments);
        }),
        onInput: _cache[21] || (_cache[21] = function() {
          return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);
        }),
        disabled: _ctx.state.inputDisabled,
        readonly: _ctx.readonly,
        unselectable: _ctx.readonly ? "on" : "off",
        autocomplete: _ctx.autocomplete,
        style: _ctx.state.textareaStyle,
        onFocus: _cache[22] || (_cache[22] = function() {
          return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
        }),
        onBlur: _cache[23] || (_cache[23] = function() {
          return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);
        }),
        onChange: _cache[24] || (_cache[24] = function() {
          return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
        }),
        onMouseenter: _cache[25] || (_cache[25] = function($event) {
          return _ctx.handleEnterTextarea($event);
        }),
        onMouseleave: _cache[26] || (_cache[26] = function($event) {
          return _ctx.handleLeaveTextarea($event);
        }),
        onMousedown: _cache[27] || (_cache[27] = function($event) {
          return _ctx.handleTextareaMouseDown();
        }),
        onMouseup: _cache[28] || (_cache[28] = function($event) {
          return _ctx.handleTextareaMouseUp();
        }),
        "aria-label": _ctx.label,
        onKeyup: _cache[29] || (_cache[29] = function($event) {
          return _ctx.$emit("keyup", $event);
        }),
        onKeydown: _cache[30] || (_cache[30] = function($event) {
          return _ctx.$emit("keydown", $event);
        }),
        onPaste: _cache[31] || (_cache[31] = function($event) {
          return _ctx.$emit("paste", $event);
        })
      }), [createTextVNode("\n      ")], 16, _hoisted_19)), [[_directive_clickoutside, function() {
        return _ctx.handleTextareaMouseUp(true);
      }, void 0, {
        mouseup: true
      }]])],
      2
      /* CLASS */
    )), _ctx.state.isWordLimitVisible && _ctx.type === "textarea" ? (openBlock(), createElementBlock("span", _hoisted_20, [createElementVNode("span", _hoisted_21, [createElementVNode(
      "span",
      _hoisted_22,
      toDisplayString(_ctx.state.showWordLimit ? "" + _ctx.state.textLength : ""),
      1
      /* TEXT */
    ), createElementVNode(
      "span",
      _hoisted_23,
      toDisplayString(_ctx.state.showWordLimit ? "/" + _ctx.state.upperLimit : _ctx.state.textLength),
      1
      /* TEXT */
    )])])) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "default")],
    16
    /* FULL_PROPS */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
