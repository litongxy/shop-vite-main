import { renderless, api } from '@opentiny/vue-renderless/time-line/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import '@opentiny/vue-theme/steps/index.css';
import TimelineItem from '@opentiny/vue-timeline-item';
import { resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, Fragment, renderList, createBlock, withCtx } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["click"],
  props: [].concat(props, ["vertical", "horizontal", "showNumber", "nameField", "timeField", "start", "data", "space", "active", "reverse", "showStatus", "size", "textPosition", "showDivider", "onlyNumber", "lineWidth", "shape", "autoColorField"]),
  components: {
    TinyTimelineItem: TimelineItem
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_timeline_item = resolveComponent("tiny-timeline-item");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-timeline tiny-steps", {
        "is-horizontal": _ctx.horizontal && !_ctx.vertical,
        "tiny-steps--mini": _ctx.size === "mini"
      }])
    },
    [createElementVNode(
      "div",
      {
        class: normalizeClass(_ctx.state.computedWrapperClass)
      },
      [renderSlot(_ctx.$slots, "default", {}, function() {
        return [(openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(_ctx.state.nodes, function(node, index) {
            return openBlock(), createBlock(_component_tiny_timeline_item, {
              key: index,
              "node-index": index,
              node,
              space: _ctx.space,
              "line-width": _ctx.lineWidth,
              shape: _ctx.shape,
              autoColorField: _ctx.autoColorField,
              onClick: function onClick($event) {
                return _ctx.handleClick({
                  index,
                  node
                });
              }
            }, {
              "active-node-desc": withCtx(function(slotScoped) {
                return [renderSlot(_ctx.$slots, "active-node-desc", {
                  node: slotScoped.node
                })];
              }),
              top: withCtx(function(_ref) {
                var slotScope = _ref.slotScope;
                return [renderSlot(_ctx.$slots, "top", {
                  slotScope
                })];
              }),
              bottom: withCtx(function(_ref2) {
                var slotScope = _ref2.slotScope;
                return [renderSlot(_ctx.$slots, "bottom", {
                  slotScope
                })];
              }),
              left: withCtx(function(_ref3) {
                var slotScope = _ref3.slotScope;
                return [renderSlot(_ctx.$slots, "left", {
                  slotScope
                })];
              }),
              right: withCtx(function(_ref4) {
                var slotScope = _ref4.slotScope;
                return [renderSlot(_ctx.$slots, "right", {
                  slotScope
                })];
              }),
              _: 2
              /* DYNAMIC */
            }, 1032, ["node-index", "node", "space", "line-width", "shape", "autoColorField", "onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))];
      })],
      2
      /* CLASS */
    )],
    2
    /* CLASS */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
