import { defineComponent, props, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/load-list/vue';
import { openBlock, createElementBlock, renderSlot, createElementVNode, toDisplayString, createCommentVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["load", "update:error", "update:loading"],
  props: [].concat(props, ["direction", "offset", "disabled", "scroller", "immediateCheck", "error", "errorText", "loading", "loadingText", "finished", "finishedText", "delay"]),
  components: {},
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = ["aria-busy"];
var _hoisted_2 = {
  key: 1,
  ref: "placeholder",
  "data-tag": "tiny-load-list__placeholder"
};
var _hoisted_3 = {
  key: 2,
  "data-tag": "tiny-load-list__loading",
  class: "flex justify-center items-center"
};
var _hoisted_4 = {
  key: 3,
  "data-tag": "tiny-load-list__finished-text",
  class: "flex justify-center items-center"
};
var _hoisted_5 = {
  key: 6,
  ref: "placeholder",
  "data-tag": "tiny-load-list__placeholder"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    "data-tag": "tiny-load-list",
    role: "feed",
    "aria-busy": _ctx.state.loading
  }, [_ctx.direction === "down" ? renderSlot(_ctx.$slots, "default", {
    key: 0
  }) : (openBlock(), createElementBlock(
    "div",
    _hoisted_2,
    null,
    512
    /* NEED_PATCH */
  )), _ctx.state.loading ? (openBlock(), createElementBlock("div", _hoisted_3, [renderSlot(_ctx.$slots, "loading", {}, function() {
    return [createElementVNode(
      "span",
      null,
      toDisplayString(_ctx.loadingText),
      1
      /* TEXT */
    )];
  })])) : createCommentVNode("v-if", true), _ctx.finished ? (openBlock(), createElementBlock("div", _hoisted_4, [renderSlot(_ctx.$slots, "finished", {}, function() {
    return [createElementVNode(
      "span",
      null,
      toDisplayString(_ctx.finishedText),
      1
      /* TEXT */
    )];
  })])) : createCommentVNode("v-if", true), _ctx.error ? (openBlock(), createElementBlock("div", {
    key: 4,
    role: "button",
    "data-tag": "tiny-load-list__error-text",
    tabindex: "0",
    onClick: _cache[0] || (_cache[0] = function() {
      return _ctx.clickErrorText && _ctx.clickErrorText.apply(_ctx, arguments);
    }),
    class: "flex justify-center items-center"
  }, [renderSlot(_ctx.$slots, "error", {}, function() {
    return [createElementVNode(
      "span",
      null,
      toDisplayString(_ctx.errorText),
      1
      /* TEXT */
    )];
  })])) : createCommentVNode("v-if", true), _ctx.direction === "up" ? renderSlot(_ctx.$slots, "default", {
    key: 5
  }) : (openBlock(), createElementBlock(
    "div",
    _hoisted_5,
    null,
    512
    /* NEED_PATCH */
  ))], 8, _hoisted_1);
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobileFirst as default };
