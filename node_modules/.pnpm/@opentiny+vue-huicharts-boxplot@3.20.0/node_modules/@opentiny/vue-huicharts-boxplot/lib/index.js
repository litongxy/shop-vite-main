import Core, { itemPoint, itemLabel, itemContent, htmlHandler, getFormatted } from '@opentiny/vue-huicharts-core';
import { prepareBoxplotData } from 'echarts/extension/dataTool';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getXAxis = function getXAxis2(args) {
  var columns = args.columns, xAxisName = args.xAxisName, axisVisible = args.axisVisible, xAxisType = args.xAxisType;
  return [{
    type: xAxisType,
    nameLocation: "middle",
    nameGap: 22,
    name: xAxisName || "",
    axisTick: {
      show: true,
      lineStyle: {
        color: "#eee"
      }
    },
    data: columns,
    show: axisVisible
  }];
};
var getSeries = function getSeries2(args) {
  var area = args.area, areaStyle = args.areaStyle, itemStyle = args.itemStyle, label = args.label, lineStyle = args.lineStyle, _args$outliers = args.outliers, outliers = _args$outliers === void 0 ? [] : _args$outliers, rows = args.rows;
  var _ref = {}, _ref$series = _ref.series, series = _ref$series === void 0 ? [] : _ref$series, _ref$arr = _ref.arr, arr = _ref$arr === void 0 ? ["boxplot", "scatter"] : _ref$arr;
  arr.forEach(function(item) {
    if (item === "scatter" && !outliers.length) {
      return;
    }
    var data2 = item === "boxplot" ? rows : outliers;
    var seriesItem = {
      name: "",
      type: item,
      data: data2
    };
    area && (seriesItem.areaStyle = {});
    label && (seriesItem.label = label);
    lineStyle && (seriesItem.lineStyle = lineStyle);
    itemStyle && (seriesItem.itemStyle = itemStyle);
    areaStyle && (seriesItem.areaStyle = areaStyle);
    series.push(seriesItem);
  });
  return series;
};
var factoryFmt = function factoryFmt2(_ref2) {
  var yAxisType = _ref2.yAxisType, i = _ref2.i, digit = _ref2.digit;
  return function(val) {
    return getFormatted(val, yAxisType[i], digit);
  };
};
var getYAxis = function getYAxis2(args) {
  var axisVisible = args.axisVisible, digit = args.digit, max = args.max, min = args.min, scale = args.scale, yAxisName = args.yAxisName, yAxisType = args.yAxisType;
  var yAxisBase = {
    type: "value",
    axisTick: {
      show: false
    },
    show: axisVisible
  };
  var _ref3 = {}, _ref3$yAxis = _ref3.yAxis, yAxis = _ref3$yAxis === void 0 ? [] : _ref3$yAxis, _ref3$len = _ref3.len, len = _ref3$len === void 0 ? yAxisType.length >= 2 ? 2 : 1 : _ref3$len, _ref3$i = _ref3.i, i = _ref3$i === void 0 ? 0 : _ref3$i;
  for (; i < len; i++) {
    if (!yAxisType[i]) {
      yAxis[i] = _extends({}, yAxisBase);
    } else {
      var formatter = factoryFmt({
        yAxisType,
        i,
        digit
      });
      var yAxisAdv = {
        axisLabel: {
          formatter
        }
      };
      yAxis[i] = _extends({}, yAxisBase, yAxisAdv);
      var name = yAxisName[i] || "";
      Object.assign(yAxis[i], {
        name,
        scale: scale[i] || false,
        min: min[i] || null,
        max: max[i] || null
      });
    }
  }
  return yAxis;
};
var getTooltip = function getTooltip2() {
  return {
    trigger: "item",
    formatter: function formatter(item) {
      var tpl = [];
      var name = item.name, value = item.value, color = item.color, dataType = item.dataType;
      color && tpl.push(itemPoint(color));
      tpl.push(itemLabel("" + name, !value));
      if (dataType === "node") {
        value && tpl.push(itemContent(value) + "<br />");
      }
      return tpl.join("");
    }
  };
};
var boxplot = function boxplot2(columns, rows, settings, extra) {
  rows = Array.isArray(rows) ? rows : [];
  columns = Array.isArray(columns) ? columns : [];
  var _settings$axisSite = settings.axisSite, axisSite = _settings$axisSite === void 0 ? {} : _settings$axisSite, _settings$yAxisType = settings.yAxisType, yAxisType = _settings$yAxisType === void 0 ? ["normal"] : _settings$yAxisType, _settings$xAxisType = settings.xAxisType, xAxisType = _settings$xAxisType === void 0 ? "category" : _settings$xAxisType, _settings$yAxisName = settings.yAxisName, yAxisName = _settings$yAxisName === void 0 ? "" : _settings$yAxisName, _settings$xAxisName = settings.xAxisName, xAxisName = _settings$xAxisName === void 0 ? "" : _settings$xAxisName;
  var _settings$axisVisible = settings.axisVisible, axisVisible = _settings$axisVisible === void 0 ? true : _settings$axisVisible, area = settings.area, _settings$scale = settings.scale, scale = _settings$scale === void 0 ? [false, false] : _settings$scale, _settings$min = settings.min, min = _settings$min === void 0 ? [null, null] : _settings$min, _settings$max = settings.max, max = _settings$max === void 0 ? [null, null] : _settings$max;
  var _settings$nullAddZero = settings.nullAddZero, nullAddZero = _settings$nullAddZero === void 0 ? false : _settings$nullAddZero, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit; settings.legendName; var _settings$labelMap = settings.labelMap, labelMap = _settings$labelMap === void 0 ? {} : _settings$labelMap, label = settings.label, itemStyle = settings.itemStyle;
  var lineStyle = settings.lineStyle, areaStyle = settings.areaStyle, _settings$tooltipLabe = settings.tooltipLabel, tooltipLabel = _settings$tooltipLabe === void 0 ? ["lower", "Q1", "median", "Q3", "upper"] : _settings$tooltipLabe;
  extra.legendVisible; var outliers = extra.outliers, tooltipFormatter = extra.tooltipFormatter, tooltipVisible = extra.tooltipVisible;
  var metrics = columns.slice();
  if (axisSite.right && axisSite.left) {
    metrics = axisSite.left.concat(axisSite.right);
  } else if (!axisSite.right && axisSite.left) {
    metrics = axisSite.left;
  } else if (settings.metrics) {
    metrics = settings.metrics;
  }
  var getParams = function getParams2() {
    return {
      tooltipFormatter,
      tooltipLabel: htmlHandler(tooltipLabel),
      digit
    };
  };
  tooltipVisible && getTooltip(getParams());
  var xAxis = getXAxis({
    columns,
    xAxisName,
    axisVisible,
    xAxisType
  });
  var yAxisParams = {
    yAxisName,
    yAxisType,
    axisVisible
  };
  Object.assign(yAxisParams, {
    scale,
    min,
    max,
    digit
  });
  var yAxis = getYAxis(yAxisParams);
  var seriesParams = {
    rows,
    axisSite,
    metrics,
    area,
    nullAddZero,
    labelMap,
    label
  };
  Object.assign(seriesParams, {
    itemStyle,
    lineStyle,
    areaStyle,
    xAxisType,
    outliers
  });
  getSeries(seriesParams);
  return {
    xAxis,
    yAxis,
    data: extra.data
  };
};
var _sfc_main = {
  name: $prefix + "ChartBoxplot",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "BoxplotChart"
    };
  },
  methods: {
    updateChart: function updateChart(data2) {
      var _data$columns = data2.columns, columns = _data$columns === void 0 ? [] : _data$columns, _data$rows = data2.rows, rows = _data$rows === void 0 ? [] : _data$rows;
      var extra = {
        tooltipVisible: this.tooltipVisible,
        extend: this.extend,
        data: prepareBoxplotData && Array.isArray(data2) ? data2 : null
      };
      var option = boxplot(columns, rows, this.settings, extra);
      this.huiChartOption = _extends({}, option);
    },
    prepareBoxplotData: function prepareBoxplotData$1(data2) {
      return prepareBoxplotData(data2);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsBoxplot = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsBoxplot.install = function(Vue) {
  Vue.component(HuiChartsBoxplot.name, HuiChartsBoxplot);
};

export { HuiChartsBoxplot, HuiChartsBoxplot as default };
