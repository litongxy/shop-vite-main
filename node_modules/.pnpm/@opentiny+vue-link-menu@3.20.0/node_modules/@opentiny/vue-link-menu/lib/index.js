function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import { iconSearch } from "@opentiny/vue-icon";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/link-menu/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  DIALOG_TITLE: "ui.linkMenu.title"
};
var LinkMenu = defineComponent({
  name: $prefix + "LinkMenu",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    icon: Object,
    searchIcon: {
      type: Object,
      default: function _default2() {
        return iconSearch();
      }
    },
    data: {
      type: Array
    },
    maxItem: {
      type: Number,
      validator: function validator(value) {
        return value >= 0;
      }
    },
    title: {
      type: String,
      default: ""
    },
    defaultExpandAll: {
      type: Boolean,
      default: false
    },
    ellipsis: {
      type: Boolean,
      default: true
    },
    wrap: {
      type: Boolean,
      default: false
    },
    props: {
      default: function _default3() {
        return {
          children: "children",
          disabled: "disabled",
          label: "label"
        };
      }
    },
    getMenuDataSync: Function,
    keepSelectedNodes: {
      type: Boolean,
      default: true
    },
    expandIcon: Object,
    shrinkIcon: Object,
    shrinkIconColor: {
      type: String,
      default: ""
    },
    expandIconColor: {
      type: String,
      default: ""
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
LinkMenu.install = function(Vue) {
  Vue.component(LinkMenu.name, LinkMenu);
};
LinkMenu.version = version;
export {
  LinkMenu as default
};
