function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { $prefix, $props, $setup } from "@opentiny/vue-common";
import MobileFirstTemplate from "./mobile-first.js";
var $constants = {};
var template = function template2() {
  return MobileFirstTemplate;
};
var CascaderSelect = {
  name: $prefix + "CascaderSelect",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    modelValue: {
      type: Array,
      default: function _default2() {
        return [];
      }
    },
    defaultValue: {
      type: Array,
      default: function _default3() {
        return [];
      }
    },
    options: {
      type: Array,
      default: function _default4() {
        return [];
      }
    },
    threeDimensional: {
      type: Boolean,
      default: false
    },
    swipeDuration: {
      type: [Number, String],
      default: 1e3
    },
    visibleOptionNum: {
      type: [Number, String],
      default: 5
    },
    optionHeight: {
      type: [Number, String],
      default: 36
    },
    fieldNames: {
      type: Object,
      default: function _default5() {
        return {
          text: "label",
          value: "id",
          children: "children"
        };
      }
    },
    visible: Boolean,
    valueType: {
      type: String,
      default: "number"
    },
    valueField: {
      type: String,
      default: "id"
    },
    textField: {
      type: String,
      default: "label"
    },
    childrenField: {
      type: String,
      default: "children"
    },
    disabled: Function,
    textColor: {
      type: Object,
      default: function _default6() {
        return {
          default: "",
          first: "",
          second: "",
          third: "",
          disabled: ""
        };
      }
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    customClass: [String, Object, Array],
    panelCustomClass: [String, Object, Array],
    type: {
      type: String,
      validator: function validator(value) {
        return ~["cascade", "single"].indexOf(value);
      },
      default: "single"
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
};
var version = "3.20.0";
CascaderSelect.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
CascaderSelect.install = function(Vue) {
  Vue.component(CascaderSelect.name, CascaderSelect);
};
CascaderSelect.version = version;
export {
  CascaderSelect as default
};
