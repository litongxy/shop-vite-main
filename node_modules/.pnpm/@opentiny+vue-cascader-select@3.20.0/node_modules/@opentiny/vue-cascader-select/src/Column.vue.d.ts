declare const _default: import("@vue/runtime-core").DefineComponent<{
    value: (StringConstructor | NumberConstructor)[];
    defaultValue: (StringConstructor | NumberConstructor)[];
    columnsType: StringConstructor;
    column: {
        type: ArrayConstructor;
        default: () => never[];
    };
    threeDimensional: {
        type: BooleanConstructor;
        default: boolean;
    };
    swipeDuration: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    visibleOptionNum: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    optionHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    fieldNames: {
        type: ObjectConstructor;
        default: () => {};
    };
    disabled: BooleanConstructor;
    visible: BooleanConstructor;
    textColor: {
        type: ObjectConstructor;
        default: () => {};
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
    m: (...cssClasses: any[]) => string;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("change" | "click")[], "change" | "click", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    value: (StringConstructor | NumberConstructor)[];
    defaultValue: (StringConstructor | NumberConstructor)[];
    columnsType: StringConstructor;
    column: {
        type: ArrayConstructor;
        default: () => never[];
    };
    threeDimensional: {
        type: BooleanConstructor;
        default: boolean;
    };
    swipeDuration: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    visibleOptionNum: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    optionHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    fieldNames: {
        type: ObjectConstructor;
        default: () => {};
    };
    disabled: BooleanConstructor;
    visible: BooleanConstructor;
    textColor: {
        type: ObjectConstructor;
        default: () => {};
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    tiny_mode_root: boolean;
    visible: boolean;
    optionHeight: string | number;
    column: unknown[];
    threeDimensional: boolean;
    swipeDuration: string | number;
    visibleOptionNum: string | number;
    fieldNames: Record<string, any>;
    textColor: Record<string, any>;
}, {}>;
export default _default;
