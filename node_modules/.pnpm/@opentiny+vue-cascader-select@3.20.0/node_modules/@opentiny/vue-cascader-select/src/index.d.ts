declare const _default: {
    name: string;
    props: {
        _constants: {
            type: ObjectConstructor;
            default: () => {};
        };
        modelValue: {
            type: ArrayConstructor;
            default: () => never[];
        };
        defaultValue: {
            type: ArrayConstructor;
            default: () => never[];
        };
        options: {
            type: ArrayConstructor;
            default: () => never[];
        };
        threeDimensional: {
            type: BooleanConstructor;
            default: boolean;
        };
        swipeDuration: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        visibleOptionNum: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        optionHeight: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        fieldNames: {
            type: ObjectConstructor;
            default: () => {
                text: string;
                value: string;
                children: string;
            };
        };
        visible: BooleanConstructor;
        valueType: {
            type: StringConstructor;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            default: string;
        };
        textField: {
            type: StringConstructor;
            default: string;
        };
        childrenField: {
            type: StringConstructor;
            default: string;
        };
        disabled: FunctionConstructor;
        textColor: {
            type: ObjectConstructor;
            default: () => {
                default: string;
                first: string;
                second: string;
                third: string;
                disabled: string;
            };
        };
        lockScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
        panelCustomClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
        type: {
            type: StringConstructor;
            validator: (value: any) => number;
            default: string;
        };
        tiny_mode: StringConstructor;
        tiny_mode_root: BooleanConstructor;
        tiny_template: (ObjectConstructor | FunctionConstructor)[];
        tiny_renderless: FunctionConstructor;
        tiny_theme: StringConstructor;
        tiny_chart_theme: ObjectConstructor;
    };
    setup(props: any, context: any): () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
        [key: string]: any;
    }>;
};
export default _default;
