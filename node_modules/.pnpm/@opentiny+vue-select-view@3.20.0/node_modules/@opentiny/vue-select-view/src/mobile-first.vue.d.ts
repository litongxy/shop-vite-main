declare const _default: import("@vue/runtime-core").DefineComponent<{
    menus: {
        type: ArrayConstructor;
        default: () => never[];
    };
    modelValue: (StringConstructor | ArrayConstructor | NumberConstructor)[];
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    textField: {
        type: StringConstructor;
        default: string;
    };
    textField2: {
        type: StringConstructor;
        default: string;
    };
    textField3: {
        type: StringConstructor;
        default: string;
    };
    title: StringConstructor;
    multiple: BooleanConstructor;
    searchConfig: {
        type: ObjectConstructor;
        default: () => {
            searchMethod: null;
        };
    };
    topConfig: {
        type: ObjectConstructor;
        default: () => {
            label: string;
            options: never[];
        };
    };
    requiredSelectedList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    textSplit: {
        type: StringConstructor;
        default: string;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    mask: {
        type: BooleanConstructor;
        default: boolean;
    };
    infiniteScroll: {
        type: ObjectConstructor;
        default: () => {
            load: null;
            delay: number;
            disabled: boolean;
            distance: number;
            immediate: boolean;
        };
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
    m: (...cssClasses: any[]) => string;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("click" | "close" | "update:modelValue" | "update:visible" | "confirm" | "update:text" | "search-click")[], "click" | "close" | "update:modelValue" | "update:visible" | "confirm" | "update:text" | "search-click", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    menus: {
        type: ArrayConstructor;
        default: () => never[];
    };
    modelValue: (StringConstructor | ArrayConstructor | NumberConstructor)[];
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    textField: {
        type: StringConstructor;
        default: string;
    };
    textField2: {
        type: StringConstructor;
        default: string;
    };
    textField3: {
        type: StringConstructor;
        default: string;
    };
    title: StringConstructor;
    multiple: BooleanConstructor;
    searchConfig: {
        type: ObjectConstructor;
        default: () => {
            searchMethod: null;
        };
    };
    topConfig: {
        type: ObjectConstructor;
        default: () => {
            label: string;
            options: never[];
        };
    };
    requiredSelectedList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    textSplit: {
        type: StringConstructor;
        default: string;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    mask: {
        type: BooleanConstructor;
        default: boolean;
    };
    infiniteScroll: {
        type: ObjectConstructor;
        default: () => {
            load: null;
            delay: number;
            disabled: boolean;
            distance: number;
            immediate: boolean;
        };
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onSearch-click"?: ((...args: any[]) => any) | undefined;
}, {
    mask: boolean;
    tiny_mode_root: boolean;
    textField: string;
    valueField: string;
    menus: unknown[];
    visible: boolean;
    showHeader: boolean;
    lockScroll: boolean;
    placeholder: string;
    multiple: boolean;
    searchConfig: Record<string, any>;
    textSplit: string;
    textField2: string;
    textField3: string;
    topConfig: Record<string, any>;
    requiredSelectedList: unknown[];
    infiniteScroll: Record<string, any>;
}, {}>;
export default _default;
