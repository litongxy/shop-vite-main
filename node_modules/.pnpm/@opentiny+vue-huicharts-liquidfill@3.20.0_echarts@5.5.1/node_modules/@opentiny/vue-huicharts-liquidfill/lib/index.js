import Core, { isObject, itemLabel, itemContent, getFormatted } from '@opentiny/vue-huicharts-core';
import 'echarts-liquidfill';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var isArr = Array.isArray;
var getTooltip = function getTooltip2(data2) {
  var tooltipFormatter = data2.tooltipFormatter, dataType = data2.dataType, digit = data2.digit;
  function formatter(options) {
    var seriesName = options.seriesName, value = options.value;
    if (!tooltipFormatter) {
      return ["" + itemLabel(seriesName), itemContent(getFormatted(value, dataType, digit))].join("");
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return tooltipFormatter.apply(void 0, [options].concat(args));
  }
  return formatter;
};
var getSeries = function getSeries2(args) {
  var dimension = args.dimension, metrics = args.metrics, rows = args.rows, seriesMap = args.seriesMap, wave = args.wave;
  var itemWave = wave;
  var len = isArr(seriesMap) ? seriesMap.length : 0;
  return rows.slice().map(function(item, index) {
    var _ref = {}, _ref$data = _ref.data, data2 = _ref$data === void 0 ? [] : _ref$data, _ref$result = _ref.result, result = _ref$result === void 0 ? {
      type: "liquidFill"
    } : _ref$result, _ref$name = _ref.name, name = _ref$name === void 0 ? item[dimension] : _ref$name;
    var _ref2 = {}, _ref2$val = _ref2.val, val = _ref2$val === void 0 ? Number(item[metrics]) : _ref2$val, _ref2$itemMap = _ref2.itemMap, itemMap = _ref2$itemMap === void 0 ? {} : _ref2$itemMap;
    if (isArr(seriesMap)) {
      itemMap = seriesMap[index] ? seriesMap[index] : seriesMap[len - 1];
    } else if (isObject(seriesMap[name])) {
      itemMap = seriesMap[name];
    }
    if (isArr(wave) && isArr(wave[0])) {
      itemWave = !isArr(wave[index]) ? wave[wave.length - 1] : wave[index];
    }
    data2.push({
      value: val
    });
    if (itemWave.length && itemWave) {
      data2 = data2.concat(itemWave.map(function(val2) {
        return {
          value: val2
        };
      }));
    }
    result.itemStyle = {
      shadowBlur: 0
    };
    result.label = {
      color: "#6D8FF0"
    };
    result.backgroundStyle = {
      color: "#F4F3F9"
    };
    result.outline = {
      itemStyle: {
        borderColor: "#6D8FF0",
        shadowBlur: 0
      }
    };
    !itemMap.color && (result.itemStyle = Object.assign(result.itemStyle, {
      color: "#6D8FF0"
    }));
    result = Object.assign(result, {
      data: data2,
      name
    }, itemMap);
    return result;
  });
};
var getIChartOption = function getIChartOption2(columns, rows, settings, extra) {
  var _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? columns[1] : _settings$metrics;
  var _settings$seriesMap = settings.seriesMap, seriesMap = _settings$seriesMap === void 0 ? {} : _settings$seriesMap, _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? "percent" : _settings$dataType, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, _settings$wave = settings.wave, wave = _settings$wave === void 0 ? [] : _settings$wave;
  var tooltipVisible = extra.tooltipVisible, tooltipFormatter = extra.tooltipFormatter;
  var tooltip = tooltipVisible && getTooltip({
    tooltipFormatter,
    dataType,
    digit
  });
  var series = getSeries({
    rows,
    columns,
    dimension,
    metrics,
    seriesMap,
    wave
  });
  var ichartOption = {
    tipHtml: tooltip,
    legend: {
      show: false
    },
    series
  };
  return ichartOption;
};
var _sfc_main = {
  name: $prefix + "ChartLiquidfill",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "LiquidfillChart"
    };
  },
  methods: {
    updateChart: function updateChart() {
      var _this$data = this.data, _this$data$columns = _this$data.columns, columns = _this$data$columns === void 0 ? [] : _this$data$columns, _this$data$rows = _this$data.rows, rows = _this$data$rows === void 0 ? [] : _this$data$rows;
      var extra = {
        legendVisible: this.legendVisible,
        tooltipVisible: this.tooltipVisible
      };
      this.huiChartOption = getIChartOption(columns, rows, this.settings, extra);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsLiquidfill = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsLiquidfill.install = function(Vue) {
  Vue.component(HuiChartsLiquidfill.name, HuiChartsLiquidfill);
};

export { HuiChartsLiquidfill, HuiChartsLiquidfill as default };
