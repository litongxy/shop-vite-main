import { defineComponent, $prefix, setup, $props } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/popup/vue';
import { iconClose } from '@opentiny/vue-icon';
import { resolveComponent, openBlock, createElementBlock, createVNode, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, renderSlot, createBlock, createCommentVNode, vShow } from 'vue';
import '@opentiny/vue-theme-mobile/popup/index.css';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var $constants = {
  OVERFLOWHIDDEN: "tiny-overflow-hidde"
};
var _sfc_main = defineComponent({
  name: $prefix + "Popup",
  emits: ["open", "close", "update:modelValue", "click-overlay", "closed", "opened", "click"],
  components: {
    IconClose: iconClose()
  },
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    closeIcon: {
      type: String,
      default: "cross"
    },
    closeIconPosition: {
      type: String,
      default: "top-right"
    },
    closeOnClickOverlay: {
      type: Boolean,
      default: true
    },
    closeable: {
      type: Boolean,
      default: true
    },
    duration: [Number, String],
    lazyRender: {
      type: Boolean,
      default: true
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    modelValue: Boolean,
    overlay: {
      type: Boolean,
      default: true
    },
    overlayClass: String,
    overlayStyle: Object,
    popupClass: String,
    popupStyle: Object,
    position: {
      type: String,
      default: "center"
    },
    round: Boolean,
    safeAreaInsetBottom: Boolean,
    transition: String,
    zIndex: [Number, String]
  }),
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  var _component_icon_close = resolveComponent("icon-close");
  return openBlock(), createElementBlock("div", null, [createVNode(Transition, {
    name: _ctx.state.transitionName,
    onAfterEnter: _ctx.opened,
    onAfterLeave: _ctx.closed,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          ref: "popup",
          class: normalizeClass(["tiny-popup", [_ctx.round ? "tiny-popup--round" : "", _ctx.position ? "tiny-popup--" + _ctx.position : "", _ctx.popupClass]]),
          style: normalizeStyle(_ctx.state.style),
          onClick: _cache[0] || (_cache[0] = function($event) {
            return _ctx.$emit("click");
          })
        },
        [renderSlot(_ctx.$slots, "default"), _ctx.closeable ? (openBlock(), createBlock(_component_icon_close, {
          key: 0,
          class: "tiny-popup__close-icon tiny-popup__close-icon--top-right",
          fill: "#c8c9cc",
          tabindex: "0",
          onClick: _ctx.close
        }, null, 8, ["onClick"])) : createCommentVNode("v-if", true)],
        6
        /* CLASS, STYLE */
      ), [[vShow, _ctx.modelValue]])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["name", "onAfterEnter", "onAfterLeave"]), createVNode(Transition, {
    name: "tiny-fade",
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          style: normalizeStyle(_ctx.state.overlayStyle),
          class: normalizeClass([_ctx.overlayClass, "tiny-overlay"]),
          onClick: _cache[1] || (_cache[1] = function() {
            return _ctx.clickOverlay && _ctx.clickOverlay.apply(_ctx, arguments);
          })
        },
        [renderSlot(_ctx.$slots, "overlay")],
        6
        /* CLASS, STYLE */
      ), [[vShow, _ctx.state.opened && _ctx.overlay]])];
    }),
    _: 3
    /* FORWARDED */
  })]);
}
var Popup = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
Popup.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Popup.install = function(Vue) {
  Vue.component(Popup.name, Popup);
};
Popup.version = version;

export { Popup as default };
