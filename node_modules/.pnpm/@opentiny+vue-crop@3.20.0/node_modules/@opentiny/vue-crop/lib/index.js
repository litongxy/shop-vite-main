import { defineComponent, $prefix, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/crop/vue';
import { iconConmentRefresh, iconNew, iconZoomIn, iconZoomOut, iconRepeat, iconRefres, iconClose, iconYes, iconCrop } from '@opentiny/vue-icon';
import Cropper from 'cropperjs';
import 'cropperjs/dist/cropper.css';
import { openBlock, createElementBlock, withDirectives, createElementVNode, Fragment, renderList, createBlock, resolveDynamicComponent, withModifiers, vShow } from 'vue';
import '@opentiny/vue-theme/crop/index.css';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "Crop",
  components: {
    IconConmentRefresh: iconConmentRefresh(),
    IconNew: iconNew(),
    IconZoomIn: iconZoomIn(),
    IconZoomOut: iconZoomOut(),
    IconRepeat: iconRepeat(),
    IconRefres: iconRefres(),
    IconClose: iconClose(),
    IconYes: iconYes(),
    IconCrop: iconCrop()
  },
  props: {
    /** 设置图片上的alt属性 */
    alt: {
      type: String,
      default: "image"
    },
    /** 裁剪框的宽高比，默认 16/9 */
    aspectRatio: {
      type: Number,
      default: 16 / 9
    },
    /** 初始化时，是否自动显示裁剪框，默认 true */
    autoCrop: {
      type: Boolean,
      default: true
    },
    /** 定义自动裁剪面积大小（百分比） 默认0.8 */
    autoCropArea: {
      type: Number,
      default: 0.8
    },
    /** 是否显示容器的网格背景 默认true */
    background: {
      type: Boolean,
      default: true
    },
    /** 裁剪框是否在图片正中心,并显示一个 + 号 默认false */
    center: {
      type: Boolean,
      default: false
    },
    /** 设置图片裁剪后返回的类型，可配置为 blob 和 base64  默认 base64 */
    cropType: {
      type: String,
      default: "base64"
    },
    /** 设置裁剪弹框是否可见 默认false */
    cropvisible: {
      type: Boolean,
      default: false
    },
    /** 定义 cropper 的拖拽模式，默认 crop ;'crop'： 可以产生一个新的裁剪框 3 。'move'：只可以移动图片 3 。'none'： 什么也不处理   */
    dragMode: {
      type: String,
      default: "crop"
    },
    /** 是否在裁剪框上方显示虚线 默认true */
    guides: {
      type: Boolean,
      default: true
    },
    /** 设置待裁剪图片的最大大小，默认为 1M */
    maxSize: {
      type: String,
      default: "1M"
    },
    /** 容器的最小高度 默认 300 */
    minContainerHeight: {
      type: Number,
      default: 300
    },
    /** 容器的最小宽度 默认 652 */
    minContainerWidth: {
      type: Number,
      default: 652
    },
    /** 裁剪层的最小高度  默认0 */
    minCropBoxHeight: {
      type: Number,
      default: 0
    },
    /** 裁剪层的最小宽度 默认0 */
    minCropBoxWidth: {
      type: Number,
      default: 0
    },
    /** 是否显示图片上方裁剪框下方的黑色模态 默认true */
    modal: {
      type: Boolean,
      default: true
    },
    /** 是否允许可以移动后面的图片 默认true */
    movable: {
      type: Boolean,
      default: true
    },
    plugin: {
      type: [Object, Function],
      default: function _default() {
        return Cropper;
      }
    },
    /** 设置图片裁剪后的压缩比例，值在 0-1 之间 默认0.92 */
    quality: {
      type: Number,
      default: 0.92,
      validator: function validator(value) {
        return value <= 1 && value > 0;
      }
    },
    /** 是否允许旋转图像;默认为 true */
    rotatable: {
      type: Boolean,
      default: true
    },
    /** 默认裁剪的源图片 */
    src: {
      type: String,
      default: ""
    },
    /** 定义 cropper 的视图模式,默认 0 ;0：没有限制，3 可以移动到 2 外。1：3 只能在 2 内移动。2：2 图片不全部铺满 1 （即缩小时可以有一边出现空隙）。3：2 图片填充整个 1 */
    viewMode: {
      type: Number,
      default: 0
    },
    /** 用鼠标移动图像时，定义缩放比例 默认 0.1 */
    wheelZoomRatio: {
      type: Number,
      default: 0.1
    },
    /** 是否可以通过滚动鼠标滚轮来缩放图像 默认true */
    zoomOnWheel: {
      type: Boolean,
      default: true
    },
    /** 是否允许放大图像 默认true */
    zoomable: {
      type: Boolean,
      default: true
    }
  },
  emits: ["update:cropvisible", "update:visible", "ready", "cropstart", "cropmove", "cropend", "crop", "cropdata"],
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "tiny-crop__wrapper"
};
var _hoisted_2 = {
  class: "tiny-crop"
};
var _hoisted_3 = {
  class: "tiny-crop__dialog"
};
var _hoisted_4 = {
  class: "tiny-crop__dialog-cropper"
};
var _hoisted_5 = ["src", "alt"];
var _hoisted_6 = {
  class: "tiny-crop__dialog-content__handle"
};
var _hoisted_7 = {
  class: "tiny-crop__dialog-content__handle__button"
};
var _hoisted_8 = ["title"];
var _hoisted_9 = {
  key: 1,
  class: "iconButton__split"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [withDirectives(createElementVNode(
    "div",
    _hoisted_2,
    [createElementVNode("div", _hoisted_3, [createElementVNode(
      "input",
      {
        ref: "cropInput",
        type: "file",
        name: "image",
        accept: "image/*",
        onChange: _cache[0] || (_cache[0] = function() {
          return _ctx.setImage && _ctx.setImage.apply(_ctx, arguments);
        })
      },
      null,
      544
      /* NEED_HYDRATION, NEED_PATCH */
    ), createElementVNode("div", _hoisted_4, [createElementVNode("img", {
      src: _ctx.state.src,
      ref: "cropImage",
      id: "crops",
      alt: _ctx.alt
    }, null, 8, _hoisted_5)]), createElementVNode("div", _hoisted_6, [createElementVNode("div", _hoisted_7, [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.renderIcon, function(item, index) {
        return openBlock(), createElementBlock("div", {
          class: "iconButton",
          key: index
        }, [!item.split ? (openBlock(), createElementBlock("div", {
          key: 0,
          title: item.title
        }, [(openBlock(), createBlock(resolveDynamicComponent(item.icon), {
          onClick: withModifiers(item.method, ["prevent"]),
          class: "iconButtonset"
        }, null, 8, ["onClick"]))], 8, _hoisted_8)) : (openBlock(), createElementBlock("div", _hoisted_9))]);
      }),
      128
      /* KEYED_FRAGMENT */
    ))])])])],
    512
    /* NEED_PATCH */
  ), [[vShow, _ctx.state.cropvisible]])]);
}
var Crop = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
Crop.install = function(Vue) {
  Vue.component(Crop.name, Crop);
};
Crop.version = version;

export { Crop as default };
