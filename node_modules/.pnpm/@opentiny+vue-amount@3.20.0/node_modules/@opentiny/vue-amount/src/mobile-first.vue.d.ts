declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    label?: any;
    disabled?: any;
    date?: any;
    negative?: any;
    rounding?: any;
    format?: any;
    type?: any;
    filter?: any;
    size?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    modelValue?: any;
    tabindex?: any;
    popperClass?: any;
    popperAppendToBody?: any;
    tip?: any;
    clearable?: any;
    displayOnly?: any;
    currency?: any;
    fetchCurrency?: any;
    fields?: any;
    placeholder?: any;
    shape?: any;
    blank?: any;
    digits?: any;
    modelTruncation?: any;
    dateAllowEmpty?: any;
    stringMode?: any;
    maxLen?: any;
    holdZero?: any;
    strictInput?: any;
    plugin?: any;
    popUp?: any;
    hideCurrency?: any;
    hideIcon?: any;
    numAllowEmpty?: any;
}>, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
    m: (...cssClasses: any[]) => string;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("change" | "clear" | "update:modelValue" | "update:currency" | "update:date" | "filter-change")[], "change" | "clear" | "update:modelValue" | "update:currency" | "update:date" | "filter-change", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    label?: any;
    disabled?: any;
    date?: any;
    negative?: any;
    rounding?: any;
    format?: any;
    type?: any;
    filter?: any;
    size?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    modelValue?: any;
    tabindex?: any;
    popperClass?: any;
    popperAppendToBody?: any;
    tip?: any;
    clearable?: any;
    displayOnly?: any;
    currency?: any;
    fetchCurrency?: any;
    fields?: any;
    placeholder?: any;
    shape?: any;
    blank?: any;
    digits?: any;
    modelTruncation?: any;
    dateAllowEmpty?: any;
    stringMode?: any;
    maxLen?: any;
    holdZero?: any;
    strictInput?: any;
    plugin?: any;
    popUp?: any;
    hideCurrency?: any;
    hideIcon?: any;
    numAllowEmpty?: any;
}>>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:currency"?: ((...args: any[]) => any) | undefined;
    "onUpdate:date"?: ((...args: any[]) => any) | undefined;
    "onFilter-change"?: ((...args: any[]) => any) | undefined;
}, {
    readonly label?: any;
    readonly disabled?: any;
    readonly date?: any;
    readonly negative?: any;
    readonly rounding?: any;
    readonly format?: any;
    readonly type?: any;
    readonly filter?: any;
    readonly size?: any;
    readonly tiny_mode?: any;
    readonly tiny_mode_root?: any;
    readonly tiny_template?: any;
    readonly tiny_renderless?: any;
    readonly _constants?: any;
    readonly tiny_theme?: any;
    readonly tiny_chart_theme?: any;
    readonly modelValue?: any;
    readonly tabindex?: any;
    readonly popperClass?: any;
    readonly popperAppendToBody?: any;
    readonly tip?: any;
    readonly clearable?: any;
    readonly displayOnly?: any;
    readonly currency?: any;
    readonly fetchCurrency?: any;
    readonly fields?: any;
    readonly placeholder?: any;
    readonly shape?: any;
    readonly blank?: any;
    readonly digits?: any;
    readonly modelTruncation?: any;
    readonly dateAllowEmpty?: any;
    readonly stringMode?: any;
    readonly maxLen?: any;
    readonly holdZero?: any;
    readonly strictInput?: any;
    readonly plugin?: any;
    readonly popUp?: any;
    readonly hideCurrency?: any;
    readonly hideIcon?: any;
    readonly numAllowEmpty?: any;
}, {}>;
export default _default;
