function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/amount/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  FILTER_OPTION: ["ui.amount.equalTo", "ui.amount.notEqualTo", "ui.amount.moreThan", "ui.amount.moreThanOrEqualTo", "ui.amount.lessThan", "ui.amount.lessThanOrEqualTo", "ui.amount.empty", "ui.amount.nonEmpty"]
};
var amountProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  modelValue: {
    type: [Number, String]
  },
  tabindex: {
    type: String,
    default: "1"
  },
  size: String,
  placeholder: {
    type: String,
    default: ""
  },
  currency: {
    type: String,
    default: "CNY"
  },
  date: [String, Date],
  dateAllowEmpty: {
    type: Boolean,
    default: false
  },
  digits: {
    type: Number,
    default: 2
  },
  stringMode: {
    type: Boolean,
    default: false
  },
  rounding: {
    type: Boolean,
    default: true
  },
  maxLen: {
    type: Number,
    default: 15
  },
  negative: {
    type: Boolean,
    default: true
  },
  disabled: {
    type: Boolean,
    default: false
  },
  fetchCurrency: Function,
  fields: Object,
  popperClass: String,
  popperAppendToBody: {
    type: Boolean,
    default: true
  },
  format: Object,
  type: {
    type: String,
    default: "amount"
  },
  holdZero: {
    type: Boolean,
    default: true
  },
  modelTruncation: {
    type: Boolean,
    default: true
  },
  strictInput: {
    type: Boolean,
    default: false
  },
  plugin: Function,
  popUp: {
    type: Boolean,
    default: true
  },
  hideCurrency: {
    type: Boolean,
    default: false
  },
  displayOnly: {
    type: Boolean,
    default: false
  },
  hideIcon: {
    type: Boolean,
    default: false
  },
  numAllowEmpty: {
    type: Boolean,
    default: false
  },
  label: {
    type: String,
    default: ""
  },
  tip: String,
  shape: String,
  clearable: {
    type: Boolean,
    default: false
  },
  filter: {
    type: Boolean,
    default: false
  },
  blank: {
    type: Boolean,
    default: false
  }
});
var Amount = defineComponent({
  name: $prefix + "Amount",
  componentName: "Amount",
  props: amountProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Amount.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Amount.install = function(Vue) {
  Vue.component(Amount.name, Amount);
};
Amount.version = version;
export {
  Amount as default
};
