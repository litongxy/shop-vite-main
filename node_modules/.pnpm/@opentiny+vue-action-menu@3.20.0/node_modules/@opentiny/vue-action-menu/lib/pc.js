import { defineComponent, $prefix, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/action-menu/vue';
import { iconEllipsis } from '@opentiny/vue-icon';
import '@opentiny/vue-theme/action-menu/index.css';
import Dropdown from '@opentiny/vue-dropdown';
import DropdownMenu from '@opentiny/vue-dropdown-menu';
import DropdownItem from '@opentiny/vue-dropdown-item';
import { resolveComponent, openBlock, createElementBlock, createElementVNode, normalizeClass, Fragment, renderList, createVNode, withCtx, renderSlot, normalizeStyle, createCommentVNode, createSlots, createBlock, resolveDynamicComponent } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "ActionMenu",
  components: {
    TinyDropdown: Dropdown,
    TinyDropdownMenu: DropdownMenu,
    TinyDropdownItem: DropdownItem,
    TinyIconEllipsis: iconEllipsis()
  },
  emits: ["more-click", "item-click", "visible-change"],
  props: {
    options: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    maxShowNum: Number,
    moreText: {
      type: String
    },
    spacing: {
      type: [String, Number]
    },
    textField: {
      type: String,
      default: "label"
    },
    popperClass: {
      type: String,
      default: ""
    },
    popperAppendToBody: {
      type: Boolean,
      default: false
    },
    trigger: {
      type: String,
      default: "hover"
    },
    suffixIcon: Object,
    showIcon: {
      type: Boolean,
      default: true
    },
    mode: {
      type: String,
      default: "default"
    }
  },
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-action-menu"
};
var _hoisted_2 = {
  key: 0,
  class: "tiny-action-menu__item"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_dropdown_item = resolveComponent("tiny-dropdown-item");
  var _component_tiny_dropdown_menu = resolveComponent("tiny-dropdown-menu");
  var _component_tiny_dropdown = resolveComponent("tiny-dropdown");
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "ul",
    {
      class: normalizeClass({
        "tiny-action-menu__wrap": true,
        "tiny-action-menu__card-mode": _ctx.state.isCardMode
      })
    },
    [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.visibleOptions, function(visibleItem, index) {
        return openBlock(), createElementBlock(
          "li",
          {
            key: index,
            class: normalizeClass(["tiny-action-menu__item", "tiny-action-menu__item-visible", {
              "is-disabled": visibleItem.disabled,
              "tiny-action-menu__card-item": _ctx.state.isCardMode
            }])
          },
          [createVNode(_component_tiny_dropdown_item, {
            "item-data": visibleItem,
            label: visibleItem[_ctx.textField],
            "text-field": _ctx.textField,
            disabled: visibleItem.disabled,
            icon: visibleItem.icon,
            onItemClick: _ctx.handleItemClick
          }, {
            default: withCtx(function(_ref) {
              var itemData = _ref.itemData;
              return [renderSlot(_ctx.$slots, "item", {
                data: itemData
              })];
            }),
            _: 2
            /* DYNAMIC */
          }, 1032, ["item-data", "label", "text-field", "disabled", "icon", "onItemClick"]), index !== _ctx.state.visibleOptions.length - 1 || _ctx.state.moreOptions.length ? (openBlock(), createElementBlock(
            "span",
            {
              key: 0,
              class: "tiny-action-menu__item-line",
              style: normalizeStyle({
                margin: "0 " + _ctx.state.spacing
              })
            },
            null,
            4
            /* STYLE */
          )) : createCommentVNode("v-if", true)],
          2
          /* CLASS */
        );
      }),
      128
      /* KEYED_FRAGMENT */
    )), _ctx.state.moreOptions.length ? (openBlock(), createElementBlock("li", _hoisted_2, [createVNode(_component_tiny_dropdown, {
      title: _ctx.state.moreText,
      trigger: _ctx.trigger,
      "show-icon": _ctx.showIcon,
      onItemClick: _ctx.handleItemClick,
      onHandleClick: _ctx.handleMoreClick,
      onVisibleChange: _ctx.visibleChange
    }, createSlots({
      dropdown: withCtx(function() {
        return [createVNode(_component_tiny_dropdown_menu, {
          "text-field": _ctx.textField,
          "popper-class": _ctx.popperClass
        }, {
          default: withCtx(function() {
            return [(openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.state.moreOptions, function(item, index) {
                return openBlock(), createBlock(_component_tiny_dropdown_item, {
                  key: index,
                  divided: item.divided,
                  "item-data": item,
                  label: item[_ctx.textField],
                  disabled: item.disabled
                }, {
                  default: withCtx(function(_ref2) {
                    var itemData = _ref2.itemData;
                    return [renderSlot(_ctx.$slots, "item", {
                      data: itemData
                    })];
                  }),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["divided", "item-data", "label", "disabled"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))];
          }),
          _: 3
          /* FORWARDED */
        }, 8, ["text-field", "popper-class"])];
      }),
      _: 2
      /* DYNAMIC */
    }, [_ctx.state.suffixIcon ? {
      name: "suffix-icon",
      fn: withCtx(function() {
        return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.state.suffixIcon)))];
      }),
      key: "0"
    } : void 0]), 1032, ["title", "trigger", "show-icon", "onItemClick", "onHandleClick", "onVisibleChange"])])) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  )]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
