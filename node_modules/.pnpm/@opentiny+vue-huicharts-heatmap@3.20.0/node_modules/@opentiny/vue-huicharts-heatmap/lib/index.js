import Core, { getMapJSON, HEAT_MAP_COLOR, itemContent, itemPoint, itemLabel, getFormatted } from '@opentiny/vue-huicharts-core';
import * as echarts from 'echarts';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getAxisList = function getAxisList2(rows, label) {
  var result = [];
  rows.forEach(function(row) {
    return !result.includes(row[label]) && result.push(row[label]);
  });
  return result;
};
var getData = function getData2(args) {
  var extraMetrics = args.extraMetrics, innerXAxisList = args.innerXAxisList, innerYAxisList = args.innerYAxisList, metrics = args.metrics, rows = args.rows, type = args.type, xDim = args.xDim, yDim = args.yDim;
  var result = null;
  if (type !== "cartesian") {
    result = rows.map(function(row) {
      return [row[xDim], row[yDim], metrics ? row[metrics] : 1];
    });
  } else {
    result = rows.map(function(row) {
      innerYAxisList.indexOf(row[yDim]);
      innerXAxisList.indexOf(row[xDim]);
      extraMetrics.map(function(m) {
        return row[m] || "-";
      });
      metrics ? row[metrics] : 1;
      return {
        xDim: row[xDim],
        yDim: row[yDim],
        metrics: row[metrics]
      };
    });
  }
  return result;
};
var getAxis = function getAxis2(list, name, type) {
  return {
    data: list,
    name,
    nameLocation: "end",
    type: "category",
    splitArea: {
      show: false
    },
    splitLine: {
      show: true,
      lineStyle: {
        color: "#6d8ff0"
      }
    },
    axisLabel: {
      show: true,
      color: "#4E4E4E"
    },
    position: type === "y" ? 25 : 5,
    zlevel: 1
  };
};
var getVisualMap = function getVisualMap2(args) {
  var min = args.innerMin, max = args.innerMax, type = args.type, heatColor = args.heatColor, series = args.series;
  var _ref = {}, extra = _ref.extra;
  if (type === "map") {
    extra = {};
    !series[0].data.length && (extra.show = false);
  } else if (type === "bmap" || type === "amap") {
    extra = {
      show: false
    };
  } else {
    extra = {
      dimension: 2
    };
  }
  var defaultColor = type === "map" || type === "bmap" || type === "amap" ? HEAT_MAP_COLOR : ["#fff", "#6D8FF0"];
  return Object.assign(extra, {
    min,
    max,
    calculable: true,
    left: "right",
    bottom: "center",
    height: 140,
    position: {
      left: "right",
      bottom: "center"
    },
    orient: "vertical",
    align: "left",
    inverse: true,
    inRange: {
      color: heatColor || defaultColor
    }
  });
};
var getSeries = function getSeries2(args) {
  var series = {
    type: "heatmap",
    data: args.chartData
  };
  return [series];
};
var getTooltip = function getTooltip2(args) {
  var dataType = args.dataType, innerXAxisList = args.innerXAxisList, innerYAxisList = args.innerYAxisList, digit = args.digit; args.extraMetrics; var metrics = args.metrics;
  function formatter(_ref2) {
    var data = _ref2.data, color = _ref2.color;
    var xDim = data[0];
    var yDim = data[1];
    var value = data[2];
    var tplt = [itemContent(innerXAxisList[xDim] + " ~ " + innerYAxisList[yDim]) + "<br>"];
    tplt.push("" + itemPoint(color) + itemLabel(metrics) + itemContent(getFormatted(value, dataType, digit)) + "<br>");
    return tplt.join("");
  }
  return {
    trigger: "item",
    formatter
  };
};
var fixParam = function fixParam2(_ref3) {
  var type = _ref3.type, rows = _ref3.rows, dimension = _ref3.dimension, metrics = _ref3.metrics, extraMetrics = _ref3.extraMetrics, chartData = _ref3.chartData, innerXAxisList = _ref3.innerXAxisList, innerYAxisList = _ref3.innerYAxisList;
  var chartDataParams;
  if (type !== "cartesian") {
    chartDataParams = {
      rows,
      xDim: dimension[0],
      yDim: dimension[1]
    };
    Object.assign(chartDataParams, {
      metrics,
      type,
      extraMetrics
    });
    chartData = getData(chartDataParams);
  } else {
    var flag = !innerXAxisList || !innerXAxisList.length;
    flag && (innerXAxisList = getAxisList(rows, dimension[0]));
    flag = !innerYAxisList || !innerYAxisList.length;
    flag && (innerYAxisList = getAxisList(rows, dimension[1]));
    chartDataParams = {
      xDim: dimension[0],
      yDim: dimension[1],
      rows
    };
    Object.assign(chartDataParams, {
      innerXAxisList,
      innerYAxisList,
      metrics,
      type,
      extraMetrics
    });
    chartData = getData(chartDataParams);
  }
  return {
    chartData,
    innerXAxisList,
    innerYAxisList
  };
};
var getResult = function getResult2(args) {
  var type = args.type, options = args.options, pointSize = args.pointSize, blurSize = args.blurSize, res = args.res; args.key; args.v; args.url; args.bmap; var mapOrigin = args.mapOrigin, geo = args.geo, beforeRegisterMap = args.beforeRegisterMap, visualMap = args.visualMap;
  var _args$echarts = args.echarts, echarts$1 = _args$echarts === void 0 ? echarts : _args$echarts, specialAreas = args.specialAreas, position = args.position, positionJsonLink = args.positionJsonLink, beforeRegisterMapOnce = args.beforeRegisterMapOnce;
  var mapURLProfix = args.mapURLProfix; args.amap; var tooltip = args.tooltip, xAxis = args.xAxis, yAxis = args.yAxis;
  if (type === "bmap" || type === "amap") {
    Object.assign(options.series[0], {
      coordinateSystem: type,
      pointSize,
      blurSize
    });
    res = _extends({}, args);
  } else if (type === "map") {
    options.series[0].coordinateSystem = "geo";
    var jsonStr = JSON.stringify(mapOrigin);
    if (jsonStr) {
      var geoAttr = _extends({
        map: jsonStr
      }, geo);
      beforeRegisterMap && (jsonStr = beforeRegisterMap(mapOrigin));
      echarts$1.registerMap(jsonStr, {
        geoJSON: mapOrigin
      }, specialAreas);
      res = _extends({
        geo: geoAttr
      }, options);
    } else {
      var params = {
        position,
        positionJsonLink,
        beforeRegisterMapOnce,
        mapURLProfix
      };
      res = getMapJSON(params).then(function(json) {
        var geoAttr2 = _extends({
          map: position
        }, geo);
        beforeRegisterMap && (json = beforeRegisterMap(json));
        echarts$1.registerMap(position, {
          geoJSON: json
        }, specialAreas);
        return _extends({
          geo: geoAttr2
        }, options, {
          handle: visualMap
        });
      });
    }
  } else {
    res = _extends({
      tooltip,
      xAxis,
      yAxis
    }, options, {
      handle: visualMap
    });
  }
  return res;
};
var heatmap = function heatmap2(columns, rows, settings, extra) {
  var _settings$type = settings.type, type = _settings$type === void 0 ? "cartesian" : _settings$type;
  var _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? [columns[0], columns[1]] : _settings$dimension;
  var _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? "normal" : _settings$dataType, min = settings.min, max = settings.max, digit = settings.digit, bmap = settings.bmap, amap = settings.amap, geo = settings.geo, key = settings.key, _settings$v = settings.v, v = _settings$v === void 0 ? "2.0" : _settings$v, url = settings.url;
  var position = settings.position, mapOrigin = settings.mapOrigin, positionJsonLink = settings.positionJsonLink, beforeRegisterMap = settings.beforeRegisterMap, _settings$pointSize = settings.pointSize, pointSize = _settings$pointSize === void 0 ? 10 : _settings$pointSize, _settings$blurSize = settings.blurSize, blurSize = _settings$blurSize === void 0 ? 5 : _settings$blurSize;
  var heatColor = settings.heatColor, yAxisName = settings.yAxisName, xAxisName = settings.xAxisName, beforeRegisterMapOnce = settings.beforeRegisterMapOnce, _settings$specialArea = settings.specialAreas, specialAreas = _settings$specialArea === void 0 ? {} : _settings$specialArea;
  var _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? columns[2] : _settings$metrics, _settings$mapURLProfi = settings.mapURLProfix, mapURLProfix = _settings$mapURLProfi === void 0 ? "https://unpkg.com/echarts@3.6.2/map/json/" : _settings$mapURLProfi;
  var tooltipVisible = extra.tooltipVisible, echarts2 = extra.echartsLib;
  var innerXAxisList = settings.xAxisList, innerYAxisList = settings.yAxisList;
  var _ref4 = {}, _ref4$chartData = _ref4.chartData, chartData = _ref4$chartData === void 0 ? [] : _ref4$chartData, _ref4$extraMetrics = _ref4.extraMetrics, extraMetrics = _ref4$extraMetrics === void 0 ? [] : _ref4$extraMetrics, _ref4$mainColumn = _ref4.mainColumn, mainColumn = _ref4$mainColumn === void 0 ? dimension.concat([metrics]) : _ref4$mainColumn;
  columns.forEach(function(column) {
    return !~mainColumn.indexOf(column) && extraMetrics.push(column);
  });
  var ret = fixParam({
    type,
    rows,
    dimension,
    metrics,
    extraMetrics,
    chartData,
    innerXAxisList,
    innerYAxisList
  });
  chartData = ret.chartData;
  innerXAxisList = ret.innerXAxisList;
  innerYAxisList = ret.innerYAxisList;
  var metricsList = metrics ? rows.map(function(row) {
    return row[metrics];
  }) : [0, 5];
  !metricsList.length && (metricsList = [0]);
  var innerMin = min || Math.min.apply(null, metricsList);
  var innerMax = max || Math.max.apply(null, metricsList);
  var xAxis = getAxis(innerXAxisList, xAxisName, "x");
  var yAxis = getAxis(innerYAxisList, yAxisName, "y");
  var series = getSeries({
    chartData,
    type
  });
  var visualMap = getVisualMap({
    innerMin,
    innerMax,
    type,
    heatColor,
    series
  });
  var tooltipParams = {
    dataType,
    innerXAxisList,
    innerYAxisList,
    digit,
    extraMetrics,
    metrics
  };
  var tooltip = tooltipVisible ? getTooltip(tooltipParams) : {
    show: false
  };
  var options = {
    visualMap,
    series
  };
  var res;
  var args = {
    type,
    visualMap,
    series,
    options,
    pointSize,
    blurSize,
    key,
    v,
    url,
    bmap,
    mapOrigin,
    geo,
    beforeRegisterMap
  };
  Object.assign(args, {
    echarts: echarts2,
    specialAreas,
    position,
    positionJsonLink,
    beforeRegisterMapOnce
  });
  Object.assign(args, {
    mapURLProfix,
    amap,
    tooltip
  });
  if (type === "cartesian") {
    Object.assign(args, {
      xAxis,
      yAxis
    });
  }
  res = getResult(args);
  res.data = chartData;
  if (type === "cartesian") {
    res.type = "CalendarHeatMapHuiCharts";
  }
  return res;
};
var _sfc_main = {
  name: $prefix + "ChartHeatmap",
  mixins: [Core],
  computed: {
    iChartName: function iChartName() {
      var type = this.settings.type;
      var mapChartList = {
        bmap: "BaiduMapChart",
        amap: "AutonaviMapChart",
        map: "RegionChart"
      };
      return (type || "").includes("map") ? mapChartList[type] : "HeatMapChart";
    }
  },
  methods: {
    updateChart: function updateChart(data) {
      var _data$columns = data.columns, columns = _data$columns === void 0 ? [] : _data$columns, _data$rows = data.rows, rows = _data$rows === void 0 ? [] : _data$rows;
      var extra = {
        tooltipVisible: this.tooltipVisible,
        legendVisible: this.legendVisible,
        extend: this.extend,
        echartsLib: this.integrateChart.echartIns
      };
      var option = heatmap(columns, rows, this.settings, extra);
      this.huiChartOption = _extends({}, option);
    },
    handleMousewheel: function handleMousewheel(e) {
      e = e || window.event;
      if (e.stopPropagation) {
        e.stopPropagation();
      } else {
        e.cancelBubble = true;
      }
      if (e.preventDefault) {
        e.preventDefault();
      } else {
        e.returnValue = false;
      }
      if (e.wheelDelta > 0) {
        this.zoom += 1;
        if (this.zoom > 19) {
          this.zoom = 19;
        }
      }
      if (e.wheelDelta < 0) {
        e.cancelBubble = true;
        this.zoom -= 1;
        if (this.zoom < 4) {
          this.zoom = 4;
        }
      }
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      }),
      onMousewheel: _cache[0] || (_cache[0] = function() {
        return $options.handleMousewheel && $options.handleMousewheel.apply($options, arguments);
      })
    },
    null,
    36
    /* STYLE, NEED_HYDRATION */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsHeatmap = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsHeatmap.install = function(Vue) {
  Vue.component(HuiChartsHeatmap.name, HuiChartsHeatmap);
};

export { HuiChartsHeatmap, HuiChartsHeatmap as default };
