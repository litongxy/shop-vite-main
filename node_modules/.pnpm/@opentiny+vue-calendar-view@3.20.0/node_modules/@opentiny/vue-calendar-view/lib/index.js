function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/calendar-view/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  DAY_START_TIME: "00:00:00",
  DAY_END_TIME: "23:59:59",
  DAY_START_HOUR: 8,
  DAY_END_HOUR: 18,
  CELL_HEIGHT: 20,
  WEDNESDAY: 3
};
var calendarViewProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  modelValue: {},
  showMark: {},
  showNewSchedule: {},
  setDayBgColor: {},
  disabled: {},
  mode: {
    type: String,
    default: "month",
    validator: function validator(value) {
      return ~["month", "timeline", "schedule"].indexOf(value);
    }
  },
  modes: {
    type: Array,
    default: function _default2() {
      return ["month", "timeline", "schedule"];
    }
  },
  year: {
    type: Number,
    default: function _default3() {
      return (/* @__PURE__ */ new Date()).getFullYear();
    }
  },
  month: {
    type: Number,
    default: function _default4() {
      return (/* @__PURE__ */ new Date()).getMonth() + 1;
    }
  },
  dayTimes: {
    type: Array,
    default: function _default5() {
      return [8, 18];
    },
    validator: function validator2(value) {
      return value.length === 2 && value[0] >= 0 && value[1] <= 23 && Number.isInteger(value[0]) && Number.isInteger(value[1]);
    }
  },
  events: {
    type: Array,
    default: function _default6() {
      return [];
    }
  },
  height: {
    type: [String, Number],
    default: ""
  },
  markColor: {
    type: String,
    default: "blue"
  },
  multiSelect: {
    type: Boolean,
    default: false
  }
});
var CalendarView = defineComponent({
  name: $prefix + "CalendarView",
  props: calendarViewProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
CalendarView.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
CalendarView.install = function(Vue) {
  Vue.component(CalendarView.name, CalendarView);
};
CalendarView.version = version;
export {
  CalendarView as default
};
