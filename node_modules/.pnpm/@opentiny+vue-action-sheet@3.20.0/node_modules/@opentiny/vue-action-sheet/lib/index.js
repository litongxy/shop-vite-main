function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return MobileTemplate;
};
var actionSheetProps = _extends({}, $props, {
  menus: {
    type: Array,
    default: function _default() {
      return [];
    }
  },
  modelValue: [Number, String, Array],
  beforeClose: Function,
  visible: {
    type: Boolean,
    default: false
  },
  ellipsis: {
    type: Boolean,
    default: false
  },
  height: {
    type: String,
    default: "100%"
  },
  valueField: {
    type: String,
    default: "id"
  },
  textField: {
    type: String,
    default: "label"
  },
  title: String,
  showHeader: {
    type: Boolean,
    default: true
  },
  showFooter: {
    type: Boolean,
    default: false
  },
  showClose: {
    type: Boolean,
    default: function _default2() {
      return true;
    }
  },
  fullscreen: {
    type: Boolean,
    default: function _default3() {
      return false;
    }
  },
  customClass: [String, Object, Array],
  contentClass: String,
  type: {
    type: String,
    default: "normal"
  },
  mask: {
    type: Boolean,
    default: true
  },
  maskClosable: {
    type: Boolean,
    default: true
  },
  lockScroll: {
    type: Boolean,
    default: true
  },
  flex: {
    type: Boolean,
    default: true
  },
  contentPosition: {
    type: Boolean,
    default: false
  },
  contentStyle: {
    type: Object,
    default: function _default4() {
      return {};
    }
  }
});
var ActionSheet = defineComponent({
  name: $prefix + "ActionSheet",
  props: actionSheetProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
ActionSheet.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
ActionSheet.install = function(Vue) {
  Vue.component(ActionSheet.name, ActionSheet);
};
ActionSheet.version = version;
export {
  ActionSheet as default
};
