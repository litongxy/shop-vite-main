import { createVNode, withDirectives, resolveDirective } from "vue";
import { defineComponent, $prefix, props, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/anchor/vue";
import { AutoTip } from "@opentiny/vue-directive";
var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "Anchor",
  directives: {
    AutoTip
  },
  props: [].concat(props, ["isAffix", "links", "containerId", "markClass", "type"]),
  emits: ["linkClick", "change"],
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  },
  render: function render() {
    var isAffix = this.isAffix, links = this.links, linkClick = this.linkClick, currentLink = this.state.currentLink, type = this.type;
    var _renderLinks = function renderLinks(links2) {
      return Array.isArray(links2) ? links2.map(function(item) {
        return createVNode("div", {
          "data-tag": "tiny-anchor-link",
          "class": [type === "line" && "ml-4 cursor-pointer leading-9", type === "dot" && "relative pl-2.5"],
          "key": item.key
        }, [withDirectives(createVNode("a", {
          "data-tag": "tiny-anchor-link-title",
          "href": item.link,
          "class": ["whitespace-nowrap", type === "line" && "block max-w-full overflow-hidden text-ellipsis text-color-text-primary hover:text-color-brand", type === "dot" && "before:content-[''] before:block before:w-2 before:h-2 before:absolute after:content-[''] after:w-px after:block after:absolute", currentLink === item.link && "text-color-brand"],
          "onClick": function onClick(e) {
            return linkClick(e, item);
          },
          "ref": item.link
        }, [item.title]), [[resolveDirective("auto-tip")]]), item.children ? _renderLinks(item.children) : null]);
      }) : null;
    };
    var renderMask = createVNode("div", {
      "data-tag": "tiny-anchor-link-mask",
      "class": "absolute rounded-r-xl max-w-0 left-0.5 w-full",
      "ref": "maskRef"
    }, null);
    var renderOrbit = createVNode("div", {
      "data-tag": "tiny-anchor-orbit",
      "class": "absolute left-0 -top-0 bottom-0 w-1 rounded bg-color-border"
    }, [createVNode("div", {
      "data-tag": "tiny-anchor-orbit-skid",
      "class": "absolute left-0 w-1 bg-color-brand rounded",
      "ref": "skidRef"
    }, null)]);
    return createVNode("div", {
      "data-tag": "tiny-anchor__wrapper",
      "class": [isAffix ? "fixed z-10" : "", type === "line" && "", type === "dot" && "w-50"],
      "ref": "anchorWrapRef"
    }, [createVNode("div", {
      "data-tag": "tiny-anchor",
      "class": [type === "line" && "w-50 relative text-color-text-primary text-sm", type === "dot" && "px-4"],
      "ref": "anchorRef"
    }, [type === "line" && renderMask, type === "line" && renderOrbit, links && _renderLinks(links)])]);
  }
});
export {
  _sfc_main as default
};
