function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/collapse/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  COMPONENT_NAME: {
    Collapse: "Collapse"
  },
  EVENT_NAME: {
    CollapseItemClick: "collapse-item.click"
  }
};
var collapseProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  accordion: Boolean,
  beforeClose: Function,
  modelValue: {
    type: [Array, String, Number],
    default: function _default2() {
      return [];
    }
  }
});
var Collapse = defineComponent({
  name: $prefix + "Collapse",
  componentName: "Collapse",
  props: collapseProps,
  provide: function provide() {
    return {
      collapse: this
    };
  },
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Collapse.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Collapse.install = function(Vue) {
  Vue.component(Collapse.name, Collapse);
};
Collapse.version = version;
export {
  Collapse as default
};
