import { renderless, api } from '@opentiny/vue-renderless/virtual-tree/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import VirtualScrollBox from '@opentiny/vue-virtual-scroll-box';
import Tree from '@opentiny/vue-tree';
import { resolveComponent, openBlock, createBlock, mergeProps, withCtx, createVNode, toHandlers, createSlots, renderSlot, normalizeProps, guardReactiveProps } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  inheritAttrs: false,
  props: [].concat(props, ["width", "height", "rowHeight", "scrollbarSize", "treeOp"]),
  components: {
    TinyVirtualScrollBox: VirtualScrollBox,
    TinyTree: Tree
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_tree = resolveComponent("tiny-tree");
  var _component_tiny_virtual_scroll_box = resolveComponent("tiny-virtual-scroll-box");
  return openBlock(), createBlock(_component_tiny_virtual_scroll_box, mergeProps({
    ref: "vsBox",
    class: "tiny-virtual-tree"
  }, _ctx.state.vsBoxOptions, {
    onChange: _ctx.onVsBoxChange
  }), {
    default: withCtx(function() {
      return [createVNode(_component_tiny_tree, mergeProps({
        ref: "tree"
      }, _ctx.state.treeOptions, toHandlers(_ctx.state.treeEvents), {
        style: _ctx.state.treeStyle,
        onNodeExpand: _ctx.onTreeChange,
        onNodeCollapse: _ctx.onTreeChange
      }), createSlots({
        _: 2
        /* DYNAMIC */
      }, [_ctx.slots.empty ? {
        name: "empty",
        fn: withCtx(function(params) {
          return [renderSlot(_ctx.$slots, "empty", normalizeProps(guardReactiveProps(params)))];
        }),
        key: "0"
      } : void 0, _ctx.slots.default ? {
        name: "default",
        fn: withCtx(function(params) {
          return [renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(params)))];
        }),
        key: "1"
      } : void 0, _ctx.slots.prefix ? {
        name: "prefix",
        fn: withCtx(function(params) {
          return [renderSlot(_ctx.$slots, "prefix", normalizeProps(guardReactiveProps(params)))];
        }),
        key: "2"
      } : void 0, _ctx.slots.suffix ? {
        name: "suffix",
        fn: withCtx(function(params) {
          return [renderSlot(_ctx.$slots, "suffix", normalizeProps(guardReactiveProps(params)))];
        }),
        key: "3"
      } : void 0, _ctx.slots.operation ? {
        name: "operation",
        fn: withCtx(function(params) {
          return [renderSlot(_ctx.$slots, "operation", normalizeProps(guardReactiveProps(params)))];
        }),
        key: "4"
      } : void 0]), 1040, ["style", "onNodeExpand", "onNodeCollapse"])];
    }),
    _: 3
    /* FORWARDED */
  }, 16, ["onChange"]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
