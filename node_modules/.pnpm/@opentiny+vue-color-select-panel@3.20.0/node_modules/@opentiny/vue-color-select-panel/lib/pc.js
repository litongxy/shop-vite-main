import Button from '@opentiny/vue-button';
import Input from '@opentiny/vue-input';
import { renderless as renderless$3, api as api$3 } from '@opentiny/vue-renderless/color-select-panel/vue';
import { defineComponent, setup, props, directive } from '@opentiny/vue-common';
import { renderless as renderless$1, api as api$1 } from '@opentiny/vue-renderless/color-select-panel/hue-select/vue';
import { api, renderless } from '@opentiny/vue-renderless/color-select-panel/sv-select/vue';
import { openBlock, createElementBlock, normalizeStyle, createElementVNode, resolveComponent, createVNode, resolveDirective, withDirectives, withModifiers, createBlock, createCommentVNode, withCtx, Fragment, renderList, createTextVNode, toDisplayString } from 'vue';
import { renderless as renderless$2, api as api$2 } from '@opentiny/vue-renderless/color-select-panel/alpha-select/vue';
import '@opentiny/vue-theme/color-select-panel/index.css';
import Clickoutside from '@opentiny/vue-renderless/common/deps/clickoutside';
import Collapse from '@opentiny/vue-collapse';
import CollapseItem from '@opentiny/vue-collapse-item';
import Select from '@opentiny/vue-select';
import Option from '@opentiny/vue-option';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main$3 = defineComponent({
  emit: ["ready", "svUpdate"],
  props: {
    color: {
      type: Object
    }
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      api,
      renderless,
      context,
      mono: true
    });
  }
});
var _hoisted_1$2 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    class: "white"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_2$2 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    class: "black"
  },
  null,
  -1
  /* HOISTED */
);
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: "tiny-color-select-panel__inner__color-select",
      ref: "wrapper",
      style: normalizeStyle({
        background: _ctx.state.bg
      })
    },
    [_hoisted_1$2, _hoisted_2$2, createElementVNode(
      "div",
      {
        class: "cursor",
        ref: "cursor",
        style: normalizeStyle({
          top: _ctx.state.cursorTop + "px",
          left: _ctx.state.cursorLeft + "px",
          transform: "translate(-50%, -50%)"
        })
      },
      null,
      4
      /* STYLE */
    )],
    4
    /* STYLE */
  );
}
var SvSelect = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$3]]);
var _sfc_main$2 = defineComponent({
  emits: ["hueUpdate", "svReady", "hueReady"],
  props: {
    color: {
      type: Object
    },
    alpha: {
      type: Boolean
    }
  },
  components: {
    SvSelect
  },
  setup: function setup2(props2, context) {
    return setup({
      props: props2,
      context,
      renderless: renderless$1,
      api: api$1,
      mono: true
    });
  }
});
var _hoisted_1$1 = {
  class: "tiny-color-select-panel__inner"
};
var _hoisted_2$1 = {
  class: "tiny-color-select-panel__inner__hue-select",
  ref: "bar"
};
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_sv_select = resolveComponent("sv-select");
  return openBlock(), createElementBlock("div", _hoisted_1$1, [createVNode(_component_sv_select, {
    color: _ctx.color,
    onReady: _ctx.onSvReady
  }, null, 8, ["color", "onReady"]), createElementVNode(
    "div",
    _hoisted_2$1,
    [createElementVNode(
      "div",
      {
        ref: "thumb",
        style: normalizeStyle({
          top: _ctx.state.thumbTop + "px",
          transform: "translateY(-50%)"
        })
      },
      null,
      4
      /* STYLE */
    )],
    512
    /* NEED_PATCH */
  )]);
}
var HueSelect = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2]]);
var _sfc_main$1 = defineComponent({
  emits: ["ready"],
  props: {
    color: {
      type: Object
    }
  },
  setup: function setup3(props2, context) {
    return setup({
      props: props2,
      context,
      renderless: renderless$2,
      api: api$2,
      mono: true
    });
  }
});
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: "tiny-color-select-panel__alpha",
      ref: "alphaWrapper",
      onClick: _cache[0] || (_cache[0] = function() {
        return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
      })
    },
    [createElementVNode(
      "div",
      {
        class: "tiny-color-select-panel__alpha__slider",
        style: normalizeStyle({
          background: _ctx.state.background
        }),
        ref: "slider"
      },
      null,
      4
      /* STYLE */
    ), createElementVNode(
      "div",
      {
        class: "tiny-color-select-panel__alpha__thumb",
        style: normalizeStyle({
          top: 0,
          left: _ctx.state.left + "px",
          transform: "translateX(-50%)"
        }),
        ref: "alphaThumb"
      },
      null,
      4
      /* STYLE */
    )],
    512
    /* NEED_PATCH */
  );
}
var AlphaSelect = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
var _sfc_main = defineComponent({
  emits: ["update:modelValue", "cancel", "confirm", "color-update"],
  props: [].concat(props, ["modelValue", "visible", "alpha", "history", "predefine", "format", "enableHistory", "enablePredefineColor"]),
  components: {
    HueSelect,
    AlphaSelect,
    TinyButton: Button,
    TinyInput: Input,
    TinyCollapse: Collapse,
    TinyCollapseItem: CollapseItem,
    TinySelect: Select,
    TinyOption: Option
  },
  directives: directive({
    Clickoutside
  }),
  setup: function setup4(props2, context) {
    return setup({
      props: props2,
      context,
      renderless: renderless$3,
      api: api$3
    });
  }
});
var _hoisted_1 = {
  class: "tiny-color-select-panel__tools"
};
var _hoisted_2 = {
  key: 0,
  class: "tiny-color-select-panel__tools__format-select"
};
var _hoisted_3 = {
  class: "tiny-color-select-panel__tools-btns"
};
var _hoisted_4 = {
  key: 0,
  class: "tiny-color-select-panel__history"
};
var _hoisted_5 = ["onClick"];
var _hoisted_6 = {
  key: 1
};
var _hoisted_7 = {
  key: 0,
  class: "tiny-color-select-panel__predefine"
};
var _hoisted_8 = ["onClick"];
var _hoisted_9 = {
  key: 1
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_hue_select = resolveComponent("hue-select");
  var _component_alpha_select = resolveComponent("alpha-select");
  var _component_tiny_option = resolveComponent("tiny-option");
  var _component_tiny_select = resolveComponent("tiny-select");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_collapse_item = resolveComponent("tiny-collapse-item");
  var _component_tiny_collapse = resolveComponent("tiny-collapse");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return _ctx.state.showPicker ? withDirectives((openBlock(), createElementBlock("div", {
    key: 0,
    class: "tiny-color-select-panel",
    onClick: _cache[2] || (_cache[2] = withModifiers(function() {
    }, ["stop"]))
  }, [createVNode(_component_hue_select, {
    color: _ctx.state.color,
    onHueReady: _ctx.onHueReady,
    onSvReady: _ctx.onSvReady
  }, null, 8, ["color", "onHueReady", "onSvReady"]), _ctx.alpha ? (openBlock(), createBlock(_component_alpha_select, {
    key: 0,
    color: _ctx.state.color,
    onReady: _ctx.onAlphaReady
  }, null, 8, ["color", "onReady"])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_1, [_ctx.state.formats.length ? (openBlock(), createElementBlock("div", _hoisted_2, [createVNode(_component_tiny_select, {
    modelValue: _ctx.state.currentFormat,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.currentFormat = $event;
    })
  }, {
    default: withCtx(function() {
      return [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.state.formats, function(formatValue) {
          return openBlock(), createBlock(_component_tiny_option, {
            key: formatValue,
            value: formatValue,
            label: formatValue
          }, null, 8, ["value", "label"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))];
    }),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"])])) : createCommentVNode("v-if", true), createVNode(_component_tiny_input, {
    modelValue: _ctx.state.input,
    "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
      return _ctx.state.input = $event;
    }),
    size: "small"
  }, null, 8, ["modelValue"]), createElementVNode("div", _hoisted_3, [createVNode(_component_tiny_button, {
    size: "small",
    onClick: _ctx.onCancel
  }, {
    default: withCtx(function() {
      return [createTextVNode(
        toDisplayString(_ctx.t("ui.colorSelectPanel.cancel")),
        1
        /* TEXT */
      )];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onClick"]), createVNode(_component_tiny_button, {
    type: "primary",
    size: "small",
    onClick: _ctx.onConfirm
  }, {
    default: withCtx(function() {
      return [createTextVNode(
        toDisplayString(_ctx.t("ui.colorSelectPanel.confirm")),
        1
        /* TEXT */
      )];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onClick"])])]), createVNode(_component_tiny_collapse, null, {
    default: withCtx(function() {
      return [_ctx.state.enableHistory ? (openBlock(), createBlock(_component_tiny_collapse_item, {
        key: 0,
        title: _ctx.t("ui.colorSelectPanel.history"),
        name: "history"
      }, {
        default: withCtx(function() {
          return [_ctx.state.stack.length ? (openBlock(), createElementBlock("div", _hoisted_4, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.stack, function(color, key) {
              return openBlock(), createElementBlock("div", {
                class: "tiny-color-select-panel__history__color-block",
                key,
                style: normalizeStyle({
                  background: color
                }),
                onClick: function onClick() {
                  return _ctx.onHistoryClick(color);
                }
              }, null, 12, _hoisted_5);
            }),
            128
            /* KEYED_FRAGMENT */
          ))])) : createCommentVNode("v-if", true), !_ctx.state.stack.length ? (openBlock(), createElementBlock(
            "div",
            _hoisted_6,
            toDisplayString(_ctx.t("ui.colorSelectPanel.empty")),
            1
            /* TEXT */
          )) : createCommentVNode("v-if", true)];
        }),
        _: 1
        /* STABLE */
      }, 8, ["title"])) : createCommentVNode("v-if", true), _ctx.state.enablePredefineColor ? (openBlock(), createBlock(_component_tiny_collapse_item, {
        key: 1,
        title: _ctx.t("ui.colorSelectPanel.predefine"),
        name: "predefine"
      }, {
        default: withCtx(function() {
          return [_ctx.state.predefineStack.length ? (openBlock(), createElementBlock("div", _hoisted_7, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.predefineStack, function(color, key) {
              return openBlock(), createElementBlock("div", {
                class: "tiny-color-select-panel__predefine__color-block",
                key,
                style: normalizeStyle({
                  background: color
                }),
                onClick: function onClick() {
                  return _ctx.onPredefineColorClick(color);
                }
              }, null, 12, _hoisted_8);
            }),
            128
            /* KEYED_FRAGMENT */
          ))])) : createCommentVNode("v-if", true), !_ctx.state.predefineStack.length ? (openBlock(), createElementBlock(
            "div",
            _hoisted_9,
            toDisplayString(_ctx.t("ui.colorSelectPanel.empty")),
            1
            /* TEXT */
          )) : createCommentVNode("v-if", true)];
        }),
        _: 1
        /* STABLE */
      }, 8, ["title"])) : createCommentVNode("v-if", true)];
    }),
    _: 1
    /* STABLE */
  })])), [[_directive_clickoutside, _ctx.onClickOutside]]) : createCommentVNode("v-if", true);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
