import Quill from 'quill';
import Toolbar from 'quill/modules/toolbar';
import { Instance } from '@popperjs/core/lib/popper-lite';

type Placement = 'auto' | 'auto-start' | 'auto-end' | 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end';
interface TooltipOptions {
    direction: Placement;
    msg: string;
    delay: number;
    content: HTMLElement;
    className: string | string[];
    onShow: (target: HTMLElement) => string | HTMLElement | undefined | null;
}
interface TooltipInstance {
    instance: Instance;
    hide: () => void;
    show: () => void;
}

declare const defaultToolbarTip: Record<string, QuillToolbarTipOptions['tipTextMap']>;

interface TooltipItem extends Omit<TooltipOptions, 'onShow'> {
    onShow: (target: HTMLElement, value: string) => ReturnType<TooltipOptions['onShow']>;
}
interface QuillToolbarTipOptions {
    tipTextMap: Record<string, Partial<TooltipItem> | string>;
    defaultTooltipOptions: Partial<TooltipOptions>;
}
declare class QuillToolbarTip {
    quill: Quill;
    static moduleName: string;
    options: QuillToolbarTipOptions;
    toolbar: Toolbar;
    toolbarTips: [string, TooltipInstance][];
    constructor(quill: Quill, options: Partial<QuillToolbarTipOptions>);
    resolveOptions(options: Partial<QuillToolbarTipOptions>): QuillToolbarTipOptions;
    createToolbarTip(): void;
    getControlLabel([_, target]: [string, HTMLButtonElement | HTMLSelectElement]): HTMLElement | null;
    destroyAllTips(): void;
    hideAllTips(): void;
}

export { QuillToolbarTip, type QuillToolbarTipOptions, type TooltipItem, QuillToolbarTip as default, defaultToolbarTip };
