function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { $props, defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/tree-menu/vue";
import Tree from "@opentiny/vue-tree";
import Input from "@opentiny/vue-input";
import { iconSearch, iconLeftWardArrow, iconEditorMenuLeft, iconEditorMenuRight } from "@opentiny/vue-icon";
import "@opentiny/vue-theme/tree-menu/index.css";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, withModifiers, createVNode, createCommentVNode, createBlock, withCtx, createElementVNode, resolveDynamicComponent, renderSlot, createTextVNode, toDisplayString } from "vue";
var treeMenuProps = _extends({}, $props, {
  placeholder: {
    default: "",
    type: String
  },
  data: Array,
  nodeKey: String,
  defaultExpandAll: Boolean,
  suffixIcon: Object,
  searchIcon: {
    type: Object,
    default: function _default() {
      return iconSearch();
    }
  },
  props: Object,
  draggable: {
    type: Boolean,
    default: false
  },
  emptyText: {
    type: String,
    default: ""
  },
  checkStrictly: Boolean,
  lazy: {
    type: Boolean,
    default: false
  },
  load: Function,
  showCheckbox: Boolean,
  filterNodeMethod: Function,
  defaultCheckedKeys: Array,
  defaultExpandedKeys: Array,
  defaultExpandedKeysHighlight: [Number, String],
  indent: {
    type: Number,
    default: 16
  },
  allowDrag: Function,
  allowDrop: Function,
  expandOnClickNode: {
    type: Boolean,
    default: true
  },
  ellipsis: {
    type: Boolean,
    default: false
  },
  wrap: {
    type: Boolean,
    default: false
  },
  getMenuDataSync: Function,
  accordion: Boolean,
  showTitle: {
    type: Boolean,
    default: true
  },
  showFilter: {
    type: Boolean,
    default: true
  },
  showExpand: {
    type: Boolean,
    default: false
  },
  collapsible: {
    type: Boolean,
    default: true
  },
  showNumber: {
    type: Boolean,
    default: false
  },
  nodeHeight: Number,
  onlyCheckChildren: {
    type: Boolean,
    default: false
  },
  menuCollapsible: {
    type: Boolean,
    default: false
  },
  clearable: {
    type: Boolean,
    default: false
  },
  highlightQuery: {
    type: Boolean,
    default: false
  },
  // metaErp 新增属性
  widthAdapt: {
    type: Boolean,
    default: false
  }
});
var _sfc_main = defineComponent({
  name: $prefix + "TreeMenu",
  emits: ["change", "current-change", "node-drag-start", "node-drag-enter", "node-drag-over", "node-drag-end", "node-drop", "node-expand", "node-click", "check-change", "check", "collapse-change", "node-collapse"],
  components: {
    TinyTree: Tree,
    TinyInput: Input,
    IconArrow: iconLeftWardArrow(),
    IconEditorMenuLeft: iconEditorMenuLeft(),
    IconEditorMenuRight: iconEditorMenuRight()
  },
  props: treeMenuProps,
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};
var _hoisted_1 = {
  class: "tree-node"
};
var _hoisted_2 = {
  class: "tree-menus-link tiny-tree-node__label"
};
var _hoisted_3 = ["title", "href"];
var _hoisted_4 = {
  class: "tree-node-name"
};
var _hoisted_5 = {
  key: 2,
  class: "tiny-tree-menu__expand"
};
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  var _component_icon_arrow = resolveComponent("icon-arrow");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_tree = resolveComponent("tiny-tree");
  var _component_icon_editor_menu_left = resolveComponent("icon-editor-menu-left");
  var _component_icon_editor_menu_right = resolveComponent("icon-editor-menu-right");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-tree-menu", {
        "is-collapsed": _ctx.state.isCollapsed,
        "is-expand": _ctx.state.isExpand,
        "tiny-tree-menu__show-filter": _ctx.showFilter,
        "tiny-tree-menu__show-expand": _ctx.showExpand
      }]),
      style: normalizeStyle(_ctx.widthAdapt ? {
        width: "100%"
      } : {})
    },
    [_ctx.menuCollapsible ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: "tiny-tree-menu__toggle-button",
      onClick: _cache[0] || (_cache[0] = withModifiers(function() {
        return _ctx.collapseChange && _ctx.collapseChange.apply(_ctx, arguments);
      }, ["stop"]))
    }, [createVNode(_component_icon_arrow)])) : createCommentVNode("v-if", true), _ctx.showFilter ? (openBlock(), createBlock(_component_tiny_input, {
      key: 1,
      modelValue: _ctx.state.filterText,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
        return _ctx.state.filterText = $event;
      }),
      placeholder: _ctx.placeholder || _ctx.t("ui.treeMenu.placeholder"),
      "prefix-icon": _ctx.searchIcon,
      clearable: _ctx.state.clearable
    }, null, 8, ["modelValue", "placeholder", "prefix-icon", "clearable"])) : createCommentVNode("v-if", true), createVNode(_component_tiny_tree, {
      ref: "tree",
      class: normalizeClass({
        "tiny-tree-menu__wrap": !_ctx.ellipsis ? _ctx.wrap : false,
        "tiny-tree-menu__overflow": _ctx.ellipsis,
        "only-check-children": _ctx.onlyCheckChildren
      }),
      tiny_mode: "pc",
      theme: "tiny",
      accordion: _ctx.accordion,
      data: _ctx.state.data,
      "node-key": _ctx.nodeKey || "id",
      "empty-text": _ctx.emptyText,
      "filter-node-method": _ctx.filterNodeMethod || _ctx.filterNode,
      draggable: _ctx.draggable,
      "default-expand-all": _ctx.defaultExpandAll,
      "check-strictly": _ctx.checkStrictly,
      lazy: _ctx.lazy,
      load: _ctx.load,
      "show-checkbox": _ctx.showCheckbox,
      "show-number": _ctx.showNumber,
      collapsible: _ctx.collapsible,
      "node-height": _ctx.nodeHeight,
      indent: _ctx.indent,
      "default-checked-keys": _ctx.defaultCheckedKeys,
      "default-expanded-keys": _ctx.state.defaultExpandedKeys,
      "default-expanded-keys-highlight": _ctx.defaultExpandedKeysHighlight,
      "allow-drag": _ctx.allowDrag,
      props: _ctx.props,
      "allow-drop": _ctx.allowDrop,
      "highlight-query": _ctx.highlightQuery,
      "expand-on-click-node": _ctx.expandOnClickNode,
      "only-check-children": _ctx.onlyCheckChildren,
      onNodeDragStart: _ctx.nodeDragStart,
      onNodeDragEnter: _ctx.nodeDragEnter,
      onNodeDragOver: _ctx.nodeDragOver,
      onNodeDragEnd: _ctx.nodeDragEnd,
      onNodeDrop: _ctx.nodeDrop,
      onNodeExpand: _ctx.nodeExpand,
      onNodeCollapse: _ctx.nodeCollapse,
      onNodeClick: _ctx.nodeClick,
      onCheckChange: _ctx.checkChange,
      onCheck: _ctx.check,
      onCurrentChange: _ctx.currentChange
    }, {
      default: withCtx(function(_ref) {
        var node = _ref.node, data = _ref.data;
        return [createElementVNode("div", _hoisted_1, [createElementVNode("div", _hoisted_2, [createElementVNode("a", {
          class: "tree-node-body",
          title: _ctx.getTitle(data.label),
          href: data.url || void 0
        }, [createElementVNode("span", _hoisted_4, [!data.customIcon && _ctx.suffixIcon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon), {
          key: 0
        })) : createCommentVNode("v-if", true), data.customIcon ? (openBlock(), createBlock(resolveDynamicComponent(data.customIcon), {
          key: 1
        })) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "default", {
          node,
          data,
          label: data.label
        }, function() {
          return [createTextVNode(
            toDisplayString(data.label || node.label),
            1
            /* TEXT */
          )];
        })])], 8, _hoisted_3)])])];
      }),
      _: 3
      /* FORWARDED */
    }, 8, ["class", "accordion", "data", "node-key", "empty-text", "filter-node-method", "draggable", "default-expand-all", "check-strictly", "lazy", "load", "show-checkbox", "show-number", "collapsible", "node-height", "indent", "default-checked-keys", "default-expanded-keys", "default-expanded-keys-highlight", "allow-drag", "props", "allow-drop", "highlight-query", "expand-on-click-node", "only-check-children", "onNodeDragStart", "onNodeDragEnter", "onNodeDragOver", "onNodeDragEnd", "onNodeDrop", "onNodeExpand", "onNodeCollapse", "onNodeClick", "onCheckChange", "onCheck", "onCurrentChange"]), _ctx.showExpand ? (openBlock(), createElementBlock("div", _hoisted_5, [createElementVNode("span", null, [!_ctx.state.isExpand ? (openBlock(), createBlock(_component_icon_editor_menu_left, {
      key: 0,
      onClick: _cache[2] || (_cache[2] = function($event) {
        return _ctx.handleToggleMenu("collapse");
      })
    })) : (openBlock(), createBlock(_component_icon_editor_menu_right, {
      key: 1,
      onClick: _cache[3] || (_cache[3] = function($event) {
        return _ctx.handleToggleMenu("expand");
      })
    }))])])) : createCommentVNode("v-if", true)],
    6
    /* CLASS, STYLE */
  );
}
var TreeMenu = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.undefined";
TreeMenu.install = function(Vue) {
  Vue.component(TreeMenu.name, TreeMenu);
};
TreeMenu.version = version;
export {
  TreeMenu as default
};
