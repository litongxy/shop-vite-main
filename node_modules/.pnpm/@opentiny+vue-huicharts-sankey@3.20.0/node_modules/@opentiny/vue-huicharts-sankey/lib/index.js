import Core, { itemPoint, itemLabel, itemContent, getFormatted, isNull } from '@opentiny/vue-huicharts-core';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getTooltip = function getTooltip2(args) {
  var digit = args.digit, itemDataType = args.itemDataType, linksDataType = args.linksDataType;
  var formatter = function formatter2(item) {
    var name = item.name, data2 = item.data, value = item.value, color = item.color;
    var tplt = [];
    color && tplt.push(itemPoint(color));
    tplt.push(itemLabel("" + name));
    if (!data2 || !data2.source) {
      tplt.push(itemContent(getFormatted(value, itemDataType, digit)) + "<br />");
    } else {
      tplt.push(itemContent(getFormatted(value, linksDataType, digit)) + "<br />");
    }
    return tplt.join("");
  };
  return {
    trigger: "item",
    formatter
  };
};
var getSeries = function getSeries2(args) {
  var dimension = args.dimension; args.itemStyle; args.label; args.lineStyle; var links = args.links, metrics = args.metrics, rows = args.rows, useDataValue = args.useDataValue, valueFull = args.valueFull;
  var dataMap = {};
  var seriesData = rows.map(function(row) {
    dataMap[row[dimension]] = row[metrics];
    return {
      name: row[dimension],
      value: row[metrics]
    };
  });
  var _ref = {}, _ref$innerLinks = _ref.innerLinks, innerLinks = _ref$innerLinks === void 0 ? links : _ref$innerLinks, _ref$mapHandler = _ref.mapHandler, mapHandler = _ref$mapHandler === void 0 ? null : _ref$mapHandler;
  if (useDataValue) {
    mapHandler = function mapHandler2(link) {
      return _extends({}, link, {
        value: dataMap[link.target]
      });
    };
  } else if (!valueFull) {
    mapHandler = function mapHandler2(link) {
      return isNull(link.value) ? _extends({}, link, {
        value: dataMap[link.target]
      }) : link;
    };
  }
  if (mapHandler) {
    innerLinks = links.map(mapHandler);
  }
  var result = {
    type: "sankey",
    data: seriesData,
    links: innerLinks
  };
  var total = 0;
  seriesData.forEach(function(item) {
    var isExist = innerLinks.some(function(data2) {
      return data2.target === item.name;
    });
    if (!isExist) {
      total += item.value;
    }
  });
  return [result];
};
var sankey = function sankey2(columns, rows, settings) {
  var _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? ["normal", "normal"] : _settings$dataType, _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, label = settings.label;
  var links = settings.links, lineStyle = settings.lineStyle, itemStyle = settings.itemStyle, _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? columns[1] : _settings$metrics, _settings$useDataValu = settings.useDataValue, useDataValue = _settings$useDataValu === void 0 ? false : _settings$useDataValu, _settings$valueFull = settings.valueFull, valueFull = _settings$valueFull === void 0 ? false : _settings$valueFull;
  if (!links) {
    return;
  }
  var _ref2 = {}, _ref2$itemDataType = _ref2.itemDataType, itemDataType = _ref2$itemDataType === void 0 ? dataType[0] : _ref2$itemDataType, _ref2$linksDataType = _ref2.linksDataType, linksDataType = _ref2$linksDataType === void 0 ? dataType[1] : _ref2$linksDataType;
  var tooltip = getTooltip({
    itemDataType,
    linksDataType,
    digit
  });
  var seriesParams = {
    rows,
    dimension,
    metrics,
    links,
    valueFull,
    useDataValue,
    label,
    itemStyle,
    lineStyle
  };
  var series = getSeries(seriesParams);
  var data2 = {
    nodes: series[0].data,
    links: series[0].links
  };
  series[0].tooltip = {};
  series[0].tooltip.valueFormatter = tooltip.valueFormatter;
  return {
    data: data2,
    tooltip,
    series,
    tipHtml: tooltip.formatter,
    label,
    itemStyle,
    lineStyle
  };
};
var _sfc_main = {
  name: $prefix + "ChartSankey",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "SankeyChart"
    };
  },
  methods: {
    updateChart: function updateChart() {
      var _this$data = this.data, _this$data$columns = _this$data.columns, columns = _this$data$columns === void 0 ? [] : _this$data$columns, _this$data$rows = _this$data.rows, rows = _this$data$rows === void 0 ? [] : _this$data$rows;
      ({
        legendVisible: this.legendVisible,
        tooltipVisible: this.tooltipVisible
      });
      var option = sankey(columns, rows, this.settings);
      this.huiChartOption = _extends({}, option);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsSankey = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsSankey.install = function(Vue) {
  Vue.component(HuiChartsSankey.name, HuiChartsSankey);
};

export { HuiChartsSankey, HuiChartsSankey as default };
