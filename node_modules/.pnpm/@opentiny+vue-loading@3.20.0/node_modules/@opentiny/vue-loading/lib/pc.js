import { defineComponent, $prefix, props, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/loading/vue';
import '@opentiny/vue-theme/loading/index.css';
import { iconLoadingShadow } from '@opentiny/vue-icon';
import { resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, resolveDynamicComponent, createElementBlock, toDisplayString, createCommentVNode, vShow } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  inheritAttrs: false,
  name: $prefix + "Loading",
  emits: ["after-leave"],
  props: [].concat(props, ["_constants", "loadingImg", "size"]),
  components: {
    TinyIconLoadingShadow: iconLoadingShadow()
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = ["src"];
var _hoisted_2 = {
  key: 3,
  class: "tiny-loading__text"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_icon_loading_shadow = resolveComponent("tiny-icon-loading-shadow");
  return openBlock(), createBlock(Transition, {
    name: "tiny-loading-fade",
    onAfterLeave: _ctx.handleAfterLeave,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          "data-tag": "tiny-loading",
          class: normalizeClass(["tiny-loading tiny-loading__mask", [_ctx.state.customClass, {
            "is-fullscreen": _ctx.state.fullscreen
          }]]),
          style: normalizeStyle({
            backgroundColor: _ctx.state.background || ""
          })
        },
        [createElementVNode(
          "div",
          {
            class: normalizeClass(["tiny-loading__spinner", {
              small: "tiny-loading__spinner-small",
              medium: "tiny-loading__spinner-medium",
              large: "tiny-loading__spinner-large"
            }[_ctx.size]])
          },
          [_ctx.state.spinner ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.spinner), {
            key: 0,
            class: "tiny-icon-loading"
          })) : _ctx.state.loadingImg ? (openBlock(), createElementBlock("img", {
            key: 1,
            class: "circular",
            style: normalizeStyle(_ctx.state.iconStyle),
            src: _ctx.state.loadingImg
          }, null, 12, _hoisted_1)) : (openBlock(), createBlock(_component_tiny_icon_loading_shadow, {
            key: 2,
            class: "circular"
          })), _ctx.state.text ? (openBlock(), createElementBlock(
            "p",
            _hoisted_2,
            toDisplayString(_ctx.state.text),
            1
            /* TEXT */
          )) : createCommentVNode("v-if", true)],
          2
          /* CLASS */
        )],
        6
        /* CLASS, STYLE */
      ), [[vShow, _ctx.state.visible]])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onAfterLeave"]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
