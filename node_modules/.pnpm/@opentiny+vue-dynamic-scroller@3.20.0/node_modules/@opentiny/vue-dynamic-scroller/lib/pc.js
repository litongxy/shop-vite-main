import { renderless, api } from '@opentiny/vue-renderless/dynamic-scroller/vue';
import { defineComponent, props, setup, emitter } from '@opentiny/vue-common';
import RecycleScroller from '@opentiny/vue-recycle-scroller';
import { resolveComponent, openBlock, createBlock, mergeProps, withCtx, renderSlot, normalizeProps, guardReactiveProps } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  inheritAttrs: false,
  emits: ["resize", "visible"],
  props: [].concat(props, ["items", "keyField", "direction", "listTag", "itemTag", "minItemSize"]),
  components: {
    TinyRecycleScroller: RecycleScroller
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api,
      extendOptions: {
        emitter
      }
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_recycle_scroller = resolveComponent("tiny-recycle-scroller");
  return openBlock(), createBlock(_component_tiny_recycle_scroller, mergeProps({
    ref: "scroller",
    class: "tiny-dynamic-scroller",
    items: _ctx.state.itemsWithSize,
    "min-item-size": _ctx.minItemSize,
    direction: _ctx.direction,
    "key-field": _ctx.keyField,
    "list-tag": _ctx.listTag,
    "item-tag": _ctx.itemTag
  }, _ctx.$attrs, {
    onResize: _ctx.onScrollerResize,
    onVisible: _ctx.onScrollerVisible
  }), {
    default: withCtx(function(_ref) {
      var itemWithSize = _ref.item, index = _ref.index, active = _ref.active;
      return [renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({
        item: itemWithSize.item,
        index,
        active,
        itemWithSize
      })))];
    }),
    before: withCtx(function() {
      return [renderSlot(_ctx.$slots, "before")];
    }),
    after: withCtx(function() {
      return [renderSlot(_ctx.$slots, "after")];
    }),
    empty: withCtx(function() {
      return [renderSlot(_ctx.$slots, "empty")];
    }),
    _: 3
    /* FORWARDED */
  }, 16, ["items", "min-item-size", "direction", "key-field", "list-tag", "item-tag", "onResize", "onVisible"]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
