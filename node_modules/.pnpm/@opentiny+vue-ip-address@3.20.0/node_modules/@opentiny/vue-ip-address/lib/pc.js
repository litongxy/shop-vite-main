import { renderless, api } from '@opentiny/vue-renderless/ip-address/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import { iconDotIpv4 } from '@opentiny/vue-icon';
import { openBlock, createElementBlock, createElementVNode, normalizeClass, Fragment, renderList, withDirectives, vModelText, renderSlot, createBlock, resolveDynamicComponent, createCommentVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  props: [].concat(props, ["size", "modelValue", "type", "readonly", "disabled", "delimiter"]),
  emits: ["update:modelValue", "change", "blur", "focus", "select", "input"],
  components: {
    IconDotIpv4: iconDotIpv4()
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-ip-address"
};
var _hoisted_2 = ["readonly", "disabled", "onUpdate:modelValue", "onSelect", "onFocus", "onInput", "onBlur", "onKeyup", "onKeydown"];
var _hoisted_3 = {
  key: 0,
  class: "tiny-ip-address__input__ipv6-delimiter"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "ul",
    {
      class: normalizeClass([_ctx.state.active ? "active" : "", _ctx.state.disabled ? "disabled" : "", "tiny-ip-address__input", _ctx.state.size ? "" + _ctx.state.size : "default"])
    },
    [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.address, function(item, index) {
        return openBlock(), createElementBlock("li", {
          key: index
        }, [withDirectives(createElementVNode("input", {
          ref_for: true,
          ref: "inputs",
          readonly: _ctx.readonly,
          disabled: _ctx.state.disabled,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return item.value = $event;
          },
          type: "text",
          onSelect: function onSelect($event) {
            return _ctx.select({
              value: item,
              index,
              event: $event
            });
          },
          onFocus: function onFocus($event) {
            return _ctx.focus({
              index,
              event: $event
            });
          },
          onInput: function onInput($event) {
            return _ctx.inputEvent({
              item,
              index
            });
          },
          onChange: _cache[0] || (_cache[0] = function() {
            return _ctx.change && _ctx.change.apply(_ctx, arguments);
          }),
          onBlur: function onBlur($event) {
            return _ctx.blur({
              item,
              index
            });
          },
          onKeyup: function onKeyup($event) {
            return _ctx.keyup({
              item,
              index,
              event: $event
            });
          },
          onKeydown: function onKeydown($event) {
            return _ctx.keydown({
              item,
              index,
              event: $event
            });
          },
          tabindex: "1"
        }, null, 40, _hoisted_2), [[vModelText, item.value]]), index < _ctx.state.address.length - 1 ? renderSlot(_ctx.$slots, "default", {
          key: 0,
          slotScope: {
            state: _ctx.state,
            index,
            item
          }
        }, function() {
          return [_ctx.type === "IPv6" && _ctx.delimiter === "icon-dot-ipv4" ? (openBlock(), createElementBlock("span", _hoisted_3, ":")) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.delimiter), {
            key: 1,
            class: "tiny-svg-size"
          }))];
        }) : createCommentVNode("v-if", true)]);
      }),
      128
      /* KEYED_FRAGMENT */
    ))],
    2
    /* CLASS */
  )]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
