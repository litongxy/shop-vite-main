/**
 * Copyright (c) 2022 - present TinyVue Authors.
 * Copyright (c) 2022 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */
export declare const toString: () => string;
export declare const hasOwn: (v: PropertyKey) => boolean;
export declare const isNull: (x: any) => boolean;
/**
 * 返回 JavaScript 对象的类型。
 *
 * 如果对象是 undefined 或 null，则返回相应的'undefined'或'null'。
 *
 * 其他一切都将返回它的类型'object'。
 *
 * @param {Object} obj 对象
 * @returns {String}
 */
export declare const typeOf: (obj: any) => any;
/**
 * 判断对象是否为 object 类型。
 *
 *     isObject({}) // true
 *
 * @param {Object} obj 对象
 * @returns {Boolean}
 */
export declare const isObject: (obj: any) => boolean;
/**
 * 判断对象是否为 function 类型。
 *
 *     isObject(function (){) // true
 *
 * @param {Object} fn 函数
 * @returns {Boolean}
 */
export declare const isFunction: (fn: any) => boolean;
/**
 * 判断对象是否为简单对象。
 *
 * 即不是 HTML 节点对象，也不是 window 对象，而是纯粹的对象（通过 '{}' 或者 'new Object' 创建的）。
 *
 *
 * @param {Object} obj 对象
 * @returns {Boolean}
 */
export declare const isPlainObject: (obj: any) => boolean;
/**
 * 检查对象是否为空（不包含任何属性）。
 *
 * @param {Object} obj 对象
 * @returns {Boolean}
 */
export declare const isEmptyObject: (obj: any) => boolean;
/**
 * 判断对象是否为数字类型。
 *
 *     isNumber(369) // true
 *
 * @param {Object} value 对象
 * @returns {Boolean}
 */
export declare const isNumber: (value: any) => boolean;
/**
 * 判断对象是否代表一个数值。
 *
 * @param {Object} value 对象
 * @returns {Boolean}
 */
export declare const isNumeric: (value: any) => boolean;
/**
 * 判断对象是否为日期类型。
 *
 *
 * @param {Object} value 对象
 * @returns {Boolean}
 */
export declare const isDate: (value: any) => boolean;
/**
 * 判断两个值是否值相同且类型相同。
 *
 * 注：在 JavaScript 里 NaN === NaN 为 false，因此不能简单的用 === 来判断。
 *
 *
 * @param {Object} x 对象
 * @param {Object} y 对象
 * @returns {Boolean}
 */
export declare const isSame: (x: any, y: any) => boolean;
export declare const isRegExp: (value: any) => boolean;
