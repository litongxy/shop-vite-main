declare const _default: import("@vue/runtime-core").DefineComponent<{
    type: {
        type: StringConstructor;
    };
    data: {
        type: ObjectConstructor;
        default(): {};
    };
    settings: {
        type: ObjectConstructor;
        default(): {};
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    events: {
        type: ObjectConstructor;
        default(): void;
    };
    initOptions: {
        type: ObjectConstructor;
        default(): {};
    };
    tooltipVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    legendVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    legendPosition: {
        type: StringConstructor;
    };
    theme: ObjectConstructor;
    themeName: (StringConstructor | ObjectConstructor)[];
    judgeWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    widthChangeDelay: {
        type: NumberConstructor;
        default: number;
    };
    resizeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    changeDelay: {
        type: NumberConstructor;
        default: number;
    };
    dataEmpty: BooleanConstructor;
    beforeConfig: {
        type: FunctionConstructor;
    };
    afterConfig: {
        type: FunctionConstructor;
    };
    afterSetOption: {
        type: FunctionConstructor;
    };
    afterSetOptionOnce: {
        type: FunctionConstructor;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    extend: {
        type: ObjectConstructor;
        default(): void;
    };
    tooltipFormatter: {
        type: FunctionConstructor;
    };
    markArea: {
        type: ObjectConstructor;
    };
    markLine: {
        type: ObjectConstructor;
    };
    markPoint: {
        type: ObjectConstructor;
    };
    grid: {
        type: (ObjectConstructor | ArrayConstructor)[];
    };
    colors: {
        type: ArrayConstructor;
    };
    visualMap: (ObjectConstructor | ArrayConstructor)[];
    dataZoom: (ObjectConstructor | ArrayConstructor)[];
    toolbox: (ObjectConstructor | ArrayConstructor)[];
    title: ObjectConstructor;
    legend: (ObjectConstructor | ArrayConstructor)[];
    xAxis: (ObjectConstructor | ArrayConstructor)[];
    yAxis: (ObjectConstructor | ArrayConstructor)[];
    radar: ObjectConstructor;
    tooltip: ObjectConstructor;
    axisPointer: ObjectConstructor;
    brush: (ObjectConstructor | ArrayConstructor)[];
    geo: ObjectConstructor;
    timeline: (ObjectConstructor | ArrayConstructor)[];
    graphic: (ObjectConstructor | ArrayConstructor)[];
    series: (ObjectConstructor | ArrayConstructor)[];
    backgroundColor: (StringConstructor | ObjectConstructor)[];
    textStyle: ObjectConstructor;
    animation: ObjectConstructor;
    options: {
        type: ObjectConstructor;
        default: () => {};
    };
    cancelResizeCheck: {
        type: BooleanConstructor;
        default: boolean;
    };
    setOptionOpts: {
        type: ObjectConstructor;
        default(): void;
    };
    colorMode: {
        type: StringConstructor;
        default: string;
    };
}, unknown, {}, {}, {
    selfSetting(options: any): void;
    setAnimation(options: any): void;
    applyMarks(options: any): void;
    applyExtend(huiChartOption: any): any;
    refreshChart(): void;
    renderChart(huiChartOption: any): void;
    addEvents(val: any): void;
    removeEvents(oldVal: any): void;
    resize(): void;
    afterConfigFn(huiChartOption: any): any;
    beforeConfigFn(data: any): any;
    isStack(): boolean;
    calcColors({ len, type, isStack }: {
        len: any;
        type: any;
        isStack: any;
    }): string[];
    computedChartColor(): any;
    ready(val: any): void;
    readyOnce(val: any): void;
    handleColor(val: any): void;
}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    type: {
        type: StringConstructor;
    };
    data: {
        type: ObjectConstructor;
        default(): {};
    };
    settings: {
        type: ObjectConstructor;
        default(): {};
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    events: {
        type: ObjectConstructor;
        default(): void;
    };
    initOptions: {
        type: ObjectConstructor;
        default(): {};
    };
    tooltipVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    legendVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    legendPosition: {
        type: StringConstructor;
    };
    theme: ObjectConstructor;
    themeName: (StringConstructor | ObjectConstructor)[];
    judgeWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    widthChangeDelay: {
        type: NumberConstructor;
        default: number;
    };
    resizeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    changeDelay: {
        type: NumberConstructor;
        default: number;
    };
    dataEmpty: BooleanConstructor;
    beforeConfig: {
        type: FunctionConstructor;
    };
    afterConfig: {
        type: FunctionConstructor;
    };
    afterSetOption: {
        type: FunctionConstructor;
    };
    afterSetOptionOnce: {
        type: FunctionConstructor;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    extend: {
        type: ObjectConstructor;
        default(): void;
    };
    tooltipFormatter: {
        type: FunctionConstructor;
    };
    markArea: {
        type: ObjectConstructor;
    };
    markLine: {
        type: ObjectConstructor;
    };
    markPoint: {
        type: ObjectConstructor;
    };
    grid: {
        type: (ObjectConstructor | ArrayConstructor)[];
    };
    colors: {
        type: ArrayConstructor;
    };
    visualMap: (ObjectConstructor | ArrayConstructor)[];
    dataZoom: (ObjectConstructor | ArrayConstructor)[];
    toolbox: (ObjectConstructor | ArrayConstructor)[];
    title: ObjectConstructor;
    legend: (ObjectConstructor | ArrayConstructor)[];
    xAxis: (ObjectConstructor | ArrayConstructor)[];
    yAxis: (ObjectConstructor | ArrayConstructor)[];
    radar: ObjectConstructor;
    tooltip: ObjectConstructor;
    axisPointer: ObjectConstructor;
    brush: (ObjectConstructor | ArrayConstructor)[];
    geo: ObjectConstructor;
    timeline: (ObjectConstructor | ArrayConstructor)[];
    graphic: (ObjectConstructor | ArrayConstructor)[];
    series: (ObjectConstructor | ArrayConstructor)[];
    backgroundColor: (StringConstructor | ObjectConstructor)[];
    textStyle: ObjectConstructor;
    animation: ObjectConstructor;
    options: {
        type: ObjectConstructor;
        default: () => {};
    };
    cancelResizeCheck: {
        type: BooleanConstructor;
        default: boolean;
    };
    setOptionOpts: {
        type: ObjectConstructor;
        default(): void;
    };
    colorMode: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    data: Record<string, any>;
    extend: Record<string, any>;
    width: string;
    height: string;
    options: Record<string, any>;
    loading: boolean;
    events: Record<string, any>;
    tooltipVisible: boolean;
    settings: Record<string, any>;
    initOptions: Record<string, any>;
    dataEmpty: boolean;
    judgeWidth: boolean;
    widthChangeDelay: number;
    legendVisible: boolean;
    changeDelay: number;
    colorMode: string;
    cancelResizeCheck: boolean;
    resizeable: boolean;
    setOptionOpts: Record<string, any>;
}, {}>;
export default _default;
