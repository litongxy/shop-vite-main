import { defineComponent, props, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/date-picker/vue';
import MiniPicker from '@opentiny/vue-mini-picker';
import Input from '@opentiny/vue-input';
import { iconCloseCircle } from '@opentiny/vue-icon';
import { resolveComponent, openBlock, createElementBlock, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    TinyMiniPicker: MiniPicker,
    TinyInput: Input,
    IconClose: iconCloseCircle()
  },
  props: [].concat(props, ["modelValue", "type", "clearable", "visible", "minDate", "maxDate", "formatter"]),
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_close = resolveComponent("icon-close");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_mini_picker = resolveComponent("tiny-mini-picker");
  return openBlock(), createElementBlock("div", null, [createVNode(_component_tiny_input, {
    onHookMounted: _ctx.hookMounted,
    modelValue: _ctx.state.displayValue,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.displayValue = $event;
    }),
    ref: "refrence",
    onFocus: _ctx.showPickerAndLockScroll,
    readOnly: "true",
    _mode: _ctx._mode
  }, {
    default: withCtx(function() {
      return [!_ctx.state.clearable ? (openBlock(), createBlock(_component_icon_close, {
        key: 0,
        slot: "suffix",
        onClick: _ctx.clearDisplayValue
      }, null, 8, ["onClick"])) : createCommentVNode("v-if", true)];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onHookMounted", "modelValue", "onFocus", "_mode"]), createVNode(_component_tiny_mini_picker, {
    visible: _ctx.state.visible,
    "onUpdate:visible": _cache[1] || (_cache[1] = function($event) {
      return _ctx.state.visible = $event;
    }),
    ref: "picker",
    columns: _ctx.state.columns,
    onChange: _ctx.onChange,
    onConfirm: _ctx.onConfirm,
    onCancel: _ctx.onCancel
  }, null, 8, ["visible", "columns", "onChange", "onConfirm", "onCancel"])]);
}
var mobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobile as default };
