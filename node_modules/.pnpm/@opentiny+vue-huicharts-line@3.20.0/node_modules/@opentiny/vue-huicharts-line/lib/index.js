import Core, { getTooltip, getYAxis, getRows, isNull } from '@opentiny/vue-huicharts-core';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getStackMap = function getStackMap2(stack) {
  var result = {};
  Object.keys(stack).forEach(function(item) {
    stack[item].forEach(function(name) {
      result[name] = item;
    });
  });
  return result;
};
var getLineXAxis = function getLineXAxis2(args) {
  var axisVisible = args.axisVisible, axisLabel = args.axisLabel, xAxisType = args.xAxisType;
  return {
    show: axisVisible,
    axisLabel,
    type: xAxisType
  };
};
var getLegend = function getLegend2(args) {
  var legendName = args.legendName;
  var formatter = function formatter2(name) {
    return !legendName[name] ? name : legendName[name];
  };
  return {
    show: true,
    formatter
  };
};
var line = function line2(columns, rows, settings, extra) {
  rows = Array.isArray(rows) ? rows : [];
  columns = Array.isArray(columns) ? columns : [];
  var _settings$axisSite = settings.axisSite, axisSite = _settings$axisSite === void 0 ? {} : _settings$axisSite, _settings$yAxisType = settings.yAxisType, yAxisType = _settings$yAxisType === void 0 ? ["normal", "normal"] : _settings$yAxisType, _settings$xAxisType = settings.xAxisType, xAxisType = _settings$xAxisType === void 0 ? "category" : _settings$xAxisType, _settings$yAxisName = settings.yAxisName, yAxisName = _settings$yAxisName === void 0 ? [] : _settings$yAxisName, _settings$axisLabel = settings.axisLabel, axisLabel = _settings$axisLabel === void 0 ? {} : _settings$axisLabel;
  var _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? [columns[0]] : _settings$dimension; settings.xAxisName; var _settings$axisVisible = settings.axisVisible, axisVisible = _settings$axisVisible === void 0 ? true : _settings$axisVisible, _settings$area = settings.area, area = _settings$area === void 0 ? false : _settings$area, stack = settings.stack;
  var _settings$min = settings.min, min = _settings$min === void 0 ? [null, null] : _settings$min, _settings$max = settings.max, max = _settings$max === void 0 ? [null, null] : _settings$max, _settings$nullAddZero = settings.nullAddZero, nullAddZero = _settings$nullAddZero === void 0 ? false : _settings$nullAddZero, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, _settings$scale = settings.scale, scale = _settings$scale === void 0 ? false : _settings$scale;
  var _settings$legendName = settings.legendName, legendName = _settings$legendName === void 0 ? {} : _settings$legendName, _settings$labelMap = settings.labelMap, labelMap = _settings$labelMap === void 0 ? {} : _settings$labelMap, label = settings.label, itemStyle = settings.itemStyle, lineStyle = settings.lineStyle, areaStyle = settings.areaStyle, smooth = settings.smooth;
  var tooltipVisible = extra.tooltipVisible, legendVisible = extra.legendVisible, extend = extra.extend;
  var metrics = columns.slice();
  if (axisSite.right && axisSite.left) {
    metrics = axisSite.left.concat(axisSite.right);
  } else if (settings.metrics) {
    metrics = settings.metrics;
  } else if (axisSite.left && !axisSite.right) {
    metrics = axisSite.left;
  } else {
    metrics.splice(columns.indexOf(dimension[0]), 1);
  }
  var legend = legendVisible ? getLegend({
    legendName,
    metrics,
    labelMap
  }) : {
    show: false
  };
  var tooltip = tooltipVisible ? getTooltip({
    axisSite,
    yAxisType,
    digit
  }) : {
    show: false
  };
  var yAxis = getYAxis({
    max,
    min,
    yAxisType,
    yAxisName,
    metrics,
    axisSite,
    digit,
    scale
  });
  var xAxis = getLineXAxis({
    axisVisible,
    axisLabel,
    xAxisType
  });
  var seriesParam = {
    areaStyle,
    area,
    axisSite,
    dimension,
    itemStyle,
    lineStyle
  };
  Object.assign(seriesParam, {
    label,
    labelMap,
    metrics,
    nullAddZero,
    rows,
    xAxisType,
    stack,
    smooth,
    extend
  });
  var series = getLineSeries(seriesParam);
  var data2 = getRows({
    columns,
    metrics,
    labelMap,
    rows,
    dimension
  });
  var options = {
    data: data2,
    xAxis,
    yAxis,
    metrics,
    series,
    legend,
    tooltip,
    stack,
    tipHtml: tooltip.formatter,
    itemStyle,
    axisSite,
    area
  };
  return _extends({}, options);
};
var getLineSeries = function getLineSeries2(args) {
  var areaStyle = args.areaStyle, axisSite = args.axisSite; args.area; var dimension = args.dimension, itemStyle = args.itemStyle, label = args.label;
  var labelMap = args.labelMap, lineStyle = args.lineStyle, metrics = args.metrics, nullAddZero = args.nullAddZero, rows = args.rows, stack = args.stack; args.color; var smooth = args.smooth;
  var dataTempObj = {};
  var stackMapData = stack && getStackMap(stack);
  var series = [];
  metrics.forEach(function(item) {
    return dataTempObj[item] = [];
  });
  rows.forEach(function(row) {
    metrics.forEach(function(item) {
      var value = null;
      if (!isNull(row[item])) {
        value = row[item];
      } else if (nullAddZero) {
        value = 0;
      }
      dataTempObj[item].push([row[dimension[0]], value]);
    });
  });
  metrics.forEach(function(item, i) {
    var name = !isNull(labelMap[item]) ? labelMap[item] : item;
    var isSmooth = !(smooth === false);
    var seriesItem = {
      smooth: isSmooth,
      name,
      type: "line",
      data: dataTempObj[item]
    };
    var emphasis = {
      itemStyle: {
        borderColor: "#fff",
        borderWidth: 2
      }
    };
    var defaultSeriesItem = {
      symbol: "circle",
      symbolSize: 8,
      showSymbol: false,
      emphasis
    };
    metrics.length === 1 && !isSmooth && setSingLineSeries({
      defaultSeriesItem,
      seriesItem
    });
    seriesItem = Object.assign(defaultSeriesItem, seriesItem);
    axisSite.right && (seriesItem.yAxisIndex = ~axisSite.right.indexOf(item) ? 1 : 0);
    stack && stackMapData[item] && (seriesItem.stack = stackMapData[item]);
    label && (seriesItem.label = label);
    itemStyle && (seriesItem.itemStyle = itemStyle);
    lineStyle && (seriesItem.lineStyle = lineStyle);
    areaStyle && (seriesItem.areaStyle = areaStyle);
    series.push(seriesItem);
  });
  return series;
};
var _sfc_main = {
  name: $prefix + "ChartLine",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "LineChart"
    };
  },
  methods: {
    updateChart: function updateChart(data2) {
      var _data$columns = data2.columns, columns = _data$columns === void 0 ? [] : _data$columns, _data$rows = data2.rows, rows = _data$rows === void 0 ? [] : _data$rows;
      var extra = {
        tooltipVisible: this.tooltipVisible,
        legendVisible: this.legendVisible,
        extend: this.extend
      };
      var option = line(columns, rows, this.settings, extra);
      this.huiChartOption = _extends({}, option);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsLine = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsLine.install = function(Vue) {
  Vue.component(HuiChartsLine.name, HuiChartsLine);
};

export { HuiChartsLine, HuiChartsLine as default };
