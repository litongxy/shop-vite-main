import { defineComponent, props, setup } from '@opentiny/vue-common';
import { renderless, api } from '@opentiny/vue-renderless/popover/vue';
import '@opentiny/vue-theme/popover/index.css';
import { openBlock, createElementBlock, createVNode, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, toDisplayString, createCommentVNode, renderSlot, createTextVNode, vShow } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["update:modelValue", "hide", "show", "after-enter", "after-leave", "created"],
  props: [].concat(props, ["appendToBody", "arrowOffset", "boundariesPadding", "closeDelay", "content", "disabled", "modelValue", "offset", "openDelay", "placement", "popper", "popperClass", "popperOptions", "reference", "tabindex", "title", "transition", "trigger", "visibleArrow", "width", "height"]),
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  ref: "root"
};
var _hoisted_2 = ["id", "aria-hidden"];
var _hoisted_3 = ["textContent"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "span",
    _hoisted_1,
    [createVNode(Transition, {
      name: _ctx.transition,
      onAfterEnter: _ctx.handleAfterEnter,
      onAfterLeave: _ctx.handleAfterLeave,
      persisted: ""
    }, {
      default: withCtx(function() {
        return [withDirectives(createElementVNode("div", {
          class: normalizeClass(["tiny-popover tiny-popper", [_ctx.popperClass, _ctx.content && "tiny-popover__plain", {
            "no-arrow": !_ctx.visibleArrow
          }]]),
          ref: "popper",
          style: normalizeStyle({
            width: _ctx.width === "auto" ? _ctx.width : _ctx.width + "px",
            height: _ctx.height === "auto" ? _ctx.height : _ctx.height + "px"
          }),
          role: "tooltip",
          id: _ctx.state.tooltipId,
          "aria-hidden": _ctx.disabled || !_ctx.state.showPopper ? "true" : "false"
        }, [_ctx.title ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "tiny-popover__title",
          textContent: toDisplayString(_ctx.title)
        }, null, 8, _hoisted_3)) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "default", {}, function() {
          return [createTextVNode(
            toDisplayString(_ctx.content),
            1
            /* TEXT */
          )];
        })], 14, _hoisted_2), [[vShow, !_ctx.disabled && _ctx.state.showPopper]])];
      }),
      _: 3
      /* FORWARDED */
    }, 8, ["name", "onAfterEnter", "onAfterLeave"]), createElementVNode(
      "span",
      {
        ref: "wrapper",
        class: normalizeClass(["reference-wrapper", {
          "reference-wrapper-show": !_ctx.disabled && _ctx.state.showPopper
        }])
      },
      [renderSlot(_ctx.$slots, "reference")],
      2
      /* CLASS */
    )],
    512
    /* NEED_PATCH */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
