function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import MobileTemplate from "./mobile.js";
import "@opentiny/vue-theme-mobile/label/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return MobileTemplate;
};
var labelProps = _extends({}, $props, {
  label: {
    type: String,
    default: ""
  },
  color: {
    type: String,
    default: "primary"
  },
  size: {
    type: String,
    default: "normal"
  },
  type: {
    type: String,
    default: "base"
  },
  wholeline: {
    type: Boolean,
    default: false
  },
  position: {
    type: String,
    default: "left"
  },
  ellipsis: {
    type: Number,
    default: 0
  },
  decimal: {
    type: Number,
    default: 2
  },
  limit: {
    type: Number,
    default: 0
  },
  isRequired: {
    type: Boolean,
    default: false
  },
  bold: {
    type: Boolean,
    default: false
  }
});
var Label = defineComponent({
  name: $prefix + "Label",
  props: labelProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Label.install = function(Vue) {
  Vue.component(Label.name, Label);
};
Label.version = version;
export {
  Label as default
};
