import { renderless, api } from '@opentiny/vue-renderless/time-spinner/vue';
import { defineComponent, directive, props, setup } from '@opentiny/vue-common';
import Scrollbar from '@opentiny/vue-scrollbar';
import bind from '@opentiny/vue-renderless/common/deps/repeat-click';
import { IconChevronDown, IconChevronUp } from '@opentiny/vue-icon';
import { resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, Fragment, createVNode, withCtx, renderList, createElementVNode, toDisplayString, withDirectives, vShow, createCommentVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var classes = {
  "wrapper": "max-h-[270px] overflow-hidden flex-1 align-top relative",
  "is-arrow": "left-0 box-border text-center overflow-hidden",
  "list": "translate-y-[110px] p-0 m-0 list-none text-center after:content-[''] after:block after:h-[100px] after:w-full",
  "item": "text-sm text-color-text-primary h-12 w-12 py-1 cursor-pointer mx-auto my-0",
  "text": "rounded my-0 flex items-center justify-center h-full hover:bg-color-bg-2",
  "arrow": "text-xs text-color-text-placeholder h-3 leading-3 absolute left-0 w-full z-[1] text-center cursor-pointer",
  "active": "bg-color-fill-6 hover:bg-color-fill-6 text-color-brand",
  "disabled": "text-color-text-placeholder cursor-not-allowed bg-transparent hover:bg-transparent"
};
var _sfc_main = defineComponent({
  emits: ["change", "select-range"],
  components: {
    TinyScrollbar: Scrollbar,
    IconChevronDown: IconChevronDown(),
    IconChevronUp: IconChevronUp()
  },
  directives: directive({
    repeatClick: {
      bind
    }
  }),
  props: [].concat(props, ["date", "defaultValue", "showSeconds", "arrowControl", "amPmMode", "step"]),
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api,
      classes
    });
  }
});
var _hoisted_1 = ["onClick"];
var _hoisted_2 = ["onClick"];
var _hoisted_3 = ["onClick"];
var _hoisted_4 = {
  "data-tag": "tiny-time-spinner__arrow tiny-icon-arrow-up"
};
var _hoisted_5 = {
  "data-tag": "tiny-time-spinner__arrow tiny-icon-arrow-down"
};
var _hoisted_6 = {
  "data-tag": "tiny-time-spinner__arrow tiny-icon-arrow-up"
};
var _hoisted_7 = {
  "data-tag": "tiny-time-spinner__arrow tiny-icon-arrow-down"
};
var _hoisted_8 = {
  "data-tag": "tiny-time-spinner__arrow tiny-icon-arrow-up"
};
var _hoisted_9 = {
  "data-tag": "tiny-time-spinner__arrow tiny-icon-arrow-down"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_scrollbar = resolveComponent("tiny-scrollbar");
  var _component_icon_chevron_up = resolveComponent("icon-chevron-up");
  var _component_icon_chevron_down = resolveComponent("icon-chevron-down");
  var _directive_repeat_click = resolveDirective("repeat-click");
  return openBlock(), createElementBlock(
    "div",
    {
      "data-tag": "tiny-time-spinner",
      class: normalizeClass(["flex", {
        "has-seconds": _ctx.showSeconds
      }])
    },
    [!_ctx.arrowControl ? (openBlock(), createElementBlock(
      Fragment,
      {
        key: 0
      },
      [createVNode(_component_tiny_scrollbar, {
        onMouseenter: _cache[0] || (_cache[0] = function($event) {
          return _ctx.emitSelectRange("hours");
        }),
        onMousemove: _cache[1] || (_cache[1] = function($event) {
          return _ctx.adjustCurrentSpinner("hours");
        }),
        class: normalizeClass([_ctx.gcls("wrapper"), _ctx.state.animationName]),
        "data-tag": "tiny-time-spinner__wrapper",
        "wrap-style": "max-height: inherit;",
        "data-view-class": "tiny-time-spinner__list",
        "view-class": _ctx.gcls("list"),
        noresize: "",
        tag: "div",
        ref: "hours"
      }, {
        default: withCtx(function() {
          return [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.hoursList, function(_ref) {
              var _ctx$m;
              var disabled = _ref.disabled, hour = _ref.hour;
              return openBlock(), createElementBlock("div", {
                onClick: function onClick($event) {
                  return _ctx.handleClick("hours", {
                    value: hour,
                    disabled
                  });
                },
                "data-tag": "li",
                key: hour,
                class: normalizeClass([_ctx.gcls("item")])
              }, [createElementVNode(
                "span",
                {
                  class: normalizeClass(_ctx.m(_ctx.gcls("text"), (_ctx$m = {}, _ctx$m[_ctx.gcls("active")] = hour === _ctx.state.hours, _ctx$m[_ctx.gcls("disabled")] = disabled, _ctx$m)))
                },
                toDisplayString(("0" + (_ctx.amPmMode ? hour % 12 || 12 : hour)).slice(-2)) + toDisplayString(_ctx.amPm(hour)),
                3
                /* TEXT, CLASS */
              )], 10, _hoisted_1);
            }),
            128
            /* KEYED_FRAGMENT */
          ))];
        }),
        _: 1
        /* STABLE */
      }, 8, ["class", "view-class"]), createVNode(_component_tiny_scrollbar, {
        onMouseenter: _cache[2] || (_cache[2] = function($event) {
          return _ctx.emitSelectRange("minutes");
        }),
        onMousemove: _cache[3] || (_cache[3] = function($event) {
          return _ctx.adjustCurrentSpinner("minutes");
        }),
        class: normalizeClass([_ctx.gcls("wrapper"), _ctx.state.animationName + "-up"]),
        "data-tag": "tiny-time-spinner__wrapper",
        "wrap-style": "max-height: inherit;",
        "data-view-class": "tiny-time-spinner__list",
        "view-class": _ctx.gcls("list"),
        noresize: "",
        tag: "div",
        ref: "minutes"
      }, {
        default: withCtx(function() {
          return [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.minutesList, function(_ref2) {
              var _ctx$m2;
              var disabled = _ref2.disabled, minute = _ref2.minute;
              return openBlock(), createElementBlock("div", {
                onClick: function onClick($event) {
                  return _ctx.handleClick("minutes", {
                    value: minute,
                    disabled: false
                  });
                },
                key: minute,
                "data-tag": "li",
                class: normalizeClass([_ctx.gcls("item")])
              }, [createElementVNode(
                "span",
                {
                  class: normalizeClass(_ctx.m(_ctx.gcls("text"), (_ctx$m2 = {}, _ctx$m2[_ctx.gcls("active")] = minute === _ctx.state.minutes, _ctx$m2[_ctx.gcls("disabled")] = !disabled, _ctx$m2)))
                },
                toDisplayString(("0" + minute).slice(-2)),
                3
                /* TEXT, CLASS */
              )], 10, _hoisted_2);
            }),
            128
            /* KEYED_FRAGMENT */
          ))];
        }),
        _: 1
        /* STABLE */
      }, 8, ["class", "view-class"]), withDirectives(createVNode(_component_tiny_scrollbar, {
        onMouseenter: _cache[4] || (_cache[4] = function($event) {
          return _ctx.emitSelectRange("seconds");
        }),
        onMousemove: _cache[5] || (_cache[5] = function($event) {
          return _ctx.adjustCurrentSpinner("seconds");
        }),
        class: normalizeClass([_ctx.gcls("wrapper"), _ctx.state.animationName]),
        "data-tag": "tiny-time-spinner__wrapper",
        "wrap-style": "max-height: inherit;",
        "data-view-class": "tiny-time-spinner__list",
        "view-class": _ctx.gcls("list"),
        noresize: "",
        tag: "div",
        ref: "seconds"
      }, {
        default: withCtx(function() {
          return [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.secondsList, function(_ref3) {
              var _ctx$m3;
              var second = _ref3.second;
              return openBlock(), createElementBlock("div", {
                onClick: function onClick($event) {
                  return _ctx.handleClick("seconds", {
                    value: second,
                    disabled: false
                  });
                },
                "data-tag": "li",
                class: normalizeClass([_ctx.gcls("item")]),
                key: second
              }, [createElementVNode(
                "span",
                {
                  class: normalizeClass(_ctx.m(_ctx.gcls("text"), (_ctx$m3 = {}, _ctx$m3[_ctx.gcls("active")] = second === _ctx.state.seconds, _ctx$m3)))
                },
                toDisplayString(("0" + second).slice(-2)),
                3
                /* TEXT, CLASS */
              )], 10, _hoisted_3);
            }),
            128
            /* KEYED_FRAGMENT */
          ))];
        }),
        _: 1
        /* STABLE */
      }, 8, ["class", "view-class"]), [[vShow, _ctx.showSeconds]])],
      64
      /* STABLE_FRAGMENT */
    )) : createCommentVNode("v-if", true), _ctx.arrowControl ? (openBlock(), createElementBlock(
      Fragment,
      {
        key: 1
      },
      [createElementVNode(
        "div",
        {
          onMouseenter: _cache[6] || (_cache[6] = function($event) {
            return _ctx.emitSelectRange("hours");
          }),
          "data-tag": "tiny-time-spinner__wrapper is-arrow",
          class: normalizeClass(_ctx.gcls(["wrapper", "is-arrow"]))
        },
        [withDirectives((openBlock(), createElementBlock("i", _hoisted_4, [createVNode(_component_icon_chevron_up)])), [[_directive_repeat_click, _ctx.decrease]]), withDirectives((openBlock(), createElementBlock("i", _hoisted_5, [createVNode(_component_icon_chevron_down)])), [[_directive_repeat_click, _ctx.increase]]), createElementVNode(
          "ul",
          {
            "data-tag": "tiny-time-spinner__list",
            ref: "hours",
            class: normalizeClass([_ctx.state.animationName])
          },
          [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.arrowHourList, function(hour, key) {
              var _ctx$m4;
              return openBlock(), createElementBlock("div", {
                "data-tag": "li",
                key
              }, [createElementVNode(
                "span",
                {
                  class: normalizeClass(_ctx.m(_ctx.gcls("text"), (_ctx$m4 = {}, _ctx$m4[_ctx.gcls("active")] = hour === _ctx.state.hours, _ctx$m4[_ctx.gcls("disabled")] = _ctx.state.hoursList.find(function(item) {
                    return item.hour === hour;
                  }) && _ctx.state.hoursList.find(function(item) {
                    return item.hour === hour;
                  }).disabled, _ctx$m4)))
                },
                toDisplayString(hour === void 0 ? "" : ("0" + (_ctx.amPmMode ? hour % 12 || 12 : hour)).slice(-2) + _ctx.amPm(hour)),
                3
                /* TEXT, CLASS */
              )]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))],
          2
          /* CLASS */
        )],
        34
        /* CLASS, NEED_HYDRATION */
      ), createElementVNode(
        "div",
        {
          onMouseenter: _cache[7] || (_cache[7] = function($event) {
            return _ctx.emitSelectRange("minutes");
          }),
          "data-tag": "tiny-time-spinner__wrapper is-arrow",
          class: normalizeClass(_ctx.gcls(["wrapper", "is-arrow"]))
        },
        [withDirectives((openBlock(), createElementBlock("i", _hoisted_6, [createVNode(_component_icon_chevron_up)])), [[_directive_repeat_click, _ctx.decrease]]), withDirectives((openBlock(), createElementBlock("i", _hoisted_7, [createVNode(_component_icon_chevron_down)])), [[_directive_repeat_click, _ctx.increase]]), createElementVNode(
          "ul",
          {
            "data-tag": "tiny-time-spinner__list",
            ref: "minutes",
            class: normalizeClass([_ctx.state.animationName + "-up"])
          },
          [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.arrowMinuteList, function(minute, key) {
              var _ctx$m5;
              return openBlock(), createElementBlock("div", {
                "data-tag": "li",
                key
              }, [createElementVNode(
                "span",
                {
                  class: normalizeClass(_ctx.m(_ctx.gcls("text"), (_ctx$m5 = {}, _ctx$m5[_ctx.gcls("active")] = minute === _ctx.state.minutes, _ctx$m5)))
                },
                toDisplayString(minute === void 0 ? "" : ("0" + minute).slice(-2)),
                3
                /* TEXT, CLASS */
              )]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))],
          2
          /* CLASS */
        )],
        34
        /* CLASS, NEED_HYDRATION */
      ), _ctx.showSeconds ? (openBlock(), createElementBlock(
        "div",
        {
          key: 0,
          onMouseenter: _cache[8] || (_cache[8] = function($event) {
            return _ctx.emitSelectRange("seconds");
          }),
          "data-tag": "tiny-time-spinner__wrapper is-arrow",
          class: normalizeClass(_ctx.gcls(["wrapper", "is-arrow"]))
        },
        [withDirectives((openBlock(), createElementBlock("i", _hoisted_8, [createVNode(_component_icon_chevron_up)])), [[_directive_repeat_click, _ctx.decrease]]), withDirectives((openBlock(), createElementBlock("i", _hoisted_9, [createVNode(_component_icon_chevron_down)])), [[_directive_repeat_click, _ctx.increase]]), createElementVNode(
          "ul",
          {
            "data-tag": "tiny-time-spinner__list",
            ref: "seconds",
            class: normalizeClass([_ctx.state.animationName])
          },
          [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.arrowSecondList, function(second, key) {
              var _ctx$m6;
              return openBlock(), createElementBlock("div", {
                "data-tag": "li",
                key
              }, [createElementVNode(
                "span",
                {
                  class: normalizeClass(_ctx.m(_ctx.gcls("text"), (_ctx$m6 = {}, _ctx$m6[_ctx.gcls("active")] = second === _ctx.state.seconds, _ctx$m6)))
                },
                toDisplayString(second === void 0 ? "" : ("0" + second).slice(-2)),
                3
                /* TEXT, CLASS */
              )]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))],
          2
          /* CLASS */
        )],
        34
        /* CLASS, NEED_HYDRATION */
      )) : createCommentVNode("v-if", true)],
      64
      /* STABLE_FRAGMENT */
    )) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  );
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobileFirst as default };
