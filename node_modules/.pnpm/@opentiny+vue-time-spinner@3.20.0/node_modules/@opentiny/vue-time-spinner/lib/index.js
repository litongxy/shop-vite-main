function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/time-spinner/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  ANIMATIONNAME: "tiny-transition-timepicker"
};
var TimeSpinner = defineComponent({
  name: $prefix + "TimeSpinner",
  componentName: "TimeSpinner",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    date: {},
    defaultValue: {},
    showSeconds: {
      type: Boolean,
      default: true
    },
    arrowControl: Boolean,
    amPmMode: {
      type: String,
      default: ""
      // 'a': am/pm; 'A': AM/PM
    },
    step: {
      type: Object,
      default: function _default2() {
        return {
          hour: 1,
          minute: 1,
          second: 1
        };
      },
      validator: function validator(_ref) {
        var hour = _ref.hour, minute = _ref.minute, second = _ref.second;
        var validateArray = [{
          value: hour,
          range: 24
        }, {
          value: minute,
          range: 60
        }, {
          value: second,
          range: 60
        }];
        return validateArray.every(function(_ref2) {
          var value = _ref2.value, range = _ref2.range;
          return value || value === 0 ? Math.floor(value) === value && value > 0 && value <= range : true;
        });
      }
    },
    startDate: {
      type: Object,
      default: function _default3() {
        return {};
      }
    },
    endDate: {
      type: Object,
      default: function _default4() {
        return {};
      }
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
TimeSpinner.install = function(Vue) {
  Vue.component(TimeSpinner.name, TimeSpinner);
};
TimeSpinner.version = version;
export {
  TimeSpinner as default
};
