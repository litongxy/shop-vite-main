declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            ANIMATIONNAME: string;
        };
    };
    date: {};
    defaultValue: {};
    showSeconds: {
        type: BooleanConstructor;
        default: boolean;
    };
    arrowControl: BooleanConstructor;
    amPmMode: {
        type: StringConstructor;
        default: string;
    };
    step: {
        type: ObjectConstructor;
        default(): {
            hour: number;
            minute: number;
            second: number;
        };
        validator: ({ hour, minute, second }: {
            hour: any;
            minute: any;
            second: any;
        }) => boolean;
    };
    startDate: {
        type: ObjectConstructor;
        default: () => {};
    };
    endDate: {
        type: ObjectConstructor;
        default: () => {};
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            ANIMATIONNAME: string;
        };
    };
    date: {};
    defaultValue: {};
    showSeconds: {
        type: BooleanConstructor;
        default: boolean;
    };
    arrowControl: BooleanConstructor;
    amPmMode: {
        type: StringConstructor;
        default: string;
    };
    step: {
        type: ObjectConstructor;
        default(): {
            hour: number;
            minute: number;
            second: number;
        };
        validator: ({ hour, minute, second }: {
            hour: any;
            minute: any;
            second: any;
        }) => boolean;
    };
    startDate: {
        type: ObjectConstructor;
        default: () => {};
    };
    endDate: {
        type: ObjectConstructor;
        default: () => {};
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    startDate: Record<string, any>;
    endDate: Record<string, any>;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    arrowControl: boolean;
    step: Record<string, any>;
    showSeconds: boolean;
    amPmMode: string;
}, {}>;
export default _default;
