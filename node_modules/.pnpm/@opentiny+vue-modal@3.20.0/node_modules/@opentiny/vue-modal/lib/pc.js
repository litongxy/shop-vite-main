function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import Button from "@opentiny/vue-button";
import { defineComponent, props, setup as _setup, h } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/modal/vue";
import "@opentiny/vue-theme/modal/index.css";
import { iconHelpSolid, iconInfoSolid, iconSuccess, iconWarning, iconError, iconLoadingShadow, iconMinscreenRight, iconFullscreenRight, iconClose } from "@opentiny/vue-icon";
var _sfc_main = /* @__PURE__ */ defineComponent({
  props: [].concat(props, ["_constants", "animat", "beforeClose", "duration", "escClosable", "events", "fullscreen", "height", "id", "isFormReset", "lockScroll", "lockView", "marginSize", "mask", "maskClosable", "message", "minHeight", "minWidth", "modelValue", "resize", "showFooter", "showHeader", "status", "title", "top", "type", "vSize", "width", "zIndex", "messageClosable", "confirmContent", "cancelContent", "confirmBtnProps", "cancelBtnProps", "footerDragable", "tiny_theme", "slots"]),
  emits: ["update:modelValue", "show", "close", "confirm", "cancel", "hide", "custom-mousedown", "custom-mouseup", "custom-mousemove"],
  provide: function provide() {
    return {
      dialog: this
    };
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  },
  render: function render() {
    var _ref, _ref2, _ref3, _this = this;
    var _this$$props = this.$props, $props = _this$$props === void 0 ? {} : _this$$props, state = this.state, scopedSlots = this.scopedSlots, vSize = this.vSize, type = this.type, resize = this.resize, animat = this.animat, status = this.status, showHeader = this.showHeader, messageClosable = this.messageClosable;
    var showFooter = this.showFooter, title = this.title, message = this.message, lockScroll = this.lockScroll, lockView = this.lockView, mask = this.mask, constants = this._constants, t = this.t;
    var confirmContent = this.confirmContent, cancelContent = this.cancelContent, confirmBtnProps = this.confirmBtnProps, cancelBtnProps = this.cancelBtnProps;
    var zoomLocat = state.zoomLocat, visible = state.visible, contentVisible = state.contentVisible, modalTop = state.modalTop, isMsg = state.isMsg;
    var _$props$slots = $props.slots, propSlots = _$props$slots === void 0 ? {} : _$props$slots;
    var defaultSlot = scopedSlots.default || propSlots.default;
    var footerSlot = scopedSlots.footer || propSlots.footer;
    var footerSlotParams = {
      $modal: this,
      beforeClose: this.beforeClose,
      confirm: this.confirmEvent,
      cancel: this.cancelEvent
    };
    var confirmButtonProps = Object.prototype.toString.call(confirmBtnProps) === "[object Object]" ? confirmBtnProps : {};
    var cancelButtonProps = Object.prototype.toString.call(cancelBtnProps) === "[object Object]" ? cancelBtnProps : {};
    var confirmButtonText = (_ref = confirmContent != null ? confirmContent : confirmBtnProps.text) != null ? _ref : t("ui.button.confirm");
    var cancelButtonText = (_ref2 = cancelContent != null ? cancelContent : cancelButtonProps.text) != null ? _ref2 : t("ui.button.cancel");
    var STATUS_MAPPING_COMPINENT = {
      QUESTION: iconHelpSolid(),
      INFO: iconInfoSolid(),
      SUCCESS: iconSuccess(),
      WARNING: iconWarning(),
      ERROR: iconError(),
      LOADING: iconLoadingShadow()
    };
    return h("div", {
      class: ["tiny-modal", "tiny-modal__wrapper", "type__" + type, (_ref3 = {}, _ref3["size__" + vSize] = vSize, _ref3["status__" + status] = typeof status === "string", _ref3.is__animat = animat, _ref3.lock__scroll = lockScroll, _ref3.lock__view = lockView, _ref3.is__mask = mask, _ref3.is__maximize = zoomLocat, _ref3.is__visible = contentVisible, _ref3.active = visible, _ref3)],
      style: {
        zIndex: state.modalZindex,
        top: modalTop ? modalTop + "px" : null
      },
      on: {
        click: this.selfClickEvent
      }
    }, [h("div", {
      class: "tiny-modal__box",
      style: state.boxStyle,
      ref: "modalBox",
      on: _extends({}, type === "message" ? {
        mouseenter: this.mouseEnterEvent,
        mouseleave: this.mouseLeaveEvent
      } : {})
    }, [showHeader ? h("div", {
      class: ["tiny-modal__header", status && state.theme === "saas" ? "tiny-modal__header-icon" : ""],
      on: {
        mousedown: this.mousedownEvent
      }
    }, [status ? h("div", {
      class: ["tiny-modal__status-wrapper"]
    }, [typeof status === "string" ? h(STATUS_MAPPING_COMPINENT[status.toUpperCase()], {
      class: [constants.STATUS_MAPPING_CLASSS[status.toUpperCase()]]
    }) : h(status, {
      class: ["tiny-modal__status-icon"]
    })]) : null, title !== "" ? h("span", {
      class: "tiny-modal__title"
    }, title || t("ui.alert.title")) : null, resize ? h(zoomLocat ? iconMinscreenRight() : iconFullscreenRight(), {
      class: ["tiny-modal__zoom-btn", "trigger__btn"],
      on: {
        click: this.toggleZoomEvent
      }
    }) : null, h(iconClose(), {
      class: ["tiny-modal__close-btn", "trigger__btn"],
      on: {
        click: this.closeEvent
      }
    })]) : null, h("div", {
      class: ["tiny-modal__body", type === "message" ? "is-message" : ""]
    }, [type === "message" ? h("div", {
      class: "tiny-modal__status-wrapper"
    }, [typeof status === "string" ? h(STATUS_MAPPING_COMPINENT[status.toUpperCase()], {
      class: [constants.STATUS_MAPPING_CLASSS[status.toUpperCase()]]
    }) : h(status, {
      class: ["tiny-modal__status-icon"]
    })]) : null, h("div", {
      class: "tiny-modal__content"
    }, defaultSlot ? defaultSlot.call(this, {
      $modal: this
    }, h) : [h("div", {
      class: "tiny-modal__text"
    }, typeof message === "function" ? message.call(this, h) : [message])]), messageClosable ? h("div", {
      class: "tiny-modal__close-wrapper"
    }, h(iconClose(), {
      class: ["tiny-modal__close-btn"],
      on: {
        click: this.closeEvent
      }
    })) : null]), showFooter ? h("div", {
      class: ["tiny-modal__footer", this.footerDragable ? "tiny-modal__footer-move" : ""],
      on: {
        mousedown: this.footerDragable ? this.mousedownEvent : function() {
        }
      }
    }, footerSlot ? footerSlot.call(this, footerSlotParams, h) : [type === "confirm" ? h(Button, {
      on: {
        click: this.cancelEvent
      },
      props: _extends({}, cancelButtonProps)
    }, cancelButtonText) : null, h(Button, {
      props: _extends({
        type: "primary"
      }, confirmButtonProps),
      on: {
        click: this.confirmEvent
      }
    }, confirmButtonText)]) : null, !isMsg && resize ? h("span", {
      class: "tiny-modal__resize"
    }, ["wl", "wr", "swst", "sest", "st", "swlb", "selb", "sb"].map(function(type2) {
      return h("span", {
        class: type2 + "-resize",
        attrs: {
          "data-type": type2
        },
        on: {
          mousedown: _this.dragEvent
        }
      });
    })) : null])]);
  }
});
export {
  _sfc_main as default
};
