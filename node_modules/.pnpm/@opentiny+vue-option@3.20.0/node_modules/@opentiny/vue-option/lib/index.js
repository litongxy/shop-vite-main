function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var optionsProps = _extends({}, $props, {
  value: {
    required: true
  },
  label: [String, Number],
  created: Boolean,
  disabled: {
    type: Boolean,
    default: false
  },
  events: {
    type: Object,
    default: function _default() {
      return {};
    }
  },
  visible: {
    type: Boolean,
    default: true
  },
  highlightClass: String,
  required: {
    type: Boolean,
    default: false
  },
  // tiny 新增
  icon: Object
});
var Option = defineComponent({
  name: $prefix + "Option",
  componentName: "Option",
  props: optionsProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Option.install = function(Vue) {
  Vue.component(Option.name, Option);
};
Option.version = version;
export {
  Option as default
};
