"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Quill = require("quill");
require("./attributors/index.cjs.js");
const index = require("./config/index.cjs.js");
const index$5 = require("./counter/index.cjs.js");
const customClipboard = require("./custom-clipboard.cjs.js");
const BlotFormatter = require("./custom-image/BlotFormatter.cjs.js");
const CustomImageSpec = require("./custom-image/specs/CustomImageSpec.cjs.js");
const customUploader = require("./custom-uploader.cjs.js");
const index$6 = require("./emoji/index.cjs.js");
const index$4 = require("./file/index.cjs.js");
const index$1 = require("./format-painter/index.cjs.js");
const handler = require("./fullscreen/handler.cjs.js");
const index$7 = require("./link/index.cjs.js");
const index$9 = require("./mathlive/index.cjs.js");
const formats = require("./mathlive/formats.cjs.js");
const Mention = require("./mention/Mention.cjs.js");
const index$2 = require("./screenshot/index.cjs.js");
const index$b = require("./soft-break/index.cjs.js");
const index$a = require("./strike/index.cjs.js");
const index$8 = require("./syntax/index.cjs.js");
const betterTable = require("./table/better-table.cjs.js");
const index$3 = require("./toolbar/index.cjs.js");
const is = require("./utils/is.cjs.js");
const index$c = require("./video/index.cjs.js");
const editor_config = require("./config/editor.config.cjs.js");
const toolbarTip = require("./toolbar/toolbar-tip.cjs.js");
const fontStyle = require("./attributors/font-style.cjs.js");
const fontSize = require("./attributors/font-size.cjs.js");
const lineHeight = require("./attributors/line-height.cjs.js");
const textIndent = require("./attributors/text-indent.cjs.js");
function resolveLanguageOption(options) {
  if (is.isUndefined(options.lang)) {
    options.lang = editor_config.defaultLanguage;
  }
  if (!(options.lang in editor_config.LANG_CONF)) {
    console.warn(`The language ${options.lang} is not supported. Use the default language: ${editor_config.defaultLanguage}`);
    options.lang = editor_config.defaultLanguage;
  }
  return {
    lang: options.lang,
    langText: Object.assign({}, editor_config.LANG_CONF[options.lang], options.langText || {})
  };
}
class FluentEditor extends Quill {
  constructor(container, options = {}) {
    options = Object.assign(options, resolveLanguageOption(options || {}));
    super(container, options);
    this.isFullscreen = false;
  }
  changeLanguage(options) {
    const langOps = resolveLanguageOption(options);
    if (langOps.lang === this.options.lang) return;
    this.options.lang = langOps.lang;
    this.options.langText = langOps.langText;
    this.emitter.emit(editor_config.CHANGE_LANGUAGE_EVENT, this.options.lang, this.options.langText);
  }
}
const registerModules = function() {
  const Icons = Quill.import("ui/icons");
  Object.entries(index.ICONS_CONFIG).forEach(([key, icon]) => {
    Icons[key] = icon;
  });
  const SnowTheme = Quill.imports["themes/snow"];
  SnowTheme.DEFAULTS = {
    modules: {
      "keyboard": {
        bindings: {
          ...betterTable.default.keyboardBindings
        }
      },
      "toolbar": {
        handlers: {
          ...SnowTheme.DEFAULTS.modules.toolbar.handlers,
          "formula": function() {
            if (!this.quill.isEnabled()) return;
            const mathlive = this.quill.getModule("mathlive");
            if (!mathlive) {
              this.quill.theme.tooltip.edit("formula");
            } else {
              mathlive.createDialog();
            }
          },
          "undo": function() {
            this.quill.history.undo();
          },
          "redo": function() {
            this.quill.history.redo();
          },
          "better-table": function() {
            this.quill.getModule("better-table").insertTable(3, 3);
          },
          "file": function() {
            var _a, _b;
            const accept = (_b = (_a = this.quill.options) == null ? void 0 : _a.uploadOption) == null ? void 0 : _b.fileAccept;
            index.inputFile.call(this, "file", accept);
          },
          "image": function() {
            var _a, _b;
            const accept = (_b = (_a = this.quill.options) == null ? void 0 : _a.uploadOption) == null ? void 0 : _b.imageAccept;
            index.inputFile.call(this, "image", accept);
          },
          "emoji": function() {
          },
          "fullscreen": handler.fullscreenHandler,
          "list": function(value) {
            var _a, _b;
            const range = this.quill.getSelection();
            const formats2 = this.quill.getFormat(range);
            const preListValue = Array.isArray(formats2.list) ? (_a = formats2.list[0]) == null ? void 0 : _a.value : (_b = formats2.list) == null ? void 0 : _b.value;
            const curListValue = index.getListValue(value, preListValue);
            const lines = this.quill.getLines(range.index, range.length);
            const tableCols = lines.filter((line) => line.statics.blotName === "table-col" && !line.prev);
            if (tableCols.length) {
              let start = range.index;
              tableCols.forEach((item, index2) => {
                const table = item.domNode.closest("table.quill-better-table");
                const tableBlot = Quill.find(table);
                const tableLength = tableBlot.length();
                const tableStart = this.quill.getIndex(item);
                const tableEnd = tableStart + tableLength;
                const beforeTableRangeLength = tableStart - start;
                this.quill.setSelection(start, beforeTableRangeLength, Quill.sources.SILENT);
                this.quill.format("list", curListValue, Quill.sources.USER);
                table.parentNode.classList.remove("quill-better-table-selected");
                start = tableEnd;
                if (index2 === tableCols.length - 1) {
                  this.quill.setSelection(tableEnd, range.index + range.length - tableEnd);
                  this.quill.format("list", curListValue, Quill.sources.USER);
                }
              });
            } else {
              this.quill.format("list", curListValue, Quill.sources.USER);
            }
          },
          [index$1.FormatPainter.toolName]: index$1.FormatPainter,
          [index$2.Screenshot.toolName]: index$2.Screenshot,
          "lineheight": function(value) {
            this.quill.format("line-height", value);
          }
        }
      },
      "better-table": {
        operationMenu: {
          color: true
        }
      },
      "image": {
        specs: [CustomImageSpec.CustomImageSpec],
        overlay: {
          style: {
            border: "1px dashed rgb(68, 68, 68)"
          }
        },
        align: {
          icons: {
            left: '<i class="icon-text-align-left"></i>',
            center: '<i class="icon-text-align-center"></i>',
            right: '<i class="icon-text-align-right"></i>'
          }
        }
      },
      [toolbarTip.ToolbarTip.moduleName]: true
    }
  };
  FluentEditor.register(
    {
      "modules/toolbar": index$3.default,
      "modules/mention": Mention.default,
      "modules/better-table": betterTable.default,
      "modules/clipboard": customClipboard.default,
      "modules/uploader": customUploader.default,
      // 三者关联性最强
      "modules/image": BlotFormatter.default,
      // 三者关联性最强
      "modules/file": index$4.default,
      // 三者关联性最强
      "modules/counter": index$5.default,
      "modules/emoji-toolbar": index$6.default.ToolbarEmoji,
      "modules/emoji-shortname": index$6.default.ShortNameEmoji,
      // 'modules/global-link': GlobalLink,//暂未开发
      "modules/link": index$7.default,
      // 报错
      // 'modules/quickmenu': QuickMenu,//暂未开发
      "modules/syntax": index$8.default,
      "modules/mathlive": index$9.default,
      [`modules/${toolbarTip.ToolbarTip.moduleName}`]: toolbarTip.ToolbarTip,
      "formats/strike": index$a.default,
      "formats/softBreak": index$b.default,
      "formats/video": index$c.default,
      "formats/emoji": index$6.default.EmojiBlot,
      "formats/font": fontStyle.FontStyle,
      "formats/size": fontSize.SizeStyle,
      "formats/line-height": lineHeight.LineHeightStyle,
      "formats/text-indent": textIndent.TextIndentStyle,
      [`formats/${formats.default.blotName}`]: formats.default
    },
    true
    // 覆盖内部模块
  );
  return FluentEditor;
};
const FluentEditor$1 = registerModules();
exports.FluentEditor = FluentEditor;
exports.default = FluentEditor$1;
//# sourceMappingURL=fluent-editor.cjs.js.map
