"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const editor_utils = require("./editor.utils.cjs.js");
const icons_config = require("./icons.config.cjs.js");
const editor_config = require("./editor.config.cjs.js");
const ICONS_CONFIG = {
  "undo": icons_config.UNDO_ICON,
  "redo": icons_config.REDO_ICON,
  "clean": icons_config.CLEAN_ICON,
  "bold": icons_config.BOLD_ICON,
  "italic": icons_config.ITALIC_ICON,
  "underline": icons_config.UNDERLINE_ICON,
  "strike": icons_config.STRIKE_ICON,
  "font": "",
  "size": "",
  "color": `<span class="ql-color-inner">
    ${icons_config.COLOR_ICON}
    ${icons_config.TRIANGLE_DOWN_ICON}
    <span class="current-color-line"></span>
  </span>`,
  "background": `<span class="ql-color-inner">
    ${icons_config.BACKGROUND_COLOR_ICON}
    ${icons_config.TRIANGLE_DOWN_ICON}
    <span class="current-color-line color-line-background"></span>
  </span>`,
  "align": {
    "": icons_config.ALIGN_LEFT_ICON,
    "center": icons_config.ALIGN_CENTER_ICON,
    "right": icons_config.ALIGN_RIGHT_ICON
  },
  "list": {
    bullet: icons_config.LIST_UNORDERED_ICON,
    ordered: icons_config.LIST_ORDERED_ICON,
    check: icons_config.LIST_CHECK_ICON
  },
  "code": icons_config.CODE_ICON,
  "code-block": icons_config.CODE_BLOCK_ICON,
  "blockquote": icons_config.BLOCKQUOTE_ICON,
  "image": icons_config.IMAGE_ICON,
  "file": icons_config.FILE_ICON,
  "better-table": icons_config.TABLE_ICON,
  "link": icons_config.LINK_ICON,
  "global-link": icons_config.GLOBAL_LINK_ICON,
  "fullscreen": icons_config.FULLSCREEN_ICON,
  "fullscreen-exit": icons_config.FULLSCREEN_EXIT_ICON,
  "emoji": icons_config.EMOJI_ICON,
  "help": icons_config.HELP_ICON,
  "screenshot": icons_config.SCREENSHOT_ICON,
  "format-painter": icons_config.FORMAT_PAINTER_ICON
};
function inputFile(type, accept) {
  const defaultMIMETypes = this.quill.uploader.options[type].join(", ");
  const mimeTypes = accept || defaultMIMETypes;
  let fileInput = this.container.querySelector(`input.ql-${type}[type=file]`);
  if (editor_utils.isNullOrUndefined(fileInput)) {
    fileInput = document.createElement("input");
    fileInput.classList.add(`ql-${type}`);
    fileInput.setAttribute("type", "file");
    fileInput.setAttribute("accept", mimeTypes);
    if (this.quill.uploader.options.enableMultiUpload === true || this.quill.uploader.options.enableMultiUpload.file && type === "file" || this.quill.uploader.options.enableMultiUpload.image && type === "image") {
      fileInput.setAttribute("multiple", "");
    }
    fileInput.addEventListener("change", () => {
      const range = this.quill.getSelection(true);
      this.quill.uploader.upload(range, fileInput.files, type === "file");
      fileInput.value = "";
    });
    this.container.appendChild(fileInput);
  }
  fileInput.click();
}
function getListValue(value, preListValue) {
  let curListValue = value;
  if (preListValue && preListValue === value) {
    curListValue = false;
  } else if (value === "check") {
    if (preListValue === "checked" || preListValue === "unchecked") {
      curListValue = false;
    } else {
      curListValue = "unchecked";
    }
  }
  return curListValue;
}
const namespace = "fe";
exports.getEventComposedPath = editor_utils.getEventComposedPath;
exports.hadProtocol = editor_utils.hadProtocol;
exports.hexToRgbA = editor_utils.hexToRgbA;
exports.imageFileToUrl = editor_utils.imageFileToUrl;
exports.imageUrlToFile = editor_utils.imageUrlToFile;
exports.insideTable = editor_utils.insideTable;
exports.isInside = editor_utils.isInside;
exports.isNullOrUndefined = editor_utils.isNullOrUndefined;
exports.isPureIE = editor_utils.isPureIE;
exports.omit = editor_utils.omit;
exports.replaceDeltaImage = editor_utils.replaceDeltaImage;
exports.sanitize = editor_utils.sanitize;
exports.splitWithBreak = editor_utils.splitWithBreak;
exports.AUDIO_VIDEO_UPLOADER_MIME_TYPES = editor_config.AUDIO_VIDEO_UPLOADER_MIME_TYPES;
exports.BIG_DELTA_LIMIT = editor_config.BIG_DELTA_LIMIT;
exports.CHANGE_LANGUAGE_EVENT = editor_config.CHANGE_LANGUAGE_EVENT;
exports.COMPRESSED_UPLOADER_MIME_TYPES = editor_config.COMPRESSED_UPLOADER_MIME_TYPES;
exports.DOC_UPLOADER_MIME_TYPES = editor_config.DOC_UPLOADER_MIME_TYPES;
exports.FILE_UPLOADER_MIME_TYPES = editor_config.FILE_UPLOADER_MIME_TYPES;
exports.IMAGE_UPLOADER_MIME_TYPES = editor_config.IMAGE_UPLOADER_MIME_TYPES;
exports.LANG_CONF = editor_config.LANG_CONF;
exports.OTHER_FILE_UPLOADER_MIME_TYPES = editor_config.OTHER_FILE_UPLOADER_MIME_TYPES;
exports.PPT_UPLOADER_MIME_TYPES = editor_config.PPT_UPLOADER_MIME_TYPES;
exports.XSL_UPLOADER_MIME_TYPES = editor_config.XSL_UPLOADER_MIME_TYPES;
exports.defaultLanguage = editor_config.defaultLanguage;
exports.ICONS_CONFIG = ICONS_CONFIG;
exports.getListValue = getListValue;
exports.inputFile = inputFile;
exports.namespace = namespace;
//# sourceMappingURL=index.cjs.js.map
