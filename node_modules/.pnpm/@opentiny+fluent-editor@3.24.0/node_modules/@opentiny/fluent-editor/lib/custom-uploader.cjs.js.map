{"version":3,"file":"custom-uploader.cjs.js","sources":["../../src/custom-uploader.ts"],"sourcesContent":["import type { Range } from 'quill/core/quill'\r\n\r\nimport Quill from 'quill'\r\nimport {\r\n  FILE_UPLOADER_MIME_TYPES,\r\n  IMAGE_UPLOADER_MIME_TYPES,\r\n} from './config/editor.config'\r\nimport {\r\n  isNullOrUndefined,\r\n} from './config/editor.utils'\r\n\r\ninterface InsertFileData {\r\n  code: number\r\n  message?: string\r\n  data: {\r\n    title: string\r\n    size: number\r\n    src: string\r\n  }\r\n}\r\n\r\nconst Uploader = Quill.imports['modules/uploader']\r\nconst Delta = Quill.import('delta')\r\n\r\nclass CustomUploader extends Uploader {\r\n  quill\r\n  options\r\n\r\n  upload(range, files, isFile?) {\r\n    const uploads = []\r\n    const fileFlags = []\r\n    const rejectFlags = {\r\n      file: false,\r\n      image: false,\r\n    }\r\n    const uploadOption = this.quill.options.uploadOption\r\n    const acceptObj\r\n      = (uploadOption && {\r\n        image: uploadOption.imageAccept,\r\n        file: uploadOption.fileAccept,\r\n      })\r\n      || {}\r\n    Array.from(files).forEach((file: any) => {\r\n      if (file) {\r\n        const fileFlag\r\n          = typeof isFile === 'boolean'\r\n            ? isFile\r\n            : !/^image\\/[-\\w.]+$/.test(file.type)\r\n        const fileType = fileFlag ? 'file' : 'image'\r\n        const accept = acceptObj[fileType] || this.options[fileType]\r\n        if (this.isAllowedFileType(accept, file) && this.isAllowedFileSize(uploadOption?.maxSize, file)) {\r\n          uploads.push(file)\r\n          fileFlags.push(fileFlag)\r\n          uploadOption?.success?.(file)\r\n        }\r\n        else {\r\n          rejectFlags[fileType] = true\r\n          uploadOption?.fail?.(file)\r\n        }\r\n      }\r\n    })\r\n    this.options.handler.call(this, range, uploads, fileFlags, rejectFlags)\r\n  }\r\n\r\n  isAllowedFileSize = (maxSize: number, file: File) => {\r\n    if (isNullOrUndefined(maxSize)) {\r\n      return true\r\n    }\r\n\r\n    return file.size <= maxSize\r\n  }\r\n\r\n  isAllowedFileType = (accept: Array<string> | string, file: File) => {\r\n    if (accept) {\r\n      const baseMimeType = file.type.replace(/\\/.*$/, '')\r\n      const acceptArr = typeof accept === 'string' ? accept.split(',') : accept\r\n      return acceptArr.some((type: string) => {\r\n        const validType = type.trim()\r\n        //  suffix name (e.g. '.png,.xlsx')\r\n        if (validType.startsWith('.')) {\r\n          return (\r\n            file.name\r\n              .toLowerCase()\r\n              .includes(validType.toLowerCase(), file.name.toLowerCase().length - validType.toLowerCase().length)\r\n          )\r\n          // mime type like 'image/*'\r\n        }\r\n        else if (/\\/\\*$/.test(validType)) {\r\n          return baseMimeType === validType.replace(/\\/.*$/, '')\r\n        }\r\n        //  mime type like 'text/plain,application/json'\r\n        return file.type === validType\r\n      })\r\n    }\r\n    return true\r\n  }\r\n\r\n  // 处理上传文件\r\n  handleUploadFile(range, files, _hasRejectedFile) {\r\n    this.insertFileToEditor(range, files[0], {\r\n      code: 0,\r\n      data: {\r\n        title: files[0].name,\r\n        size: files[0].size,\r\n        src: files[0].src,\r\n      },\r\n    })\r\n  }\r\n\r\n  // 将文件插入编辑器\r\n  insertFileToEditor(range: Range, file: File, { code, message, data }: InsertFileData) {\r\n    if (code === 0) {\r\n      const oldContent = new Delta().retain(range.index).delete(range.length)\r\n      const videoFlag = this.uploadOption && this.uploadOption.isVideoPlay && /^video\\/[-\\w.]+$/.test(file.type)\r\n      const insertObj = videoFlag ? { video: data } : { file: data }\r\n      const currentContent = new Delta([{ insert: insertObj }])\r\n      const newContent = oldContent.concat(currentContent)\r\n      this.quill.updateContents(newContent, Quill.sources.USER)\r\n      this.quill.setSelection(range.index + 1)\r\n    }\r\n    else {\r\n      console.error('error message:', message)\r\n    }\r\n  }\r\n\r\n  // 将图片插入编辑器\r\n  insertImageToEditor(range, { code, message, data }) {\r\n    if (code === 0) {\r\n      const { imageId, imageUrl } = data\r\n      // 粘贴截图或者从外源直接拷贝的单图时，需要将编辑器中已选中的内容删除\r\n      const oldContent = new Delta().retain(range.index).delete(range.length)\r\n      const currentContent = new Delta([\r\n        {\r\n          insert: { image: imageUrl },\r\n          attributes: { 'image-id': imageId },\r\n        },\r\n      ])\r\n      const newContent = oldContent.concat(currentContent)\r\n      this.quill.updateContents(newContent, Quill.sources.USER)\r\n      this.quill.setSelection(range.index + 1)\r\n    }\r\n    else {\r\n      console.error('error message:', message)\r\n    }\r\n  }\r\n\r\n  // 处理上传图片\r\n  handleUploadImage(range, { file, files }, hasRejectedImage) {\r\n    if (this.quill.options.uploadOption?.imageUpload) {\r\n      const imageEnableMultiUpload = this.enableMultiUpload === true || this.enableMultiUpload?.image\r\n\r\n      const result = {\r\n        file,\r\n        data: { files: [file] },\r\n        hasRejectedImage,\r\n        callback: (res) => {\r\n          if (!res) {\r\n            return\r\n          }\r\n          if (imageEnableMultiUpload && Array.isArray(res)) {\r\n            res.forEach(value => this.insertImageToEditor(range, value))\r\n          }\r\n          else {\r\n            this.insertImageToEditor(range, res)\r\n          }\r\n        },\r\n        editor: this.quill,\r\n      }\r\n      if (imageEnableMultiUpload) {\r\n        result.data = { files }\r\n      }\r\n      this.quill.options.uploadOption?.imageUpload(result)\r\n    }\r\n    else {\r\n      const promises = files.map((fileItem) => {\r\n        return new Promise((resolve) => {\r\n          const reader = new FileReader()\r\n          reader.onload = (e: any) => {\r\n            resolve(e.target.result)\r\n          }\r\n          reader.readAsDataURL(fileItem)\r\n        })\r\n      })\r\n      Promise.all(promises).then((images) => {\r\n        const update = images.reduce((delta: any, image) => {\r\n          return delta.insert({ image })\r\n        }, new Delta().retain(range.index).delete(range.length))\r\n\r\n        this.quill.updateContents(update, Quill.sources.USER)\r\n        this.quill.setSelection(range.index + images.length, Quill.sources.SILENT)\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nCustomUploader.DEFAULTS = {\r\n  file: FILE_UPLOADER_MIME_TYPES,\r\n  image: IMAGE_UPLOADER_MIME_TYPES,\r\n  enableMultiUpload: false,\r\n  handler(range, files, fileFlags, rejectFlags) {\r\n    const fileArr = []\r\n    const imgArr = []\r\n    files.forEach((file, index) => (fileFlags[index] ? fileArr.push(file) : imgArr.push(file)))\r\n    if (this.quill.options.modules.file && (fileArr.length || rejectFlags.file)) {\r\n      this.handleUploadFile(range, fileArr, rejectFlags.file)\r\n    }\r\n    if (imgArr.length || rejectFlags.image) {\r\n      this.handleUploadImage(range, { file: imgArr[0], files: imgArr }, rejectFlags.image)\r\n    }\r\n  },\r\n}\r\n\r\nexport default CustomUploader\r\n"],"names":["isNullOrUndefined","FILE_UPLOADER_MIME_TYPES","IMAGE_UPLOADER_MIME_TYPES"],"mappings":"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"}