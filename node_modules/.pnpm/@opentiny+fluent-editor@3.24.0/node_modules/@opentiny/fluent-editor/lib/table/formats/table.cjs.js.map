{"version":3,"file":"table.cjs.js","sources":["../../../../src/table/formats/table.ts"],"sourcesContent":["import Quill from 'quill'\r\nimport { isNullOrUndefined } from '../../config/editor.utils'\r\nimport { compare } from '../../utils/method'\r\nimport {\r\n  CELL_ATTRIBUTES,\r\n  CELL_DEFAULT,\r\n  CELL_IDENTITY_KEYS,\r\n  CELL_MIN_HEIGHT,\r\n  COL_ATTRIBUTES,\r\n  COL_DEFAULT,\r\n  ERROR_LIMIT,\r\n} from '../table-config'\r\nimport { getRelativeRect } from '../utils'\r\nimport Header from './header'\r\nimport ListItem, { ListContainer } from './list'\r\n\r\nconst Break = Quill.imports['blots/break']\r\nconst Block = Quill.imports['blots/block']\r\nconst Container = Quill.imports['blots/container']\r\n\r\n// @dynamic\r\nclass TableCellLine extends Block {\r\n  static requiredContainer: any\r\n  static tagName: string\r\n  static className: string\r\n  static blotName: any\r\n  domNode: any\r\n  statics: any\r\n  wrap: any\r\n  parent: any\r\n\r\n  static create(value) {\r\n    const node = super.create(value)\r\n\r\n    // fix: when td has background-color, quill can't set it to table-cell blot\r\n    if (value.tdBgColor) {\r\n      node.setAttribute(`data-parent-bg`, value.tdBgColor)\r\n      delete value.tdBgColor\r\n    }\r\n\r\n    CELL_IDENTITY_KEYS.forEach((key) => {\r\n      const identityMaker = key === 'row' ? rowId : cellId\r\n      node.setAttribute(`data-${key}`, value[key] || identityMaker())\r\n    })\r\n\r\n    CELL_ATTRIBUTES.forEach((attrName) => {\r\n      const keyValue = value[attrName] || CELL_DEFAULT[attrName]\r\n      keyValue && node.setAttribute(`data-${attrName}`, keyValue)\r\n    })\r\n\r\n    if (value.height) {\r\n      node.setAttribute('height', value.height)\r\n    }\r\n\r\n    return node\r\n  }\r\n\r\n  static formats(domNode) {\r\n    const formats = {}\r\n    if (formats.list) {\r\n      formats.list = domNode.classList.item(0)\r\n    }\r\n    return reduceFormats(domNode, formats)\r\n  }\r\n\r\n  toggleAttribute(name, value) {\r\n    if (value) {\r\n      this.domNode.setAttribute(name, value)\r\n    }\r\n    else {\r\n      this.domNode.removeAttribute(name)\r\n    }\r\n  }\r\n\r\n  formatChildren(name, value) {\r\n    this.children.forEach((child) => {\r\n      child.format && child.format(name, value)\r\n      if (!child.domNode.style) {\r\n        return\r\n      }\r\n      if (child.domNode.tagName === 'SPAN' && value) {\r\n        child.domNode.style.backgroundColor = value\r\n      }\r\n      else {\r\n        child.domNode.style.backgroundColor = 'initial'\r\n      }\r\n    })\r\n  }\r\n\r\n  format(name, value) {\r\n    if ([...CELL_ATTRIBUTES, ...CELL_IDENTITY_KEYS, 'parent-bg'].includes(name)) {\r\n      if (value) {\r\n        this.domNode.setAttribute(`data-${name}`, value)\r\n      }\r\n      else {\r\n        this.domNode.removeAttribute(`data-${name}`)\r\n      }\r\n    }\r\n    else if (name === 'header') {\r\n      if (!value) {\r\n        return\r\n      }\r\n      const { row, cell, rowspan, colspan }: any = TableCellLine.formats(this.domNode)\r\n      super.format(name, {\r\n        value,\r\n        row,\r\n        cell,\r\n        rowspan,\r\n        colspan,\r\n      })\r\n    }\r\n    else {\r\n      super.format(name, value)\r\n    }\r\n    switch (true) {\r\n      case name === 'cell-bg': {\r\n        this.toggleAttribute('data-cell-bg', value)\r\n      }\r\n    }\r\n  }\r\n\r\n  optimize(context) {\r\n    super.optimize(context)\r\n\r\n    // cover shadowBlot's wrap call, pass params parentBlot initialize\r\n    // needed\r\n    const { row, cell, rowspan, colspan, cellBg } = this.domNode.dataset\r\n    const formats: Record<string, any> = TableCellLine.formats(this.domNode)\r\n    const parentFormats = this.parent.formats()\r\n    if (this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer)) {\r\n      this.wrap(this.statics.requiredContainer.blotName, { row, cell, rowspan, colspan, cellBg })\r\n    }\r\n    else if (!compare(formats, parentFormats)) {\r\n      this.parent.format('row', formats.row)\r\n      this.parent.format('cell', formats.cell)\r\n      this.parent.format('rowspan', formats.rowspan)\r\n      this.parent.format('colspan', formats.colspan)\r\n      formats['cell-bg'] && this.parent.setCellBg(formats['cell-bg'])\r\n    }\r\n\r\n    const parentHeight = this.domNode.getAttribute('height')\r\n    if (parentHeight) {\r\n      this.parent.domNode.style.height = parentHeight\r\n    }\r\n  }\r\n\r\n  tableCell() {\r\n    return this.parent\r\n  }\r\n}\r\nTableCellLine.blotName = 'table-cell-line'\r\nTableCellLine.className = 'qlbt-cell-line'\r\nTableCellLine.tagName = 'DIV'\r\n\r\n// @dynamic\r\nclass TableCell extends Container {\r\n  static allowedChildren: any\r\n  static blotName: any\r\n  static requiredContainer: any\r\n  static tagName: string\r\n  next: any\r\n  children: any\r\n  parent: any\r\n  domNode: any\r\n  statics: any\r\n  wrap: any\r\n  splitAfter: any\r\n  prev: any\r\n  scroll: any\r\n\r\n  static create(value = { row: rowId() }) {\r\n    const node = super.create(value)\r\n\r\n    CELL_IDENTITY_KEYS.forEach((key) => {\r\n      node.setAttribute(`data-${key}`, value[key])\r\n    })\r\n\r\n    CELL_ATTRIBUTES.forEach((attrName) => {\r\n      if (value[attrName]) {\r\n        node.setAttribute(attrName, value[attrName])\r\n      }\r\n    })\r\n\r\n    return node\r\n  }\r\n\r\n  static formats(domNode) {\r\n    const formats = {\r\n      height: undefined,\r\n      row: undefined,\r\n    }\r\n\r\n    formats.height = domNode.getAttribute('height') || undefined\r\n\r\n    if (domNode.hasAttribute('data-row')) {\r\n      formats.row = domNode.getAttribute('data-row')\r\n    }\r\n\r\n    if (domNode.hasAttribute('data-cell-bg')) {\r\n      formats['cell-bg'] = domNode.getAttribute('data-cell-bg') || undefined\r\n    }\r\n    return CELL_ATTRIBUTES.reduce((formats, attribute) => {\r\n      if (domNode.hasAttribute(attribute)) {\r\n        formats[attribute] = domNode.getAttribute(attribute)\r\n      }\r\n\r\n      return formats\r\n    }, formats)\r\n  }\r\n\r\n  checkMerge() {\r\n    if (super.checkMerge() && !isNullOrUndefined(this.next.children.head)) {\r\n      const getCellId = (node) => {\r\n        return (\r\n          (node.formats && node.formats()[node.statics.blotName]) || {\r\n            cell: node.domNode.getAttribute('data-cell'),\r\n          }\r\n        )\r\n      }\r\n      const thisHead = getCellId(this.children.head)\r\n      const thisTail = getCellId(this.children.tail)\r\n      const nextHead = getCellId(this.next.children.head)\r\n      const nextTail = getCellId(this.next.children.tail)\r\n      return thisHead.cell === thisTail.cell && thisHead.cell === nextHead.cell && thisHead.cell === nextTail.cell\r\n    }\r\n    return false\r\n  }\r\n\r\n  cellOffset() {\r\n    if (this.parent) {\r\n      return this.parent.children.indexOf(this)\r\n    }\r\n    return -1\r\n  }\r\n\r\n  formats() {\r\n    const formats = {}\r\n\r\n    if (this.domNode.hasAttribute('data-row')) {\r\n      formats.row = this.domNode.getAttribute('data-row')\r\n    }\r\n    if (this.domNode.hasAttribute('data-cell')) {\r\n      formats.cell = this.domNode.getAttribute('data-cell')\r\n    }\r\n\r\n    return CELL_ATTRIBUTES.reduce((tableFormats, attribute) => {\r\n      if (this.domNode.hasAttribute(attribute)) {\r\n        tableFormats[attribute] = this.domNode.getAttribute(attribute)\r\n      }\r\n\r\n      return tableFormats\r\n    }, formats)\r\n  }\r\n\r\n  toggleAttribute(name, value) {\r\n    if (value) {\r\n      this.domNode.setAttribute(name, value)\r\n    }\r\n    else {\r\n      this.domNode.removeAttribute(name)\r\n    }\r\n  }\r\n\r\n  formatChildren(name, value) {\r\n    this.children.forEach((child) => {\r\n      child.format(name, value)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * this method is for TableCellLine to change cell background color\r\n   *  if use `format('cell-bg', value)` will loop trigger\r\n   *  TableCellLine.optimize -> TableCell.format -> TableCellLine.optimize ...\r\n   */\r\n  setCellBg(value?: string) {\r\n    if (value) {\r\n      this.domNode.style.backgroundColor = value\r\n    }\r\n    else {\r\n      this.domNode.style.backgroundColor = 'initial'\r\n    }\r\n  }\r\n\r\n  format(name, value) {\r\n    const quill = Quill.find(this.scroll.domNode.parentNode)\r\n    switch (true) {\r\n      case CELL_ATTRIBUTES.includes(name):\r\n        this.toggleAttribute(name, value)\r\n        break\r\n      case ['row', 'cell'].includes(name):\r\n        this.toggleAttribute(`data-${name}`, value)\r\n        break\r\n      case name === 'background': {\r\n        const hasBgColor = this.domNode.querySelectorAll('div.qlbt-cell-line[data-parent-bg]')\r\n        hasBgColor.forEach(child => child.removeAttribute('data-parent-bg'))\r\n        this.domNode.style.background = ''\r\n        this.domNode.style.backgroundColor = value\r\n        this.children.head.format('parent-bg', value)\r\n        break\r\n      }\r\n      // TODO: 其他格式可同理实现，但已有格式清除时会清除所有格式，待解决\r\n      case name === 'size': {\r\n        const start = quill.getIndex(this.children.head)\r\n        const total = quill.getIndex(this.children.tail) + this.children.tail.length()\r\n        const length = total - start > 0 ? total - start : 0\r\n        quill.setSelection(start, length, Quill.sources.USER)\r\n        quill.format(name, value, Quill.sources.USER)\r\n        // 设置选区后需清除选区，否则会固定处理选区内容\r\n        quill.setSelection(start)\r\n        break\r\n      }\r\n      case name === 'cell-bg': {\r\n        this.toggleAttribute('data-cell-bg', value)\r\n        this.toggleAttribute('data-parent-bg', value)\r\n        this.formatChildren(name, value)\r\n        this.setCellBg(value)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  optimize(context) {\r\n    // fix: when td has background-color, quill can't set it to table-cell bolt\r\n    const hasBg: any = Array.from(this.domNode.childNodes).find((item: any) => item.getAttribute('data-parent-bg'))\r\n    const bgColor = hasBg && hasBg.getAttribute('data-parent-bg')\r\n    if (bgColor && bgColor !== this.domNode.style.backgroundColor) {\r\n      this.domNode.style.backgroundColor = bgColor\r\n    }\r\n\r\n    const rId = this.domNode.getAttribute('data-row')\r\n    if (this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer)) {\r\n      this.wrap(this.statics.requiredContainer.blotName, {\r\n        row: rId,\r\n      })\r\n    }\r\n    else if (rId !== this.parent.formats().row) {\r\n      this.parent.format('row', rId)\r\n    }\r\n\r\n    this.children.forEach((child) => {\r\n      if (isNullOrUndefined(child.next)) {\r\n        return\r\n      }\r\n      const childFormats: any = this.getFormat(child.domNode)\r\n      const nextFormats: any = this.getFormat(child.next.domNode)\r\n      if (childFormats.cell !== nextFormats.cell) {\r\n        const next = this.splitAfter(child)\r\n        if (next) {\r\n          next.optimize()\r\n        }\r\n        // We might be able to merge with prev now\r\n        if (this.prev) {\r\n          this.prev.optimize()\r\n        }\r\n      }\r\n    })\r\n\r\n    super.optimize(context)\r\n  }\r\n\r\n  // 兼容读取TableCell中的子blot，包括table-cell-line、line、head\r\n  getFormat(domNode) {\r\n    const formats = {}\r\n    const firstChild = domNode.childNodes[0]\r\n    if (firstChild && domNode.tagName === 'OL') {\r\n      formats.list = firstChild.classList.item(0)\r\n    }\r\n\r\n    return reduceFormats(domNode, formats)\r\n  }\r\n\r\n  row() {\r\n    return this.parent\r\n  }\r\n\r\n  rowOffset() {\r\n    if (this.row()) {\r\n      return -1\r\n    }\r\n    return this.row().rowOffset()\r\n  }\r\n\r\n  table() {\r\n    return this.row() && this.row().table()\r\n  }\r\n}\r\nTableCell.blotName = 'table'\r\nTableCell.tagName = 'TD'\r\n\r\n// @dynamic\r\nclass TableRow extends Container {\r\n  static requiredContainer: any\r\n  static allowedChildren: any\r\n  static blotName: string\r\n  static tagName: string\r\n  next: any\r\n  children: any\r\n  domNode: any\r\n  statics: any\r\n  wrap: any\r\n  splitAfter: any\r\n  enforceAllowedChildren: any\r\n  uiNode: any\r\n  parent: any\r\n  prev: any\r\n\r\n  static create(value) {\r\n    const node = super.create(value)\r\n    if (value.row) {\r\n      node.setAttribute('data-row', value.row)\r\n    }\r\n    return node\r\n  }\r\n\r\n  checkMerge() {\r\n    if (super.checkMerge() && !isNullOrUndefined(this.next.children.head)) {\r\n      const thisHead = this.children.head.formats()\r\n      const thisTail = this.children.tail.formats()\r\n      const nextHead = this.next.children.head.formats()\r\n      const nextTail = this.next.children.tail.formats()\r\n\r\n      return thisHead.row === thisTail.row && thisHead.row === nextHead.row && thisHead.row === nextTail.row\r\n    }\r\n    return false\r\n  }\r\n\r\n  formats() {\r\n    return ['row'].reduce((formats, attrName) => {\r\n      if (this.domNode.hasAttribute(`data-${attrName}`)) {\r\n        formats[attrName] = this.domNode.getAttribute(`data-${attrName}`)\r\n      }\r\n      return formats\r\n    }, {})\r\n  }\r\n\r\n  format(key, value) {\r\n    this.domNode.setAttribute(`data-${key}`, value)\r\n  }\r\n\r\n  optimize(context) {\r\n    // optimize function of ShadowBlot\r\n    if (this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer)) {\r\n      this.wrap(this.statics.requiredContainer.blotName)\r\n    }\r\n\r\n    this.children.forEach((child) => {\r\n      if (isNullOrUndefined(child.next)) {\r\n        return\r\n      }\r\n      const childFormats = child.formats()\r\n      const nextFormats = child.next.formats()\r\n      if (childFormats.row !== nextFormats.row) {\r\n        const next = this.splitAfter(child)\r\n        if (next) {\r\n          next.optimize()\r\n        }\r\n        if (this.prev) {\r\n          this.prev.optimize()\r\n        }\r\n      }\r\n    })\r\n\r\n    super.optimize(context)\r\n  }\r\n\r\n  rowOffset() {\r\n    if (!this.parent) {\r\n      return -1\r\n    }\r\n    return this.parent.children.indexOf(this)\r\n  }\r\n\r\n  table() {\r\n    return this.parent && this.parent.parent\r\n  }\r\n}\r\nTableRow.blotName = 'table-row'\r\nTableRow.tagName = 'TR'\r\n\r\n// @dynamic\r\nclass TableBody extends Container {\r\n  static requiredContainer: any\r\n  static allowedChildren: any\r\n  static blotName: string\r\n  static tagName: string\r\n}\r\nTableBody.blotName = 'table-body'\r\nTableBody.tagName = 'TBODY'\r\n\r\n// @dynamic\r\nclass TableCol extends Block {\r\n  static requiredContainer: any\r\n  static blotName: string\r\n  static tagName: string\r\n  domNode: any\r\n\r\n  static create(value) {\r\n    const node = super.create(value)\r\n    COL_ATTRIBUTES.forEach((attrName) => {\r\n      node.setAttribute(`${attrName}`, value[attrName] || COL_DEFAULT[attrName])\r\n    })\r\n    return node\r\n  }\r\n\r\n  static formats(domNode) {\r\n    return COL_ATTRIBUTES.reduce((formats, attribute) => {\r\n      if (domNode.hasAttribute(`${attribute}`)) {\r\n        formats[attribute] = domNode.getAttribute(`${attribute}`) || undefined\r\n      }\r\n      return formats\r\n    }, {})\r\n  }\r\n\r\n  format(name, value) {\r\n    if (COL_ATTRIBUTES.includes(name)) {\r\n      this.domNode.setAttribute(`${name}`, value || COL_DEFAULT[name])\r\n    }\r\n    else {\r\n      super.format(name, value)\r\n    }\r\n  }\r\n\r\n  html() {\r\n    return this.domNode.outerHTML\r\n  }\r\n}\r\nTableCol.blotName = 'table-col'\r\nTableCol.tagName = 'col'\r\n\r\n// @dynamic\r\nclass TableColGroup extends Container {\r\n  static requiredContainer: any\r\n  static allowedChildren: any\r\n  static blotName: string\r\n  static tagName: string\r\n  parent: any\r\n  statics: any\r\n\r\n  optimize(context) {\r\n    super.optimize(context)\r\n    // optimize 是当前slot更新后调用的callback方法，当TableBody更新后判断父容器的存在和类型相符则调用更新表格宽度方法更新宽度\r\n    // 切记不要在当前slot内调用能改变当前slot的方法，会造成无限循环，一般通过子更新改变父较好\r\n    if (this.parent && this.statics.requiredContainer && this.parent instanceof this.statics.requiredContainer) {\r\n      this.parent.updateTableWidth()\r\n    }\r\n    // 此时colgroup创建完毕，检查colgroup的col数量是否正确\r\n    // fix：colgroup的col数量不正确导致最后一列宽度为空\r\n    if (this.parent.parent.domNode.className === 'quill-better-table-wrapper'\r\n      && this.parent.parent.domNode.tagName === 'DIV'\r\n      && this.parent.domNode.children.length >= 2\r\n      && this.parent.domNode.children[0].tagName === 'COLGROUP'\r\n      && this.parent.domNode.children[1].tagName === 'TBODY'\r\n    ) {\r\n      let trId = ''\r\n      let colSpan = 0\r\n      let colgroupNumber = 0\r\n      for (let i = 0; i < this.parent.domNode.children.length; i++) {\r\n        if (this.parent.domNode.children[i].tagName === 'TBODY') {\r\n          if (trId === '') {\r\n            trId = this.parent.domNode.children[i].children[0].getAttribute('data-row')\r\n          }\r\n          colSpan = this.findTdColspanInTbody(this.parent.domNode.children[i], trId)\r\n        }\r\n        else if (this.parent.domNode.children[i].tagName === 'COLGROUP') {\r\n          colgroupNumber = this.parent.domNode.children[i].children.length\r\n        }\r\n      }\r\n      let elementSibling = this.parent.domNode.nextElementSibling\r\n\r\n      while (elementSibling && elementSibling.tagName === 'TABLE') {\r\n        for (let i = 0; i < elementSibling.children.length; i++) {\r\n          if (elementSibling.children[i].tagName === 'TBODY') {\r\n            colSpan += this.findTdColspanInTbody(elementSibling.children[i], trId)\r\n          }\r\n        }\r\n        elementSibling = elementSibling.nextElementSibling\r\n      }\r\n\r\n      if (colgroupNumber < colSpan) {\r\n        const length = colSpan - colgroupNumber\r\n\r\n        for (let i = 0; i < length; i++) {\r\n          const newCol = document.createElement('col')\r\n          newCol.width = this.parent.domNode.children[0].children[this.parent.domNode.children[0].children.length - 1].width\r\n          const newBr = document.createElement('br')\r\n          newCol.appendChild(newBr)\r\n          this.parent.domNode.children[0].appendChild(newCol)\r\n          this.parent.domNode.style.width += newCol.width\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // this.parent.domNode.children[1].children[0].children[0].colSpan\r\n  findTdColspanInTbody(tbody, trId) {\r\n    let colSpan = 0\r\n    // let tbodyChildrenLength\r\n    for (let i = 0; i < tbody.children.length; i++) {\r\n      if (tbody.children[i].getAttribute('data-row') !== trId) {\r\n        return colSpan\r\n      }\r\n      for (let j = 0; j < tbody.children[i].children.length; j++) {\r\n        if (tbody.children[i].children[j].colSpan) {\r\n          colSpan += tbody.children[i].children[j].colSpan\r\n        }\r\n      }\r\n    }\r\n    return colSpan\r\n  }\r\n}\r\nTableColGroup.blotName = 'table-col-group'\r\nTableColGroup.tagName = 'colgroup'\r\n\r\n// @dynamic\r\nclass TableContainer extends Container {\r\n  static blotName: string\r\n  static className: string\r\n  static tagName: string\r\n  static requiredContainer: any\r\n  static allowedChildren: any\r\n  domNode: any\r\n  parent: any\r\n  children: any\r\n  descendants: any\r\n  scroll: any\r\n  remove: any\r\n  static create() {\r\n    const node = super.create()\r\n    return node\r\n  }\r\n\r\n  constructor(scroll, domNode) {\r\n    super(scroll, domNode)\r\n    domNode.setAttribute('contenteditable', false)\r\n    this.updateTableWidth()\r\n  }\r\n\r\n  updateTableWidth() {\r\n    let colGroup = this.colGroup()\r\n    if (!colGroup) {\r\n      // undo时原表格dom被移除，因此colGroup和domNode都不对应当前新表格，需从父容器dom树重新获取\r\n      // 如果表格有style属性则不为新添加表格，避免错误赋值\r\n      if (this.parent && this.parent.children.head && this.domNode.hasAttribute('style')) {\r\n        colGroup = this.parent.children.head.children.head\r\n        this.domNode = this.parent.children.head.domNode\r\n      }\r\n      else if (this.domNode.tagName === 'TABLE') {\r\n        // this.domNode.forEach\r\n        return\r\n      }\r\n      else {\r\n        return\r\n      }\r\n    }\r\n    const tableWidth = colGroup.children.reduce((sumWidth, col) => {\r\n      // 兼容 table-col 不存在的情况\r\n      const tableCol = col.formats()[TableCol.blotName]\r\n      let tableColWidth = COL_DEFAULT.width\r\n      if (tableCol && tableCol.width) {\r\n        tableColWidth = Number.parseInt(tableCol.width, 10)\r\n      }\r\n      sumWidth = sumWidth + tableColWidth\r\n      return sumWidth\r\n    }, 0)\r\n    this.domNode.removeAttribute('style')\r\n    this.domNode.style.width = `${tableWidth}px`\r\n    // 当表格加载结束后修正width设定为auto的列宽度\r\n    if (colGroup.next) {\r\n      setTimeout(() => {\r\n        let tdIndex = 0\r\n        let maxTds\r\n        const colNum = colGroup.children.length\r\n        const tableRows = this.descendants(TableRow)\r\n        // 查询单元格数等于列数的行作为宽度赋值依据\r\n        for (let i = 0; i < tableRows.length; i++) {\r\n          const tds = tableRows[i].domNode.querySelectorAll('td')\r\n          if (tds.length === colNum) {\r\n            maxTds = tds\r\n            break\r\n          }\r\n        }\r\n        colGroup.children.forEach((col) => {\r\n          if (maxTds && col.domNode.width === 'auto') {\r\n            const width = getComputedStyle(maxTds[tdIndex]).width\r\n            const num = Number.parseInt(width, 10)\r\n            col.domNode.width = (num < COL_DEFAULT.width && COL_DEFAULT.width) || num\r\n          }\r\n          tdIndex++\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  cells(column) {\r\n    return this.rows().map(row => row.children.at(column))\r\n  }\r\n\r\n  colGroup() {\r\n    return this.children.head\r\n  }\r\n\r\n  deleteColumns(compareRect, delIndexes = [], editorWrapper) {\r\n    const [body] = this.descendants(TableBody)\r\n    if (isNullOrUndefined(body) || isNullOrUndefined(body.children.head)) {\r\n      return\r\n    }\r\n\r\n    const tableCells = this.descendants(TableCell)\r\n    const removedCells = []\r\n    const modifiedCells = []\r\n\r\n    tableCells.forEach((cell) => {\r\n      const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper)\r\n\r\n      if (cellRect.x + ERROR_LIMIT > compareRect.x && cellRect.x1 - ERROR_LIMIT < compareRect.x1) {\r\n        removedCells.push(cell)\r\n      }\r\n      else if (cellRect.x < compareRect.x + ERROR_LIMIT && cellRect.x1 > compareRect.x1 - ERROR_LIMIT) {\r\n        modifiedCells.push(cell)\r\n      }\r\n    })\r\n\r\n    if (removedCells.length === tableCells.length) {\r\n      this.tableDestroy()\r\n      return true\r\n    }\r\n\r\n    // remove the matches column tool cell\r\n    delIndexes.forEach(() => {\r\n      const col = this.colGroup().children.at(delIndexes[0])\r\n      if (!col || this.colGroup().children.at(delIndexes[0]).domNode !== this.colGroup().domNode.children[delIndexes[0]]) {\r\n        this.colGroup().domNode.removeChild(this.colGroup().domNode.children[delIndexes[0]])\r\n      }\r\n      else {\r\n        col.remove()\r\n      }\r\n    })\r\n\r\n    removedCells.forEach((cell) => {\r\n      cell.remove()\r\n    })\r\n\r\n    modifiedCells.forEach((cell) => {\r\n      const cellColspan = Number.parseInt(cell.formats().colspan, 10)\r\n      // const cellWidth = parseInt(cell.formats().width, 10);\r\n      cell.format('colspan', cellColspan - delIndexes.length)\r\n    })\r\n\r\n    this.updateTableWidth()\r\n  }\r\n\r\n  deleteRow(compareRect, editorWrapper) {\r\n    const [body] = this.descendants(TableBody)\r\n    if (isNullOrUndefined(body) || isNullOrUndefined(body.children.head)) {\r\n      return\r\n    }\r\n\r\n    const tableCells = this.descendants(TableCell)\r\n    const tableRows = this.descendants(TableRow)\r\n    const removedCells = [] // cells to be removed\r\n    const modifiedCells = [] // cells to be modified\r\n    const fallCells = [] // cells to fall into next row\r\n\r\n    tableCells.forEach((cell) => {\r\n      const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper)\r\n\r\n      if (cellRect.y > compareRect.y - ERROR_LIMIT && cellRect.y1 < compareRect.y1 + ERROR_LIMIT) {\r\n        removedCells.push(cell)\r\n      }\r\n      else if (cellRect.y < compareRect.y + ERROR_LIMIT && cellRect.y1 > compareRect.y1 - ERROR_LIMIT) {\r\n        modifiedCells.push(cell)\r\n\r\n        if (Math.abs(cellRect.y - compareRect.y) < ERROR_LIMIT) {\r\n          fallCells.push(cell)\r\n        }\r\n      }\r\n    })\r\n\r\n    if (removedCells.length === tableCells.length) {\r\n      this.tableDestroy()\r\n      return\r\n    }\r\n\r\n    // compute length of removed rows\r\n    const removedRowsLength = this.rows().reduce((sum, row) => {\r\n      const rowRect = getRelativeRect(row.domNode.getBoundingClientRect(), editorWrapper)\r\n\r\n      if (rowRect.y > compareRect.y - ERROR_LIMIT && rowRect.y1 < compareRect.y1 + ERROR_LIMIT) {\r\n        sum += 1\r\n      }\r\n      return sum\r\n    }, 0)\r\n\r\n    // it must execute before the table layout changed with other operation\r\n    fallCells.forEach((cell) => {\r\n      const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper)\r\n      const nextRow = cell.parent.next\r\n      const cellsInNextRow = nextRow.children\r\n\r\n      const refCell = cellsInNextRow.reduce((ref, compareCell) => {\r\n        const compareCellRect = getRelativeRect(compareCell.domNode.getBoundingClientRect(), editorWrapper)\r\n        if (cellRect.x1 - compareCellRect.x < ERROR_LIMIT) {\r\n          ref = compareCell\r\n        }\r\n        return ref\r\n      }, null)\r\n\r\n      nextRow.insertBefore(cell, refCell)\r\n      const curRowId = nextRow.formats().row\r\n      cell.format('row', curRowId)\r\n      cell.children.forEach((cellLine) => {\r\n        cellLine.format('row', curRowId)\r\n      })\r\n    })\r\n\r\n    modifiedCells.forEach((cell) => {\r\n      const cellRowspan = Number.parseInt(cell.formats().rowspan, 10)\r\n      const curRowspan = cellRowspan - removedRowsLength\r\n      cell.domNode.removeAttribute('style')\r\n      cell.format('rowspan', curRowspan)\r\n      cell.children.forEach((cellLine) => {\r\n        cellLine.format('rowspan', curRowspan)\r\n      })\r\n    })\r\n\r\n    removedCells.forEach((cell) => {\r\n      cell.remove()\r\n    })\r\n\r\n    // fix: There will be a empty tr left if i delete the last row of a table,\r\n    // this will cause the bottom border of the table to disappear,\r\n    // and the empty tr will execute the matchTableRow method.\r\n    tableRows.forEach((row) => {\r\n      if (row.children.length === 0) {\r\n        row.remove()\r\n      }\r\n    })\r\n  }\r\n\r\n  tableDestroy() {\r\n    const quill = Quill.find(this.scroll.domNode.parentNode)\r\n    const tableModule = quill.getModule('better-table')\r\n    this.remove()\r\n    tableModule.hideTableTools()\r\n    quill.update(Quill.sources.USER)\r\n  }\r\n\r\n  insertCell(tableRow, ref, bg = '') {\r\n    const id = cellId()\r\n    const rId = tableRow.formats().row\r\n    const tableCell = this.scroll.create(\r\n      TableCell.blotName,\r\n      { ...CELL_DEFAULT, row: rId },\r\n    )\r\n    tableCell.domNode.style.backgroundColor = bg\r\n    const cellLine = this.scroll.create(TableCellLine.blotName, {\r\n      row: rId,\r\n      cell: id,\r\n    })\r\n    tableCell.appendChild(cellLine)\r\n\r\n    if (ref) {\r\n      tableRow.insertBefore(tableCell, ref)\r\n    }\r\n    else {\r\n      tableRow.appendChild(tableCell)\r\n    }\r\n  }\r\n\r\n  insertColumn(compareRect, colIndex, isRight = true, editorWrapper) {\r\n    const [body] = this.descendants(TableBody)\r\n    const [tableColGroup] = this.descendants(TableColGroup)\r\n    const tableCols = this.descendants(TableCol)\r\n    const addAsideCells = []\r\n    const modifiedCells = []\r\n    const affectedCells = []\r\n\r\n    if (isNullOrUndefined(body) || isNullOrUndefined(body.children.head)) {\r\n      return\r\n    }\r\n    const tableCells = this.descendants(TableCell)\r\n    tableCells.forEach((cell) => {\r\n      const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper)\r\n\r\n      if (isRight) {\r\n        if (Math.abs(cellRect.x1 - compareRect.x1) < ERROR_LIMIT) {\r\n          // the right of selected boundary equal to the right of table cell,\r\n          // add a new table cell right aside this table cell\r\n          addAsideCells.push(cell)\r\n        }\r\n        else if (compareRect.x1 - cellRect.x > ERROR_LIMIT && compareRect.x1 - cellRect.x1 < -ERROR_LIMIT) {\r\n          // the right of selected boundary is inside this table cell\r\n          // colspan of this table cell will increase 1\r\n          modifiedCells.push(cell)\r\n        }\r\n      }\r\n      else {\r\n        if (Math.abs(cellRect.x - compareRect.x) < ERROR_LIMIT) {\r\n          // left of selected boundary equal to left of table cell,\r\n          // add a new table cell left aside this table cell\r\n          addAsideCells.push(cell)\r\n        }\r\n        else if (compareRect.x - cellRect.x > ERROR_LIMIT && compareRect.x - cellRect.x1 < -ERROR_LIMIT) {\r\n          // the left of selected boundary is inside this table cell\r\n          // colspan of this table cell will increase 1\r\n          modifiedCells.push(cell)\r\n        }\r\n      }\r\n    })\r\n\r\n    addAsideCells.forEach((cell) => {\r\n      const ref = isRight ? cell.next : cell\r\n      const id = cellId()\r\n      const tableRow = cell.parent\r\n      const rId = tableRow.formats().row\r\n      const cellFormats = cell.formats()\r\n      const tableCell = this.scroll.create(\r\n        TableCell.blotName,\r\n        { ...CELL_DEFAULT, row: rId, rowspan: cellFormats.rowspan },\r\n      )\r\n      const cellLine = this.scroll.create(TableCellLine.blotName, {\r\n        row: rId,\r\n        cell: id,\r\n        rowspan: cellFormats.rowspan,\r\n      })\r\n      tableCell.appendChild(cellLine)\r\n\r\n      if (ref) {\r\n        tableRow.insertBefore(tableCell, ref)\r\n      }\r\n      else {\r\n        tableRow.appendChild(tableCell)\r\n      }\r\n      affectedCells.push(tableCell)\r\n    })\r\n\r\n    // insert new tableCol\r\n    const tableCol = this.scroll.create(TableCol.blotName, true)\r\n    let colRef\r\n    if (isRight) {\r\n      colRef = tableCols[colIndex] && tableCols[colIndex].next\r\n    }\r\n    else {\r\n      colRef = tableCols[colIndex]\r\n    }\r\n\r\n    if (colRef) {\r\n      tableColGroup.insertBefore(tableCol, colRef)\r\n    }\r\n    else {\r\n      tableColGroup.appendChild(tableCol)\r\n    }\r\n\r\n    modifiedCells.forEach((cell) => {\r\n      const cellColspan = cell.formats().colspan\r\n      cell.format('colspan', Number.parseInt(cellColspan, 10) + 1)\r\n      affectedCells.push(cell)\r\n    })\r\n\r\n    affectedCells.sort((cellA, cellB) => {\r\n      const y1 = cellA.domNode.getBoundingClientRect().y\r\n      const y2 = cellB.domNode.getBoundingClientRect().y\r\n      return y1 - y2\r\n    })\r\n\r\n    this.updateTableWidth()\r\n    return affectedCells\r\n  }\r\n\r\n  insertRow(compareRect, isDown, editorWrapper) {\r\n    const [body] = this.descendants(TableBody)\r\n    if (isNullOrUndefined(body) || isNullOrUndefined(body.children.head)) {\r\n      return\r\n    }\r\n\r\n    const tableCells = this.descendants(TableCell)\r\n    const rId = rowId()\r\n    const newRow = this.scroll.create(TableRow.blotName, {\r\n      row: rId,\r\n    })\r\n    const addBelowCells = []\r\n    const modifiedCells = []\r\n    const affectedCells = []\r\n\r\n    tableCells.forEach((cell) => {\r\n      const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper)\r\n\r\n      if (isDown) {\r\n        if (Math.abs(cellRect.y1 - compareRect.y1) < ERROR_LIMIT) {\r\n          addBelowCells.push(cell)\r\n        }\r\n        else if (compareRect.y1 - cellRect.y > ERROR_LIMIT && compareRect.y1 - cellRect.y1 < -ERROR_LIMIT) {\r\n          modifiedCells.push(cell)\r\n        }\r\n      }\r\n      else {\r\n        if (Math.abs(cellRect.y - compareRect.y) < ERROR_LIMIT) {\r\n          addBelowCells.push(cell)\r\n        }\r\n        else if (compareRect.y - cellRect.y > ERROR_LIMIT && compareRect.y - cellRect.y1 < -ERROR_LIMIT) {\r\n          modifiedCells.push(cell)\r\n        }\r\n      }\r\n    })\r\n\r\n    // ordered table cells with rect.x, fix error for inserting\r\n    // new table cell in complicated table with wrong order.\r\n    const sortFunc = (cellA, cellB) => {\r\n      const x1 = cellA.domNode.getBoundingClientRect().x\r\n      const x2 = cellB.domNode.getBoundingClientRect().x\r\n      return x1 - x2\r\n    }\r\n    addBelowCells.sort(sortFunc)\r\n\r\n    addBelowCells.forEach((cell) => {\r\n      const cId = cellId()\r\n      const cellFormats = cell.formats()\r\n\r\n      const tableCell = this.scroll.create(\r\n        TableCell.blotName,\r\n        { ...CELL_DEFAULT, row: rId, cell: cId, colspan: cellFormats.colspan },\r\n      )\r\n      const cellLine = this.scroll.create(TableCellLine.blotName, {\r\n        row: rId,\r\n        cell: cId,\r\n        colspan: cellFormats.colspan,\r\n      })\r\n      const empty = this.scroll.create(Break.blotName)\r\n      cellLine.appendChild(empty)\r\n      tableCell.appendChild(cellLine)\r\n      newRow.appendChild(tableCell)\r\n      affectedCells.push(tableCell)\r\n    })\r\n\r\n    modifiedCells.forEach((cell) => {\r\n      const cellRowspan = Number.parseInt(cell.formats().rowspan, 10)\r\n      cell.format('rowspan', cellRowspan + 1)\r\n      affectedCells.push(cell)\r\n    })\r\n\r\n    const refRow = this.rows().find((row) => {\r\n      const rowRect = getRelativeRect(row.domNode.getBoundingClientRect(), editorWrapper)\r\n      if (isDown) {\r\n        return Math.abs(rowRect.y - compareRect.y - compareRect.height) < ERROR_LIMIT\r\n      }\r\n      else {\r\n        return Math.abs(rowRect.y - compareRect.y) < ERROR_LIMIT\r\n      }\r\n    })\r\n    body.insertBefore(newRow, refRow)\r\n\r\n    // reordering affectedCells\r\n    affectedCells.sort(sortFunc)\r\n    return affectedCells\r\n  }\r\n\r\n  mergeCells(_compareRect, mergingCells, rowspan, colspan, _editorWrapper) {\r\n    const mergedCell = mergingCells.reduce((result, tableCell, index) => {\r\n      if (index !== 0) {\r\n        if (result) {\r\n          tableCell.moveChildren(result)\r\n        }\r\n        tableCell.remove()\r\n      }\r\n      else {\r\n        tableCell.format('colspan', colspan)\r\n        tableCell.format('rowspan', rowspan)\r\n        result = tableCell\r\n        if (rowspan > 1) {\r\n          // fix: 比较当前单元格高度样式与rowspan最小高度，小于则设置高度，不判断实际高度，因为合并时这一刻实际高度可能高于最小高度\r\n          const minHeight = CELL_MIN_HEIGHT * rowspan + rowspan - 1\r\n          const cellHeight = Number.parseInt(tableCell.domNode.style.height, 10) || 0\r\n          if (cellHeight < minHeight) {\r\n            tableCell.domNode.style.height = `${minHeight}px`\r\n          }\r\n        }\r\n      }\r\n\r\n      return result\r\n    }, null)\r\n\r\n    const rId = mergedCell.domNode.getAttribute('data-row')\r\n    const cId = mergedCell.children.head.domNode.getAttribute('data-cell')\r\n    mergedCell.children.forEach((cellLine) => {\r\n      cellLine.domNode.setAttribute('data-parent-bg', mergedCell.domNode.style.backgroundColor)\r\n      if (cellLine.children.head.domNode.style) {\r\n        cellLine.children.head.domNode.style.backgroundColor = mergedCell.domNode.style.backgroundColor\r\n      }\r\n\r\n      if (!cellLine.prev || cellLine.domNode.textContent.trim()) {\r\n        cellLine.format('cell', cId)\r\n        cellLine.format('row', rId)\r\n        cellLine.format('colspan', colspan)\r\n        cellLine.format('rowspan', rowspan)\r\n      }\r\n      else {\r\n        cellLine.remove()\r\n      }\r\n    })\r\n\r\n    return mergedCell\r\n  }\r\n\r\n  unmergeCells(unmergingCells, editorWrapper) {\r\n    let cellFormats: any = {}\r\n    let cellRowspan = 1\r\n    let cellColspan = 1\r\n\r\n    unmergingCells.forEach((tableCell) => {\r\n      const tableCellBgColor = tableCell.domNode.style.backgroundColor\r\n      cellFormats = tableCell.formats()\r\n      cellRowspan = cellFormats.rowspan\r\n      cellColspan = cellFormats.colspan\r\n\r\n      if (cellColspan > 1) {\r\n        const ref = tableCell.next\r\n        const row = tableCell.row()\r\n        tableCell.format('colspan', 1)\r\n        if (tableCell.domNode.children && tableCell.domNode.children[0].tagName === 'DIV' && tableCell.domNode.children[0].getAttribute('data-colspan')) {\r\n          tableCell.domNode.children[0].setAttribute('data-colspan', 1)\r\n        }\r\n        for (let colspanIndex = cellColspan; colspanIndex > 1; colspanIndex--) {\r\n          this.insertCell(row, ref, tableCellBgColor)\r\n        }\r\n      }\r\n\r\n      if (cellRowspan > 1) {\r\n        let rowspanIndex = cellRowspan\r\n        let nextRow = tableCell.row().next\r\n        while (rowspanIndex > 1) {\r\n          const refInNextRow = nextRow.children.reduce((result, cell) => {\r\n            const compareRect = getRelativeRect(tableCell.domNode.getBoundingClientRect(), editorWrapper)\r\n            const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper)\r\n            if (Math.abs(compareRect.x1 - cellRect.x) < ERROR_LIMIT) {\r\n              result = cell\r\n            }\r\n            return result\r\n          }, null)\r\n\r\n          for (let colspanIndex = cellColspan; colspanIndex > 0; colspanIndex--) {\r\n            this.insertCell(nextRow, refInNextRow, tableCellBgColor)\r\n          }\r\n\r\n          rowspanIndex -= 1\r\n          nextRow = nextRow.next\r\n        }\r\n\r\n        tableCell.domNode.removeAttribute('style')\r\n        if (tableCell.domNode.children && tableCell.domNode.children[0].tagName === 'DIV' && tableCell.domNode.children[0].getAttribute('data-rowspan')) {\r\n          tableCell.domNode.children[0].setAttribute('data-rowspan', 1)\r\n        }\r\n        tableCell.format('rowspan', 1)\r\n      }\r\n    })\r\n  }\r\n\r\n  emptyCells(selectedTds) {\r\n    selectedTds.forEach((selectedTd) => {\r\n      // 构造空的table cell line, 优先使用单元格已有rowId和cellId，避免从table-cell-line向上层td提交id时不一致导致错位\r\n      const cellFormats = selectedTd.formats()\r\n      const cellLine = this.scroll.create(TableCellLine.blotName, {\r\n        row: cellFormats.row || rowId(),\r\n        cell: cellFormats.cell || cellId(),\r\n        rowspan: cellFormats.rowspan,\r\n        colspan: cellFormats.colspan,\r\n      })\r\n      const empty = this.scroll.create(Break.blotName)\r\n      cellLine.appendChild(empty)\r\n\r\n      selectedTd.domNode.innerHTML = ''\r\n      selectedTd.appendChild(cellLine)\r\n    })\r\n  }\r\n\r\n  rows() {\r\n    const body = this.children.tail\r\n    if (isNullOrUndefined(body)) {\r\n      return []\r\n    }\r\n    return body.children.map(row => row)\r\n  }\r\n}\r\nTableContainer.blotName = 'ql-table-container'\r\nTableContainer.className = 'quill-better-table'\r\nTableContainer.tagName = 'TABLE'\r\n\r\n// @dynamic\r\nclass TableViewWrapper extends Container {\r\n  static blotName: string\r\n  static tagName: string\r\n  static className: string\r\n  static allowedChildren: any\r\n  constructor(scroll, domNode) {\r\n    super(scroll, domNode)\r\n    const quill = Quill.find(scroll.domNode.parentNode)\r\n    // fix: 只读模式时超长表格默认包含滚动条\r\n    if (quill.options.readOnly) {\r\n      domNode.style.overflow = 'auto'\r\n    }\r\n    domNode.addEventListener(\r\n      'scroll',\r\n      (e) => {\r\n        const tableModule = quill.getModule('better-table')\r\n        if (tableModule.columnTool) {\r\n          tableModule.columnTool.domNode.scrollLeft = e.target.scrollLeft\r\n        }\r\n\r\n        if (tableModule.tableSelection && tableModule.tableSelection.selectedTds.length > 0) {\r\n          tableModule.tableSelection.repositionHelpLines()\r\n        }\r\n      },\r\n      false,\r\n    )\r\n  }\r\n}\r\nTableViewWrapper.blotName = 'table-view'\r\nTableViewWrapper.className = 'quill-better-table-wrapper'\r\nTableViewWrapper.tagName = 'DIV'\r\n\r\nTableViewWrapper.allowedChildren = [TableContainer]\r\nTableContainer.requiredContainer = TableViewWrapper\r\n\r\nTableContainer.allowedChildren = [TableBody, TableColGroup]\r\nTableBody.requiredContainer = TableContainer\r\n\r\nTableBody.allowedChildren = [TableRow]\r\nTableRow.requiredContainer = TableBody\r\n\r\nTableRow.allowedChildren = [TableCell]\r\nTableCell.requiredContainer = TableRow\r\n\r\nTableCell.allowedChildren = [TableCellLine, Header, ListItem, ListContainer]\r\nTableCellLine.requiredContainer = TableCell\r\n\r\nTableColGroup.allowedChildren = [TableCol]\r\nTableColGroup.requiredContainer = TableContainer\r\n\r\nTableCol.requiredContainer = TableColGroup\r\n\r\nfunction rowId() {\r\n  const id = Math.random().toString(36).slice(2, 6)\r\n  return `row-${id}`\r\n}\r\n\r\nfunction cellId() {\r\n  const id = Math.random().toString(36).slice(2, 6)\r\n  return `cell-${id}`\r\n}\r\n\r\nfunction reduceFormats(domNode: HTMLElement, formats: Record<string, any>) {\r\n  return [...CELL_ATTRIBUTES, ...CELL_IDENTITY_KEYS].reduce((tableFormats, attribute) => {\r\n    if (domNode.hasAttribute(`data-${attribute}`)) {\r\n      tableFormats[attribute] = domNode.getAttribute(`data-${attribute}`) || undefined\r\n    }\r\n    return tableFormats\r\n  }, formats)\r\n}\r\n\r\nexport {\r\n  CELL_ATTRIBUTES,\r\n  CELL_IDENTITY_KEYS,\r\n  cellId,\r\n  rowId,\r\n  TableBody,\r\n  TableCell,\r\n  TableCellLine,\r\n  TableCol,\r\n  TableColGroup,\r\n  TableContainer,\r\n  TableRow,\r\n  TableViewWrapper,\r\n}\r\n"],"names":["CELL_IDENTITY_KEYS","CELL_ATTRIBUTES","CELL_DEFAULT","compare","formats","isNullOrUndefined","COL_ATTRIBUTES","COL_DEFAULT","getRelativeRect","ERROR_LIMIT","index","CELL_MIN_HEIGHT","Header","ListItem","ListContainer"],"mappings":"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"}