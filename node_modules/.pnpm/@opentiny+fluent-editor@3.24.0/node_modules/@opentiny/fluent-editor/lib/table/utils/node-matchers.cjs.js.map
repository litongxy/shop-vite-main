{"version":3,"file":"node-matchers.cjs.js","sources":["../../../../src/table/utils/node-matchers.ts"],"sourcesContent":["import Quill from 'quill'\r\nimport { omit, splitWithBreak } from '../../config/editor.utils'\r\nimport { cellId as tableCellId, rowId as tableRowId, TableViewWrapper } from '../formats/table'\r\nimport { CELL_MIN_WIDTH } from '../table-config'\r\n\r\nconst Delta = Quill.imports.delta\r\nconst InlineBlot = Quill.imports.parchment.InlineBlot\r\n\r\n// rebuild delta\r\nexport function matchTableCell(node, delta) {\r\n  // fix: 移除旧数据中的pt高度,避免由于高度平均分导致无法插入行\r\n  if (node.style.height.indexOf('pt')) {\r\n    node.removeAttribute('style')\r\n  }\r\n\r\n  const row = node.parentNode\r\n  let rowId = row.dataset.row\r\n  if (!rowId) {\r\n    rowId = row.dataset.row = tableRowId()\r\n  }\r\n  let cellId = node.dataset.cell\r\n  // fix: dataset.cell in td will be 'undefined' when insert row/column\r\n  if (!cellId || cellId === 'undefined') {\r\n    cellId = tableCellId()\r\n  }\r\n  const colspan = node.getAttribute('colspan') || 1\r\n  const rowspan = node.getAttribute('rowspan') || 1\r\n\r\n  // fix: empty table cells copied from other place will be removed unexpectedly\r\n  if (delta.length() === 0) {\r\n    delta = new Delta().insert('\\n', {\r\n      'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan },\r\n    })\r\n    return delta\r\n  }\r\n\r\n  delta = delta.reduce((newDelta, op) => {\r\n    if (op.insert && typeof op.insert === 'string') {\r\n      const lines = splitWithBreak(op.insert)\r\n\r\n      lines.forEach((text) => {\r\n        if (text === '\\n') {\r\n          let attributes = {}\r\n          const cellAttributes = {\r\n            row: rowId,\r\n            cell: cellId,\r\n            rowspan,\r\n            colspan,\r\n          }\r\n          if (op.attributes.table) {\r\n            delete op.attributes.table\r\n          }\r\n          switch (true) {\r\n            case !!op.attributes.header:\r\n              attributes = Object.assign(op.attributes.header, cellAttributes)\r\n              break\r\n            case !!op.attributes.list:\r\n              attributes = { list: Object.assign(op.attributes.list, cellAttributes) }\r\n              break\r\n            default:\r\n              attributes = { 'table-cell-line': cellAttributes }\r\n          }\r\n          // fix: when td has background-color, quill can't set it to table-cell bolt\r\n          if (op.attributes.background && attributes['table-cell-line']) {\r\n            attributes['table-cell-line'].tdBgColor = op.attributes.background\r\n          }\r\n          newDelta.insert('\\n', Object.assign(op.attributes, attributes))\r\n        }\r\n        else {\r\n          newDelta.insert(text, omit(op.attributes, ['table', 'table-cell-line', 'header', 'list']))\r\n        }\r\n      })\r\n    }\r\n    else {\r\n      newDelta.insert(op.insert, op.attributes)\r\n    }\r\n\r\n    return newDelta\r\n  }, new Delta())\r\n\r\n  // fix: table cell height becomes larger(because insert unnecessary <div> on both sides of cell) when init table ngModel\r\n  const regexp = /^[\\n]+$/\r\n  const firstDelta = delta.ops[0]\r\n  if (delta.ops.length >= 3) {\r\n    const lastDelta = delta.ops[delta.ops.length - 1]\r\n    if (regexp.test(firstDelta.insert) && firstDelta.attributes['table-cell-line']) {\r\n      delta.ops.splice(0, 1)\r\n    }\r\n    if (regexp.test(lastDelta.insert) && lastDelta.attributes['table-cell-line']) {\r\n      delta.ops[delta.ops.length - 1].insert = '\\n'\r\n    }\r\n  }\r\n  else if (delta.ops.length === 1 && regexp.test(firstDelta.insert) && firstDelta.attributes['table-cell-line']) {\r\n    delta.ops[0].insert = '\\n'\r\n  }\r\n\r\n  return delta\r\n}\r\n\r\n// replace th tag with td tag\r\nexport function matchTableHeader(node, delta, _scroll) {\r\n  const row = node.parentNode\r\n  const cells = Array.from(row.querySelectorAll('th'))\r\n  let rowId = row.dataset.row\r\n  if (!rowId) {\r\n    rowId = row.dataset.row = tableRowId()\r\n  }\r\n  const cellId = cells.indexOf(node) + 1\r\n  const colspan = node.getAttribute('colspan') || false\r\n  const rowspan = node.getAttribute('rowspan') || false\r\n\r\n  // fix: empty table cells copied from other place will be removed unexpectedly\r\n  if (delta.length() === 0) {\r\n    delta = new Delta().insert('\\n', {\r\n      'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan },\r\n    })\r\n    return delta\r\n  }\r\n\r\n  delta = delta.reduce((newDelta, op) => {\r\n    if (op.insert && typeof op.insert === 'string') {\r\n      const lines = splitWithBreak(op.insert)\r\n\r\n      // fix: no '\\n' in the end of op.insert, push a '\\n' to lines\r\n      if (lines[lines.length - 1] !== '\\n') {\r\n        lines.push('\\n')\r\n      }\r\n\r\n      lines.forEach((text) => {\r\n        text === '\\n'\r\n          ? newDelta.insert('\\n', { 'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan } })\r\n          : newDelta.insert(text, op.attributes)\r\n      })\r\n    }\r\n    else {\r\n      newDelta.insert(op.insert, op.attributes)\r\n    }\r\n\r\n    return newDelta\r\n  }, new Delta())\r\n\r\n  delta = delta.reduce((newDelta, op) => {\r\n    if (op.insert && typeof op.insert === 'string' && op.insert.startsWith('\\n')) {\r\n      newDelta.insert(op.insert, { 'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan } })\r\n    }\r\n    else {\r\n      newDelta.insert(op.insert, { ...omit(op.attributes, ['table', 'table-cell-line']) })\r\n    }\r\n\r\n    return newDelta\r\n  }, new Delta())\r\n\r\n  return delta\r\n}\r\n\r\n// supplement colgroup and col\r\nexport function matchTable(node, delta, scroll) {\r\n  const isWordTable = node.children.length === 1\r\n  if (!(node instanceof Element)) {\r\n    return\r\n  }\r\n  const getMaxColNumber = (tds) => {\r\n    if (isWordTable) {\r\n      return tds.length\r\n    }\r\n    let colsNumber = 0\r\n    tds.forEach((td) => {\r\n      colsNumber += td.colSpan\r\n    })\r\n    return Math.max(tds.length, colsNumber)\r\n  }\r\n\r\n  const checkMinWidth = (width) => {\r\n    if (Number.isNaN(width)) {\r\n      // 无指定值时默认为auto，待渲染后修正\r\n      return { 'table-col': { width: 'auto' } }\r\n    }\r\n    else if (width < CELL_MIN_WIDTH) {\r\n      // 当列宽度小于默认宽度时取默认宽度\r\n      return { 'table-col': true }\r\n    }\r\n    else {\r\n      // 大于默认值取实际指定值\r\n      return { 'table-col': { width } }\r\n    }\r\n  }\r\n\r\n  // fix: a table with an empty tr is invalid, should not be displayed\r\n  const rows = node.querySelectorAll('tr')\r\n  const topRow = rows[0]\r\n  const onlyEmptyTr = rows.length === 1 && !topRow.querySelector('td')\r\n\r\n  // fix: empty table will return empty delta\r\n  if (!topRow || onlyEmptyTr) {\r\n    return new Delta().insert('\\n')\r\n  }\r\n\r\n  const colsNumber = node.querySelectorAll('col').length\r\n  let maxCellsNumber = 0\r\n  let maxCells\r\n  // 遍历行获取最大列数和该行的所有单元格\r\n  Array.prototype.slice.call(rows).forEach((row) => {\r\n    const tds = row.querySelectorAll('td')\r\n    maxCellsNumber = Math.max(getMaxColNumber(tds), maxCellsNumber)\r\n    maxCells = tds\r\n  })\r\n\r\n  // 列的累计器\r\n  let colCount = 0\r\n  delta = delta.reduce((newDelta, op) => {\r\n    // 当colCount与colsNumber相等时，则补充相差列\r\n    if (colCount === colsNumber) {\r\n      const fillNumber = maxCellsNumber - colCount\r\n      const outset = colCount\r\n      // index为差值列索引，通过遍历差值得到mexCells行中对应索引的单元格宽度\r\n      for (let i = 0; i < fillNumber; i++) {\r\n        const index = outset + i\r\n        const colWidth = Number.parseInt(\r\n          index < maxCells.length\r\n            ? maxCells[index].width\r\n          // maxCells[index].style && maxCells[index].style.width ? maxCells[index].style.width :\r\n            : maxCells[maxCells.length - 1].width,\r\n          10,\r\n        )\r\n        newDelta.insert('\\n', checkMinWidth(colWidth))\r\n        colCount++\r\n      }\r\n    }\r\n    const attr = op.attributes || {}\r\n    switch (true) {\r\n      case !!attr['table-col']:\r\n      // 只有当前列数小于实际总列数才操作，所以不存在大于的情况\r\n        if (colCount < maxCellsNumber) {\r\n        // 当table-col宽度一致时会合并为单一insert，insert长度大于1，截取符合实际总列数的长度来插入\r\n          const insert = op.insert.slice(0, maxCellsNumber)\r\n          const colWidth = Number.parseInt(attr['table-col'].width, 10)\r\n          newDelta.insert(insert, checkMinWidth(colWidth))\r\n          colCount += insert.length\r\n        }\r\n        break\r\n      case !!attr.notFilled:\r\n      { // 将标记的空tr填充对应列数的单元格\r\n        const rowId = tableRowId()\r\n        for (let x = 0; x < maxCellsNumber; x++) {\r\n          newDelta.insert('\\n', { 'table-cell-line': { row: rowId, cell: tableCellId(), rowspan: 1, colspan: 1 } })\r\n        }\r\n        break }\r\n      default:\r\n        newDelta.insert(op.insert, op.attributes)\r\n    }\r\n    return newDelta\r\n  }, new Delta())\r\n\r\n  const tableItem = node.closest('.quill-better-table-wrapper') || node\r\n  const prevBlot = tableItem.previousElementSibling && scroll.query(tableItem.previousElementSibling)\r\n  const nextBlot = tableItem.nextElementSibling && scroll.query(tableItem.nextElementSibling)\r\n  // fix: prevent two adjacent tables from sticking together\r\n  if (!nextBlot || nextBlot.prototype instanceof InlineBlot) {\r\n    delta = delta.insert('\\n')\r\n  }\r\n  // fix: When there is no line break in front of the table, pressing the Enter key will cause a problem with the table.\r\n  if (!prevBlot || prevBlot.prototype instanceof InlineBlot) {\r\n    const newLine = new Delta().insert('\\n')\r\n    delta = newLine.concat(delta)\r\n  }\r\n  if (nextBlot === TableViewWrapper) {\r\n    delta = delta.insert('\\n')\r\n  }\r\n\r\n  return delta\r\n}\r\n\r\nexport function matchTableRow(_node, delta) {\r\n  // fix: 处理空<tr>标签被忽略的情况\r\n  if (delta.ops.length === 1 && !delta.ops[0].attributes) {\r\n    delta = new Delta().insert('\\n', { notFilled: true })\r\n  }\r\n  return delta\r\n}\r\n\r\n// match h tags, distinguish between headers in the table and headers outside the table\r\nexport function matchHeader(node, delta) {\r\n  const newDelta = new Delta()\r\n  const fontSize = node.style.fontSize\r\n  delta.forEach((op) => {\r\n    newDelta.insert(\r\n      op.insert,\r\n      Object.assign({}, op.attributes, {\r\n        size: fontSize,\r\n      }),\r\n    )\r\n  })\r\n  return newDelta\r\n}\r\n\r\nexport function matchList(node, delta) {\r\n  const value = node.tagName === 'UL' ? 'bullet' : 'ordered'\r\n  delta.forEach((op) => {\r\n    if (typeof op.attributes.list === 'string') {\r\n      delete op.attributes.list\r\n    }\r\n    else if (typeof op.attributes.list === 'object' && !op.attributes.list.value) {\r\n      op.attributes.list.value = value\r\n    }\r\n  })\r\n  return delta\r\n}\r\n\r\nexport function matchInline(node, delta, scroll) {\r\n  const quill = Quill.find(scroll.domNode.parentNode)\r\n  const currentRange = quill.getSelection()\r\n  const formats = currentRange && quill.getFormat(currentRange)\r\n  if (\r\n    formats\r\n    && formats['table-cell-line'] // 当前光标节点在表格内，否则不操作delta\r\n    && node.nextElementSibling\r\n  ) {\r\n    // 插入节点是否存在下一个兄弟元素\r\n    const match = scroll.query(node)\r\n    const nodeHtml = node.nextElementSibling.innerHTML\r\n    const nodeText = node.nextElementSibling.textContent\r\n    if (\r\n      (match && match.prototype instanceof InlineBlot) // 判断当前节点是否为内联\r\n      || (node.tagName === 'P' && nodeHtml !== nodeText)\r\n    ) {\r\n      // 非内联时如果为P且下一个不为text节点\r\n      delta.forEach((op) => {\r\n        op.insert += '\\n'\r\n      })\r\n    }\r\n  }\r\n  return delta\r\n}\r\n\r\n// 匹配 word 自带的 v:shape 标签中的图片 v:imageData\r\nexport function matchWordShapeImage(node, delta) {\r\n  if (node) {\r\n    const imageUrl = node.attributes.src?.nodeValue\r\n    delta = new Delta().insert({ image: imageUrl })\r\n  }\r\n  return delta\r\n}\r\n\r\nexport function matchMentionLink(node, delta, scroll) {\r\n  const name = node.dataset.mentionId\r\n  if (name) {\r\n    const quill = Quill.find(scroll.domNode.parentNode)\r\n    const mention = quill.getModule('mention')\r\n    if (mention) {\r\n      mention.options.search(name).then((res) => {\r\n        const [item] = res\r\n        if (item) {\r\n          mention.options.select(item)\r\n        }\r\n      })\r\n    }\r\n  }\r\n  return delta\r\n}\r\n"],"names":["tableRowId","tableCellId","splitWithBreak","omit","colsNumber","CELL_MIN_WIDTH","TableViewWrapper"],"mappings":"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"}