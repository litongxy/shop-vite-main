{"version":3,"file":"handler.cjs.js","sources":["../../../src/fullscreen/handler.ts"],"sourcesContent":["import type { FluentEditorToolbar } from '../config/types'\r\nimport { ICONS_CONFIG, namespace } from '../config'\r\nimport { ToolbarTip } from '../toolbar'\r\nimport { lockScroll } from '../utils/scroll-lock'\r\n\r\nlet exitEscHandlerBindToolbar: (e: KeyboardEvent) => void\r\nlet resizeHandlerBindToolbar: () => void\r\nlet cleanLock: ReturnType<typeof lockScroll>\r\nlet originScrollTop = 0\r\nfunction exitEscHandler(toolbar: FluentEditorToolbar, e: KeyboardEvent) {\r\n  if (e.code === 'Escape') {\r\n    exitFullscreen(toolbar)\r\n  }\r\n}\r\nfunction updateToolbarHeight(toolbar: FluentEditorToolbar) {\r\n  const toolbarRect = toolbar.container.getBoundingClientRect()\r\n  toolbar.quill.container.style.setProperty(`--${namespace}-top`, `${toolbarRect.height}px`)\r\n}\r\nfunction intoFullscreen(toolbar: FluentEditorToolbar) {\r\n  toolbar.quill.isFullscreen = true\r\n  originScrollTop = document.documentElement.scrollTop\r\n  toolbar.container.classList.add('fullscreen')\r\n  toolbar.quill.container.classList.add('fullscreen')\r\n  cleanLock = lockScroll()\r\n  resizeHandlerBindToolbar()\r\n  const [, btn] = toolbar.controls.find(item => item[0] === 'fullscreen')\r\n  btn.innerHTML = ICONS_CONFIG['fullscreen-exit']\r\n  window.addEventListener('resize', resizeHandlerBindToolbar)\r\n  document.addEventListener('keydown', exitEscHandlerBindToolbar)\r\n  const toolbarTipModule = toolbar.quill.getModule(ToolbarTip.moduleName) as ToolbarTip\r\n  if (toolbarTipModule) {\r\n    toolbarTipModule.hideAllTips()\r\n  }\r\n}\r\nfunction exitFullscreen(toolbar: FluentEditorToolbar) {\r\n  toolbar.quill.isFullscreen = false\r\n  toolbar.container.classList.remove('fullscreen')\r\n  toolbar.quill.container.classList.remove('fullscreen')\r\n  cleanLock()\r\n  document.documentElement.scrollTop = originScrollTop\r\n  const [, btn] = toolbar.controls.find(item => item[0] === 'fullscreen')\r\n  btn.innerHTML = ICONS_CONFIG.fullscreen\r\n  window.removeEventListener('resize', resizeHandlerBindToolbar)\r\n  document.removeEventListener('keydown', exitEscHandlerBindToolbar)\r\n  const toolbarTipModule = toolbar.quill.getModule(ToolbarTip.moduleName) as ToolbarTip\r\n  if (toolbarTipModule) {\r\n    toolbarTipModule.hideAllTips()\r\n  }\r\n}\r\nexport function fullscreenHandler(this: FluentEditorToolbar) {\r\n  if (this.quill.isFullscreen) {\r\n    exitFullscreen(this)\r\n  }\r\n  else {\r\n    exitEscHandlerBindToolbar = exitEscHandler.bind(undefined, this)\r\n    resizeHandlerBindToolbar = updateToolbarHeight.bind(undefined, this)\r\n    intoFullscreen(this)\r\n  }\r\n}\r\n"],"names":["namespace","lockScroll","ICONS_CONFIG","ToolbarTip"],"mappings":";;;;;;AAKA,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI,kBAAkB;AACtB,SAAS,eAAe,SAA8B,GAAkB;AAClE,MAAA,EAAE,SAAS,UAAU;AACvB,mBAAe,OAAO;AAAA,EACxB;AACF;AACA,SAAS,oBAAoB,SAA8B;AACnD,QAAA,cAAc,QAAQ,UAAU,sBAAsB;AACpD,UAAA,MAAM,UAAU,MAAM,YAAY,KAAKA,MAAS,SAAA,QAAQ,GAAG,YAAY,MAAM,IAAI;AAC3F;AACA,SAAS,eAAe,SAA8B;AACpD,UAAQ,MAAM,eAAe;AAC7B,oBAAkB,SAAS,gBAAgB;AACnC,UAAA,UAAU,UAAU,IAAI,YAAY;AAC5C,UAAQ,MAAM,UAAU,UAAU,IAAI,YAAY;AAClD,cAAYC,WAAW,WAAA;AACE;AACnB,QAAA,GAAG,GAAG,IAAI,QAAQ,SAAS,KAAK,CAAQ,SAAA,KAAK,CAAC,MAAM,YAAY;AAClE,MAAA,YAAYC,mBAAa,iBAAiB;AACvC,SAAA,iBAAiB,UAAU,wBAAwB;AACjD,WAAA,iBAAiB,WAAW,yBAAyB;AAC9D,QAAM,mBAAmB,QAAQ,MAAM,UAAUC,WAAAA,WAAW,UAAU;AACtE,MAAI,kBAAkB;AACpB,qBAAiB,YAAY;AAAA,EAC/B;AACF;AACA,SAAS,eAAe,SAA8B;AACpD,UAAQ,MAAM,eAAe;AACrB,UAAA,UAAU,UAAU,OAAO,YAAY;AAC/C,UAAQ,MAAM,UAAU,UAAU,OAAO,YAAY;AAC3C;AACV,WAAS,gBAAgB,YAAY;AAC/B,QAAA,GAAG,GAAG,IAAI,QAAQ,SAAS,KAAK,CAAQ,SAAA,KAAK,CAAC,MAAM,YAAY;AACtE,MAAI,YAAYD,MAAa,aAAA;AACtB,SAAA,oBAAoB,UAAU,wBAAwB;AACpD,WAAA,oBAAoB,WAAW,yBAAyB;AACjE,QAAM,mBAAmB,QAAQ,MAAM,UAAUC,WAAAA,WAAW,UAAU;AACtE,MAAI,kBAAkB;AACpB,qBAAiB,YAAY;AAAA,EAC/B;AACF;AACO,SAAS,oBAA6C;AACvD,MAAA,KAAK,MAAM,cAAc;AAC3B,mBAAe,IAAI;AAAA,EAAA,OAEhB;AACyB,gCAAA,eAAe,KAAK,QAAW,IAAI;AACpC,+BAAA,oBAAoB,KAAK,QAAW,IAAI;AACnE,mBAAe,IAAI;AAAA,EACrB;AACF;;"}