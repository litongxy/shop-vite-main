"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Quill = require("quill");
const editor_utils = require("../config/editor.utils.cjs.js");
const Embed = Quill.imports["blots/embed"];
const Inline = Quill.imports["blots/inline"];
const ATTRIBUTES = ["alt", "height", "width", "image-id"];
const _CustomImage = class _CustomImage extends Embed {
  static create(value) {
    const node = super.create(value);
    const url = typeof value === "string" ? value : value.src;
    if (url) {
      const imgURL = this.sanitize(url);
      if (!(imgURL == null ? void 0 : imgURL.startsWith("data:image"))) {
        node.dataset.src = imgURL;
      }
      node.setAttribute("src", imgURL);
    }
    node.setAttribute("data-image-id", `img${_CustomImage.ID_SEED++}`);
    node.setAttribute("devui-editorx-image", true);
    node.style.verticalAlign = "baseline";
    return node;
  }
  static formats(domNode) {
    return ATTRIBUTES.reduce((formats, attribute) => {
      if (domNode.hasAttribute(attribute)) {
        formats[attribute] = domNode.getAttribute(attribute);
      }
      return formats;
    }, {});
  }
  static match(url) {
    return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
  }
  static register() {
    if (/Firefox/i.test(navigator.userAgent)) {
      setTimeout(() => {
        document.execCommand("enableObjectResizing", false, false);
      }, 1);
    }
  }
  static sanitize(url) {
    return editor_utils.sanitize(url, ["http", "https", "data"]) ? url : "//:0";
  }
  static value(domNode) {
    const formats = {};
    const imageSrc = domNode.getAttribute("src");
    formats.src = this.sanitize(imageSrc);
    formats.hasExisted = domNode.getAttribute("devui-editorx-image");
    formats.imageId = domNode.dataset.imageId;
    return formats;
  }
  format(name, value) {
    if (ATTRIBUTES.includes(name)) {
      if (value) {
        this.domNode.setAttribute(name, value);
      } else {
        this.domNode.removeAttribute(name);
      }
    } else {
      super.format(name, value);
    }
  }
  unWrap() {
    this.parent.replaceWith(this);
  }
  wrap(name, value) {
    const wrapper = typeof name === "string" ? this.scroll.create(name, value) : name;
    if (!editor_utils.isNullOrUndefined(this.parent)) {
      this.parent.insertBefore(wrapper, this.next || void 0);
    }
    if (typeof wrapper.appendChild !== "function") {
      throw new TypeError(`Cannot wrap ${name}`);
    }
    wrapper.appendChild(this);
    return wrapper;
  }
};
_CustomImage.ID_SEED = 0;
let CustomImage = _CustomImage;
CustomImage.blotName = "image";
CustomImage.tagName = "IMG";
class CustomImageContainer extends Inline {
  constructor(scroll, domNode) {
    super(scroll, domNode);
    domNode.setAttribute("contenteditable", false);
  }
}
CustomImageContainer.blotName = "image-container";
CustomImageContainer.className = "ql-image-container";
CustomImageContainer.tagName = "DIV";
CustomImageContainer.allowedChildren = [CustomImage];
exports.ImageContainerBlot = CustomImageContainer;
exports.default = CustomImage;
//# sourceMappingURL=image.cjs.js.map
