{"version":3,"file":"list.es.js","sources":["../../../../src/table/formats/list.ts"],"sourcesContent":["import Quill from 'quill'\r\nimport { CELL_ATTRIBUTES, CELL_IDENTITY_KEYS } from '../table-config'\r\n\r\nconst Block = Quill.imports['blots/block']\r\nconst Container = Quill.imports['blots/container']\r\n\r\n// @dynamic\r\nclass ListContainer extends Container {\r\n  static allowedChildren: any\r\n  static blotName: string\r\n  static tagName: string\r\n  replaceWith: any\r\n  domNode: any\r\n  parent: any\r\n  statics: any\r\n  wrap: any\r\n\r\n  format(name, value) {\r\n    const { row, cell, rowspan, colspan } = this.domNode.dataset\r\n    if (name === ListContainer.blotName) {\r\n      if (value) {\r\n        super.format(name, { row, cell, rowspan, colspan })\r\n      }\r\n      else if (row) {\r\n        this.replaceWith('table-cell-line', { row, cell, rowspan, colspan })\r\n      }\r\n    }\r\n  }\r\n}\r\n/**\r\n * bugfix: quill源码中(quill/core/editor.js 272行)在处理拷贝时\r\n *         hard code了这个blotName用于处理ol中的li。所以在quill\r\n *         源码内写法不变的情况下这个名字不能改，否则拷贝有bug\r\n */\r\nListContainer.blotName = 'list-container'\r\nListContainer.tagName = 'OL'\r\n\r\n// @dynamic\r\nclass ListItem extends Block {\r\n  static blotName: string\r\n  static tagName: string\r\n  static requiredContainer: typeof ListContainer\r\n  statics: any\r\n  attachUI: any\r\n  domNode: any\r\n  replaceWith: any\r\n  parent: any\r\n  wrap: any\r\n  children: any\r\n  prev: any\r\n  remove: () => void\r\n\r\n  static create(value) {\r\n    const node = super.create()\r\n    if (typeof value === 'string') {\r\n      value = { value }\r\n    }\r\n    else {\r\n      [...CELL_IDENTITY_KEYS, ...CELL_ATTRIBUTES].forEach((key) => {\r\n        if (value[key]) {\r\n          node.dataset[key] = value[key]\r\n        }\r\n      })\r\n    }\r\n    node.classList.add(value.value)\r\n    return node\r\n  }\r\n\r\n  static formats(domNode) {\r\n    const formats: any = {}\r\n    formats.value = domNode.classList.item(0) || undefined\r\n\r\n    return [...CELL_ATTRIBUTES, ...CELL_IDENTITY_KEYS].reduce((tableFormats, key) => {\r\n      if (domNode.dataset[key]) {\r\n        tableFormats[key] = domNode.dataset[key]\r\n      }\r\n      return tableFormats\r\n    }, formats)\r\n  }\r\n\r\n  static register() {\r\n    Quill.register({ 'formats/list-container': ListContainer }, true)\r\n  }\r\n\r\n  constructor(scroll, domNode) {\r\n    super(scroll, domNode)\r\n    const quill = Quill.find(scroll.domNode.parentNode)\r\n    const range = quill.getSelection()\r\n    if (range) {\r\n      const [line] = quill.getLine(range.index)\r\n      const td = line.domNode.closest('td')\r\n      if (td) {\r\n        [...CELL_IDENTITY_KEYS, ...CELL_ATTRIBUTES].forEach(key =>\r\n          td.dataset[key] && domNode.setAttribute(`data-${key}`, td.dataset[key]))\r\n      }\r\n    }\r\n\r\n    const ui = domNode.ownerDocument.createElement('span')\r\n    const listEventHandler = (e) => {\r\n      if (!scroll.isEnabled()) return\r\n      const { value } = this.statics.formats(domNode, scroll)\r\n      if (value === 'checked') {\r\n        this.format('list', 'unchecked')\r\n        e.preventDefault()\r\n      }\r\n      else if (value === 'unchecked') {\r\n        this.format('list', 'checked')\r\n        e.preventDefault()\r\n      }\r\n    }\r\n    ui.addEventListener('mousedown', listEventHandler)\r\n    ui.addEventListener('touchstart', listEventHandler)\r\n    this.attachUI(ui)\r\n  }\r\n\r\n  format(name, value) {\r\n    if (name !== ListItem.blotName) {\r\n      super.format(name, value)\r\n      return\r\n    }\r\n    const type = (value && typeof value === 'object') ? value.value : value\r\n    const oldClass = this.domNode.classList[0]\r\n    const tdDom = this.domNode.closest('.editing-select-able')\r\n    const tableCellBlot = tdDom && Quill.find(tdDom)\r\n    const images = this.domNode.querySelectorAll('img[data-image-id]')\r\n    if (!type || type === oldClass) {\r\n      // 消除格式或相同list抵消格式时恢复图片对齐，li转化为table-cell-line\r\n      if (images && images.length) {\r\n        images.forEach((img) => {\r\n          img.style.verticalAlign = 'baseLine'\r\n        })\r\n      }\r\n      if (tableCellBlot && tableCellBlot.statics.blotName === 'table') {\r\n        const tableCellFormats = tableCellBlot.formats()\r\n        this.replaceWith('table-cell-line', tableCellFormats)\r\n        // fix: 移除list格式时移除父级的ol或ul，避免table-cell-line判断无td自动生成td容器\r\n        if (this.parent.statics.blotName === ListContainer.blotName) {\r\n          this.parent.unwrap()\r\n        }\r\n      }\r\n      else {\r\n        super.format(name, value)\r\n      }\r\n    }\r\n    else if (oldClass) {\r\n      this.domNode.className = this.domNode.className.replace(oldClass, type)\r\n    }\r\n    else {\r\n      this.domNode.classList.add(type)\r\n    }\r\n  }\r\n\r\n  optimize(context) {\r\n    // 判断前一个li是否包含软回车，如果包含则将当前li与之合并后移除\r\n    const tail = this.prev && this.prev.domNode.lastChild\r\n    if (tail && tail.className && tail.className.includes('ql-soft-break')) {\r\n      // 合并dom\r\n      this.domNode.childNodes.forEach((v, i) => {\r\n        if (i > 0) {\r\n          this.prev.domNode.appendChild(v)\r\n        }\r\n      })\r\n      this.remove()\r\n      return\r\n    }\r\n\r\n    super.optimize(context)\r\n\r\n    // list类型\r\n    const parentFormats = getFormats(this.parent.domNode)\r\n    const formats = ListItem.formats(this.domNode)\r\n    // 单元格属性\r\n    const data = this.domNode.dataset || []\r\n    const images = this.domNode.querySelectorAll('img[data-image-id]')\r\n\r\n    // li更新后判断父容器的对应属性是否与自身一致，如果不一致则向上覆盖\r\n    if (parentFormats.list !== formats.value) {\r\n      const oldClass = this.parent.domNode.classList[0]\r\n      if (oldClass) {\r\n        this.parent.domNode.className = this.parent.domNode.className.replace(oldClass, formats.value)\r\n      }\r\n      else {\r\n        this.parent.domNode.classList.add(formats.value)\r\n      }\r\n    }\r\n\r\n    if (data.cell && !parentFormats.cell) {\r\n      [...CELL_IDENTITY_KEYS, ...CELL_ATTRIBUTES].forEach(key =>\r\n        (formats[key] || data[key]) && this.parent.domNode.setAttribute(`data-${key}`, formats[key] || data[key]))\r\n      // 如果父容器不在表格内则用单元格包裹\r\n      if (this.parent.parent.statics.blotName !== 'table') {\r\n        delete formats.list\r\n        this.wrap('table', formats)\r\n      }\r\n    }\r\n\r\n    // 当list中包含图片时，设置图片顶对齐\r\n    if (images) {\r\n      images.forEach((img) => {\r\n        img.style.verticalAlign = 'top'\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nListItem.blotName = 'list'\r\nListItem.tagName = 'LI'\r\n\r\nListContainer.allowedChildren = [ListItem]\r\nListItem.requiredContainer = ListContainer\r\n\r\n// 属性读取方法：兼容table-cell-line、ol、li\r\n// 因为构造时当前range对应的元素最开始是table-cell-line，然后是li，且ol的formats方法不允许覆写，会导致报错，所以整合一个兼容方法来读取需要的属性。\r\nfunction getFormats(dom): any {\r\n  const formats = {}\r\n\r\n  if (dom.tagName === 'OL') {\r\n    formats.list = dom.classList.item(0)\r\n  }\r\n\r\n  return [...CELL_ATTRIBUTES, ...CELL_IDENTITY_KEYS].reduce((tableFormats, attribute) => {\r\n    if (dom.hasAttribute(`data-${attribute}`)) {\r\n      tableFormats[attribute] = dom.getAttribute(`data-${attribute}`) || undefined\r\n    }\r\n    return tableFormats\r\n  }, formats)\r\n}\r\n\r\nexport { ListContainer, ListItem as default }\r\n"],"names":[],"mappings":"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"}