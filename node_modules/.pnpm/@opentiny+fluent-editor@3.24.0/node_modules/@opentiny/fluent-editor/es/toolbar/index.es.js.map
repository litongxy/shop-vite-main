{"version":3,"file":"index.es.js","sources":["../../../src/toolbar/index.ts"],"sourcesContent":["import type TypeToolbar from 'quill/modules/toolbar'\r\nimport Quill from 'quill'\r\nimport { isNullOrUndefined } from '../config/editor.utils'\r\nimport './better-picker'\r\n\r\nconst Delta = Quill.import('delta')\r\nconst Parchment = Quill.import('parchment')\r\nconst levels = ['error', 'warn', 'log', 'info'] as const\r\nlet level = 'warn' as const\r\n\r\nfunction debuglogger(method: typeof levels[number], ...args) {\r\n  if (levels.indexOf(method) <= levels.indexOf(level)) {\r\n    console[method](...args) // eslint-disable-line no-console\r\n  }\r\n}\r\n\r\nfunction namespace(ns) {\r\n  return levels.reduce((logger, method) => {\r\n    logger[method] = debuglogger.bind(console, method, ns)\r\n    return logger\r\n  }, {} as Record<typeof levels[number], (...args: any) => void>)\r\n}\r\n\r\nnamespace.level = (newLevel) => {\r\n  level = newLevel\r\n}\r\ndebuglogger.level = namespace.level\r\nconst debug = namespace('quill:toolbar')\r\n\r\nconst Toolbar = Quill.import('modules/toolbar') as typeof TypeToolbar\r\n// let oldClean = Toolbar.DEFAULTS.handlers.clean\r\n\r\nclass BetterToolbar extends Toolbar {\r\n  update(range) {\r\n    const formats = isNullOrUndefined(range) ? {} : this.quill.getFormat(range) as Record<string, any>\r\n    this.controls.forEach((pair) => {\r\n      const [format, input] = pair\r\n      if (input.tagName === 'SELECT') {\r\n        const select = input as HTMLSelectElement\r\n        let option\r\n        if (isNullOrUndefined(range)) {\r\n          option = null\r\n        }\r\n        else if (isNullOrUndefined(formats[format])) {\r\n          option = select.querySelector('option[selected]')\r\n        }\r\n        else if (!Array.isArray(formats[format])) {\r\n          let value = format === 'header' ? formats[format].value : formats[format]\r\n          if (typeof value === 'string') {\r\n            value = value.replace(/\"/g, '\\\\\"')\r\n          }\r\n          option = select.querySelector(`option[value=\"${value}\"]`)\r\n        }\r\n        if (isNullOrUndefined(option)) {\r\n          select.value = '' // TODO make configurable?\r\n          select.selectedIndex = -1\r\n        }\r\n        else {\r\n          option.selected = true\r\n        }\r\n      }\r\n      else if (isNullOrUndefined(range)) {\r\n        input.classList.remove('ql-active')\r\n      }\r\n      else if (input.hasAttribute('value')) {\r\n        // both being null should match (default values)\r\n        // '1' should match with 1 (headers)\r\n        let isActive\r\n          = formats[format] === input.getAttribute('value')\r\n          || (!isNullOrUndefined(formats[format])\r\n            && (formats[format].value === input.getAttribute('value')\r\n              || formats[format].toString() === input.getAttribute('value')))\r\n            || (isNullOrUndefined(formats[format]) && !input.getAttribute('value'))\r\n\r\n        if (!isActive) {\r\n          const checkFormat = formats[format]\r\n          if (checkFormat === 'checked' || checkFormat === 'unchecked') {\r\n            isActive = input.getAttribute('value') === 'check'\r\n          }\r\n        }\r\n\r\n        if (isActive) {\r\n          input.classList.add('ql-active')\r\n        }\r\n        else {\r\n          input.classList.remove('ql-active')\r\n        }\r\n      }\r\n      else {\r\n        if (!isNullOrUndefined(formats[format])) {\r\n          input.classList.add('ql-active')\r\n        }\r\n        else {\r\n          input.classList.remove('ql-active')\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  attach(input: HTMLElement) {\r\n    let format = Array.from(input.classList).find((className) => {\r\n      return className.indexOf('ql-') === 0\r\n    })\r\n    if (!format) return\r\n    format = format.slice('ql-'.length)\r\n\r\n    if (input.tagName === 'BUTTON') {\r\n      input.setAttribute('type', 'button')\r\n    }\r\n\r\n    if (this.handlers[format] == null && this.quill.scroll.query(format) == null) {\r\n      debug.warn('ignoring attaching to nonexistent format', format, input)\r\n      return\r\n    }\r\n\r\n    const eventName = input.tagName === 'SELECT' ? 'change' : 'click'\r\n    input.addEventListener(eventName, (e) => {\r\n      let value: boolean | string\r\n\r\n      if (input.tagName === 'SELECT') {\r\n        const select = input as HTMLSelectElement\r\n        if (select.selectedIndex < 0) return\r\n        const selected = select.options[select.selectedIndex]\r\n\r\n        if (selected.hasAttribute('selected')) {\r\n          value = false\r\n        }\r\n        else {\r\n          value = selected.value || false\r\n        }\r\n      }\r\n      else {\r\n        const button = input as HTMLButtonElement\r\n        if (button.classList.contains('ql-active')) {\r\n          value = false\r\n        }\r\n        else {\r\n          value = button.value || !button.hasAttribute('value')\r\n        }\r\n        e.preventDefault()\r\n      }\r\n\r\n      this.quill.focus({ preventScroll: format === 'screenshot' })\r\n      const [range] = this.quill.selection.getRange()\r\n      if (this.handlers[format] != null) {\r\n        // @ts-ignore\r\n        if (!isNullOrUndefined(window.quillIsIntable) && window.quillIsIntable === true && (format === 'blockquote' || format === 'code-block' || format === 'list' || format === 'indent' || format === 'clean')) {\r\n          return\r\n        }\r\n        this.handlers[format].call(this, value)\r\n      }\r\n      else if (\r\n        // @ts-ignore\r\n        this.quill.scroll.query(format).prototype instanceof Parchment.EmbedBlot\r\n      ) {\r\n        value = prompt(`Enter ${format}`)\r\n        if (!value) return\r\n        this.quill.updateContents(\r\n          new Delta()\r\n            .retain(range.index)\r\n            .delete(range.length)\r\n            .insert({ [format]: value }),\r\n          Quill.sources.USER,\r\n        )\r\n      }\r\n      else {\r\n        // @ts-ignore\r\n        if (!isNullOrUndefined(window.quillIsIntable) && window.quillIsIntable === true && (format === 'blockquote' || format === 'code-block' || format === 'list' || format === 'indent' || format === 'clean')) {\r\n          return\r\n        }\r\n        this.quill.format(format, value, Quill.sources.USER)\r\n      }\r\n\r\n      this.update(range)\r\n    })\r\n    this.controls.push([format, input])\r\n  }\r\n}\r\n\r\nexport default BetterToolbar\r\nexport * from './toolbar-tip'\r\n"],"names":[],"mappings":";;;;AAKA,MAAM,QAAQ,MAAM,OAAO,OAAO;AAClC,MAAM,YAAY,MAAM,OAAO,WAAW;AAC1C,MAAM,SAAS,CAAC,SAAS,QAAQ,OAAO,MAAM;AAC9C,IAAI,QAAQ;AAEZ,SAAS,YAAY,WAAkC,MAAM;AAC3D,MAAI,OAAO,QAAQ,MAAM,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC3C,YAAA,MAAM,EAAE,GAAG,IAAI;AAAA,EACzB;AACF;AAEA,SAAS,UAAU,IAAI;AACrB,SAAO,OAAO,OAAO,CAAC,QAAQ,WAAW;AACvC,WAAO,MAAM,IAAI,YAAY,KAAK,SAAS,QAAQ,EAAE;AAC9C,WAAA;AAAA,EACT,GAAG,CAA2D,CAAA;AAChE;AAEA,UAAU,QAAQ,CAAC,aAAa;AACtB,UAAA;AACV;AACA,YAAY,QAAQ,UAAU;AAC9B,MAAM,QAAQ,UAAU,eAAe;AAEvC,MAAM,UAAU,MAAM,OAAO,iBAAiB;AAG9C,MAAM,sBAAsB,QAAQ;AAAA,EAClC,OAAO,OAAO;AACN,UAAA,UAAU,kBAAkB,KAAK,IAAI,CAAA,IAAK,KAAK,MAAM,UAAU,KAAK;AACrE,SAAA,SAAS,QAAQ,CAAC,SAAS;AACxB,YAAA,CAAC,QAAQ,KAAK,IAAI;AACpB,UAAA,MAAM,YAAY,UAAU;AAC9B,cAAM,SAAS;AACX,YAAA;AACA,YAAA,kBAAkB,KAAK,GAAG;AACnB,mBAAA;AAAA,QAEF,WAAA,kBAAkB,QAAQ,MAAM,CAAC,GAAG;AAClC,mBAAA,OAAO,cAAc,kBAAkB;AAAA,QAAA,WAEzC,CAAC,MAAM,QAAQ,QAAQ,MAAM,CAAC,GAAG;AACpC,cAAA,QAAQ,WAAW,WAAW,QAAQ,MAAM,EAAE,QAAQ,QAAQ,MAAM;AACpE,cAAA,OAAO,UAAU,UAAU;AACrB,oBAAA,MAAM,QAAQ,MAAM,KAAK;AAAA,UACnC;AACA,mBAAS,OAAO,cAAc,iBAAiB,KAAK,IAAI;AAAA,QAC1D;AACI,YAAA,kBAAkB,MAAM,GAAG;AAC7B,iBAAO,QAAQ;AACf,iBAAO,gBAAgB;AAAA,QAAA,OAEpB;AACH,iBAAO,WAAW;AAAA,QACpB;AAAA,MAAA,WAEO,kBAAkB,KAAK,GAAG;AAC3B,cAAA,UAAU,OAAO,WAAW;AAAA,MAE3B,WAAA,MAAM,aAAa,OAAO,GAAG;AAGpC,YAAI,WACA,QAAQ,MAAM,MAAM,MAAM,aAAa,OAAO,KAC5C,CAAC,kBAAkB,QAAQ,MAAM,CAAC,MAChC,QAAQ,MAAM,EAAE,UAAU,MAAM,aAAa,OAAO,KACnD,QAAQ,MAAM,EAAE,SAAS,MAAM,MAAM,aAAa,OAAO,MAC1D,kBAAkB,QAAQ,MAAM,CAAC,KAAK,CAAC,MAAM,aAAa,OAAO;AAEzE,YAAI,CAAC,UAAU;AACP,gBAAA,cAAc,QAAQ,MAAM;AAC9B,cAAA,gBAAgB,aAAa,gBAAgB,aAAa;AACjD,uBAAA,MAAM,aAAa,OAAO,MAAM;AAAA,UAC7C;AAAA,QACF;AAEA,YAAI,UAAU;AACN,gBAAA,UAAU,IAAI,WAAW;AAAA,QAAA,OAE5B;AACG,gBAAA,UAAU,OAAO,WAAW;AAAA,QACpC;AAAA,MAAA,OAEG;AACH,YAAI,CAAC,kBAAkB,QAAQ,MAAM,CAAC,GAAG;AACjC,gBAAA,UAAU,IAAI,WAAW;AAAA,QAAA,OAE5B;AACG,gBAAA,UAAU,OAAO,WAAW;AAAA,QACpC;AAAA,MACF;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EAEA,OAAO,OAAoB;AACrB,QAAA,SAAS,MAAM,KAAK,MAAM,SAAS,EAAE,KAAK,CAAC,cAAc;AACpD,aAAA,UAAU,QAAQ,KAAK,MAAM;AAAA,IAAA,CACrC;AACD,QAAI,CAAC,OAAQ;AACJ,aAAA,OAAO,MAAM,MAAM,MAAM;AAE9B,QAAA,MAAM,YAAY,UAAU;AACxB,YAAA,aAAa,QAAQ,QAAQ;AAAA,IACrC;AAEI,QAAA,KAAK,SAAS,MAAM,KAAK,QAAQ,KAAK,MAAM,OAAO,MAAM,MAAM,KAAK,MAAM;AACtE,YAAA,KAAK,4CAA4C,QAAQ,KAAK;AACpE;AAAA,IACF;AAEA,UAAM,YAAY,MAAM,YAAY,WAAW,WAAW;AACpD,UAAA,iBAAiB,WAAW,CAAC,MAAM;AACnC,UAAA;AAEA,UAAA,MAAM,YAAY,UAAU;AAC9B,cAAM,SAAS;AACX,YAAA,OAAO,gBAAgB,EAAG;AAC9B,cAAM,WAAW,OAAO,QAAQ,OAAO,aAAa;AAEhD,YAAA,SAAS,aAAa,UAAU,GAAG;AAC7B,kBAAA;AAAA,QAAA,OAEL;AACH,kBAAQ,SAAS,SAAS;AAAA,QAC5B;AAAA,MAAA,OAEG;AACH,cAAM,SAAS;AACf,YAAI,OAAO,UAAU,SAAS,WAAW,GAAG;AAClC,kBAAA;AAAA,QAAA,OAEL;AACH,kBAAQ,OAAO,SAAS,CAAC,OAAO,aAAa,OAAO;AAAA,QACtD;AACA,UAAE,eAAe;AAAA,MACnB;AAEA,WAAK,MAAM,MAAM,EAAE,eAAe,WAAW,cAAc;AAC3D,YAAM,CAAC,KAAK,IAAI,KAAK,MAAM,UAAU;AACrC,UAAI,KAAK,SAAS,MAAM,KAAK,MAAM;AAEjC,YAAI,CAAC,kBAAkB,OAAO,cAAc,KAAK,OAAO,mBAAmB,SAAS,WAAW,gBAAgB,WAAW,gBAAgB,WAAW,UAAU,WAAW,YAAY,WAAW,UAAU;AACzM;AAAA,QACF;AACA,aAAK,SAAS,MAAM,EAAE,KAAK,MAAM,KAAK;AAAA,MAAA;AAAA;AAAA,QAItC,KAAK,MAAM,OAAO,MAAM,MAAM,EAAE,qBAAqB,UAAU;AAAA,QAC/D;AACQ,gBAAA,OAAO,SAAS,MAAM,EAAE;AAChC,YAAI,CAAC,MAAO;AACZ,aAAK,MAAM;AAAA,UACT,IAAI,MAAM,EACP,OAAO,MAAM,KAAK,EAClB,OAAO,MAAM,MAAM,EACnB,OAAO,EAAE,CAAC,MAAM,GAAG,OAAO;AAAA,UAC7B,MAAM,QAAQ;AAAA,QAAA;AAAA,MAChB,OAEG;AAEH,YAAI,CAAC,kBAAkB,OAAO,cAAc,KAAK,OAAO,mBAAmB,SAAS,WAAW,gBAAgB,WAAW,gBAAgB,WAAW,UAAU,WAAW,YAAY,WAAW,UAAU;AACzM;AAAA,QACF;AACA,aAAK,MAAM,OAAO,QAAQ,OAAO,MAAM,QAAQ,IAAI;AAAA,MACrD;AAEA,WAAK,OAAO,KAAK;AAAA,IAAA,CAClB;AACD,SAAK,SAAS,KAAK,CAAC,QAAQ,KAAK,CAAC;AAAA,EACpC;AACF;"}