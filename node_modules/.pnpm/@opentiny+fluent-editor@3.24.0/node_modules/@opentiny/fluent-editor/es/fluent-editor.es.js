import Quill from "quill";
import "./attributors/index.es.js";
import { ICONS_CONFIG, inputFile, getListValue } from "./config/index.es.js";
import Counter from "./counter/index.es.js";
import CustomClipboard from "./custom-clipboard.es.js";
import BlotFormatter from "./custom-image/BlotFormatter.es.js";
import { CustomImageSpec } from "./custom-image/specs/CustomImageSpec.es.js";
import CustomUploader from "./custom-uploader.es.js";
import Emoji from "./emoji/index.es.js";
import FileModule from "./file/index.es.js";
import { FormatPainter } from "./format-painter/index.es.js";
import { fullscreenHandler } from "./fullscreen/handler.es.js";
import Link from "./link/index.es.js";
import MathliveModule from "./mathlive/index.es.js";
import MathliveBlot from "./mathlive/formats.es.js";
import Mention from "./mention/Mention.es.js";
import { Screenshot } from "./screenshot/index.es.js";
import SoftBreak from "./soft-break/index.es.js";
import StrikeBlot from "./strike/index.es.js";
import CustomSyntax from "./syntax/index.es.js";
import BetterTable from "./table/better-table.es.js";
import BetterToolbar from "./toolbar/index.es.js";
import { isUndefined } from "./utils/is.es.js";
import Video from "./video/index.es.js";
import { defaultLanguage, LANG_CONF, CHANGE_LANGUAGE_EVENT } from "./config/editor.config.es.js";
import { ToolbarTip } from "./toolbar/toolbar-tip.es.js";
import { FontStyle } from "./attributors/font-style.es.js";
import { SizeStyle } from "./attributors/font-size.es.js";
import { LineHeightStyle } from "./attributors/line-height.es.js";
import { TextIndentStyle } from "./attributors/text-indent.es.js";
function resolveLanguageOption(options) {
  if (isUndefined(options.lang)) {
    options.lang = defaultLanguage;
  }
  if (!(options.lang in LANG_CONF)) {
    console.warn(`The language ${options.lang} is not supported. Use the default language: ${defaultLanguage}`);
    options.lang = defaultLanguage;
  }
  return {
    lang: options.lang,
    langText: Object.assign({}, LANG_CONF[options.lang], options.langText || {})
  };
}
class FluentEditor extends Quill {
  constructor(container, options = {}) {
    options = Object.assign(options, resolveLanguageOption(options || {}));
    super(container, options);
    this.isFullscreen = false;
  }
  changeLanguage(options) {
    const langOps = resolveLanguageOption(options);
    if (langOps.lang === this.options.lang) return;
    this.options.lang = langOps.lang;
    this.options.langText = langOps.langText;
    this.emitter.emit(CHANGE_LANGUAGE_EVENT, this.options.lang, this.options.langText);
  }
}
const registerModules = function() {
  const Icons = Quill.import("ui/icons");
  Object.entries(ICONS_CONFIG).forEach(([key, icon]) => {
    Icons[key] = icon;
  });
  const SnowTheme = Quill.imports["themes/snow"];
  SnowTheme.DEFAULTS = {
    modules: {
      "keyboard": {
        bindings: {
          ...BetterTable.keyboardBindings
        }
      },
      "toolbar": {
        handlers: {
          ...SnowTheme.DEFAULTS.modules.toolbar.handlers,
          "formula": function() {
            if (!this.quill.isEnabled()) return;
            const mathlive = this.quill.getModule("mathlive");
            if (!mathlive) {
              this.quill.theme.tooltip.edit("formula");
            } else {
              mathlive.createDialog();
            }
          },
          "undo": function() {
            this.quill.history.undo();
          },
          "redo": function() {
            this.quill.history.redo();
          },
          "better-table": function() {
            this.quill.getModule("better-table").insertTable(3, 3);
          },
          "file": function() {
            var _a, _b;
            const accept = (_b = (_a = this.quill.options) == null ? void 0 : _a.uploadOption) == null ? void 0 : _b.fileAccept;
            inputFile.call(this, "file", accept);
          },
          "image": function() {
            var _a, _b;
            const accept = (_b = (_a = this.quill.options) == null ? void 0 : _a.uploadOption) == null ? void 0 : _b.imageAccept;
            inputFile.call(this, "image", accept);
          },
          "emoji": function() {
          },
          "fullscreen": fullscreenHandler,
          "list": function(value) {
            var _a, _b;
            const range = this.quill.getSelection();
            const formats = this.quill.getFormat(range);
            const preListValue = Array.isArray(formats.list) ? (_a = formats.list[0]) == null ? void 0 : _a.value : (_b = formats.list) == null ? void 0 : _b.value;
            const curListValue = getListValue(value, preListValue);
            const lines = this.quill.getLines(range.index, range.length);
            const tableCols = lines.filter((line) => line.statics.blotName === "table-col" && !line.prev);
            if (tableCols.length) {
              let start = range.index;
              tableCols.forEach((item, index) => {
                const table = item.domNode.closest("table.quill-better-table");
                const tableBlot = Quill.find(table);
                const tableLength = tableBlot.length();
                const tableStart = this.quill.getIndex(item);
                const tableEnd = tableStart + tableLength;
                const beforeTableRangeLength = tableStart - start;
                this.quill.setSelection(start, beforeTableRangeLength, Quill.sources.SILENT);
                this.quill.format("list", curListValue, Quill.sources.USER);
                table.parentNode.classList.remove("quill-better-table-selected");
                start = tableEnd;
                if (index === tableCols.length - 1) {
                  this.quill.setSelection(tableEnd, range.index + range.length - tableEnd);
                  this.quill.format("list", curListValue, Quill.sources.USER);
                }
              });
            } else {
              this.quill.format("list", curListValue, Quill.sources.USER);
            }
          },
          [FormatPainter.toolName]: FormatPainter,
          [Screenshot.toolName]: Screenshot,
          "lineheight": function(value) {
            this.quill.format("line-height", value);
          }
        }
      },
      "better-table": {
        operationMenu: {
          color: true
        }
      },
      "image": {
        specs: [CustomImageSpec],
        overlay: {
          style: {
            border: "1px dashed rgb(68, 68, 68)"
          }
        },
        align: {
          icons: {
            left: '<i class="icon-text-align-left"></i>',
            center: '<i class="icon-text-align-center"></i>',
            right: '<i class="icon-text-align-right"></i>'
          }
        }
      },
      [ToolbarTip.moduleName]: true
    }
  };
  FluentEditor.register(
    {
      "modules/toolbar": BetterToolbar,
      "modules/mention": Mention,
      "modules/better-table": BetterTable,
      "modules/clipboard": CustomClipboard,
      "modules/uploader": CustomUploader,
      // 三者关联性最强
      "modules/image": BlotFormatter,
      // 三者关联性最强
      "modules/file": FileModule,
      // 三者关联性最强
      "modules/counter": Counter,
      "modules/emoji-toolbar": Emoji.ToolbarEmoji,
      "modules/emoji-shortname": Emoji.ShortNameEmoji,
      // 'modules/global-link': GlobalLink,//暂未开发
      "modules/link": Link,
      // 报错
      // 'modules/quickmenu': QuickMenu,//暂未开发
      "modules/syntax": CustomSyntax,
      "modules/mathlive": MathliveModule,
      [`modules/${ToolbarTip.moduleName}`]: ToolbarTip,
      "formats/strike": StrikeBlot,
      "formats/softBreak": SoftBreak,
      "formats/video": Video,
      "formats/emoji": Emoji.EmojiBlot,
      "formats/font": FontStyle,
      "formats/size": SizeStyle,
      "formats/line-height": LineHeightStyle,
      "formats/text-indent": TextIndentStyle,
      [`formats/${MathliveBlot.blotName}`]: MathliveBlot
    },
    true
    // 覆盖内部模块
  );
  return FluentEditor;
};
const FluentEditor$1 = registerModules();
export {
  FluentEditor,
  FluentEditor$1 as default
};
//# sourceMappingURL=fluent-editor.es.js.map
