{"version":3,"file":"custom-clipboard.es.js","sources":["../../src/custom-clipboard.ts"],"sourcesContent":["import type { Parchment as TypeParchment } from 'quill'\r\nimport type TypeBlock from 'quill/blots/block'\r\nimport type TypeClipboard from 'quill/modules/clipboard'\r\nimport type { FluentEditor } from './fluent-editor'\r\nimport Quill from 'quill'\r\nimport {\r\n  ERROR_IMAGE_PLACEHOLDER_CN,\r\n  ERROR_IMAGE_PLACEHOLDER_EN,\r\n} from './config/base64-image'\r\nimport { BIG_DELTA_LIMIT } from './config/editor.config'\r\nimport {\r\n  hexToRgbA,\r\n  imageFileToUrl,\r\n  imageUrlToFile,\r\n  insideTable,\r\n  isNullOrUndefined,\r\n  omit,\r\n  replaceDeltaImage,\r\n  splitWithBreak,\r\n} from './config/editor.utils'\r\n\r\nconst Clipboard = Quill.import('modules/clipboard') as typeof TypeClipboard\r\nconst Delta = Quill.import('delta')\r\n\r\nclass CustomClipboard extends Clipboard {\r\n  quill: FluentEditor\r\n  convert\r\n  onCopy\r\n  matchers\r\n\r\n  prepareMatching(container, nodeMatches) {\r\n    const elementMatchers = []\r\n    const textMatchers = []\r\n    this.matchers.forEach((pair) => {\r\n      const [selector, matcher] = pair\r\n      switch (selector) {\r\n        case Node.TEXT_NODE:\r\n          textMatchers.push(matcher)\r\n          break\r\n        case Node.ELEMENT_NODE:\r\n          elementMatchers.push(matcher)\r\n          break\r\n        default: {\r\n          // word 的 v:shape 系列标签只能通过 getElementsByTagName 获取\r\n          const vRegex = /v:(.+)/\r\n          const nodeList = vRegex.test(selector)\r\n            ? Array.from(container.getElementsByTagName(selector))\r\n            : Array.from(container.querySelectorAll(selector))\r\n          nodeList.forEach((node) => {\r\n            if (nodeMatches.has(node)) {\r\n              const matches = nodeMatches.get(node)\r\n              matches.push(matcher)\r\n            }\r\n            else {\r\n              nodeMatches.set(node, [matcher])\r\n            }\r\n          })\r\n          break\r\n        }\r\n      }\r\n    })\r\n    return [elementMatchers, textMatchers]\r\n  }\r\n\r\n  onCaptureCopy(e, isCut = false) {\r\n    if (e.defaultPrevented) {\r\n      return\r\n    }\r\n    e.preventDefault()\r\n    const [range] = this.quill.selection.getRange()\r\n    if (isNullOrUndefined(range)) {\r\n      return\r\n    }\r\n    const { html, text } = this.onCopy(range, isCut)\r\n\r\n    // 兼容IE11浏览器`\r\n    if (!e.clipboardData) {\r\n      e.clipboardData = {\r\n        types: 'text/plain',\r\n        setData: (_type, value) => {\r\n          // @ts-ignore\r\n          return window.clipboardData.setData('Text', value)\r\n        },\r\n      }\r\n    }\r\n\r\n    // 复制代码时移除utf8中产生的不间断空格\\u00A0\r\n    let plainText = text\r\n    if (html.startsWith('<pre>')) {\r\n      plainText = text.replace(/\\u00A0/g, ' ')\r\n    }\r\n\r\n    e.clipboardData.setData('text/html', html)\r\n    e.clipboardData.setData('text/plain', plainText)\r\n    if (isCut) {\r\n      this.quill.deleteText(range, Quill.sources.USER)\r\n    }\r\n  }\r\n\r\n  onCapturePaste(e: ClipboardEvent) {\r\n    if (e.defaultPrevented || !this.quill.isEnabled()) {\r\n      return\r\n    }\r\n    e.preventDefault()\r\n    const range = this.quill.getSelection(true)\r\n    if (isNullOrUndefined(range)) {\r\n      return\r\n    }\r\n\r\n    // 兼容IE11浏览器\r\n    if (!e.clipboardData) {\r\n      // @ts-ignore\r\n      e.clipboardData = {\r\n        types: 'text/plain',\r\n        getData: () => {\r\n          // @ts-ignore\r\n          return window.clipboardData.getData('Text')\r\n        },\r\n      }\r\n    }\r\n\r\n    const html = e.clipboardData.getData('text/html')\r\n    const text = e.clipboardData.getData('text/plain')\r\n    const files = Array.from(e.clipboardData.files || [])\r\n    const msExcelCheck = /<meta.*?Microsoft Excel\\s[\\d].*?>/\r\n\r\n    if (html.search(msExcelCheck) === -1 && files.length > 0) {\r\n      this.quill.uploader.upload(range, files)\r\n    }\r\n    else {\r\n      const msWordCheck1\r\n        = /<meta\\s*name=\"?generator\"?\\s*content=\"?microsoft\\s*word\\s*\\d+\"?\\/?>/i\r\n      const msWordCheck2 = /xmlns:o=\"urn:schemas-microsoft-com/i\r\n      const result = { html, text, files, rtf: null }\r\n      if (html.search(msExcelCheck) !== -1) {\r\n        result.html = renderStyles(html)\r\n      }\r\n      if (msWordCheck1.test(html) || msWordCheck2.test(html)) {\r\n        // TODO: 当word文档包含heading时text/rtf读取为空，无法获取hex图片，待修复。可参考ckeditor5/issues/2493\r\n        result.rtf = e.clipboardData.getData('text/rtf')\r\n      }\r\n      this.onPaste(range, result)\r\n    }\r\n  }\r\n\r\n  onPaste(range, { html, text, files: clipboardFiles, rtf }) {\r\n    const hexImages = this.extractImageDataFromRtf(rtf)\r\n    const rootBgColor = getComputedStyle(this.quill.root).backgroundColor\r\n    const formats = this.quill.getFormat(range.index)\r\n    let pastedDelta = this.convert({ text, html }, formats)\r\n    pastedDelta = replaceDeltaWhiteSpace(pastedDelta, rootBgColor)\r\n    const deltaLength = pastedDelta.ops.length\r\n\r\n    let loadingTipsContainer\r\n    if (deltaLength > BIG_DELTA_LIMIT) {\r\n      loadingTipsContainer = this.quill.addContainer('ql-loading-tips')\r\n      loadingTipsContainer.innerHTML = this.quill.options.langText.pasting\r\n    }\r\n\r\n    const linePos = { index: range.index, length: range.length, fix: 0 }\r\n    const [line, offset] = this.quill.getLine(range.index)\r\n    const isInsideTable = insideTable.call(this)\r\n\r\n    const handlePasteContent = (content: any) => {\r\n      let pastedContent = content\r\n      // fix: 阻止粘贴代码块和引用导致表格断裂\r\n      const tableBreaker = pastedContent.ops.find((op) => {\r\n        return (\r\n          op.attributes\r\n          && (op.attributes.blockquote || op.attributes['code-block'])\r\n        )\r\n      })\r\n      if (isInsideTable) {\r\n        // fix: 阻止带有表格内容粘贴在表格里\r\n        const table = line.domNode.closest('table.quill-better-table')\r\n        const tableBlot = Quill.find(table) as TypeParchment.Blot\r\n        const tableIndex = this.quill.getIndex(tableBlot)\r\n        const tableLength = tableBlot.length()\r\n        const tableEndPos = tableIndex + tableLength\r\n        const anchorNode = getSelection().anchorNode\r\n        if (tableBreaker) {\r\n          return\r\n        }\r\n        if (formats['table-col']) {\r\n          // fix: 光标在表格前端的table-col处时，获取整个表格的index后以此为基准向前移动一位插入粘贴内容且不删除任何内容\r\n          linePos.index = tableIndex - 1\r\n          linePos.length = 0\r\n        }\r\n        else if (\r\n          range.index === tableEndPos - 1\r\n          && anchorNode instanceof HTMLDivElement\r\n          && anchorNode.classList.contains('quill-better-table-wrapper')\r\n        ) {\r\n          const list = pastedContent.filter(\r\n            op => op.attributes && op.attributes.list,\r\n          )\r\n          if (list && list.length) {\r\n            return\r\n          }\r\n          // fix: 光标在表格末端时，向后移动一位插入粘贴内容且不删除任何内容\r\n          // TODO\r\n          // 当表格最后一格有内容时，没法区分在表格最后一格最末尾和光标在表格后这两种情况，它们的 range 是一样\r\n          // 这会导致在这两处粘贴表格内容都会将该内容粘贴到表格下一行中\r\n          linePos.index = tableEndPos\r\n          linePos.length = 0\r\n        }\r\n        else {\r\n          if (!formats['table-cell-line']) {\r\n            return\r\n          }\r\n          // fix: 解决表格内粘贴问题\r\n          // 缺陷描述：将表格内的换行文本复制粘贴到别的单元格，会导致表格断开\r\n          // 原因是：换行的文本delta对象有问题，delta对象前面多了一个纯换行和表格控制头（table-col）\r\n          // 解决方法：将多余的delta项移除\r\n          pastedContent = {\r\n            ops: pastedContent.filter((op, index) => {\r\n              const regexp = /^[\\n\\r]+$/\r\n              const isString = op.insert && typeof op.insert === 'string'\r\n              const isLine = isString && regexp.test(op.insert)\r\n              const isCellLine\r\n                = isLine && op.attributes && op.attributes['table-cell-line']\r\n              const isList = isLine && op.attributes && op.attributes.list\r\n              const isPureLine = isLine && !isCellLine && !isList\r\n              const isTableCol\r\n                = isLine && op.attributes && op.attributes['table-col']\r\n              const isLastCellLine = isCellLine && index === deltaLength - 1\r\n              return !isPureLine && !isTableCol && !isLastCellLine\r\n            }),\r\n          }\r\n          // fix: 解决从表格外粘贴多行文本导致表格断开的问题\r\n          pastedContent = rebuildDelta(\r\n            new Delta(pastedContent.ops),\r\n            formats['table-cell-line'],\r\n          )\r\n        }\r\n      }\r\n\r\n      // fix: 粘贴内容末尾为List，且粘贴位置的block或table-cell-line无内容则删除该block或table-cell-line\r\n      // TODO 这里的lastChild如果不存在，则可能报错\r\n      const lastChild = pastedContent.ops[pastedContent.ops.length - 1]\r\n      const hasList\r\n        = lastChild && lastChild.attributes && lastChild.attributes.list\r\n      if (\r\n        hasList\r\n        && offset === 0\r\n        && line\r\n        && (line as TypeBlock).cache.length === 1\r\n        && (line.statics.blotName === 'block'\r\n          || line.statics.blotName === 'table-cell-line')\r\n        && (!line.next || line.next.statics.blotName !== 'table-view')\r\n      ) {\r\n        linePos.index = this.quill.getIndex(line)\r\n        linePos.length = line.length()\r\n        linePos.fix = 1\r\n      }\r\n\r\n      const oldDelta = new Delta().retain(linePos.index).delete(linePos.length)\r\n      const delta = oldDelta.concat(pastedContent)\r\n\r\n      setTimeout(() => {\r\n        this.quill.updateContents(delta, Quill.sources.USER)\r\n        this.quill.setSelection(\r\n          delta.length() - linePos.length - linePos.fix,\r\n          Quill.sources.SILENT,\r\n        )\r\n        this.quill.scrollIntoView()\r\n        if (loadingTipsContainer) {\r\n          loadingTipsContainer.remove()\r\n        }\r\n      })\r\n    }\r\n\r\n    ;(async () => {\r\n      try {\r\n        const [files, placeholders, originalUrls, imageIndexs] = this.flipFilesArray(\r\n          await this.extractFilesFromDelta(\r\n            pastedDelta,\r\n            clipboardFiles,\r\n            hexImages,\r\n          ),\r\n        )\r\n\r\n        if (files.length === 0) {\r\n          handlePasteContent(pastedDelta)\r\n        }\r\n        else {\r\n          if (this.quill.options.editorPaste && this.quill.options.editorPaste.observers.length !== 0) {\r\n            // 设置editorPaste回调的情况\r\n            this.quill.options.editorPaste.emit({\r\n              files,\r\n              callback: ({ code, message, data }) => {\r\n                if (code === 0) {\r\n                  const { imageUrls } = data\r\n                  pastedDelta = replaceDeltaImage(\r\n                    pastedDelta,\r\n                    imageUrls,\r\n                    placeholders,\r\n                  )\r\n                  handlePasteContent(pastedDelta)\r\n                }\r\n                else {\r\n                  console.error('error message:', message)\r\n                }\r\n              },\r\n            })\r\n          }\r\n          else {\r\n            // 没有originalUrls 也没有文件粘贴\r\n            if (files[0] !== undefined || originalUrls.length === 0) {\r\n              // 没有设置editorPaste回调的情况下，File格式的占位图需要手动转换成url格式，插入到编辑器中\r\n              const imageUrls = await this.files2urls(\r\n                files,\r\n                placeholders,\r\n                originalUrls,\r\n                pastedDelta,\r\n                imageIndexs,\r\n              )\r\n              pastedDelta = replaceDeltaImage(\r\n                pastedDelta,\r\n                imageUrls,\r\n                placeholders,\r\n              )\r\n            }\r\n            handlePasteContent(pastedDelta)\r\n          }\r\n        }\r\n      }\r\n      catch (_e) {\r\n        throw new Error('Paste failed.')\r\n      }\r\n    })()\r\n  }\r\n\r\n  files2urls(files, placeholders, originalUrls, pastedDelta, imageIndexs) {\r\n    return Promise.all(\r\n      files.map(async (imageFile, index) => {\r\n        const netImgExp = /^((http|https)\\:)?\\/\\/([\\s\\S]+)$/\r\n        if (\r\n          !placeholders[index]\r\n          && originalUrls[index]\r\n          && netImgExp.test(originalUrls[index])\r\n        ) {\r\n          // 不是占位图的普通url图片直接返回url\r\n          return new Promise((resolve) => {\r\n            resolve(originalUrls[index])\r\n          })\r\n        }\r\n        else if (this.quill.options.uploadOption.imageUploadToServer) {\r\n          const range = this.getImgSelection(pastedDelta, imageIndexs[index])\r\n          this.quill.uploader.upload(range, [imageFile])\r\n        }\r\n        else {\r\n          // 占位图或者跨域图需要手动转换成url格式\r\n          return imageFileToUrl(imageFile)\r\n        }\r\n      }),\r\n    )\r\n  }\r\n\r\n  flipFilesArray(filesArr) {\r\n    const files = []\r\n    const placeholders = []\r\n    const originalUrls = []\r\n    const imageIndexs = []\r\n    filesArr.forEach((item: any) => {\r\n      if (item) {\r\n        const [file, placeholder, originalUrl, imageIndex] = item\r\n        files.push(file)\r\n        placeholders.push(placeholder)\r\n        originalUrls.push(originalUrl)\r\n        if (imageIndex === 0 || imageIndex) {\r\n          imageIndexs.push(imageIndex)\r\n        }\r\n      }\r\n    })\r\n    return [files, placeholders, originalUrls, imageIndexs]\r\n  }\r\n\r\n  // 将图片从hex转为base64\r\n  convertHexToBase64(hexString) {\r\n    return btoa(\r\n      hexString\r\n        .match(/\\w{2}/g)\r\n        .map((char) => {\r\n          return String.fromCharCode(Number.parseInt(char, 16))\r\n        })\r\n        .join(''),\r\n    )\r\n  }\r\n\r\n  // 匹配rtf中的图片，存储为{hex, type}对象数组\r\n  extractImageDataFromRtf(rtfData) {\r\n    if (!rtfData) {\r\n      return []\r\n    }\r\n\r\n    const regexPictureHeader\r\n      = /{\\\\pict[\\s\\S]+?\\\\bliptag-?\\d+(\\\\blipupi-?\\d+)?({\\\\\\*\\\\blipuid\\s?[\\da-fA-F]+)?[\\s}]*?/\r\n    const regexPicture = new RegExp(\r\n      `(?:(${regexPictureHeader.source}))([\\\\da-fA-F\\\\s]+)\\\\}`,\r\n      'g',\r\n    )\r\n    const images = rtfData.match(regexPicture)\r\n    const result = []\r\n\r\n    if (images) {\r\n      for (const image of images) {\r\n        let imageType = ''\r\n\r\n        if (image.includes('\\\\pngblip')) {\r\n          imageType = 'image/png'\r\n        }\r\n        else if (image.includes('\\\\jpegblip')) {\r\n          imageType = 'image/jpeg'\r\n        }\r\n\r\n        if (imageType) {\r\n          result.push({\r\n            hex: image\r\n              .replace(regexPictureHeader, '')\r\n              .replace(/[^\\da-fA-F]/g, ''),\r\n            type: imageType,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  extractFilesFromDelta(delta, clipboardFiles, hexImages?) {\r\n    let index = -1\r\n    return Promise.all(\r\n      delta.map(async (op) => {\r\n        index++\r\n        const image = op.insert.image\r\n        if (!image || image.hasExisted) {\r\n          return\r\n        }\r\n\r\n        let file\r\n        let isPlaceholderImage = false\r\n        let imageIndex\r\n        try {\r\n          // hex 图片存在则为 file:/// 协议本地图片，使用 hex 图片转为 base64 读取\r\n          const hexImage = hexImages.length && hexImages.shift()\r\n          const newImage\r\n            = hexImage\r\n            && `data:${hexImage.type};base64,${this.convertHexToBase64(\r\n              hexImage.hex,\r\n            )}`\r\n          imageIndex = index\r\n          file = await imageUrlToFile(newImage || image.src || image)\r\n        }\r\n        catch (_err) {\r\n          if (clipboardFiles.length !== 0) {\r\n            // 跨域获取图片失败时从剪切板获取图片\r\n            const clipboardFile = clipboardFiles[0]\r\n            const imageType\r\n              = clipboardFile.type?.indexOf('image') === -1\r\n                ? 'image/png'\r\n                : clipboardFile.type\r\n            const blob = clipboardFile.slice(0, clipboardFile.size, imageType)\r\n            file = new File([blob], `image-CORS-${new Date().getTime()}.png`, {\r\n              type: imageType,\r\n            })\r\n          }\r\n          else if (image.src.startsWith('http')) {\r\n            // 什么都不做\r\n          }\r\n          else {\r\n            // 剪切板中无图片，用失败占位图替换\r\n            const errorImagePlaceholderJpg\r\n              = this.quill.options.langText['img-error'] === 'Image Copy Error'\r\n                ? ERROR_IMAGE_PLACEHOLDER_EN\r\n                : ERROR_IMAGE_PLACEHOLDER_CN\r\n            file = await imageUrlToFile(errorImagePlaceholderJpg, true)\r\n            isPlaceholderImage = true\r\n          }\r\n        }\r\n\r\n        return [file, isPlaceholderImage, image, imageIndex]\r\n      }),\r\n    )\r\n  }\r\n\r\n  getImgSelection(delta, imageIndex) {\r\n    let length = 0\r\n    delta.ops.every((op, index) => {\r\n      if (index === imageIndex) {\r\n        return false\r\n      }\r\n      if (typeof op.insert === 'string') {\r\n        length += op.insert.length\r\n      }\r\n      return true\r\n    })\r\n    const range = {\r\n      index: length,\r\n      length: 0,\r\n    }\r\n    return range\r\n  }\r\n}\r\n\r\nfunction rebuildDelta(delta, cellLine) {\r\n  const { cell: cellId, colspan, row: rowId, rowspan } = cellLine\r\n  const buildedDelta = delta.reduce((newDelta, op) => {\r\n    if (op.insert && typeof op.insert === 'string') {\r\n      const lines = splitWithBreak(op.insert)\r\n\r\n      lines.forEach((text) => {\r\n        if (text === '\\n') {\r\n          // 对换行增加 table-cell-line 格式，以避免表格断开\r\n          newDelta.insert('\\n', {\r\n            ...op.attributes,\r\n            'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan },\r\n          })\r\n        }\r\n        else {\r\n          text = text.endsWith('\\r') ? text.slice(0, -1) : text\r\n          newDelta.insert(\r\n            text,\r\n            omit(op.attributes, ['table', 'table-cell-line']),\r\n          )\r\n        }\r\n      })\r\n    }\r\n    else {\r\n      newDelta.insert(op.insert, op.attributes)\r\n    }\r\n\r\n    return newDelta\r\n  }, new Delta())\r\n\r\n  return buildedDelta\r\n}\r\n\r\nfunction replaceStrWhiteSpace(str) {\r\n  const isWhiteSpace = value => /^(\\u3000|\\u0020){1}$/.test(value) // 空白字符\r\n  let textWithWhiteSpace = ''\r\n  let beginHasChar = false\r\n  for (const char of str) {\r\n    if (isWhiteSpace(char) && !beginHasChar) {\r\n      textWithWhiteSpace += '\\u00A0'\r\n    }\r\n    else {\r\n      textWithWhiteSpace += char\r\n      beginHasChar = true\r\n    }\r\n  }\r\n  return textWithWhiteSpace\r\n}\r\n\r\nfunction replaceDeltaWhiteSpace(delta, rootBgColor?) {\r\n  return delta.reduce((newDelta, op) => {\r\n    // fix: 当粘贴文字颜色和编辑器背景色一致且自身无背景色的情况下移除文字颜色样式，避免误导用户粘贴无效\r\n    if (\r\n      rootBgColor\r\n      && op.attributes\r\n      && op.attributes.color\r\n      && !op.attributes.background\r\n    ) {\r\n      const originColor = op.attributes.color\r\n      const fontColor\r\n        = originColor.indexOf('#') === 0 ? hexToRgbA(originColor) : originColor\r\n      if (\r\n        fontColor === rootBgColor\r\n        || (fontColor === 'rgba(255,255,255,1)'\r\n          && rootBgColor === 'rgba(0, 0, 0, 0)')\r\n      ) {\r\n        delete op.attributes.color\r\n      }\r\n    }\r\n    if (op.insert && typeof op.insert === 'string') {\r\n      const lines = splitWithBreak(op.insert)\r\n      let insertWithWhiteSpace = ''\r\n      lines.forEach((text) => {\r\n        insertWithWhiteSpace += replaceStrWhiteSpace(text)\r\n      })\r\n      newDelta.insert(insertWithWhiteSpace, op.attributes)\r\n    }\r\n    else {\r\n      newDelta.insert(op.insert, op.attributes)\r\n    }\r\n    return newDelta\r\n  }, new Delta())\r\n}\r\n\r\nfunction renderStyles(html) {\r\n  let htmlString = html\r\n  // Trim unnecessary parts.\r\n  htmlString = htmlString.substring(\r\n    htmlString.indexOf('<html '),\r\n    htmlString.length,\r\n  )\r\n  htmlString = htmlString.substring(\r\n    0,\r\n    htmlString.lastIndexOf('</html>') + '</html>'.length,\r\n  )\r\n\r\n  // Add temporary iframe.\r\n  const iframe = document.createElement('iframe')\r\n  iframe.style.display = 'none'\r\n  document.body.appendChild(iframe)\r\n\r\n  const iframeDoc = iframe.contentDocument || iframe.contentWindow.document\r\n  iframeDoc.open()\r\n  iframeDoc.write(htmlString)\r\n  iframeDoc.close()\r\n\r\n  let collection\r\n  let pointer\r\n  const rules\r\n    = iframeDoc.styleSheets[iframeDoc.styleSheets.length - 1].cssRules\r\n\r\n  // Convert internal styles to inline style of respective node.\r\n  for (let idx = 0; idx < rules.length; idx++) {\r\n    if ((rules[idx] as CSSStyleRule).selectorText === '') {\r\n      continue\r\n    }\r\n    collection = iframeDoc.body.querySelectorAll(\r\n      (rules[idx] as CSSStyleRule).selectorText,\r\n    )\r\n\r\n    for (pointer = 0; pointer < collection.length; pointer++) {\r\n      collection[pointer].style.cssText += (\r\n        rules[idx] as CSSStyleRule\r\n      ).style.cssText\r\n    }\r\n  }\r\n\r\n  // @ts-ignore\r\n  const convertedString = iframeDoc.firstChild.outerHTML\r\n  // Remove temporary iframe.\r\n  iframe.parentNode.removeChild(iframe)\r\n\r\n  return convertedString\r\n}\r\n\r\nexport default CustomClipboard\r\n"],"names":[],"mappings":"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"}