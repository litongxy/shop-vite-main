import { CELL_ATTRIBUTES, CELL_IDENTITY_KEYS } from '../table-config';

declare const Block: unknown;
declare const Container: unknown;
declare class TableCellLine extends Block {
    static requiredContainer: any;
    static tagName: string;
    static className: string;
    static blotName: any;
    domNode: any;
    statics: any;
    wrap: any;
    parent: any;
    static create(value: any): any;
    static formats(domNode: any): Record<string, any>;
    toggleAttribute(name: any, value: any): void;
    formatChildren(name: any, value: any): void;
    format(name: any, value: any): void;
    optimize(context: any): void;
    tableCell(): any;
}
declare class TableCell extends Container {
    static allowedChildren: any;
    static blotName: any;
    static requiredContainer: any;
    static tagName: string;
    next: any;
    children: any;
    parent: any;
    domNode: any;
    statics: any;
    wrap: any;
    splitAfter: any;
    prev: any;
    scroll: any;
    static create(value?: {
        row: string;
    }): any;
    static formats(domNode: any): {
        height: any;
        row: any;
    };
    checkMerge(): boolean;
    cellOffset(): any;
    formats(): {};
    toggleAttribute(name: any, value: any): void;
    formatChildren(name: any, value: any): void;
    /**
     * this method is for TableCellLine to change cell background color
     *  if use `format('cell-bg', value)` will loop trigger
     *  TableCellLine.optimize -> TableCell.format -> TableCellLine.optimize ...
     */
    setCellBg(value?: string): void;
    format(name: any, value: any): void;
    optimize(context: any): void;
    getFormat(domNode: any): Record<string, any>;
    row(): any;
    rowOffset(): any;
    table(): any;
}
declare class TableRow extends Container {
    static requiredContainer: any;
    static allowedChildren: any;
    static blotName: string;
    static tagName: string;
    next: any;
    children: any;
    domNode: any;
    statics: any;
    wrap: any;
    splitAfter: any;
    enforceAllowedChildren: any;
    uiNode: any;
    parent: any;
    prev: any;
    static create(value: any): any;
    checkMerge(): boolean;
    formats(): {};
    format(key: any, value: any): void;
    optimize(context: any): void;
    rowOffset(): any;
    table(): any;
}
declare class TableBody extends Container {
    static requiredContainer: any;
    static allowedChildren: any;
    static blotName: string;
    static tagName: string;
}
declare class TableCol extends Block {
    static requiredContainer: any;
    static blotName: string;
    static tagName: string;
    domNode: any;
    static create(value: any): any;
    static formats(domNode: any): {};
    format(name: any, value: any): void;
    html(): any;
}
declare class TableColGroup extends Container {
    static requiredContainer: any;
    static allowedChildren: any;
    static blotName: string;
    static tagName: string;
    parent: any;
    statics: any;
    optimize(context: any): void;
    findTdColspanInTbody(tbody: any, trId: any): number;
}
declare class TableContainer extends Container {
    static blotName: string;
    static className: string;
    static tagName: string;
    static requiredContainer: any;
    static allowedChildren: any;
    domNode: any;
    parent: any;
    children: any;
    descendants: any;
    scroll: any;
    remove: any;
    static create(): any;
    constructor(scroll: any, domNode: any);
    updateTableWidth(): void;
    cells(column: any): any;
    colGroup(): any;
    deleteColumns(compareRect: any, delIndexes: any[], editorWrapper: any): boolean;
    deleteRow(compareRect: any, editorWrapper: any): void;
    tableDestroy(): void;
    insertCell(tableRow: any, ref: any, bg?: string): void;
    insertColumn(compareRect: any, colIndex: any, isRight: boolean, editorWrapper: any): any[];
    insertRow(compareRect: any, isDown: any, editorWrapper: any): any[];
    mergeCells(_compareRect: any, mergingCells: any, rowspan: any, colspan: any, _editorWrapper: any): any;
    unmergeCells(unmergingCells: any, editorWrapper: any): void;
    emptyCells(selectedTds: any): void;
    rows(): any;
}
declare class TableViewWrapper extends Container {
    static blotName: string;
    static tagName: string;
    static className: string;
    static allowedChildren: any;
    constructor(scroll: any, domNode: any);
}
declare function rowId(): string;
declare function cellId(): string;
export { CELL_ATTRIBUTES, CELL_IDENTITY_KEYS, cellId, rowId, TableBody, TableCell, TableCellLine, TableCol, TableColGroup, TableContainer, TableRow, TableViewWrapper, };
