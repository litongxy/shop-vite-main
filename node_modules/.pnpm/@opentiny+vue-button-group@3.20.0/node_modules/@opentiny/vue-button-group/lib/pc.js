import { renderless, api } from '@opentiny/vue-renderless/button-group/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import Popover from '@opentiny/vue-popover';
import Button from '@opentiny/vue-button';
import { iconPopup, iconEditor } from '@opentiny/vue-icon';
import { AutoTip } from '@opentiny/vue-directive';
import { resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, renderSlot, Fragment, renderList, withDirectives, createTextVNode, toDisplayString, createBlock, resolveDynamicComponent, createCommentVNode, createElementVNode, createVNode, withCtx } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["change", "edit", "update:modelValue"],
  directives: {
    AutoTip
  },
  props: [].concat(props, ["size", "data", "plain", "modelValue", "disabled", "valueField", "textField", "showMore", "showEdit", "border"]),
  components: {
    TinyPopover: Popover,
    TinyButton: Button,
    IconPopup: iconPopup(),
    IconEditor: iconEditor()
    // 新规范图标
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "tiny-group-item"
};
var _hoisted_2 = ["tabindex", "onClick"];
var _hoisted_3 = {
  key: 2
};
var _hoisted_4 = {
  key: 1,
  class: "tiny-group-item show-more"
};
var _hoisted_5 = ["onClick"];
var _hoisted_6 = {
  key: 2
};
var _hoisted_7 = {
  key: 0,
  class: "tiny-group-item__more"
};
var _hoisted_8 = {
  class: "more-list"
};
var _hoisted_9 = ["onClick"];
var _hoisted_10 = {
  key: 1,
  class: "tiny-group-item__edit"
};
var _hoisted_11 = {
  key: 1,
  class: "tiny-button-group--empty"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_popup = resolveComponent("icon-popup");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_popover = resolveComponent("tiny-popover");
  var _component_Icon_editor = resolveComponent("Icon-editor");
  var _directive_auto_tip = resolveDirective("auto-tip");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-button-group", [_ctx.size ? "tiny-button-group--" + _ctx.size : "", _ctx.border ? "" : "tiny-button-group--borderless"]])
    },
    [renderSlot(_ctx.$slots, "default", {}, function() {
      return [_ctx.data.length > 0 ? (openBlock(), createElementBlock(
        Fragment,
        {
          key: 0
        },
        [!(_ctx.showMore && _ctx.showMore > 0) ? (openBlock(), createElementBlock("ul", _hoisted_1, [(openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(_ctx.data, function(node, index) {
            return openBlock(), createElementBlock(
              "li",
              {
                key: index,
                class: normalizeClass({
                  active: _ctx.state.value === node[_ctx.valueField]
                })
              },
              [withDirectives((openBlock(), createElementBlock("button", {
                class: normalizeClass(_ctx.getItemClass(node)),
                type: "button",
                tabindex: _ctx.getItemClass(node).disabled ? "-1" : "0",
                onClick: function onClick($event) {
                  return _ctx.handleClick(node);
                }
              }, [createTextVNode(
                toDisplayString(node[_ctx.textField]),
                1
                /* TEXT */
              )], 10, _hoisted_2)), [[_directive_auto_tip, Boolean(node.tip) ? {
                always: true,
                content: node.tip
              } : false]]), node.sup ? (openBlock(), createElementBlock(
                "span",
                {
                  key: 0,
                  class: normalizeClass(["tiny-group-item__sup", {
                    "tiny-group-item__sup-text": !node.sup.slot && !node.sup.icon && node.sup.text && !node.sup.tag,
                    "tiny-group-item__sup-icon": !node.sup.slot && node.sup.icon && !node.sup.tag,
                    "tiny-group-item__sup-tag": node.sup.tag
                  }, typeof node.sup.class === "string" ? node.sup.class : ""].concat(Array.isArray(node.sup.class) ? node.sup.class : []))
                },
                [node.sup.slot ? renderSlot(_ctx.$slots, node.sup.slot, {
                  key: 0,
                  sup: node.sup
                }) : node.sup.icon ? (openBlock(), createBlock(resolveDynamicComponent(node.sup.icon), {
                  key: 1
                })) : node.sup.text ? (openBlock(), createElementBlock(
                  "span",
                  _hoisted_3,
                  toDisplayString(node.sup.text),
                  1
                  /* TEXT */
                )) : createCommentVNode("v-if", true)],
                2
                /* CLASS */
              )) : createCommentVNode("v-if", true)],
              2
              /* CLASS */
            );
          }),
          128
          /* KEYED_FRAGMENT */
        ))])) : (openBlock(), createElementBlock("ul", _hoisted_4, [(openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(_ctx.state.buttonData, function(node, index) {
            return openBlock(), createElementBlock(
              "li",
              {
                key: index,
                class: normalizeClass({
                  active: _ctx.state.value === node[_ctx.valueField]
                })
              },
              [createElementVNode("button", {
                class: normalizeClass(_ctx.getItemClass(node)),
                onClick: function onClick($event) {
                  return _ctx.handleClick(node);
                }
              }, toDisplayString(node[_ctx.textField]), 11, _hoisted_5), node.sup ? (openBlock(), createElementBlock(
                "span",
                {
                  key: 0,
                  class: normalizeClass(["tiny-group-item__sup", {
                    "tiny-group-item__sup-text": !node.sup.slot && !node.sup.icon && node.sup.text && node.sup.tag,
                    "tiny-group-item__sup-icon": !node.sup.slot && node.sup.icon && node.sup.tag,
                    "tiny-group-item__sup-tag": node.sup.tag
                  }, typeof node.sup.class === "string" ? node.sup.class : ""].concat(Array.isArray(node.sup.class) ? node.sup.class : []))
                },
                [node.sup.slot ? renderSlot(_ctx.$slots, node.sup.slot, {
                  key: 0,
                  sup: node.sup
                }) : node.sup.icon ? (openBlock(), createBlock(resolveDynamicComponent(node.sup.icon), {
                  key: 1
                })) : node.sup.text ? (openBlock(), createElementBlock(
                  "span",
                  _hoisted_6,
                  toDisplayString(node.sup.text),
                  1
                  /* TEXT */
                )) : createCommentVNode("v-if", true)],
                2
                /* CLASS */
              )) : createCommentVNode("v-if", true)],
              2
              /* CLASS */
            );
          }),
          128
          /* KEYED_FRAGMENT */
        )), _ctx.data.length > _ctx.showMore ? (openBlock(), createElementBlock("li", _hoisted_7, [createVNode(_component_tiny_popover, {
          "visible-arrow": false,
          "popper-class": "tiny-group-item__more-popover"
        }, {
          reference: withCtx(function() {
            return [createVNode(_component_tiny_button, {
              "reset-time": 0,
              class: "more-button"
            }, {
              default: withCtx(function() {
                return [createVNode(_component_icon_popup)];
              }),
              _: 1
              /* STABLE */
            })];
          }),
          default: withCtx(function() {
            return [createElementVNode("ul", _hoisted_8, [(openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.state.moreData, function(moreNode, index) {
                return openBlock(), createElementBlock("li", {
                  key: index,
                  class: normalizeClass({
                    active: _ctx.state.value === moreNode[_ctx.valueField],
                    "more-item": true
                  }),
                  onClick: function onClick($event) {
                    return _ctx.moreNodeClick(moreNode);
                  }
                }, toDisplayString(moreNode[_ctx.textField]), 11, _hoisted_9);
              }),
              128
              /* KEYED_FRAGMENT */
            ))])];
          }),
          _: 1
          /* STABLE */
        })])) : createCommentVNode("v-if", true), _ctx.showEdit ? (openBlock(), createElementBlock("li", _hoisted_10, [createVNode(_component_tiny_button, {
          onClick: _cache[0] || (_cache[0] = function($event) {
            return _ctx.$emit("edit");
          }),
          class: "edit-button"
        }, {
          default: withCtx(function() {
            return [createVNode(_component_Icon_editor)];
          }),
          _: 1
          /* STABLE */
        })])) : createCommentVNode("v-if", true)]))],
        64
        /* STABLE_FRAGMENT */
      )) : (openBlock(), createElementBlock("span", _hoisted_11, [renderSlot(_ctx.$slots, "empty", {}, function() {
        return [createTextVNode(
          toDisplayString(_ctx.t("ui.buttonGroup.noData")),
          1
          /* TEXT */
        )];
      })]))];
    })],
    2
    /* CLASS */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
