import { renderless, api } from '@opentiny/vue-renderless/timeline-item/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import { iconWarn, iconClose, iconYes } from '@opentiny/vue-icon';
import '@opentiny/vue-theme/steps/index.css';
import { resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, Fragment, createElementVNode, toDisplayString, createBlock, resolveDynamicComponent, renderSlot, createCommentVNode, createTextVNode, withDirectives, vShow } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["click"],
  props: [].concat(props, ["node", "space", "lineWidth", "shape", "autoColorField", "nodeIndex"]),
  components: {
    IconWarn: iconWarn(),
    IconClose: iconClose(),
    IconYes: iconYes()
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "number"
};
var _hoisted_2 = {
  class: "node-description"
};
var _hoisted_3 = ["textContent"];
var _hoisted_4 = {
  class: "tiny-timeline-item__description",
  ref: "description"
};
var _hoisted_5 = {
  class: "date-time"
};
var _hoisted_6 = {
  class: "time"
};
var _hoisted_7 = {
  class: "tiny-steps__node"
};
var _hoisted_8 = {
  key: 0,
  class: "number"
};
var _hoisted_9 = {
  class: "node-description"
};
var _hoisted_10 = ["textContent"];
var _hoisted_11 = {
  key: 0,
  class: "status"
};
var _hoisted_12 = {
  key: 0,
  class: "date-time"
};
var _hoisted_13 = {
  class: "date"
};
var _hoisted_14 = {
  class: "time"
};
var _hoisted_15 = {
  class: "tiny-timeline-item__pillar"
};
var _hoisted_16 = {
  key: 1,
  class: "number"
};
var _hoisted_17 = {
  key: 1,
  class: "dot"
};
var _hoisted_18 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    class: "line"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_19 = {
  class: "name"
};
var _hoisted_20 = {
  key: 0,
  class: "time"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_close = resolveComponent("icon-close");
  var _component_icon_warn = resolveComponent("icon-warn");
  var _component_icon_yes = resolveComponent("icon-yes");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-timeline-item", _ctx.state.computedItemCls]),
      style: normalizeStyle(_ctx.state.computedItemStyle)
    },
    [!_ctx.rootProps.vertical ? (openBlock(), createElementBlock(
      Fragment,
      {
        key: 0
      },
      [_ctx.rootProps.textPosition === "right" ? (openBlock(), createElementBlock(
        Fragment,
        {
          key: 0
        },
        [createElementVNode(
          "div",
          {
            class: normalizeClass(_ctx.state.iconClass),
            onClick: _cache[0] || (_cache[0] = function($event) {
              return _ctx.handleClick(_ctx.node);
            })
          },
          [(_ctx.nodeIndex >= _ctx.state.current || _ctx.rootProps.onlyNumber) && !_ctx.node[_ctx.autoColorField] && !_ctx.node.error ? (openBlock(), createElementBlock(
            "span",
            _hoisted_1,
            toDisplayString(_ctx.rootProps.showNumber ? _ctx.nodeIndex + _ctx.rootProps.start : ""),
            1
            /* TEXT */
          )) : (openBlock(), createElementBlock(
            Fragment,
            {
              key: 1
            },
            [_ctx.node[_ctx.autoColorField] === "error" || _ctx.node.error ? (openBlock(), createBlock(_component_icon_close, {
              key: 0,
              class: "tiny-svg-size fixicon icon-error"
            })) : _ctx.node[_ctx.autoColorField] === "warning" ? (openBlock(), createBlock(_component_icon_warn, {
              key: 1,
              class: "tiny-svg-size fixicon icon-warning"
            })) : _ctx.node[_ctx.autoColorField] === "success" || _ctx.nodeIndex < _ctx.state.current && !_ctx.node[_ctx.autoColorField] ? (openBlock(), createBlock(_component_icon_yes, {
              key: 2,
              class: "tiny-svg-size fixicon icon-yes"
            })) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.node[_ctx.autoColorField]), {
              key: 3,
              class: "fixicons"
            }))],
            64
            /* STABLE_FRAGMENT */
          ))],
          2
          /* CLASS */
        ), createElementVNode("div", _hoisted_2, [renderSlot(_ctx.$slots, "text", {
          slotScope: _ctx.node
        }, function() {
          return [createElementVNode("div", {
            class: "name",
            textContent: toDisplayString(_ctx.node[_ctx.rootProps.nameField]),
            onClick: _cache[1] || (_cache[1] = function($event) {
              return _ctx.handleClick(_ctx.node);
            })
          }, null, 8, _hoisted_3)];
        }), _ctx.nodeIndex !== _ctx.state.nodesLength - 1 ? (openBlock(), createElementBlock(
          "div",
          {
            key: 0,
            class: normalizeClass(["line", {
              "line-done": _ctx.nodeIndex < _ctx.state.current,
              "line-end": _ctx.nodeIndex === _ctx.state.nodesLength - 1
            }]),
            style: normalizeStyle({
              width: _ctx.state.computedLineWidth
            })
          },
          null,
          6
          /* CLASS, STYLE */
        )) : createCommentVNode("v-if", true), createElementVNode(
          "div",
          _hoisted_4,
          [renderSlot(_ctx.$slots, "description", {
            slotScope: _ctx.node
          }, function() {
            return [createTextVNode(
              toDisplayString(_ctx.node.description),
              1
              /* TEXT */
            )];
          }), withDirectives(createElementVNode(
            "div",
            null,
            [renderSlot(_ctx.$slots, "active-node-desc", {
              slotScope: _ctx.node
            })],
            512
            /* NEED_PATCH */
          ), [[vShow, _ctx.nodeIndex === _ctx.rootProps.active]])],
          512
          /* NEED_PATCH */
        )])],
        64
        /* STABLE_FRAGMENT */
      )) : (openBlock(), createElementBlock(
        Fragment,
        {
          key: 1
        },
        [renderSlot(_ctx.$slots, "top", {
          slotScope: _ctx.node
        }, function() {
          return [createElementVNode("div", _hoisted_5, [createElementVNode(
            "span",
            _hoisted_6,
            toDisplayString(_ctx.getDate(_ctx.node[_ctx.rootProps.timeField]).date) + " " + toDisplayString(_ctx.getDate(_ctx.node[_ctx.rootProps.timeField]).time),
            1
            /* TEXT */
          )])];
        }), createElementVNode("div", _hoisted_7, [createElementVNode(
          "div",
          {
            class: normalizeClass(_ctx.state.iconClass),
            onClick: _cache[2] || (_cache[2] = function($event) {
              return _ctx.handleClick(_ctx.node);
            })
          },
          [(_ctx.nodeIndex >= _ctx.state.current || _ctx.rootProps.onlyNumber) && !_ctx.node[_ctx.autoColorField] && !_ctx.node.error ? (openBlock(), createElementBlock(
            "span",
            _hoisted_8,
            toDisplayString(_ctx.rootProps.showNumber ? _ctx.nodeIndex + _ctx.rootProps.start : ""),
            1
            /* TEXT */
          )) : (openBlock(), createElementBlock(
            Fragment,
            {
              key: 1
            },
            [_ctx.node[_ctx.autoColorField] === "error" || _ctx.node.error ? (openBlock(), createBlock(_component_icon_close, {
              key: 0,
              class: "tiny-svg-size fixicon icon-error"
            })) : _ctx.node[_ctx.autoColorField] === "warning" ? (openBlock(), createBlock(_component_icon_warn, {
              key: 1,
              class: "tiny-svg-size fixicon icon-warning"
            })) : _ctx.node[_ctx.autoColorField] === "success" || _ctx.nodeIndex < _ctx.state.current && !_ctx.node[_ctx.autoColorField] ? (openBlock(), createBlock(_component_icon_yes, {
              key: 2,
              class: "tiny-svg-size fixicon icon-yes"
            })) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.node[_ctx.autoColorField]), {
              key: 3,
              class: "fixicons"
            }))],
            64
            /* STABLE_FRAGMENT */
          ))],
          2
          /* CLASS */
        ), createElementVNode(
          "div",
          {
            class: normalizeClass(["line", {
              "line-done": _ctx.nodeIndex < _ctx.state.current,
              "line-end": _ctx.nodeIndex === _ctx.state.nodesLength - 1
            }])
          },
          null,
          2
          /* CLASS */
        )]), createElementVNode("div", _hoisted_9, [renderSlot(_ctx.$slots, "bottom", {
          slotScope: _ctx.node
        }, function() {
          return [createElementVNode("div", {
            class: "name",
            textContent: toDisplayString(_ctx.node[_ctx.rootProps.nameField]),
            onClick: _cache[3] || (_cache[3] = function($event) {
              return _ctx.handleClick(_ctx.node);
            })
          }, null, 8, _hoisted_10), _ctx.rootProps.showStatus ? (openBlock(), createElementBlock(
            "div",
            _hoisted_11,
            toDisplayString(_ctx.getStatus(_ctx.nodeIndex)),
            1
            /* TEXT */
          )) : createCommentVNode("v-if", true)];
        })])],
        64
        /* STABLE_FRAGMENT */
      ))],
      64
      /* STABLE_FRAGMENT */
    )) : (openBlock(), createElementBlock(
      Fragment,
      {
        key: 1
      },
      [renderSlot(_ctx.$slots, "left", {
        slotScope: _ctx.node
      }, function() {
        return [_ctx.shape === "circle" ? (openBlock(), createElementBlock("div", _hoisted_12, [createElementVNode(
          "span",
          _hoisted_13,
          toDisplayString(_ctx.getDate(_ctx.node[_ctx.rootProps.timeField]).date),
          1
          /* TEXT */
        ), createElementVNode(
          "span",
          _hoisted_14,
          toDisplayString(_ctx.getDate(_ctx.node[_ctx.rootProps.timeField]).time),
          1
          /* TEXT */
        )])) : createCommentVNode("v-if", true)];
      }), createElementVNode("div", _hoisted_15, [_ctx.shape === "circle" ? (openBlock(), createElementBlock(
        "div",
        {
          key: 0,
          class: normalizeClass(_ctx.state.iconClass),
          onClick: _cache[4] || (_cache[4] = function($event) {
            return _ctx.handleClick(_ctx.node);
          })
        },
        [(_ctx.state.isReverse ? _ctx.nodeIndex > _ctx.state.current : _ctx.nodeIndex < _ctx.state.current) || _ctx.node[_ctx.autoColorField] ? (openBlock(), createElementBlock(
          Fragment,
          {
            key: 0
          },
          [_ctx.node[_ctx.autoColorField] === "error" || _ctx.node.error ? (openBlock(), createBlock(_component_icon_close, {
            key: 0,
            class: "tiny-svg-size fixicon icon-error"
          })) : _ctx.node[_ctx.autoColorField] === "warning" ? (openBlock(), createBlock(_component_icon_warn, {
            key: 1,
            class: "tiny-svg-size fixicon icon-warning"
          })) : _ctx.node[_ctx.autoColorField] === "success" || !_ctx.node[_ctx.autoColorField] ? (openBlock(), createBlock(_component_icon_yes, {
            key: 2,
            class: "tiny-svg-size fixicon icon-yes"
          })) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.node[_ctx.autoColorField]), {
            key: 3,
            class: "fixicons"
          }))],
          64
          /* STABLE_FRAGMENT */
        )) : (openBlock(), createElementBlock(
          "span",
          _hoisted_16,
          toDisplayString(_ctx.rootProps.showNumber ? _ctx.state.isReverse ? _ctx.state.nodesLength - 1 - _ctx.nodeIndex + _ctx.rootProps.start : _ctx.nodeIndex + _ctx.rootProps.start : ""),
          1
          /* TEXT */
        ))],
        2
        /* CLASS */
      )) : (openBlock(), createElementBlock("div", {
        key: 1,
        class: "dot-container",
        onClick: _cache[5] || (_cache[5] = function($event) {
          return _ctx.handleClick(_ctx.node);
        })
      }, [_ctx.node[_ctx.autoColorField] ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.node[_ctx.autoColorField]), {
        key: 0,
        class: "fixicons"
      })) : (openBlock(), createElementBlock("span", _hoisted_17))])), _hoisted_18]), renderSlot(_ctx.$slots, "right", {
        slotScope: _ctx.node
      }, function() {
        return [createElementVNode("div", {
          class: "tiny-timeline-item__content",
          onClick: _cache[6] || (_cache[6] = function($event) {
            return _ctx.handleClick(_ctx.node);
          })
        }, [createElementVNode(
          "div",
          _hoisted_19,
          toDisplayString(_ctx.node[_ctx.rootProps.nameField]),
          1
          /* TEXT */
        ), renderSlot(_ctx.$slots, "description", {
          slotScope: _ctx.node
        }, function() {
          return [createTextVNode(
            toDisplayString(_ctx.node.description),
            1
            /* TEXT */
          )];
        }), _ctx.shape === "dot" ? (openBlock(), createElementBlock(
          "div",
          _hoisted_20,
          toDisplayString(_ctx.node[_ctx.rootProps.timeField]),
          1
          /* TEXT */
        )) : createCommentVNode("v-if", true)])];
      })],
      64
      /* STABLE_FRAGMENT */
    ))],
    6
    /* CLASS, STYLE */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
