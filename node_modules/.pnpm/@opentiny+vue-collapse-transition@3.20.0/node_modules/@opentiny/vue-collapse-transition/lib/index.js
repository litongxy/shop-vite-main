import { addClass, removeClass } from '@opentiny/vue-renderless/common/deps/dom';
import { defineComponent, $prefix } from '@opentiny/vue-common';
import { openBlock, createBlock, Transition, toHandlers, withCtx, renderSlot } from 'vue';
import '@opentiny/vue-theme/collapse/index.css';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "CollapseTransition",
  setup: function setup() {
    return {
      on: {
        beforeEnter: function beforeEnter(elem) {
          addClass(elem, "collapse-transition");
          if (!elem.dataset)
            elem.dataset = {};
          elem.dataset.oldPaddingBottom = elem.style.paddingBottom;
          elem.dataset.oldPaddingTop = elem.style.paddingTop;
          elem.style.height = "0";
          elem.style.paddingTop = 0;
          elem.style.paddingBottom = 0;
        },
        enter: function enter(elem) {
          elem.dataset.oldOverflow = elem.style.overflow;
          if (elem.scrollHeight === 0) {
            elem.style.height = "";
            elem.style.paddingBottom = elem.dataset.oldPaddingBottom;
            elem.style.paddingTop = elem.dataset.oldPaddingTop;
          } else {
            elem.style.height = elem.scrollHeight + "px";
            elem.style.paddingBottom = elem.dataset.oldPaddingBottom;
            elem.style.paddingTop = elem.dataset.oldPaddingTop;
          }
          elem.style.overflow = "hidden";
        },
        afterEnter: function afterEnter(elem) {
          removeClass(elem, "collapse-transition");
          elem.style.height = "";
          elem.style.overflow = elem.dataset.oldOverflow;
        },
        beforeLeave: function beforeLeave(elem) {
          if (!elem.dataset)
            elem.dataset = {};
          elem.dataset.oldOverflow = elem.style.overflow;
          elem.dataset.oldPaddingBottom = elem.style.paddingBottom;
          elem.dataset.oldPaddingTop = elem.style.paddingTop;
          elem.style.height = elem.scrollHeight + "px";
          elem.style.overflow = "hidden";
        },
        leave: function leave(elem) {
          if (elem.scrollHeight === 0)
            return;
          addClass(elem, "collapse-transition");
          elem.style.transitionProperty = "height";
          elem.style.height = 0;
          elem.style.paddingTop = 0;
          elem.style.paddingBottom = 0;
        },
        afterLeave: function afterLeave(elem) {
          removeClass(elem, "collapse-transition");
          elem.style.height = "";
          elem.style.overflow = elem.dataset.oldOverflow;
          elem.style.paddingBottom = elem.dataset.oldPaddingBottom;
          elem.style.paddingTop = elem.dataset.oldPaddingTop;
        }
      }
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(
    Transition,
    toHandlers(_ctx.on),
    {
      default: withCtx(function() {
        return [renderSlot(_ctx.$slots, "default")];
      }),
      _: 3
      /* FORWARDED */
    },
    16
    /* FULL_PROPS */
  );
}
var CollapseTransition = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
CollapseTransition.install = function(Vue) {
  Vue.component(CollapseTransition.name, CollapseTransition);
};
CollapseTransition.version = version;

export { CollapseTransition as default };
