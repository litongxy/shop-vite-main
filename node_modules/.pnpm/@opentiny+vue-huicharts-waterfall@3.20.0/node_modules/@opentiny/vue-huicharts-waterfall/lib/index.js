import Core, { getFormatted, itemContent, itemLabel } from '@opentiny/vue-huicharts-core';
import { t } from '@opentiny/vue-locale';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getWaterfallTooltip = function getWaterfallTooltip2(dataType, digit) {
  var formatter = function formatter2(items) {
    var item = items[0];
    return itemContent(item.name) + "<br/>\n    " + itemLabel(item.seriesName) + " " + itemContent(getFormatted(item.value, dataType, digit));
  };
  return formatter;
};
var getWaterfallXAxis = function getWaterfallXAxis2(args) {
  var axisVisible = args.axisVisible, labelMap = args.labelMap, xAxisName = args.xAxisName;
  var name = labelMap && labelMap[xAxisName] || xAxisName;
  return {
    data: name,
    show: axisVisible
  };
};
var getWaterfallYAxis = function getWaterfallYAxis2(args) {
  var axisVisible = args.axisVisible, labelMap = args.labelMap, yAxisName = args.yAxisName;
  var isNull = function isNull2(x) {
    return x === null || x === void 0;
  };
  var name = !isNull(labelMap[yAxisName]) ? labelMap[yAxisName] : yAxisName;
  return {
    name,
    show: axisVisible
  };
};
var getData = function getData2(args) {
  var rows = args.rows, totalNum = args.totalNum, remainName = args.remainName, dataSum = args.dataSum, remainStatus = args.remainStatus, dimension = args.dimension, metrics = args.metrics, digit = args.digit;
  var data2 = [].concat(rows);
  if (remainStatus === "have-remain") {
    var _data$push;
    data2.push((_data$push = {}, _data$push[dimension] = remainName, _data$push[metrics] = parseFloat(totalNum - dataSum).toFixed(digit), _data$push));
  }
  return data2;
};
var waterfall = function waterfall2(columns, rows, settings, extra) {
  var tooltipVisible = extra.tooltipVisible, t2 = extra.t;
  var _settings$axisVisible = settings.axisVisible, axisVisible = _settings$axisVisible === void 0 ? true : _settings$axisVisible, _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? "normal" : _settings$dataType, _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension;
  var _settings$remainName = settings.remainName, remainName = _settings$remainName === void 0 ? t2("ui.chart.other") : _settings$remainName, _settings$totalName = settings.totalName, totalName = _settings$totalName === void 0 ? t2("ui.chart.total") : _settings$totalName;
  var totalNum = settings.totalNum, _settings$xAxisName = settings.xAxisName, xAxisName = _settings$xAxisName === void 0 ? dimension : _settings$xAxisName, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, _settings$labelMap = settings.labelMap, labelMap = _settings$labelMap === void 0 ? {} : _settings$labelMap;
  var metrics = settings.metrics;
  if (metrics === void 0) {
    var metricsTemp = columns.slice().filter(function(val) {
      return val !== dimension;
    });
    metrics = metricsTemp[0];
  }
  var yAxisName = metrics;
  var dataSum = parseFloat(rows.reduce(function(pre, cur) {
    return pre + Number(cur[metrics]);
  }, 0).toFixed(digit));
  var remainStatus = totalNum ? totalNum > dataSum ? "have-remain" : "none-remain" : "not-total";
  var xAxis = getWaterfallXAxis({
    axisVisible,
    labelMap,
    xAxisName
  });
  var yAxis = getWaterfallYAxis({
    axisVisible,
    labelMap,
    yAxisName
  });
  var seriesParams = {
    dataType,
    rows,
    dimension,
    metrics
  };
  Object.assign(seriesParams, {
    totalNum,
    remainStatus,
    dataSum,
    digit
  });
  var data2 = getData({
    rows,
    totalNum,
    totalName,
    remainName,
    dataSum,
    remainStatus,
    dimension,
    metrics
  });
  var ichartOption = {
    type: "water-fall",
    xAxis,
    yAxis,
    data: data2,
    totalName,
    totalPosition: "start",
    label: {
      show: true,
      position: "top",
      formatter: function formatter(item) {
        return getFormatted(item.value, dataType, digit);
      }
    },
    legend: {
      show: false
    }
  };
  if (tooltipVisible) {
    ichartOption.tipHtml = getWaterfallTooltip(dataType, digit);
  } else {
    ichartOption.tooltip = {
      show: false
    };
  }
  return ichartOption;
};
var _sfc_main = {
  name: $prefix + "ChartWaterfall",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "BarChart"
    };
  },
  methods: {
    updateChart: function updateChart(data2) {
      var _data$columns = data2.columns, columns = _data$columns === void 0 ? [] : _data$columns, _data$rows = data2.rows, rows = _data$rows === void 0 ? [] : _data$rows;
      var extra = {
        tooltipVisible: this.tooltipVisible,
        legendVisible: this.legendVisible,
        t
      };
      var option = waterfall(columns, rows, this.settings, extra);
      this.huiChartOption = _extends({}, option);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsWaterfall = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsWaterfall.install = function(Vue) {
  Vue.component(HuiChartsWaterfall.name, HuiChartsWaterfall);
};

export { HuiChartsWaterfall, HuiChartsWaterfall as default };
