export declare const floatButtonProps: {
    trigger: {
        default: string;
        type: StringConstructor;
        validator(val: string): boolean;
    };
    open: BooleanConstructor;
    shape: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    top: {
        type: StringConstructor;
        default: string;
    };
    bottom: {
        type: StringConstructor;
        default: string;
    };
    right: {
        type: StringConstructor;
        default: string;
    };
    left: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    tooltip: {
        type: StringConstructor;
        default: string;
    };
    resetTime: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    loading: BooleanConstructor;
    disabled: BooleanConstructor;
    backTop: BooleanConstructor;
    visibilityHeight: {
        default: number;
        type: NumberConstructor;
    };
    element: {
        default: HTMLElement;
        type: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    trigger: {
        default: string;
        type: StringConstructor;
        validator(val: string): boolean;
    };
    open: BooleanConstructor;
    shape: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    top: {
        type: StringConstructor;
        default: string;
    };
    bottom: {
        type: StringConstructor;
        default: string;
    };
    right: {
        type: StringConstructor;
        default: string;
    };
    left: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    tooltip: {
        type: StringConstructor;
        default: string;
    };
    resetTime: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    loading: BooleanConstructor;
    disabled: BooleanConstructor;
    backTop: BooleanConstructor;
    visibilityHeight: {
        default: number;
        type: NumberConstructor;
    };
    element: {
        default: HTMLElement;
        type: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    trigger: {
        default: string;
        type: StringConstructor;
        validator(val: string): boolean;
    };
    open: BooleanConstructor;
    shape: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    top: {
        type: StringConstructor;
        default: string;
    };
    bottom: {
        type: StringConstructor;
        default: string;
    };
    right: {
        type: StringConstructor;
        default: string;
    };
    left: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    tooltip: {
        type: StringConstructor;
        default: string;
    };
    resetTime: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    loading: BooleanConstructor;
    disabled: BooleanConstructor;
    backTop: BooleanConstructor;
    visibilityHeight: {
        default: number;
        type: NumberConstructor;
    };
    element: {
        default: HTMLElement;
        type: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    disabled: boolean;
    icon: string | Record<string, any>;
    type: string;
    size: string;
    href: string;
    left: string;
    right: string;
    top: string;
    bottom: string;
    target: string;
    tiny_mode_root: boolean;
    trigger: string;
    resetTime: number;
    loading: boolean;
    description: string;
    shape: string;
    open: boolean;
    tooltip: string;
    backTop: boolean;
    visibilityHeight: number;
    element: HTMLElement;
}, {}>;
export default _default;
