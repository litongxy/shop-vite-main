import Core, { isNull, itemPoint, itemLabel, itemContent, getFormatted } from '@opentiny/vue-huicharts-core';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getRadarLegend = function getRadarLegend2(rows, dimension, legendName, legendVisible) {
  var legendData = rows.map(function(row) {
    return row[dimension];
  }).filter(function(i) {
    return i;
  });
  function formatter(value) {
    return isNull(legendName[value]) ? value : legendName[value];
  }
  return {
    show: legendVisible,
    data: legendData,
    formatter
  };
};
var getRadarTooltip = function getRadarTooltip2(dataType, radar22, digit) {
  var _ref = {}, _ref$typeTemp = _ref.typeTemp, typeTemp = _ref$typeTemp === void 0 ? [] : _ref$typeTemp, _ref$nameTemp = _ref.nameTemp, nameTemp = _ref$nameTemp === void 0 ? [] : _ref$nameTemp;
  radar22.indicator.forEach(function(item, i) {
    typeTemp[i] = dataType[item.name];
    nameTemp[i] = item.name;
  });
  function formatter(item) {
    var tplt = [];
    tplt.push(itemPoint(item.color));
    tplt.push(item.name + "<br />");
    item.data.value.forEach(function(val, i) {
      tplt.push("" + itemLabel(nameTemp[i]));
      tplt.push(itemContent(getFormatted(val, typeTemp[i], digit)) + "<br />");
    });
    return tplt.join("");
  }
  return {
    formatter
  };
};
var getRadarSetting = function getRadarSetting2(rows, metrics, labelMap) {
  var settingBase = {
    indicator: []
  };
  var indicatorTemp = {};
  rows.forEach(function(items) {
    metrics.forEach(function(item) {
      var key = isNull(labelMap[item]) ? item : labelMap[item];
      if (indicatorTemp[key]) {
        indicatorTemp[key].push(items[item]);
      } else {
        indicatorTemp[key] = [items[item]];
      }
    });
  });
  settingBase.indicator = Object.keys(indicatorTemp).map(function(key) {
    return {
      name: key,
      max: Math.max.apply(null, indicatorTemp[key])
    };
  });
  settingBase.data = indicatorTemp;
  settingBase.axisLabel = false;
  return settingBase;
};
var getRadarSeries = function getRadarSeries2(args) {
  var areaStyle = args.areaStyle, dimension = args.dimension, itemStyle = args.itemStyle, label = args.label, labelMap = args.labelMap, lineStyle = args.lineStyle, metrics = args.metrics, radar22 = args.radar, rows = args.rows;
  var radarIndexObj = {};
  radar22.indicator.forEach(function(item, i) {
    return radarIndexObj[item.name] = i;
  });
  var seriesData = rows.map(function(row) {
    var serieData = {
      value: [],
      name: row[dimension]
    };
    Object.keys(row).forEach(function(key) {
      if (~metrics.indexOf(key)) {
        var k = isNull(labelMap[key]) ? radarIndexObj[key] : radarIndexObj[labelMap[key]];
        serieData.value[k] = row[key];
      }
    });
    return serieData;
  });
  var result = {
    data: seriesData,
    name: "data",
    type: "radar"
  };
  label && (result.label = label);
  itemStyle && (result.itemStyle = itemStyle);
  lineStyle && (result.lineStyle = lineStyle);
  areaStyle && (result.areaStyle = areaStyle);
  return [result];
};
var radar = function radar2(columns, rows, settings, extra) {
  var _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? {} : _settings$dataType, _settings$legendName = settings.legendName, legendName = _settings$legendName === void 0 ? {} : _settings$legendName, _settings$labelMap = settings.labelMap, labelMap = _settings$labelMap === void 0 ? {} : _settings$labelMap, _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension;
  var _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, label = settings.label, itemStyle = settings.itemStyle, lineStyle = settings.lineStyle, areaStyle = settings.areaStyle;
  var tooltipVisible = extra.tooltipVisible, legendVisible = extra.legendVisible;
  var metrics = columns.slice();
  if (!settings.metrics) {
    metrics.splice(columns.indexOf(dimension), 1);
  } else {
    metrics = settings.metrics;
  }
  var legend = legendVisible ? getRadarLegend(rows, dimension, legendName, legendVisible) : {
    show: false
  };
  var radar22 = getRadarSetting(rows, metrics, labelMap);
  var tooltip = tooltipVisible ? getRadarTooltip(dataType, radar22, digit) : {
    show: false
  };
  var seriesParams = {
    rows,
    dimension,
    metrics,
    radar: radar22
  };
  Object.assign(seriesParams, {
    label,
    itemStyle,
    lineStyle,
    labelMap,
    areaStyle
  });
  var series = getRadarSeries(seriesParams);
  var dataTemp = {};
  rows.forEach(function(items, index) {
    var tempKey = items[dimension];
    dataTemp[tempKey] = {};
    metrics.forEach(function(item) {
      var key = isNull(labelMap[item]) ? item : labelMap[item];
      dataTemp[tempKey][key] = items[item];
    });
  });
  return {
    legend,
    data: dataTemp,
    radar: radar22,
    tipHtml: tooltip.formatter,
    series
  };
};
var _sfc_main = {
  name: $prefix + "ChartRadar",
  mixins: [Core],
  props: {
    settings: {
      type: Object
    },
    width: {
      type: String,
      default: "auto"
    },
    height: {
      type: String,
      default: "400px"
    }
  },
  data: function data() {
    return {
      iChartName: "RadarChart"
    };
  },
  methods: {
    updateChart: function updateChart(data2) {
      var _data$columns = data2.columns, columns = _data$columns === void 0 ? [] : _data$columns, _data$rows = data2.rows, rows = _data$rows === void 0 ? [] : _data$rows;
      var extra = {
        tooltipVisible: this.tooltipVisible,
        legendVisible: this.legendVisible,
        extend: this.extend
      };
      var option = radar(columns, rows, this.settings, extra);
      this.huiChartOption = _extends({}, option);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: $props.width,
        height: $props.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsRadar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsRadar.install = function(Vue) {
  Vue.component(HuiChartsRadar.name, HuiChartsRadar);
};

export { HuiChartsRadar, HuiChartsRadar as default };
