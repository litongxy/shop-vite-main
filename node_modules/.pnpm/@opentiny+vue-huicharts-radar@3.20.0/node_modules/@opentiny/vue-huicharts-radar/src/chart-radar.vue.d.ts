declare const _default: import("@vue/runtime-core").DefineComponent<{
    settings: {
        type: ObjectConstructor;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
}, any, {
    iChartName: string;
}, {}, {
    updateChart(data: any): void;
}, {
    name: string;
    emits: string[];
    props: {
        data: {
            type: ObjectConstructor;
            default(): {};
        };
        settings: {
            type: ObjectConstructor;
            default(): {};
        };
        width: {
            type: StringConstructor;
            default: string;
        };
        height: {
            type: StringConstructor;
            default: string;
        };
        events: {
            type: ObjectConstructor;
            default(): void;
        };
        initOptions: {
            type: ObjectConstructor;
            default(): {};
        };
        tooltipVisible: {
            type: BooleanConstructor;
            default: boolean;
        };
        legendVisible: {
            type: BooleanConstructor;
            default: boolean;
        };
        legendPosition: {
            type: StringConstructor;
        };
        theme: ObjectConstructor;
        themeName: (StringConstructor | ObjectConstructor)[];
        judgeWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        widthChangeDelay: {
            type: NumberConstructor;
            default: number;
        };
        resizeable: {
            type: BooleanConstructor;
            default: boolean;
        };
        changeDelay: {
            type: NumberConstructor;
            default: number;
        };
        dataEmpty: BooleanConstructor;
        beforeConfig: {
            type: FunctionConstructor;
        };
        afterConfig: {
            type: FunctionConstructor;
        };
        afterSetOption: {
            type: FunctionConstructor;
        };
        afterSetOptionOnce: {
            type: FunctionConstructor;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        extend: {
            type: ObjectConstructor;
            default(): void;
        };
        tooltipFormatter: {
            type: FunctionConstructor;
        };
        markArea: {
            type: ObjectConstructor;
        };
        markLine: {
            type: ObjectConstructor;
        };
        markPoint: {
            type: ObjectConstructor;
        };
        grid: {
            type: (ObjectConstructor | ArrayConstructor)[];
        };
        colors: {
            type: ArrayConstructor;
        };
        visualMap: (ObjectConstructor | ArrayConstructor)[];
        dataZoom: (ObjectConstructor | ArrayConstructor)[];
        toolbox: (ObjectConstructor | ArrayConstructor)[];
        title: ObjectConstructor;
        legend: (ObjectConstructor | ArrayConstructor)[];
        xAxis: (ObjectConstructor | ArrayConstructor)[];
        yAxis: (ObjectConstructor | ArrayConstructor)[];
        radar: ObjectConstructor;
        tooltip: ObjectConstructor;
        axisPointer: ObjectConstructor;
        brush: (ObjectConstructor | ArrayConstructor)[];
        geo: ObjectConstructor;
        timeline: (ObjectConstructor | ArrayConstructor)[];
        graphic: (ObjectConstructor | ArrayConstructor)[];
        series: (ObjectConstructor | ArrayConstructor)[];
        backgroundColor: (StringConstructor | ObjectConstructor)[];
        textStyle: ObjectConstructor;
        animation: ObjectConstructor;
        options: {
            type: ObjectConstructor;
            default: () => {};
        };
        cancelResizeCheck: {
            type: BooleanConstructor;
            default: boolean;
        };
        setOptionOpts: {
            type: ObjectConstructor;
            default(): void;
        };
        colorMode: {
            type: StringConstructor;
            default: string;
        };
    };
    data(): {
        huiChartOption: {};
        eChartOption: {};
        renderOption: {};
        initOpts: {};
        watchToPropsEchartOptions: never[];
        selfChart: string[];
        isSelfChart: boolean;
        chartList: never[];
        once: {};
        store: {};
    };
    computed: {
        delay(): any;
        size(): any;
        setting(): any;
    };
    watch: {
        options: {
            handler(): void;
            deep: boolean;
        };
        setting: {
            handler(): void;
            deep: boolean;
        };
        events: {
            handler(val: any, oldVal: any): void;
            deep: boolean;
        };
        initOptions: {
            handler(val: any): void;
            deep: boolean;
        };
        judgeWidth: {
            handler(val: any): void;
        };
        delay: {
            handler(val: any): void;
            deep: boolean;
        };
        resizeable: {
            handler(val: any): void;
        };
        setOptionOpts: {
            handler(val: any): void;
            deep: boolean;
        };
        loading(val: any): void;
        dataEmpty(val: any): void;
        size: {
            handler(): void;
        };
        colors: {
            handler(): void;
            deep: boolean;
        };
    };
    methods: {
        selfSetting(options: any): void;
        setAnimation(options: any): void;
        applyMarks(options: any): void;
        applyExtend(huiChartOption: any): any;
        refreshChart(): void;
        renderChart(huiChartOption: any): void;
        addEvents(val: any): void;
        removeEvents(oldVal: any): void;
        resize(): void;
        afterConfigFn(huiChartOption: any): any;
        beforeConfigFn(data: any): any;
        isStack(): boolean;
        calcColors({ len, type, isStack }: {
            len: any;
            type: any;
            isStack: any;
        }): string[];
        computedChartColor(): any;
    };
    created(): void;
    mounted(): void;
    beforeUnmount(): void;
}, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    settings: {
        type: ObjectConstructor;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    width: string;
    height: string;
}, {}>;
export default _default;
