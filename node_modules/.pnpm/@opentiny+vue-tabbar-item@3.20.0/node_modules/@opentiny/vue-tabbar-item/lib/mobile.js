import { renderless, api } from '@opentiny/vue-renderless/tabbar-item/vue';
import { defineComponent, $prefix, $props, setup } from '@opentiny/vue-common';
import { openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, renderSlot, createBlock, resolveDynamicComponent, toDisplayString, createCommentVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var _sfc_main = defineComponent({
  name: $prefix + "TabbarItem",
  componentName: "TinyTabbarItem",
  props: _extends({}, $props, {
    url: String,
    replace: Boolean,
    to: [String, Object],
    dot: Boolean,
    icon: Object,
    name: [Number, String],
    info: [Number, String],
    badge: [Number, String]
  }),
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-mobile-tabbar-item__icon"
};
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-mobile-tabbar-item", {
        "is-active": _ctx.state.renderActive
      }]),
      style: normalizeStyle({
        color: _ctx.state.renderColor
      }),
      onClick: _cache[0] || (_cache[0] = function() {
        return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
      })
    },
    [createElementVNode("div", _hoisted_1, [renderSlot(_ctx.$slots, "icon", {
      active: _ctx.state.renderActive
    }, function() {
      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {
        style: normalizeStyle({
          fill: _ctx.state.renderColor
        })
      }, null, 8, ["style"]))];
    }), _ctx.badge || _ctx.dot ? (openBlock(), createElementBlock(
      "div",
      {
        key: 0,
        class: normalizeClass(["tiny-mobile-info", _ctx.dot ? "tiny-mobile-info--dot" : ""])
      },
      toDisplayString(_ctx.state.info),
      3
      /* TEXT, CLASS */
    )) : createCommentVNode("v-if", true)]), createElementVNode(
      "div",
      {
        class: "tiny-mobile-tabbar-item__text",
        style: normalizeStyle({
          color: _ctx.state.renderColor,
          "pointerEvents": "none"
        })
      },
      [renderSlot(_ctx.$slots, "default")],
      4
      /* STYLE */
    )],
    6
    /* CLASS, STYLE */
  );
}
var mobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobile as default };
