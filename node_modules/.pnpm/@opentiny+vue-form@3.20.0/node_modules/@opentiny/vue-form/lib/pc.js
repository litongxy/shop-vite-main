import { renderless, api } from '@opentiny/vue-renderless/form/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import Tooltip from '@opentiny/vue-tooltip';
import '@opentiny/vue-theme/form/index.css';
import '@opentiny/vue-theme/form-item/index.css';
import { resolveComponent, openBlock, createElementBlock, normalizeClass, withModifiers, renderSlot, createBlock, mergeProps, createCommentVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = /* @__PURE__ */ defineComponent({
  components: {
    TinyTooltip: Tooltip
  },
  props: [].concat(props, ["validateOnRuleChange", "hideRequiredAsterisk", "model", "rules", "inlineMessage", "messageType", "statusIcon", "labelPosition", "labelAlign", "showMessage", "size", "disabled", "labelWidth", "contentOffset", "labelSuffix", "inline", "responsiveLayout", "validateType", "validateIcon", "manual", "appendToBody", "popperOptions", "displayOnly", "showAutoWidth", "showEmptyValue", "validateTag", "overflowTitle", "tooltipConfig"]),
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_tooltip = resolveComponent("tiny-tooltip");
  return openBlock(), createElementBlock(
    "form",
    {
      class: normalizeClass(["tiny-form", [_ctx.labelPosition ? "tiny-form--label-" + _ctx.labelPosition : "", {
        "tiny-form--inline": _ctx.inline
      }, {
        "label-align": _ctx.labelAlign
      }, {
        "has-required": _ctx.state.hasRequired
      }, {
        "asterisk-form": _ctx.labelPosition === "top" && !_ctx.state.hideRequiredAsterisk
      }, {
        "is-display-only": _ctx.state.isDisplayOnly
      }]]),
      onSubmit: _cache[1] || (_cache[1] = withModifiers(function() {
      }, ["prevent"]))
    },
    [renderSlot(_ctx.$slots, "default"), _ctx.overflowTitle ? (openBlock(), createBlock(_component_tiny_tooltip, mergeProps({
      key: 0,
      ref: "tooltip",
      modelValue: _ctx.state.tooltipVisible,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
        return _ctx.state.tooltipVisible = $event;
      })
    }, _ctx.tooltipConfig, {
      manual: true,
      effect: _ctx.tooltipConfig.effect || "light",
      content: _ctx.state.displayedValue,
      placement: _ctx.tooltipConfig.placement || "top"
    }), null, 16, ["modelValue", "effect", "content", "placement"])) : createCommentVNode("v-if", true)],
    34
    /* CLASS, NEED_HYDRATION */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { pc as default };
