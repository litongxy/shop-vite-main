function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { createVNode, resolveComponent, mergeProps } from "vue";
import { renderless, api } from "@opentiny/vue-renderless/cascader-menu/vue";
import { defineComponent, $prefix, $props, setup as _setup, h } from "@opentiny/vue-common";
import { t } from "@opentiny/vue-locale";
import Scrollbar from "@opentiny/vue-scrollbar";
import CascaderNode from "@opentiny/vue-cascader-node";
import "@opentiny/vue-theme/cascader-menu/index.css";
var renderNodeListFunc = function renderNodeListFunc2(_vm) {
  return function() {
    var events = {
      on: {}
    };
    var menuId = _vm.state.menuId;
    var isHoverMenu = _vm.panel.state.isHoverMenu;
    if (isHoverMenu) {
      events.on.expand = _vm.handleExpand;
    }
    var mapHandler = function mapHandler2(node, index) {
      var uid = node.uid;
      var hasChildren = node.hasChildren;
      return createVNode(resolveComponent("cascader-node"), mergeProps({
        "key": uid,
        "node": node,
        "node-id": menuId + "-" + index,
        "data-haspopup": hasChildren,
        "data-owns": hasChildren ? menuId : null
      }, events), null);
    };
    var nodes = _vm.nodes.map(mapHandler);
    return [].concat(nodes, [isHoverMenu ? createVNode("svg", {
      "ref": "hoverZone",
      "class": "tiny-cascader-menu__hover-zone"
    }, null) : null]);
  };
};
var CascaderMenu = /* @__PURE__ */ defineComponent({
  name: $prefix + "CascaderMenu",
  components: {
    TinyScrollbar: Scrollbar,
    CascaderNode
  },
  props: _extends({}, $props, {
    nodes: {
      type: Array,
      required: true
    },
    index: Number
  }),
  inject: {
    panel: {
      value: "panel",
      default: null
    },
    cascaderRoot: {
      value: "cascaderRoot",
      default: null
    }
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  },
  render: function render() {
    var parentVm = this.cascaderRoot || this.panel || this;
    var noDataSlot = parentVm.slots["no-data"] && parentVm.slots["no-data"]();
    var renderEmptyText = function renderEmptyText2() {
      return noDataSlot ? createVNode("div", {
        "class": "tiny-cascader-menu__no-data"
      }, [noDataSlot]) : createVNode("div", {
        "class": "tiny-cascader-menu__empty-text"
      }, [t("ui.cascader.noData")]);
    };
    var renderNodeList = renderNodeListFunc(this);
    var state = this.state;
    var events = {
      nativeOn: {}
    };
    if (this.panel.state.isHoverMenu) {
      events.nativeOn.mousemove = this.handleMouseMove;
    }
    return h("tiny-scrollbar", _extends({
      attrs: {
        role: "menu",
        id: state.menuId
      },
      ref: "cascaderMenu",
      class: "tiny-cascader-menu",
      props: {
        tag: "ul",
        "wrap-class": "tiny-cascader-menu__wrap",
        "view-class": {
          "tiny-cascader-menu__list": true,
          "is-empty": state.isEmpty
        }
      }
    }, events), [state.isEmpty ? renderEmptyText() : renderNodeList()]);
  }
});
export {
  CascaderMenu as default
};
