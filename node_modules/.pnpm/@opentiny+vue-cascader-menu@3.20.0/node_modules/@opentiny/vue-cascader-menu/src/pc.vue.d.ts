import type { ICascaderMenuApi, ICascaderMenuRenderlessParams } from '@opentiny/vue-renderless/types/cascader-menu.type';
declare const CascaderMenu: import("@vue/runtime-core").DefineComponent<{
    nodes: {
        type: {
            (arrayLength: number): import("../../../../renderless/src/cascader-panel/node").default[];
            (...items: import("../../../../renderless/src/cascader-panel/node").default[]): import("../../../../renderless/src/cascader-panel/node").default[];
            new (arrayLength: number): import("../../../../renderless/src/cascader-panel/node").default[];
            new (...items: import("../../../../renderless/src/cascader-panel/node").default[]): import("../../../../renderless/src/cascader-panel/node").default[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        required: true;
    };
    index: NumberConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, ICascaderMenuApi & Pick<ICascaderMenuRenderlessParams, "panel">, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    nodes: {
        type: {
            (arrayLength: number): import("../../../../renderless/src/cascader-panel/node").default[];
            (...items: import("../../../../renderless/src/cascader-panel/node").default[]): import("../../../../renderless/src/cascader-panel/node").default[];
            new (arrayLength: number): import("../../../../renderless/src/cascader-panel/node").default[];
            new (...items: import("../../../../renderless/src/cascader-panel/node").default[]): import("../../../../renderless/src/cascader-panel/node").default[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        required: true;
    };
    index: NumberConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    tiny_mode_root: boolean;
}, {}>;
export default CascaderMenu;
