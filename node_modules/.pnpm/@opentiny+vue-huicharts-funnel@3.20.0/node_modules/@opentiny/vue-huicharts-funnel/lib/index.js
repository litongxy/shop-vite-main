import Core, { itemPoint, itemLabel, itemContent, getFormatted } from '@opentiny/vue-huicharts-core';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, normalizeStyle } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var getMetrics = function getMetrics2(args) {
  var dimension = args.dimension, columns = args.columns, settings = args.settings;
  var metrics;
  if (settings.metrics) {
    metrics = settings.metrics;
  } else {
    var temp = columns.slice();
    temp.splice(columns.indexOf(dimension), 1);
    metrics = temp[0];
  }
  return metrics;
};
var getFunnelLegend = function getFunnelLegend2(args) {
  var legendVisible = args.legendVisible, data2 = args.data, legendName = args.legendName;
  if (!legendVisible) {
    return {
      show: false
    };
  }
  var show = true;
  function formatter(name) {
    if (legendName[name] === null || legendName[name] === void 0 || legendName[name] === "undefined") {
      return name;
    }
    return legendName[name];
  }
  return {
    show,
    data: data2,
    formatter
  };
};
var getFunnelTooltip = function getFunnelTooltip2(dataType, digit) {
  function formatter(item) {
    var tpl = [];
    tpl.push(itemPoint(item.color));
    tpl.push("" + itemLabel(item.name) + itemContent(getFormatted(item.data.realValue, dataType, digit)));
    return tpl.join("");
  }
  return formatter;
};
var getFunnelSeries = function getFunnelSeries2(args) {
  var selfSeries = [];
  var dimension = args.dimension, metrics = args.metrics, rows = args.rows, sequence = args.sequence, label = args.label, labelLine = args.labelLine, itemStyle = args.itemStyle, useDefaultOrder = args.useDefaultOrder, ascending = args.ascending;
  var _ref = {}, _ref$series = _ref.series, series = _ref$series === void 0 ? {
    type: "funnel"
  } : _ref$series, _ref$falseFunnel = _ref.falseFunnel, falseFunnel = _ref$falseFunnel === void 0 ? false : _ref$falseFunnel;
  series.minSize = 8;
  var innerRows = rows.sort(function(a, b) {
    return sequence.indexOf(a[dimension]) - sequence.indexOf(b[dimension]);
  });
  innerRows.some(function(row, index) {
    return index && row[metrics] > innerRows[index - 1][metrics] && (falseFunnel = true);
  });
  var step = 100 / innerRows.length;
  var total = 0;
  rows.forEach(function(row) {
    total += row[metrics];
  });
  if (falseFunnel && !useDefaultOrder) {
    var handler = function handler2(row, index) {
      return {
        name: row[dimension],
        value: (index + 1) * step,
        realValue: row[metrics]
      };
    };
    series.data = innerRows.slice().reverse().map(handler);
    series.label = {
      position: "inside",
      color: "#fff",
      formatter: function formatter(item) {
        var value = item.value;
        return Number(value / total).toFixed(2) * 100 + "%";
      }
    };
  } else {
    innerRows.sort(function(a, b) {
      return b[metrics] - a[metrics];
    });
    series.data = innerRows.map(function(row, index) {
      return {
        name: row[dimension],
        value: (innerRows.length - index) * step,
        realValue: row[metrics]
      };
    });
    series.label = {
      position: "inside",
      color: "#fff",
      formatter: function formatter(item) {
        var data2 = item.data;
        return Number(data2.realValue / total).toFixed(2) * 100 + "%";
      }
    };
  }
  ascending && (series.sort = "ascending");
  label && (series.label = label);
  labelLine && (series.labelLine = labelLine);
  itemStyle && (series.itemStyle = itemStyle);
  selfSeries.push(series);
  return selfSeries;
};
var getIChartOption = function getIChartOption2(outerColumns, outerRows, settings, extra) {
  var _ref2 = {}, _ref2$columns = _ref2.columns, columns = _ref2$columns === void 0 ? outerColumns.slice() : _ref2$columns, _ref2$rows = _ref2.rows, rows = _ref2$rows === void 0 ? outerRows.slice() : _ref2$rows;
  var _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? "normal" : _settings$dataType, _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, _settings$sequence = settings.sequence, sequence = _settings$sequence === void 0 ? rows.map(function(row) {
    return row[dimension];
  }) : _settings$sequence;
  var _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, ascending = settings.ascending, label = settings.label, labelLine = settings.labelLine, _settings$legendName = settings.legendName, legendName = _settings$legendName === void 0 ? {} : _settings$legendName, itemStyle = settings.itemStyle, filterZero = settings.filterZero, useDefaultOrder = settings.useDefaultOrder;
  var tooltipVisible = extra.tooltipVisible, legendVisible = extra.legendVisible;
  var metrics = getMetrics({
    dimension,
    columns,
    settings
  });
  var innerRows = rows.sort(function(a, b) {
    return sequence.indexOf(a[dimension]) - sequence.indexOf(b[dimension]);
  });
  filterZero && (innerRows = innerRows.filter(function(row) {
    return row[metrics];
  }));
  var tooltip = tooltipVisible && getFunnelTooltip(dataType, digit);
  var legend = getFunnelLegend({
    legendVisible,
    data: innerRows.map(function(row) {
      return row[dimension];
    }),
    legendName
  });
  var seriesParam = {
    dimension,
    metrics,
    rows: innerRows,
    sequence,
    label,
    labelLine,
    itemStyle,
    useDefaultOrder,
    ascending
  };
  var series = getFunnelSeries(seriesParam);
  var ichartOption = {
    legend,
    tipHtml: tooltip,
    series
  };
  return ichartOption;
};
var _sfc_main = {
  name: $prefix + "ChartFunnel",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "FunnelChart"
    };
  },
  methods: {
    updateChart: function updateChart() {
      var _this$data = this.data, _this$data$columns = _this$data.columns, columns = _this$data$columns === void 0 ? [] : _this$data$columns, _this$data$rows = _this$data.rows, rows = _this$data$rows === void 0 ? [] : _this$data$rows;
      var extra = {
        legendVisible: this.legendVisible,
        tooltipVisible: this.tooltipVisible
      };
      this.huiChartOption = getIChartOption(columns, rows, this.settings, extra);
    }
  }
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: "hui-chart chart-box",
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  );
}
var HuiChartsFunnel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsFunnel.install = function(Vue) {
  Vue.component(HuiChartsFunnel.name, HuiChartsFunnel);
};

export { HuiChartsFunnel, HuiChartsFunnel as default };
