import Core, { isDefined, getFormatted, itemPoint, itemLabel, itemContent } from '@opentiny/vue-huicharts-core';
import { $prefix } from '@opentiny/vue-common';
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, renderSlot } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var getLegend = function getLegend2(args) {
  var legendVisible = args.legendVisible, legendName = args.legendName;
  var formatter = function formatter2(name) {
    return isDefined(legendName[name]) ? legendName[name] : name;
  };
  return {
    show: legendVisible,
    formatter
  };
};
var getXAxis = function getXAxis2(args) {
  var xAxisName = args.xAxisName, xAxisType = args.xAxisType;
  return {
    name: xAxisName,
    type: xAxisType
  };
};
var getYAxis = function getYAxis2(args) {
  var min = args.min, max = args.max, scale = args.scale, yAxisName = args.yAxisName, dataType = args.dataType, metrics = args.metrics, digit = args.digit;
  function formatter(val) {
    return getFormatted(val, dataType[metrics[0]], digit);
  }
  return {
    name: yAxisName,
    type: "value",
    scale,
    min,
    max,
    axisTick: {
      show: false
    },
    axisLabel: {
      show: true,
      formatter
    }
  };
};
var getDataFromArray = function getDataFromArray2(args) {
  var dimension = args.dimension, metrics = args.metrics, columns = args.columns, rows = args.rows, symbolSize = args.symbolSize, symbolSizeMax = args.symbolSizeMax;
  var extraMetrics = columns.filter(function(col) {
    return col !== dimension && metrics.findIndex(function(m) {
      return m === col;
    }) < 0;
  });
  var newMetrics = [].concat(metrics, extraMetrics);
  var result = {};
  var numbers = {};
  newMetrics.forEach(function(keyname) {
    result[keyname] = [];
    numbers[keyname] = 0;
  });
  rows.forEach(function(item) {
    newMetrics.forEach(function(keyname) {
      if (numbers[keyname] < item[keyname]) {
        numbers[keyname] = item[keyname];
      }
      result[keyname].push([item[dimension], item[keyname], symbolSize, keyname, keyname]);
    });
  });
  if (!symbolSize) {
    newMetrics.forEach(function(keyname) {
      result[keyname].forEach(function(item) {
        item[2] = Math.ceil(item[1] / numbers[keyname] * symbolSizeMax);
      });
    });
  }
  return result;
};
var getData = function getData2(args) {
  var dimension = args.dimension, metrics = args.metrics, columns = args.columns, rows = args.rows, symbolSize = args.symbolSize, symbolSizeMax = args.symbolSizeMax;
  var extraMetrics = columns.filter(function(col) {
    return col !== dimension && metrics.findIndex(function(m) {
      return m === col;
    }) < 0;
  });
  var newColumns = [dimension, metrics[0], "size", "name", "group", metrics[1]].concat(extraMetrics);
  var result = {};
  var maxNumber = 0;
  var _loop = function _loop2() {
    var _Object$entries$_i = _Object$entries[_i], key = _Object$entries$_i[0], value = _Object$entries$_i[1];
    result[key] = [];
    value.forEach(function(item, index) {
      if (maxNumber < item[metrics[1]]) {
        maxNumber = item[metrics[1]];
      }
      var itemArr = [];
      newColumns.forEach(function(col, colIdx) {
        if (colIdx === 2) {
          itemArr.push(symbolSize);
        } else if (colIdx === 3) {
          itemArr.push(metrics[0]);
        } else if (colIdx === 4) {
          itemArr.push(key);
        } else {
          itemArr.push(item[col]);
        }
      });
      result[key][index] = itemArr;
    });
  };
  for (var _i = 0, _Object$entries = Object.entries(rows); _i < _Object$entries.length; _i++) {
    _loop();
  }
  if (!symbolSize) {
    Object.values(result).forEach(function(group) {
      group.forEach(function(item) {
        item[2] = Math.ceil(item[5] / maxNumber * symbolSizeMax);
      });
    });
  }
  return result;
};
var getTooltip = function getTooltip2(args) {
  var tooltipTrigger = args.tooltipTrigger;
  var labelMap = args.labelMap, columns = args.columns, dataType = args.dataType, digit = args.digit;
  var getTipContent = function getTipContent2(item) {
    var color = item.color, seriesName = item.seriesName, data2 = item.data;
    var template = [];
    template.push(itemPoint(color) + " " + seriesName + "<br>");
    var tipData = [].concat(data2);
    tipData.splice(2, 3);
    tipData.forEach(function(d, i) {
      var name = labelMap[columns[i]] || columns[i];
      var num = isNaN(d) ? d : getFormatted(d, dataType[columns[i]], digit);
      template.push("" + itemLabel(name) + itemContent(num) + "<br>");
    });
    return template.join("");
  };
  var formatter = function formatter2(params) {
    return Array.isArray(params) ? params.map(function(i) {
      return getTipContent(i);
    }).join("") : getTipContent(params);
  };
  return {
    trigger: tooltipTrigger,
    formatter
  };
};
var scatter = function scatter2(columns, rows, settings, extra) {
  var _settings$dimension = settings.dimension, dimension = _settings$dimension === void 0 ? columns[0] : _settings$dimension, _settings$metrics = settings.metrics, metrics = _settings$metrics === void 0 ? [columns[1], columns[2]] : _settings$metrics, _settings$dataType = settings.dataType, dataType = _settings$dataType === void 0 ? {} : _settings$dataType;
  var _settings$xAxisType = settings.xAxisType, xAxisType = _settings$xAxisType === void 0 ? "category" : _settings$xAxisType, xAxisName = settings.xAxisName, yAxisName = settings.yAxisName, _settings$digit = settings.digit, digit = _settings$digit === void 0 ? 2 : _settings$digit, _settings$legendName = settings.legendName, legendName = _settings$legendName === void 0 ? {} : _settings$legendName;
  var _settings$labelMap = settings.labelMap, labelMap = _settings$labelMap === void 0 ? {} : _settings$labelMap, _settings$tooltipTrig = settings.tooltipTrigger, tooltipTrigger = _settings$tooltipTrig === void 0 ? "item" : _settings$tooltipTrig, _settings$axisVisible = settings.axisVisible, axisVisible = _settings$axisVisible === void 0 ? true : _settings$axisVisible, _settings$symbolSizeM = settings.symbolSizeMax, symbolSizeMax = _settings$symbolSizeM === void 0 ? 50 : _settings$symbolSizeM, symbol = settings.symbol;
  var symbolSize = settings.symbolSize, symbolRotate = settings.symbolRotate, symbolOffset = settings.symbolOffset, cursor = settings.cursor, min = settings.min, max = settings.max, scale = settings.scale, label = settings.label, itemStyle = settings.itemStyle;
  var tooltipVisible = extra.tooltipVisible, legendVisible = extra.legendVisible; extra.color;
  var baseObj = {
    dimension,
    metrics,
    columns,
    rows,
    symbolSize,
    symbolSizeMax
  };
  var data2 = [];
  if (Array.isArray(rows)) {
    data2 = getDataFromArray(baseObj);
  } else {
    data2 = getData(baseObj);
  }
  var legend = getLegend({
    legendVisible,
    legendName
  });
  var ichartOption = {
    data: data2,
    bubbleSize: [10, symbolSizeMax],
    emphasis: {
      label: {
        show: false
      }
    },
    legend,
    xAxisType,
    symbol,
    symbolRotate,
    symbolOffset,
    cursor,
    label,
    itemStyle
  };
  if (tooltipVisible) {
    ichartOption.tooltip = getTooltip({
      tooltipTrigger,
      labelMap,
      columns,
      dataType,
      digit
    });
  } else {
    ichartOption.tooltip = {
      show: false
    };
  }
  if (axisVisible) {
    var xAxis = getXAxis({
      xAxisName,
      axisVisible,
      xAxisType,
      dimension,
      rows
    });
    var yAxis = getYAxis({
      min,
      max,
      scale,
      yAxisName,
      dataType,
      metrics,
      digit
    });
    Object.assign(ichartOption, {
      xAxis,
      yAxis
    });
  } else {
    Object.assign(ichartOption, {
      xAxis: {
        show: false
      },
      yAxis: {
        show: false
      }
    });
  }
  return ichartOption;
};
var _sfc_main = {
  name: $prefix + "ChartScatter",
  mixins: [Core],
  data: function data() {
    return {
      iChartName: "BubbleChart"
    };
  },
  methods: {
    updateChart: function updateChart() {
      var _this$data = this.data, _this$data$columns = _this$data.columns, columns = _this$data$columns === void 0 ? [] : _this$data$columns, _this$data$rows = _this$data.rows, rows = _this$data$rows === void 0 ? [] : _this$data$rows;
      var extra = {
        legendVisible: this.legendVisible,
        tooltipVisible: this.tooltipVisible
      };
      var option = scatter(columns, rows, this.settings, extra);
      this.huiChartOption = _extends({}, option);
    }
  }
};
var _hoisted_1 = {
  class: "hui-chart chart-box"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      ref: "chartRef",
      style: normalizeStyle({
        width: _ctx.width,
        height: _ctx.height
      })
    },
    null,
    4
    /* STYLE */
  ), renderSlot(_ctx.$slots, "default")]);
}
var HuiChartsScatter = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
HuiChartsScatter.install = function(Vue) {
  Vue.component(HuiChartsScatter.name, HuiChartsScatter);
};

export { HuiChartsScatter, HuiChartsScatter as default };
