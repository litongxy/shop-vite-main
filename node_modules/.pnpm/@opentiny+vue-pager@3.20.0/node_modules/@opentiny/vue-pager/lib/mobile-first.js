function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { createVNode, createTextVNode } from "vue";
import { defineComponent, $props } from "@opentiny/vue-common";
import { IconChevronLeft, IconChevronRight } from "@opentiny/vue-icon";
var _sfc_main = /* @__PURE__ */ defineComponent({
  props: _extends({}, $props, {
    accurateJumper: {
      type: Boolean,
      default: function _default() {
        return true;
      }
    },
    appendToBody: {
      type: Boolean,
      default: function _default2() {
        return true;
      }
    },
    currentPage: {
      type: Number,
      default: function _default3() {
        return 1;
      }
    },
    disabled: {
      type: Boolean,
      default: function _default4() {
        return false;
      }
    },
    hideOnSinglePage: Boolean,
    isBeforePageChange: Boolean,
    layout: String,
    mode: String,
    nextText: String,
    pageCount: Number,
    pageSize: {
      type: Number,
      default: function _default5() {
        return 10;
      }
    },
    pageSizes: {
      type: Array,
      default: function _default6() {
        return [10, 20, 30, 40, 50, 100];
      }
    },
    pagerCount: {
      type: Number,
      validator: function validator(value) {
        return (value | 0) === value && value > 2 && value < 22 && value % 2 === 1;
      },
      default: function _default7() {
        return 7;
      }
    },
    popperAppendToBody: {
      type: Boolean,
      default: function _default8() {
        return true;
      }
    },
    showTotalLoading: {
      type: Boolean,
      default: function _default9() {
        return false;
      }
    },
    customTotal: {
      type: [Boolean, String],
      default: function _default10() {
        return false;
      }
    },
    popperClass: String,
    prevText: String,
    total: Number
  }),
  data: function data() {
    return {
      internalCurrentPage: 0,
      internalPageCount: 0,
      internalPageSize: 0,
      internalTotal: 0
    };
  },
  watch: {
    total: function total() {
      this.normalizeState();
    },
    pageSize: function pageSize() {
      this.normalizeState();
    },
    currentPage: function currentPage() {
      this.normalizeState();
    }
  },
  created: function created() {
    this.normalizeState();
  },
  render: function render() {
    if (this.hideOnSinglePage && (!this.internalPageCount || this.internalPageCount === 1))
      return null;
    var ChevronLeft = IconChevronLeft();
    var ChevronRight = IconChevronRight();
    var prevDisabled = this.disabled || this.internalCurrentPage <= 1;
    var nextDisabled = this.disabled || this.internalCurrentPage === this.internalPageCount || this.internalPageCount === 0;
    var prevText = this.prevText;
    var nextText = this.nextText;
    return createVNode("div", {
      "class": "flex justify-end"
    }, [createVNode("nav", {
      "class": "w-full my-1 mx-0 text-sm block w-fit"
    }, [createVNode("ul", {
      "class": "inline-flex m-0 p-0 list-none w-fit"
    }, [createVNode("li", {
      "class": ["py-0 px-0 cursor-pointer box-border h-8 text-color-brand bg-color-bg-1 select-none flex items-center justify-center relative rounded", prevText ? "w-fit" : "w-8"]
    }, [createVNode("button", {
      "type": "button",
      "class": ["h-8 p-0 border border-solid rounded flex items-center justify-center group", "cursor-pointer border-color-border bg-color-bg-1 sm:bg-transparent sm:border-0", prevText ? "w-fit" : "w-8", {
        "disabled:cursor-not-allowed disabled:border-color-border disabled:bg-color-bg-3 disabled:sm:bg-transparent": prevDisabled,
        "hover:border-color-brand sm:hover:border-0 sm:active:border-color-brand": !prevDisabled,
        "hover:bg-color-fill-6 sm:hover:bg-transparent sm:active:bg-transparent": !prevDisabled
      }],
      "disabled": prevDisabled,
      "onClick": this.toPrevPage
    }, [prevText ? createVNode("span", {
      "class": ["inline-block w-fit mx-1 text-color-text-placeholder sm:text-color-primary", {
        "disabled:text-color-text-primary sm:text-color-border": prevDisabled,
        "group-hover:text-color-link sm:group-hover:text-color-icon-hover sm:group-active:text-color-active": !prevDisabled
      }]
    }, [prevText]) : createVNode(ChevronLeft, {
      "class": ["fill-color-fill-7 sm:fill-color-text-primary", {
        "disabled:fill-color-fill-primary sm:fill-color-border": prevDisabled,
        "group-hover:fill-color-brand sm:group-hover:fill-color-icon-hover sm:group-active:fill-color-icon-active": !prevDisabled
      }]
    }, null)])]), createVNode("li", {
      "class": "h-8 text-color-text-primary flex items-center justify-center rounded !mx-4"
    }, [createVNode("span", {
      "class": "inline-block my-0 mx-0"
    }, [this.internalCurrentPage, createTextVNode("/"), this.internalPageCount])]), createVNode("li", {
      "class": ["py-0 px-0 cursor-pointer box-border h-8 text-color-brand bg-color-bg-1 select-none flex items-center justify-center relative rounded", nextText ? "w-fit" : "w-8"]
    }, [createVNode("button", {
      "type": "button",
      "class": ["h-8 p-0 border border-solid rounded flex items-center justify-center group", "cursor-pointer border-color-border bg-color-bg-1 sm:bg-transparent sm:border-0", nextText ? "w-fit" : "w-8", {
        "disabled:cursor-not-allowed disabled:border-color-border disabled:bg-color-bg-3 disabled:sm:bg-transparent": nextDisabled,
        "hover:border-color-brand sm:hover:border-color-border-hover sm:active:border-color-brand": !nextDisabled,
        "hover:bg-color-fill-6 sm:hover:bg-transparent sm:active:bg-transparent": !nextDisabled
      }],
      "disabled": nextDisabled,
      "onClick": this.toNextPage
    }, [nextText ? createVNode("span", {
      "class": ["inline-block w-fit mx-1 text-color-text-placeholder sm:text-color-primary", {
        "disabled:text-color-text-primary disabled:sm:text-color-border": nextDisabled,
        "group-hover:fill-color-brand sm:group-hover:fill-color-icon-hover sm:group-active:fill-color-icon-active": !nextDisabled
      }]
    }, [nextText]) : createVNode(ChevronRight, {
      "class": ["fill-color-fill-7 sm:fill-color-text-primary", {
        "disabled:fill-color-fill-primary sm:fill-color-border": nextDisabled,
        "group-hover:fill-color-brand sm:group-hover:fill-color-icon-hover sm:group-active:fill-color-icon-active": !nextDisabled
      }]
    }, null)])])])])]);
  },
  methods: {
    toPrevPage: function toPrevPage() {
      var _this = this;
      var callback = function callback2() {
        if (_this.internalCurrentPage > 1) {
          _this.internalCurrentPage -= 1;
          _this.$emit("prev-click", _this.internalCurrentPage);
          _this.$emit("current-change", _this.internalCurrentPage);
          _this.$emit("update:current-page", _this.internalCurrentPage);
          _this.$emit("page-change", {
            currentPage: _this.internalCurrentPage,
            pageSize: _this.internalPageSize,
            total: _this.internalTotal
          });
        }
      };
      if (this.isBeforePageChange && this.internalCurrentPage > 1) {
        var newPage = this.internalCurrentPage - 1;
        var newPageSize = this.internalPageSize;
        var currentPage2 = this.internalCurrentPage;
        var currentPageSize = this.internalPageSize;
        this.$emit("before-page-change", {
          newPage,
          newPageSize,
          currentPage: currentPage2,
          currentPageSize,
          callback
        });
      } else {
        callback();
      }
    },
    toNextPage: function toNextPage() {
      var _this2 = this;
      var callback = function callback2() {
        if (_this2.internalCurrentPage < _this2.internalPageCount) {
          _this2.internalCurrentPage += 1;
          _this2.$emit("next-click", _this2.internalCurrentPage);
          _this2.$emit("current-change", _this2.internalCurrentPage);
          _this2.$emit("update:current-page", _this2.internalCurrentPage);
          _this2.$emit("page-change", {
            currentPage: _this2.internalCurrentPage,
            pageSize: _this2.internalPageSize,
            total: _this2.internalTotal
          });
        }
      };
      if (this.isBeforePageChange && this.internalCurrentPage < this.internalPageCount) {
        var newPage = this.internalCurrentPage + 1;
        var newPageSize = this.internalPageSize;
        var currentPage2 = this.internalCurrentPage;
        var currentPageSize = this.internalPageSize;
        this.$emit("before-page-change", {
          newPage,
          newPageSize,
          currentPage: currentPage2,
          currentPageSize,
          callback
        });
      } else {
        callback();
      }
    },
    normalizeState: function normalizeState() {
      var total2 = this.total > 0 ? this.total : 0;
      var pageSize2 = this.pageSize > 0 ? this.pageSize : 10;
      var currentPage2 = this.currentPage > 0 ? this.currentPage : 1;
      this.internalTotal = total2;
      this.internalPageSize = pageSize2;
      this.internalPageCount = Math.ceil(total2 / pageSize2);
      this.internalCurrentPage = currentPage2 > this.internalPageCount ? 1 : currentPage2;
    }
  }
});
export {
  _sfc_main as default
};
