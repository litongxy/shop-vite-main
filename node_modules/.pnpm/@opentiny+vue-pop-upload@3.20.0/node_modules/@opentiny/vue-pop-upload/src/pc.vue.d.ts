declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    disabled?: any;
    data?: any;
    size?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    action?: any;
    multiple?: any;
    cancelButtonText?: any;
    withCredentials?: any;
    httpRequest?: any;
    accept?: any;
    limit?: any;
    beforeUpload?: any;
    fileList?: any;
    headers?: any;
    beforeRemove?: any;
    uploadName?: any;
    dialogTitle?: any;
    uploadButtonText?: any;
    submitButtonText?: any;
    uploadFileType?: any;
    maxUploadFileSize?: any;
}>, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
    m: (...cssClasses: any[]) => string;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("error" | "progress" | "success" | "remove" | "exceed")[], "error" | "progress" | "success" | "remove" | "exceed", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    disabled?: any;
    data?: any;
    size?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    action?: any;
    multiple?: any;
    cancelButtonText?: any;
    withCredentials?: any;
    httpRequest?: any;
    accept?: any;
    limit?: any;
    beforeUpload?: any;
    fileList?: any;
    headers?: any;
    beforeRemove?: any;
    uploadName?: any;
    dialogTitle?: any;
    uploadButtonText?: any;
    submitButtonText?: any;
    uploadFileType?: any;
    maxUploadFileSize?: any;
}>>> & {
    onError?: ((...args: any[]) => any) | undefined;
    onProgress?: ((...args: any[]) => any) | undefined;
    onExceed?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onSuccess?: ((...args: any[]) => any) | undefined;
}, {
    readonly disabled?: any;
    readonly data?: any;
    readonly size?: any;
    readonly tiny_mode?: any;
    readonly tiny_mode_root?: any;
    readonly tiny_template?: any;
    readonly tiny_renderless?: any;
    readonly _constants?: any;
    readonly tiny_theme?: any;
    readonly tiny_chart_theme?: any;
    readonly action?: any;
    readonly multiple?: any;
    readonly cancelButtonText?: any;
    readonly withCredentials?: any;
    readonly httpRequest?: any;
    readonly accept?: any;
    readonly limit?: any;
    readonly beforeUpload?: any;
    readonly fileList?: any;
    readonly headers?: any;
    readonly beforeRemove?: any;
    readonly uploadName?: any;
    readonly dialogTitle?: any;
    readonly uploadButtonText?: any;
    readonly submitButtonText?: any;
    readonly uploadFileType?: any;
    readonly maxUploadFileSize?: any;
}, {}>;
export default _default;
