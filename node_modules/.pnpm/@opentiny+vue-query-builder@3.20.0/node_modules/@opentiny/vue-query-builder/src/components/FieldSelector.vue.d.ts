declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    value?: any;
    disabled?: any;
    title?: any;
    options?: any;
    multiple?: any;
    className?: any;
    schema?: any;
    handleOnChange?: any;
    listsAsArrays?: any;
    testID?: any;
    bindProps?: any;
}>, {
    isOptionGroupArray: (arr: import("../ts").OptionList<import("../ts").Option<string>> | undefined) => arr is import("../ts").OptionGroup<import("../ts").Option<string>>[];
}, unknown, {
    valueSelector(): {
        onChange: any;
        val: unknown;
    };
    selectElementChangeHandler(): unknown;
    treeOp(): {
        nodeKey: string;
        data: never[];
    };
}, {
    formatField(options?: never[]): never[];
    isSelected(data: any, value: any): boolean;
}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    value?: any;
    disabled?: any;
    title?: any;
    options?: any;
    multiple?: any;
    className?: any;
    schema?: any;
    handleOnChange?: any;
    listsAsArrays?: any;
    testID?: any;
    bindProps?: any;
}>>>, {
    readonly value?: any;
    readonly disabled?: any;
    readonly title?: any;
    readonly options?: any;
    readonly multiple?: any;
    readonly className?: any;
    readonly schema?: any;
    readonly handleOnChange?: any;
    readonly listsAsArrays?: any;
    readonly testID?: any;
    readonly bindProps?: any;
}, {}>;
export default _default;
