import type { RuleGroupProps, RuleGroupTypeAny } from '../ts';
export declare const useRuleGroup: (props: RuleGroupProps) => {
    addGroup: (_event?: any, context?: any) => void;
    addRule: (_event?: any, context?: any) => void;
    classNames: unknown;
    cloneGroup: (_event?: any) => void;
    combinator: string;
    disabled: boolean;
    dragMonitorId: string | symbol;
    dragRef: any;
    dropMonitorId: string | symbol;
    dropRef: any;
    isDragging: boolean;
    isOver: boolean;
    onCombinatorChange: (value: any) => void;
    onGroupAdd: (group: RuleGroupTypeAny, parentPath: number[], context?: any) => void;
    onIndependentCombinatorChange: (value: any, index: number) => void;
    onNotToggleChange: (checked: boolean) => void;
    outerClassName: any;
    parentDisabled: boolean | undefined;
    previewRef: any;
    removeGroup: (_event?: any) => void;
    ruleGroup: RuleGroupTypeAny;
    toggleLockGroup: (_event?: any) => void;
    validationClassName: string;
    validationResult: boolean | import("../ts").ValidationResult;
};
