function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var SelectDropdown = defineComponent({
  name: $prefix + "SelectDropdown",
  componentName: "SelectDropdown",
  inject: ["select"],
  props: _extends({}, $props, {
    appendToBody: {
      type: Boolean,
      default: function _default() {
        return true;
      }
    },
    arrowOffset: {
      type: Number,
      default: function _default2() {
        return 35;
      }
    },
    boundariesPadding: {
      default: function _default3() {
        return 0;
      }
    },
    isDropInheritWidth: Boolean,
    modelValue: Boolean,
    offset: {
      default: function _default4() {
        return 0;
      }
    },
    placement: {
      default: function _default5() {
        return "bottom-start";
      }
    },
    popper: {},
    popperOptions: {
      default: function _default6() {
        return {
          gpuAcceleration: false
        };
      }
    },
    reference: {},
    transformOrigin: {
      type: [Boolean, String],
      default: function _default7() {
        return true;
      }
    },
    visibleArrow: {
      default: function _default8() {
        return false;
      }
    },
    closeByMask: {
      type: Boolean,
      default: true
    },
    searchPlaceholder: {
      type: String,
      default: ""
    },
    title: String
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
SelectDropdown.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
SelectDropdown.install = function(Vue) {
  Vue.component(SelectDropdown.name, SelectDropdown);
};
SelectDropdown.version = version;
export {
  SelectDropdown as default
};
