import { renderless, api } from '@opentiny/vue-renderless/filter-panel/vue';
import { defineComponent, $prefix, $props, setup } from '@opentiny/vue-common';
import FilterBox from '@opentiny/vue-filter-box';
import Popover from '@opentiny/vue-popover';
import { resolveComponent, openBlock, createElementBlock, createVNode, withCtx, createElementVNode, renderSlot } from 'vue';
import '@opentiny/vue-theme/filter-panel/index.css';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var _sfc_main = defineComponent({
  name: $prefix + "FilterPanel",
  emits: ["handle-clear", "visible-change"],
  components: {
    TinyPopover: Popover,
    TinyFilterBox: FilterBox
  },
  props: _extends({}, $props, {
    label: String,
    value: [String, Number],
    tip: String,
    popperClass: {
      type: String,
      default: ""
    },
    clearable: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    placement: {
      type: String,
      default: "bottom-start"
    },
    popperAppendToBody: {
      type: Boolean,
      default: true
    },
    blank: {
      type: Boolean,
      default: false
    }
  }),
  setup: function setup$1(props, context) {
    return setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "tiny-filter-panel"
};
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  var _component_tiny_filter_box = resolveComponent("tiny-filter-box");
  var _component_tiny_popover = resolveComponent("tiny-popover");
  return openBlock(), createElementBlock("div", _hoisted_1, [createVNode(_component_tiny_popover, {
    ref: "popover",
    modelValue: _ctx.state.visible,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.visible = $event;
    }),
    placement: _ctx.placement,
    "visible-arrow": false,
    "popper-class": _ctx.popperClass + " tiny-filter-panel__popover",
    "append-to-body": _ctx.popperAppendToBody,
    trigger: "manual",
    onShow: _ctx.popoverShow,
    onHide: _ctx.popoverHide
  }, {
    reference: withCtx(function() {
      return [createElementVNode("div", null, [createVNode(_component_tiny_filter_box, {
        ref: "filterBox",
        onClick: _ctx.togglePanel,
        onHandleClear: _ctx.handleClear,
        "show-close": _ctx.clearable,
        disabled: _ctx.disabled,
        label: _ctx.label,
        tip: _ctx.tip,
        value: _ctx.value,
        "drop-down-visible": _ctx.state.visible,
        blank: _ctx.blank
      }, null, 8, ["onClick", "onHandleClear", "show-close", "disabled", "label", "tip", "value", "drop-down-visible", "blank"])])];
    }),
    default: withCtx(function() {
      return [createElementVNode("div", null, [renderSlot(_ctx.$slots, "default")])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["modelValue", "placement", "popper-class", "append-to-body", "onShow", "onHide"])]);
}
var FilterPanel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.20.0";
FilterPanel.install = function(Vue) {
  Vue.component(FilterPanel.name, FilterPanel);
};
FilterPanel.version = version;

export { FilterPanel as default };
