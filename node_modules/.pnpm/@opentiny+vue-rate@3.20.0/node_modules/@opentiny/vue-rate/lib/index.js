function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import { t } from "@opentiny/vue-locale";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/rate/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  RATENODECLS: "tiny-rate__star",
  ICON_PREFIXCLS: ".tiny-rate__icon",
  DECIMALCLS: "tiny-rate__decimal"
};
var rateProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  allowHalf: {
    type: Boolean,
    default: false
  },
  colors: {
    type: Array,
    default: function _default2() {
      return ["#FFBB33", "#FFBB33", "#FFBB33"];
    }
  },
  disabled: {
    type: Boolean,
    default: false
  },
  disabledVoidColor: {
    type: String,
    default: "rgba(25,25,25,0.05)"
  },
  disabledVoidIconClass: {
    type: String,
    default: "icon-star-active"
  },
  highThreshold: {
    type: Number,
    default: 4
  },
  iconClasses: {
    type: Array,
    default: function _default3() {
      return ["icon-star-active", "icon-star-active", "icon-star-active"];
    }
  },
  lowThreshold: {
    type: Number,
    default: 2
  },
  max: {
    type: Number,
    default: 5
  },
  modelValue: {
    type: Number,
    default: 0
  },
  radio: {
    // 是否单选其他形态
    type: Boolean,
    default: false
  },
  scoreTemplate: {
    type: String,
    default: "{value}"
  },
  showScore: {
    type: Boolean,
    default: false
  },
  showText: {
    type: Boolean,
    default: false
  },
  size: {
    type: String,
    default: "16px"
  },
  space: {
    type: String,
    default: "24px"
  },
  textColor: {
    type: String,
    default: "#191919"
  },
  textOnBottom: {
    type: Boolean,
    default: false
  },
  texts: {
    type: Array,
    default: function _default4() {
      return [t("ui.rate.level.poor"), t("ui.rate.level.fair"), t("ui.rate.level.average"), t("ui.rate.level.good"), t("ui.rate.level.excellent")];
    }
  },
  voidColor: {
    type: String,
    default: "rgba(25,25,25,0.05)"
  },
  voidIconClass: {
    type: String,
    default: "icon-star-active"
  }
});
var Rate = defineComponent({
  name: $prefix + "Rate",
  props: rateProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.20.0";
Rate.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Rate.install = function(Vue) {
  Vue.component(Rate.name, Rate);
};
Rate.version = version;
export {
  Rate as default
};
